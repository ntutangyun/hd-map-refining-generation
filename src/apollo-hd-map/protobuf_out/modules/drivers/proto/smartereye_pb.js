// source: modules/drivers/proto/smartereye.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
goog.exportSymbol('proto.apollo.drivers.LdwDataPacks', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwLane', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwLaneBoundary', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwLaneStyle', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwLensInfo', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwRoadway', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwSoftStatus', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwSteerStatus', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwVersions', null, global);
goog.exportSymbol('proto.apollo.drivers.LdwWarningGrade', null, global);
goog.exportSymbol('proto.apollo.drivers.OutputObstacle', null, global);
goog.exportSymbol('proto.apollo.drivers.OutputObstacle.RecognitionType', null, global);
goog.exportSymbol('proto.apollo.drivers.SmartereyeLanemark', null, global);
goog.exportSymbol('proto.apollo.drivers.SmartereyeObstacles', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.LdwLaneBoundary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.LdwLaneBoundary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.LdwLaneBoundary.displayName = 'proto.apollo.drivers.LdwLaneBoundary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.LdwLane = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.LdwLane, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.LdwLane.displayName = 'proto.apollo.drivers.LdwLane';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.LdwRoadway = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.LdwRoadway, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.LdwRoadway.displayName = 'proto.apollo.drivers.LdwRoadway';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.LdwLensInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.LdwLensInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.LdwLensInfo.displayName = 'proto.apollo.drivers.LdwLensInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.LdwDataPacks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.LdwDataPacks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.LdwDataPacks.displayName = 'proto.apollo.drivers.LdwDataPacks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.OutputObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.OutputObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.OutputObstacle.displayName = 'proto.apollo.drivers.OutputObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.SmartereyeObstacles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.SmartereyeObstacles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.SmartereyeObstacles.displayName = 'proto.apollo.drivers.SmartereyeObstacles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.SmartereyeLanemark = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.SmartereyeLanemark, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.SmartereyeLanemark.displayName = 'proto.apollo.drivers.SmartereyeLanemark';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.LdwLaneBoundary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.LdwLaneBoundary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwLaneBoundary.toObject = function(includeInstance, msg) {
  var f, obj = {
    degree: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    c0Position: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    c1HeadingAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    c2Curvature: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    c3CurvatureDerivative: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LdwLaneBoundary as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.LdwLaneBoundary.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.degree;

  /** @type {?|undefined} */
  this.c0Position;

  /** @type {?|undefined} */
  this.c1HeadingAngle;

  /** @type {?|undefined} */
  this.c2Curvature;

  /** @type {?|undefined} */
  this.c3CurvatureDerivative;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.LdwLaneBoundary.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.LdwLaneBoundary}
 */
proto.apollo.drivers.LdwLaneBoundary.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.LdwLaneBoundary();
  obj.degree != null && jspb.Message.setField(msg, 1, obj.degree);
  obj.c0Position != null && jspb.Message.setField(msg, 2, obj.c0Position);
  obj.c1HeadingAngle != null && jspb.Message.setField(msg, 3, obj.c1HeadingAngle);
  obj.c2Curvature != null && jspb.Message.setField(msg, 4, obj.c2Curvature);
  obj.c3CurvatureDerivative != null && jspb.Message.setField(msg, 5, obj.c3CurvatureDerivative);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.LdwLaneBoundary}
 */
proto.apollo.drivers.LdwLaneBoundary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.LdwLaneBoundary;
  return proto.apollo.drivers.LdwLaneBoundary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.LdwLaneBoundary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.LdwLaneBoundary}
 */
proto.apollo.drivers.LdwLaneBoundary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDegree(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC0Position(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC1HeadingAngle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC2Curvature(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC3CurvatureDerivative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.LdwLaneBoundary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.LdwLaneBoundary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwLaneBoundary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional int32 degree = 1;
 * @return {number}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.getDegree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.setDegree = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.clearDegree = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.hasDegree = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double c0_position = 2;
 * @return {number}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.getC0Position = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.setC0Position = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.clearC0Position = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.hasC0Position = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double c1_heading_angle = 3;
 * @return {number}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.getC1HeadingAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.setC1HeadingAngle = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.clearC1HeadingAngle = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.hasC1HeadingAngle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double c2_curvature = 4;
 * @return {number}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.getC2Curvature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.setC2Curvature = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.clearC2Curvature = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.hasC2Curvature = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double c3_curvature_derivative = 5;
 * @return {number}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.getC3CurvatureDerivative = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.setC3CurvatureDerivative = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLaneBoundary} returns this
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.clearC3CurvatureDerivative = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLaneBoundary.prototype.hasC3CurvatureDerivative = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.LdwLane.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.LdwLane.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.LdwLane} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwLane.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    quality: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    style: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    leftBoundary: (f = msg.getLeftBoundary()) && proto.apollo.drivers.LdwLaneBoundary.toObject(includeInstance, f),
    rightBoundary: (f = msg.getRightBoundary()) && proto.apollo.drivers.LdwLaneBoundary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LdwLane as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.LdwLane.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.quality;

  /** @type {?|undefined} */
  this.style;

  /** @type {?|undefined} */
  this.leftBoundary;

  /** @type {?|undefined} */
  this.rightBoundary;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.LdwLane.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.LdwLane}
 */
proto.apollo.drivers.LdwLane.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.LdwLane();
  obj.width != null && jspb.Message.setField(msg, 1, obj.width);
  obj.quality != null && jspb.Message.setField(msg, 2, obj.quality);
  obj.style != null && jspb.Message.setField(msg, 3, obj.style);
  obj.leftBoundary && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.drivers.LdwLaneBoundary.fromObject(obj.leftBoundary));
  obj.rightBoundary && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.drivers.LdwLaneBoundary.fromObject(obj.rightBoundary));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.LdwLane}
 */
proto.apollo.drivers.LdwLane.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.LdwLane;
  return proto.apollo.drivers.LdwLane.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.LdwLane} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.LdwLane}
 */
proto.apollo.drivers.LdwLane.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuality(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.drivers.LdwLaneStyle} */ (reader.readEnum());
      msg.setStyle(value);
      break;
    case 4:
      var value = new proto.apollo.drivers.LdwLaneBoundary;
      reader.readMessage(value,proto.apollo.drivers.LdwLaneBoundary.deserializeBinaryFromReader);
      msg.setLeftBoundary(value);
      break;
    case 5:
      var value = new proto.apollo.drivers.LdwLaneBoundary;
      reader.readMessage(value,proto.apollo.drivers.LdwLaneBoundary.deserializeBinaryFromReader);
      msg.setRightBoundary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.LdwLane.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.LdwLane.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.LdwLane} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwLane.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.LdwLaneStyle} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLeftBoundary();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.drivers.LdwLaneBoundary.serializeBinaryToWriter
    );
  }
  f = message.getRightBoundary();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.drivers.LdwLaneBoundary.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.apollo.drivers.LdwLane.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLane.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 quality = 2;
 * @return {number}
 */
proto.apollo.drivers.LdwLane.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.setQuality = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.clearQuality = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLane.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LdwLaneStyle style = 3;
 * @return {!proto.apollo.drivers.LdwLaneStyle}
 */
proto.apollo.drivers.LdwLane.prototype.getStyle = function() {
  return /** @type {!proto.apollo.drivers.LdwLaneStyle} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.drivers.LdwLaneStyle} value
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.setStyle = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.clearStyle = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLane.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LdwLaneBoundary left_boundary = 4;
 * @return {?proto.apollo.drivers.LdwLaneBoundary}
 */
proto.apollo.drivers.LdwLane.prototype.getLeftBoundary = function() {
  return /** @type{?proto.apollo.drivers.LdwLaneBoundary} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwLaneBoundary, 4));
};


/**
 * @param {?proto.apollo.drivers.LdwLaneBoundary|undefined} value
 * @return {!proto.apollo.drivers.LdwLane} returns this
*/
proto.apollo.drivers.LdwLane.prototype.setLeftBoundary = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.clearLeftBoundary = function() {
  return this.setLeftBoundary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLane.prototype.hasLeftBoundary = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LdwLaneBoundary right_boundary = 5;
 * @return {?proto.apollo.drivers.LdwLaneBoundary}
 */
proto.apollo.drivers.LdwLane.prototype.getRightBoundary = function() {
  return /** @type{?proto.apollo.drivers.LdwLaneBoundary} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwLaneBoundary, 5));
};


/**
 * @param {?proto.apollo.drivers.LdwLaneBoundary|undefined} value
 * @return {!proto.apollo.drivers.LdwLane} returns this
*/
proto.apollo.drivers.LdwLane.prototype.setRightBoundary = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwLane} returns this
 */
proto.apollo.drivers.LdwLane.prototype.clearRightBoundary = function() {
  return this.setRightBoundary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLane.prototype.hasRightBoundary = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.LdwRoadway.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.LdwRoadway.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.LdwRoadway} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwRoadway.toObject = function(includeInstance, msg) {
  var f, obj = {
    width0: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    width1: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    width2: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    isTracking: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    leftLane: (f = msg.getLeftLane()) && proto.apollo.drivers.LdwLane.toObject(includeInstance, f),
    rightLane: (f = msg.getRightLane()) && proto.apollo.drivers.LdwLane.toObject(includeInstance, f),
    adjLeftLane: (f = msg.getAdjLeftLane()) && proto.apollo.drivers.LdwLane.toObject(includeInstance, f),
    adjRightLane: (f = msg.getAdjRightLane()) && proto.apollo.drivers.LdwLane.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LdwRoadway as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.LdwRoadway.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.width0;

  /** @type {?|undefined} */
  this.width1;

  /** @type {?|undefined} */
  this.width2;

  /** @type {?|undefined} */
  this.isTracking;

  /** @type {?|undefined} */
  this.leftLane;

  /** @type {?|undefined} */
  this.rightLane;

  /** @type {?|undefined} */
  this.adjLeftLane;

  /** @type {?|undefined} */
  this.adjRightLane;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.LdwRoadway.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.LdwRoadway}
 */
proto.apollo.drivers.LdwRoadway.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.LdwRoadway();
  obj.width0 != null && jspb.Message.setField(msg, 1, obj.width0);
  obj.width1 != null && jspb.Message.setField(msg, 2, obj.width1);
  obj.width2 != null && jspb.Message.setField(msg, 3, obj.width2);
  obj.isTracking != null && jspb.Message.setField(msg, 4, obj.isTracking);
  obj.leftLane && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.drivers.LdwLane.fromObject(obj.leftLane));
  obj.rightLane && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.drivers.LdwLane.fromObject(obj.rightLane));
  obj.adjLeftLane && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.drivers.LdwLane.fromObject(obj.adjLeftLane));
  obj.adjRightLane && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.drivers.LdwLane.fromObject(obj.adjRightLane));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.LdwRoadway}
 */
proto.apollo.drivers.LdwRoadway.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.LdwRoadway;
  return proto.apollo.drivers.LdwRoadway.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.LdwRoadway} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.LdwRoadway}
 */
proto.apollo.drivers.LdwRoadway.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth0(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth1(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth2(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTracking(value);
      break;
    case 5:
      var value = new proto.apollo.drivers.LdwLane;
      reader.readMessage(value,proto.apollo.drivers.LdwLane.deserializeBinaryFromReader);
      msg.setLeftLane(value);
      break;
    case 6:
      var value = new proto.apollo.drivers.LdwLane;
      reader.readMessage(value,proto.apollo.drivers.LdwLane.deserializeBinaryFromReader);
      msg.setRightLane(value);
      break;
    case 7:
      var value = new proto.apollo.drivers.LdwLane;
      reader.readMessage(value,proto.apollo.drivers.LdwLane.deserializeBinaryFromReader);
      msg.setAdjLeftLane(value);
      break;
    case 8:
      var value = new proto.apollo.drivers.LdwLane;
      reader.readMessage(value,proto.apollo.drivers.LdwLane.deserializeBinaryFromReader);
      msg.setAdjRightLane(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.LdwRoadway.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.LdwRoadway.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.LdwRoadway} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwRoadway.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLeftLane();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.drivers.LdwLane.serializeBinaryToWriter
    );
  }
  f = message.getRightLane();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.drivers.LdwLane.serializeBinaryToWriter
    );
  }
  f = message.getAdjLeftLane();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.drivers.LdwLane.serializeBinaryToWriter
    );
  }
  f = message.getAdjRightLane();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.drivers.LdwLane.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 width_0 = 1;
 * @return {number}
 */
proto.apollo.drivers.LdwRoadway.prototype.getWidth0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.setWidth0 = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearWidth0 = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasWidth0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 width_1 = 2;
 * @return {number}
 */
proto.apollo.drivers.LdwRoadway.prototype.getWidth1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.setWidth1 = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearWidth1 = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasWidth1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 width_2 = 3;
 * @return {number}
 */
proto.apollo.drivers.LdwRoadway.prototype.getWidth2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.setWidth2 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearWidth2 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasWidth2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool is_tracking = 4;
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.getIsTracking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.setIsTracking = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearIsTracking = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasIsTracking = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LdwLane left_lane = 5;
 * @return {?proto.apollo.drivers.LdwLane}
 */
proto.apollo.drivers.LdwRoadway.prototype.getLeftLane = function() {
  return /** @type{?proto.apollo.drivers.LdwLane} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwLane, 5));
};


/**
 * @param {?proto.apollo.drivers.LdwLane|undefined} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
*/
proto.apollo.drivers.LdwRoadway.prototype.setLeftLane = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearLeftLane = function() {
  return this.setLeftLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasLeftLane = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LdwLane right_lane = 6;
 * @return {?proto.apollo.drivers.LdwLane}
 */
proto.apollo.drivers.LdwRoadway.prototype.getRightLane = function() {
  return /** @type{?proto.apollo.drivers.LdwLane} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwLane, 6));
};


/**
 * @param {?proto.apollo.drivers.LdwLane|undefined} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
*/
proto.apollo.drivers.LdwRoadway.prototype.setRightLane = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearRightLane = function() {
  return this.setRightLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasRightLane = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LdwLane adj_left_lane = 7;
 * @return {?proto.apollo.drivers.LdwLane}
 */
proto.apollo.drivers.LdwRoadway.prototype.getAdjLeftLane = function() {
  return /** @type{?proto.apollo.drivers.LdwLane} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwLane, 7));
};


/**
 * @param {?proto.apollo.drivers.LdwLane|undefined} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
*/
proto.apollo.drivers.LdwRoadway.prototype.setAdjLeftLane = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearAdjLeftLane = function() {
  return this.setAdjLeftLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasAdjLeftLane = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional LdwLane adj_right_lane = 8;
 * @return {?proto.apollo.drivers.LdwLane}
 */
proto.apollo.drivers.LdwRoadway.prototype.getAdjRightLane = function() {
  return /** @type{?proto.apollo.drivers.LdwLane} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwLane, 8));
};


/**
 * @param {?proto.apollo.drivers.LdwLane|undefined} value
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
*/
proto.apollo.drivers.LdwRoadway.prototype.setAdjRightLane = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwRoadway} returns this
 */
proto.apollo.drivers.LdwRoadway.prototype.clearAdjRightLane = function() {
  return this.setAdjRightLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwRoadway.prototype.hasAdjRightLane = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.LdwLensInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.LdwLensInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.LdwLensInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwLensInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    xImageFocal: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    yImageFocal: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    xratioFocalPixel: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    yratioFocalPixel: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    mountingheight: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    mcosrx: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    msinrx: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    mcosry: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    msinry: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LdwLensInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.LdwLensInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.xImageFocal;

  /** @type {?|undefined} */
  this.yImageFocal;

  /** @type {?|undefined} */
  this.xratioFocalPixel;

  /** @type {?|undefined} */
  this.yratioFocalPixel;

  /** @type {?|undefined} */
  this.mountingheight;

  /** @type {?|undefined} */
  this.mcosrx;

  /** @type {?|undefined} */
  this.msinrx;

  /** @type {?|undefined} */
  this.mcosry;

  /** @type {?|undefined} */
  this.msinry;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.LdwLensInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.LdwLensInfo}
 */
proto.apollo.drivers.LdwLensInfo.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.LdwLensInfo();
  obj.xImageFocal != null && jspb.Message.setField(msg, 1, obj.xImageFocal);
  obj.yImageFocal != null && jspb.Message.setField(msg, 2, obj.yImageFocal);
  obj.xratioFocalPixel != null && jspb.Message.setField(msg, 3, obj.xratioFocalPixel);
  obj.yratioFocalPixel != null && jspb.Message.setField(msg, 4, obj.yratioFocalPixel);
  obj.mountingheight != null && jspb.Message.setField(msg, 5, obj.mountingheight);
  obj.mcosrx != null && jspb.Message.setField(msg, 6, obj.mcosrx);
  obj.msinrx != null && jspb.Message.setField(msg, 7, obj.msinrx);
  obj.mcosry != null && jspb.Message.setField(msg, 8, obj.mcosry);
  obj.msinry != null && jspb.Message.setField(msg, 9, obj.msinry);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.LdwLensInfo}
 */
proto.apollo.drivers.LdwLensInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.LdwLensInfo;
  return proto.apollo.drivers.LdwLensInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.LdwLensInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.LdwLensInfo}
 */
proto.apollo.drivers.LdwLensInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXImageFocal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYImageFocal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXratioFocalPixel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYratioFocalPixel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMountingheight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMcosrx(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMsinrx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMcosry(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMsinry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.LdwLensInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.LdwLensInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.LdwLensInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwLensInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional float x_image_focal = 1;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getXImageFocal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setXImageFocal = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearXImageFocal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasXImageFocal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float y_image_focal = 2;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getYImageFocal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setYImageFocal = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearYImageFocal = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasYImageFocal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float xratio_focal_pixel = 3;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getXratioFocalPixel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setXratioFocalPixel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearXratioFocalPixel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasXratioFocalPixel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float yratio_focal_pixel = 4;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getYratioFocalPixel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setYratioFocalPixel = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearYratioFocalPixel = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasYratioFocalPixel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float mountingheight = 5;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getMountingheight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setMountingheight = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearMountingheight = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasMountingheight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float mcosrx = 6;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getMcosrx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setMcosrx = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearMcosrx = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasMcosrx = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float msinrx = 7;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getMsinrx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setMsinrx = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearMsinrx = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasMsinrx = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float mcosry = 8;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getMcosry = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setMcosry = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearMcosry = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasMcosry = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float msinry = 9;
 * @return {number}
 */
proto.apollo.drivers.LdwLensInfo.prototype.getMsinry = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.setMsinry = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwLensInfo} returns this
 */
proto.apollo.drivers.LdwLensInfo.prototype.clearMsinry = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwLensInfo.prototype.hasMsinry = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.LdwDataPacks.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.LdwDataPacks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.LdwDataPacks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwDataPacks.toObject = function(includeInstance, msg) {
  var f, obj = {
    roadway: (f = msg.getRoadway()) && proto.apollo.drivers.LdwRoadway.toObject(includeInstance, f),
    softstatus: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    steerstatus: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    lens: (f = msg.getLens()) && proto.apollo.drivers.LdwLensInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LdwDataPacks as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.LdwDataPacks.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.roadway;

  /** @type {?|undefined} */
  this.softstatus;

  /** @type {?|undefined} */
  this.steerstatus;

  /** @type {?|undefined} */
  this.lens;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.LdwDataPacks.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.LdwDataPacks}
 */
proto.apollo.drivers.LdwDataPacks.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.LdwDataPacks();
  obj.roadway && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.drivers.LdwRoadway.fromObject(obj.roadway));
  obj.softstatus != null && jspb.Message.setField(msg, 2, obj.softstatus);
  obj.steerstatus != null && jspb.Message.setField(msg, 3, obj.steerstatus);
  obj.lens && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.drivers.LdwLensInfo.fromObject(obj.lens));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.LdwDataPacks}
 */
proto.apollo.drivers.LdwDataPacks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.LdwDataPacks;
  return proto.apollo.drivers.LdwDataPacks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.LdwDataPacks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.LdwDataPacks}
 */
proto.apollo.drivers.LdwDataPacks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.drivers.LdwRoadway;
      reader.readMessage(value,proto.apollo.drivers.LdwRoadway.deserializeBinaryFromReader);
      msg.setRoadway(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.drivers.LdwSoftStatus} */ (reader.readEnum());
      msg.setSoftstatus(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.drivers.LdwSteerStatus} */ (reader.readEnum());
      msg.setSteerstatus(value);
      break;
    case 4:
      var value = new proto.apollo.drivers.LdwLensInfo;
      reader.readMessage(value,proto.apollo.drivers.LdwLensInfo.deserializeBinaryFromReader);
      msg.setLens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.LdwDataPacks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.LdwDataPacks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.LdwDataPacks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.LdwDataPacks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoadway();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.drivers.LdwRoadway.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.drivers.LdwSoftStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.LdwSteerStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLens();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.drivers.LdwLensInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LdwRoadway roadway = 1;
 * @return {?proto.apollo.drivers.LdwRoadway}
 */
proto.apollo.drivers.LdwDataPacks.prototype.getRoadway = function() {
  return /** @type{?proto.apollo.drivers.LdwRoadway} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwRoadway, 1));
};


/**
 * @param {?proto.apollo.drivers.LdwRoadway|undefined} value
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
*/
proto.apollo.drivers.LdwDataPacks.prototype.setRoadway = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
 */
proto.apollo.drivers.LdwDataPacks.prototype.clearRoadway = function() {
  return this.setRoadway(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwDataPacks.prototype.hasRoadway = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LdwSoftStatus softstatus = 2;
 * @return {!proto.apollo.drivers.LdwSoftStatus}
 */
proto.apollo.drivers.LdwDataPacks.prototype.getSoftstatus = function() {
  return /** @type {!proto.apollo.drivers.LdwSoftStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.drivers.LdwSoftStatus} value
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
 */
proto.apollo.drivers.LdwDataPacks.prototype.setSoftstatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
 */
proto.apollo.drivers.LdwDataPacks.prototype.clearSoftstatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwDataPacks.prototype.hasSoftstatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LdwSteerStatus steerstatus = 3;
 * @return {!proto.apollo.drivers.LdwSteerStatus}
 */
proto.apollo.drivers.LdwDataPacks.prototype.getSteerstatus = function() {
  return /** @type {!proto.apollo.drivers.LdwSteerStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.drivers.LdwSteerStatus} value
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
 */
proto.apollo.drivers.LdwDataPacks.prototype.setSteerstatus = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
 */
proto.apollo.drivers.LdwDataPacks.prototype.clearSteerstatus = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwDataPacks.prototype.hasSteerstatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LdwLensInfo lens = 4;
 * @return {?proto.apollo.drivers.LdwLensInfo}
 */
proto.apollo.drivers.LdwDataPacks.prototype.getLens = function() {
  return /** @type{?proto.apollo.drivers.LdwLensInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwLensInfo, 4));
};


/**
 * @param {?proto.apollo.drivers.LdwLensInfo|undefined} value
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
*/
proto.apollo.drivers.LdwDataPacks.prototype.setLens = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.LdwDataPacks} returns this
 */
proto.apollo.drivers.LdwDataPacks.prototype.clearLens = function() {
  return this.setLens(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.LdwDataPacks.prototype.hasLens = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.OutputObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.OutputObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.OutputObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.OutputObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentspeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    framerate: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    trackid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    trackframenum: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    statelabel: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    classlabel: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    continuouslabel: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    fuzzyestimationvalid: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    obstacletype: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    avgdisp: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    avgdistancez: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    neardistancez: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    fardistancez: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    real3dleftx: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    real3drightx: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    real3dcenterx: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    real3dupy: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    real3dlowy: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    firstpointx: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    firstpointy: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    secondpointx: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    secondpointy: (f = jspb.Message.getField(msg, 22)) == null ? undefined : f,
    thirdpointx: (f = jspb.Message.getField(msg, 23)) == null ? undefined : f,
    thirdpointy: (f = jspb.Message.getField(msg, 24)) == null ? undefined : f,
    fourthpointx: (f = jspb.Message.getField(msg, 25)) == null ? undefined : f,
    fourthpointy: (f = jspb.Message.getField(msg, 26)) == null ? undefined : f,
    fuzzyrelativedistancez: (f = jspb.Message.getOptionalFloatingPointField(msg, 27)) == null ? undefined : f,
    fuzzyrelativespeedz: (f = jspb.Message.getOptionalFloatingPointField(msg, 28)) == null ? undefined : f,
    fuzzycollisiontimez: (f = jspb.Message.getOptionalFloatingPointField(msg, 29)) == null ? undefined : f,
    fuzzycollisionx: (f = jspb.Message.getField(msg, 30)) == null ? undefined : f,
    fuzzy3dwidth: (f = jspb.Message.getOptionalFloatingPointField(msg, 31)) == null ? undefined : f,
    fuzzy3dcenterx: (f = jspb.Message.getOptionalFloatingPointField(msg, 32)) == null ? undefined : f,
    fuzzy3dleftx: (f = jspb.Message.getOptionalFloatingPointField(msg, 33)) == null ? undefined : f,
    fuzzy3drightx: (f = jspb.Message.getOptionalFloatingPointField(msg, 34)) == null ? undefined : f,
    fuzzy3dheight: (f = jspb.Message.getOptionalFloatingPointField(msg, 35)) == null ? undefined : f,
    fuzzy3dupy: (f = jspb.Message.getOptionalFloatingPointField(msg, 36)) == null ? undefined : f,
    fuzzy3dlowy: (f = jspb.Message.getOptionalFloatingPointField(msg, 37)) == null ? undefined : f,
    fuzzyrelativespeedcenterx: (f = jspb.Message.getOptionalFloatingPointField(msg, 38)) == null ? undefined : f,
    fuzzyrelativespeedleftx: (f = jspb.Message.getOptionalFloatingPointField(msg, 39)) == null ? undefined : f,
    fuzzyrelativespeedrightx: (f = jspb.Message.getOptionalFloatingPointField(msg, 40)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OutputObstacle as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.OutputObstacle.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.currentspeed;

  /** @type {?|undefined} */
  this.framerate;

  /** @type {?|undefined} */
  this.trackid;

  /** @type {?|undefined} */
  this.trackframenum;

  /** @type {?|undefined} */
  this.statelabel;

  /** @type {?|undefined} */
  this.classlabel;

  /** @type {?|undefined} */
  this.continuouslabel;

  /** @type {?|undefined} */
  this.fuzzyestimationvalid;

  /** @type {?|undefined} */
  this.obstacletype;

  /** @type {?|undefined} */
  this.avgdisp;

  /** @type {?|undefined} */
  this.avgdistancez;

  /** @type {?|undefined} */
  this.neardistancez;

  /** @type {?|undefined} */
  this.fardistancez;

  /** @type {?|undefined} */
  this.real3dleftx;

  /** @type {?|undefined} */
  this.real3drightx;

  /** @type {?|undefined} */
  this.real3dcenterx;

  /** @type {?|undefined} */
  this.real3dupy;

  /** @type {?|undefined} */
  this.real3dlowy;

  /** @type {?|undefined} */
  this.firstpointx;

  /** @type {?|undefined} */
  this.firstpointy;

  /** @type {?|undefined} */
  this.secondpointx;

  /** @type {?|undefined} */
  this.secondpointy;

  /** @type {?|undefined} */
  this.thirdpointx;

  /** @type {?|undefined} */
  this.thirdpointy;

  /** @type {?|undefined} */
  this.fourthpointx;

  /** @type {?|undefined} */
  this.fourthpointy;

  /** @type {?|undefined} */
  this.fuzzyrelativedistancez;

  /** @type {?|undefined} */
  this.fuzzyrelativespeedz;

  /** @type {?|undefined} */
  this.fuzzycollisiontimez;

  /** @type {?|undefined} */
  this.fuzzycollisionx;

  /** @type {?|undefined} */
  this.fuzzy3dwidth;

  /** @type {?|undefined} */
  this.fuzzy3dcenterx;

  /** @type {?|undefined} */
  this.fuzzy3dleftx;

  /** @type {?|undefined} */
  this.fuzzy3drightx;

  /** @type {?|undefined} */
  this.fuzzy3dheight;

  /** @type {?|undefined} */
  this.fuzzy3dupy;

  /** @type {?|undefined} */
  this.fuzzy3dlowy;

  /** @type {?|undefined} */
  this.fuzzyrelativespeedcenterx;

  /** @type {?|undefined} */
  this.fuzzyrelativespeedleftx;

  /** @type {?|undefined} */
  this.fuzzyrelativespeedrightx;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.OutputObstacle.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.OutputObstacle}
 */
proto.apollo.drivers.OutputObstacle.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.OutputObstacle();
  obj.currentspeed != null && jspb.Message.setField(msg, 1, obj.currentspeed);
  obj.framerate != null && jspb.Message.setField(msg, 2, obj.framerate);
  obj.trackid != null && jspb.Message.setField(msg, 3, obj.trackid);
  obj.trackframenum != null && jspb.Message.setField(msg, 4, obj.trackframenum);
  obj.statelabel != null && jspb.Message.setField(msg, 5, obj.statelabel);
  obj.classlabel != null && jspb.Message.setField(msg, 6, obj.classlabel);
  obj.continuouslabel != null && jspb.Message.setField(msg, 7, obj.continuouslabel);
  obj.fuzzyestimationvalid != null && jspb.Message.setField(msg, 8, obj.fuzzyestimationvalid);
  obj.obstacletype != null && jspb.Message.setField(msg, 9, obj.obstacletype);
  obj.avgdisp != null && jspb.Message.setField(msg, 10, obj.avgdisp);
  obj.avgdistancez != null && jspb.Message.setField(msg, 11, obj.avgdistancez);
  obj.neardistancez != null && jspb.Message.setField(msg, 12, obj.neardistancez);
  obj.fardistancez != null && jspb.Message.setField(msg, 13, obj.fardistancez);
  obj.real3dleftx != null && jspb.Message.setField(msg, 14, obj.real3dleftx);
  obj.real3drightx != null && jspb.Message.setField(msg, 15, obj.real3drightx);
  obj.real3dcenterx != null && jspb.Message.setField(msg, 16, obj.real3dcenterx);
  obj.real3dupy != null && jspb.Message.setField(msg, 17, obj.real3dupy);
  obj.real3dlowy != null && jspb.Message.setField(msg, 18, obj.real3dlowy);
  obj.firstpointx != null && jspb.Message.setField(msg, 19, obj.firstpointx);
  obj.firstpointy != null && jspb.Message.setField(msg, 20, obj.firstpointy);
  obj.secondpointx != null && jspb.Message.setField(msg, 21, obj.secondpointx);
  obj.secondpointy != null && jspb.Message.setField(msg, 22, obj.secondpointy);
  obj.thirdpointx != null && jspb.Message.setField(msg, 23, obj.thirdpointx);
  obj.thirdpointy != null && jspb.Message.setField(msg, 24, obj.thirdpointy);
  obj.fourthpointx != null && jspb.Message.setField(msg, 25, obj.fourthpointx);
  obj.fourthpointy != null && jspb.Message.setField(msg, 26, obj.fourthpointy);
  obj.fuzzyrelativedistancez != null && jspb.Message.setField(msg, 27, obj.fuzzyrelativedistancez);
  obj.fuzzyrelativespeedz != null && jspb.Message.setField(msg, 28, obj.fuzzyrelativespeedz);
  obj.fuzzycollisiontimez != null && jspb.Message.setField(msg, 29, obj.fuzzycollisiontimez);
  obj.fuzzycollisionx != null && jspb.Message.setField(msg, 30, obj.fuzzycollisionx);
  obj.fuzzy3dwidth != null && jspb.Message.setField(msg, 31, obj.fuzzy3dwidth);
  obj.fuzzy3dcenterx != null && jspb.Message.setField(msg, 32, obj.fuzzy3dcenterx);
  obj.fuzzy3dleftx != null && jspb.Message.setField(msg, 33, obj.fuzzy3dleftx);
  obj.fuzzy3drightx != null && jspb.Message.setField(msg, 34, obj.fuzzy3drightx);
  obj.fuzzy3dheight != null && jspb.Message.setField(msg, 35, obj.fuzzy3dheight);
  obj.fuzzy3dupy != null && jspb.Message.setField(msg, 36, obj.fuzzy3dupy);
  obj.fuzzy3dlowy != null && jspb.Message.setField(msg, 37, obj.fuzzy3dlowy);
  obj.fuzzyrelativespeedcenterx != null && jspb.Message.setField(msg, 38, obj.fuzzyrelativespeedcenterx);
  obj.fuzzyrelativespeedleftx != null && jspb.Message.setField(msg, 39, obj.fuzzyrelativespeedleftx);
  obj.fuzzyrelativespeedrightx != null && jspb.Message.setField(msg, 40, obj.fuzzyrelativespeedrightx);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.OutputObstacle}
 */
proto.apollo.drivers.OutputObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.OutputObstacle;
  return proto.apollo.drivers.OutputObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.OutputObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.OutputObstacle}
 */
proto.apollo.drivers.OutputObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentspeed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFramerate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrackid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrackframenum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatelabel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClasslabel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinuouslabel(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFuzzyestimationvalid(value);
      break;
    case 9:
      var value = /** @type {!proto.apollo.drivers.OutputObstacle.RecognitionType} */ (reader.readEnum());
      msg.setObstacletype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgdisp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgdistancez(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNeardistancez(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFardistancez(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReal3dleftx(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReal3drightx(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReal3dcenterx(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReal3dupy(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReal3dlowy(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirstpointx(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirstpointy(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecondpointx(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecondpointy(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThirdpointx(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThirdpointy(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFourthpointx(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFourthpointy(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzyrelativedistancez(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzyrelativespeedz(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzycollisiontimez(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFuzzycollisionx(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzy3dwidth(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzy3dcenterx(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzy3dleftx(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzy3drightx(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzy3dheight(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzy3dupy(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzy3dlowy(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzyrelativespeedcenterx(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzyrelativespeedleftx(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuzzyrelativespeedrightx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.OutputObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.OutputObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.OutputObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.OutputObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.OutputObstacle.RecognitionType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeUint32(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeUint32(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeFloat(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeFloat(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeFloat(
      29,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeUint32(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeFloat(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeFloat(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeFloat(
      33,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 34));
  if (f != null) {
    writer.writeFloat(
      34,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeFloat(
      35,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeFloat(
      36,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeFloat(
      37,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeFloat(
      38,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeFloat(
      39,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeFloat(
      40,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.drivers.OutputObstacle.RecognitionType = {
  INVALID: 0,
  VEHICLE: 1,
  PEDESTRIAN: 2,
  CHILD: 3,
  BICYCLE: 4,
  MOTO: 5,
  TRUCK: 6,
  BUS: 7,
  OTHERS: 8,
  ESTIMATED: 9,
  CONTINUOUS: 10
};

/**
 * optional float currentspeed = 1;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getCurrentspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setCurrentspeed = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearCurrentspeed = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasCurrentspeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float framerate = 2;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFramerate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFramerate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFramerate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFramerate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 trackid = 3;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getTrackid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setTrackid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearTrackid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasTrackid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 trackframenum = 4;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getTrackframenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setTrackframenum = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearTrackframenum = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasTrackframenum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 statelabel = 5;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getStatelabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setStatelabel = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearStatelabel = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasStatelabel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 classlabel = 6;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getClasslabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setClasslabel = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearClasslabel = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasClasslabel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 continuouslabel = 7;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getContinuouslabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setContinuouslabel = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearContinuouslabel = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasContinuouslabel = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 fuzzyestimationvalid = 8;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzyestimationvalid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzyestimationvalid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzyestimationvalid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzyestimationvalid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RecognitionType obstacletype = 9;
 * @return {!proto.apollo.drivers.OutputObstacle.RecognitionType}
 */
proto.apollo.drivers.OutputObstacle.prototype.getObstacletype = function() {
  return /** @type {!proto.apollo.drivers.OutputObstacle.RecognitionType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.apollo.drivers.OutputObstacle.RecognitionType} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setObstacletype = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearObstacletype = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasObstacletype = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float avgdisp = 10;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getAvgdisp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setAvgdisp = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearAvgdisp = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasAvgdisp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float avgdistancez = 11;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getAvgdistancez = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setAvgdistancez = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearAvgdistancez = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasAvgdistancez = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float neardistancez = 12;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getNeardistancez = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setNeardistancez = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearNeardistancez = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasNeardistancez = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float fardistancez = 13;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFardistancez = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFardistancez = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFardistancez = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFardistancez = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float real3dleftx = 14;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getReal3dleftx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setReal3dleftx = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearReal3dleftx = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasReal3dleftx = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float real3drightx = 15;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getReal3drightx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setReal3drightx = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearReal3drightx = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasReal3drightx = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float real3dcenterx = 16;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getReal3dcenterx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setReal3dcenterx = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearReal3dcenterx = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasReal3dcenterx = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float real3dupy = 17;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getReal3dupy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setReal3dupy = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearReal3dupy = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasReal3dupy = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional float real3dlowy = 18;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getReal3dlowy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setReal3dlowy = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearReal3dlowy = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasReal3dlowy = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional uint32 firstpointx = 19;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFirstpointx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFirstpointx = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFirstpointx = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFirstpointx = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional uint32 firstpointy = 20;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFirstpointy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFirstpointy = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFirstpointy = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFirstpointy = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional uint32 secondpointx = 21;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getSecondpointx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setSecondpointx = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearSecondpointx = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasSecondpointx = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional uint32 secondpointy = 22;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getSecondpointy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setSecondpointy = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearSecondpointy = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasSecondpointy = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional uint32 thirdpointx = 23;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getThirdpointx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setThirdpointx = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearThirdpointx = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasThirdpointx = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional uint32 thirdpointy = 24;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getThirdpointy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setThirdpointy = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearThirdpointy = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasThirdpointy = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional uint32 fourthpointx = 25;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFourthpointx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFourthpointx = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFourthpointx = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFourthpointx = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional uint32 fourthpointy = 26;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFourthpointy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFourthpointy = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFourthpointy = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFourthpointy = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional float fuzzyrelativedistancez = 27;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzyrelativedistancez = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzyrelativedistancez = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzyrelativedistancez = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzyrelativedistancez = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional float fuzzyrelativespeedz = 28;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzyrelativespeedz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzyrelativespeedz = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzyrelativespeedz = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzyrelativespeedz = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional float fuzzycollisiontimez = 29;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzycollisiontimez = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzycollisiontimez = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzycollisiontimez = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzycollisiontimez = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional uint32 fuzzycollisionx = 30;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzycollisionx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzycollisionx = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzycollisionx = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzycollisionx = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional float fuzzy3dwidth = 31;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzy3dwidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzy3dwidth = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzy3dwidth = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzy3dwidth = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional float fuzzy3dcenterx = 32;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzy3dcenterx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzy3dcenterx = function(value) {
  return jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzy3dcenterx = function() {
  return jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzy3dcenterx = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional float fuzzy3dleftx = 33;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzy3dleftx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 33, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzy3dleftx = function(value) {
  return jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzy3dleftx = function() {
  return jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzy3dleftx = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional float fuzzy3drightx = 34;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzy3drightx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 34, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzy3drightx = function(value) {
  return jspb.Message.setField(this, 34, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzy3drightx = function() {
  return jspb.Message.setField(this, 34, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzy3drightx = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional float fuzzy3dheight = 35;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzy3dheight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 35, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzy3dheight = function(value) {
  return jspb.Message.setField(this, 35, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzy3dheight = function() {
  return jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzy3dheight = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional float fuzzy3dupy = 36;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzy3dupy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 36, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzy3dupy = function(value) {
  return jspb.Message.setField(this, 36, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzy3dupy = function() {
  return jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzy3dupy = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional float fuzzy3dlowy = 37;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzy3dlowy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 37, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzy3dlowy = function(value) {
  return jspb.Message.setField(this, 37, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzy3dlowy = function() {
  return jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzy3dlowy = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional float fuzzyrelativespeedcenterx = 38;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzyrelativespeedcenterx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 38, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzyrelativespeedcenterx = function(value) {
  return jspb.Message.setField(this, 38, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzyrelativespeedcenterx = function() {
  return jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzyrelativespeedcenterx = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional float fuzzyrelativespeedleftx = 39;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzyrelativespeedleftx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 39, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzyrelativespeedleftx = function(value) {
  return jspb.Message.setField(this, 39, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzyrelativespeedleftx = function() {
  return jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzyrelativespeedleftx = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional float fuzzyrelativespeedrightx = 40;
 * @return {number}
 */
proto.apollo.drivers.OutputObstacle.prototype.getFuzzyrelativespeedrightx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 40, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.setFuzzyrelativespeedrightx = function(value) {
  return jspb.Message.setField(this, 40, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.OutputObstacle} returns this
 */
proto.apollo.drivers.OutputObstacle.prototype.clearFuzzyrelativespeedrightx = function() {
  return jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.OutputObstacle.prototype.hasFuzzyrelativespeedrightx = function() {
  return jspb.Message.getField(this, 40) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.SmartereyeObstacles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.SmartereyeObstacles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.SmartereyeObstacles.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    numObstacles: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    outputObstaclesMap: (f = msg.getOutputObstaclesMap()) ? f.toObject(includeInstance, proto.apollo.drivers.OutputObstacle.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SmartereyeObstacles as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.SmartereyeObstacles.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.numObstacles;

  /** @type {?|undefined} */
  this.outputObstaclesMap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.SmartereyeObstacles.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.SmartereyeObstacles}
 */
proto.apollo.drivers.SmartereyeObstacles.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.SmartereyeObstacles();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.numObstacles != null && jspb.Message.setField(msg, 2, obj.numObstacles);
  obj.outputObstaclesMap && jspb.Message.setWrapperField(
      msg, 3, jspb.Map.fromObject(obj.outputObstaclesMap, proto.apollo.drivers.OutputObstacle, proto.apollo.drivers.OutputObstacle.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.SmartereyeObstacles}
 */
proto.apollo.drivers.SmartereyeObstacles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.SmartereyeObstacles;
  return proto.apollo.drivers.SmartereyeObstacles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.SmartereyeObstacles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.SmartereyeObstacles}
 */
proto.apollo.drivers.SmartereyeObstacles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumObstacles(value);
      break;
    case 3:
      var value = msg.getOutputObstaclesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.apollo.drivers.OutputObstacle.deserializeBinaryFromReader, 0, new proto.apollo.drivers.OutputObstacle());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.SmartereyeObstacles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.SmartereyeObstacles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.SmartereyeObstacles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOutputObstaclesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.drivers.OutputObstacle.serializeBinaryToWriter);
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.drivers.SmartereyeObstacles} returns this
*/
proto.apollo.drivers.SmartereyeObstacles.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.SmartereyeObstacles} returns this
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 num_obstacles = 2;
 * @return {number}
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.getNumObstacles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.SmartereyeObstacles} returns this
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.setNumObstacles = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.SmartereyeObstacles} returns this
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.clearNumObstacles = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.hasNumObstacles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<uint32, OutputObstacle> output_obstacles = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.apollo.drivers.OutputObstacle>}
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.getOutputObstaclesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.apollo.drivers.OutputObstacle>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.apollo.drivers.OutputObstacle));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.drivers.SmartereyeObstacles} returns this
 */
proto.apollo.drivers.SmartereyeObstacles.prototype.clearOutputObstaclesMap = function() {
  this.getOutputObstaclesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.SmartereyeLanemark.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.SmartereyeLanemark.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.SmartereyeLanemark} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.SmartereyeLanemark.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneRoadData: (f = msg.getLaneRoadData()) && proto.apollo.drivers.LdwDataPacks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SmartereyeLanemark as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.SmartereyeLanemark.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneRoadData;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.SmartereyeLanemark.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.SmartereyeLanemark}
 */
proto.apollo.drivers.SmartereyeLanemark.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.SmartereyeLanemark();
  obj.laneRoadData && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.drivers.LdwDataPacks.fromObject(obj.laneRoadData));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.SmartereyeLanemark}
 */
proto.apollo.drivers.SmartereyeLanemark.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.SmartereyeLanemark;
  return proto.apollo.drivers.SmartereyeLanemark.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.SmartereyeLanemark} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.SmartereyeLanemark}
 */
proto.apollo.drivers.SmartereyeLanemark.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.apollo.drivers.LdwDataPacks;
      reader.readMessage(value,proto.apollo.drivers.LdwDataPacks.deserializeBinaryFromReader);
      msg.setLaneRoadData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.SmartereyeLanemark.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.SmartereyeLanemark.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.SmartereyeLanemark} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.SmartereyeLanemark.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaneRoadData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.drivers.LdwDataPacks.serializeBinaryToWriter
    );
  }
};


/**
 * optional LdwDataPacks lane_road_data = 4;
 * @return {?proto.apollo.drivers.LdwDataPacks}
 */
proto.apollo.drivers.SmartereyeLanemark.prototype.getLaneRoadData = function() {
  return /** @type{?proto.apollo.drivers.LdwDataPacks} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.LdwDataPacks, 4));
};


/**
 * @param {?proto.apollo.drivers.LdwDataPacks|undefined} value
 * @return {!proto.apollo.drivers.SmartereyeLanemark} returns this
*/
proto.apollo.drivers.SmartereyeLanemark.prototype.setLaneRoadData = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.SmartereyeLanemark} returns this
 */
proto.apollo.drivers.SmartereyeLanemark.prototype.clearLaneRoadData = function() {
  return this.setLaneRoadData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.SmartereyeLanemark.prototype.hasLaneRoadData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.apollo.drivers.LdwVersions = {
  LDW_VERSION_C1: 0,
  LDW_VERSION_C2: 1,
  LDW_VERSION_FOUR_LANE_C2: 2
};

/**
 * @enum {number}
 */
proto.apollo.drivers.LdwLaneStyle = {
  LDW_LANE_STYLE_NONE_LANE: 0,
  LDW_LANE_STYLE_PREDICT_LANE: 1,
  LDW_LANE_STYLE_BROKEN_LANE: 2,
  LDW_LANE_STYLE_SOLID_LANE: 3,
  LDW_LANE_STYLE_DOUBLE_BROKEN_LANE: 4,
  LDW_LANE_STYLE_DOUBLE_SOLID_LANE: 5,
  LDW_LANE_STYLE_TRIPLE_LANE: 6
};

/**
 * @enum {number}
 */
proto.apollo.drivers.LdwSteerStatus = {
  LDW_NORMAL_STEER: 0,
  LDW_STEER_ON_LEFT__LANE: 1,
  LDW_STEER_ON_RIGHT_LANE: 2,
  LDW_STEER_WARNING_LEFT_: 3,
  LDW_STEER_WARNING_RIGHT: 4
};

/**
 * @enum {number}
 */
proto.apollo.drivers.LdwSoftStatus = {
  LDW_SOFT_DETECTION: 0,
  LDW_SOFT_SELF_LEARNING: 1,
  LDW_SOFT_MANUAL_LEARNING_MODE0: 2,
  LDW_SOFT_MANUAL_LEARNING_MODE1: 3
};

/**
 * @enum {number}
 */
proto.apollo.drivers.LdwWarningGrade = {
  LDW_WARNING_LOW: 0,
  LDW_WARNING_NORMAL: 1,
  LDW_WARNING_HIGHT: 2
};

goog.object.extend(exports, proto.apollo.drivers);
