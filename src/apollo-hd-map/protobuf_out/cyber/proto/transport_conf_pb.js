// source: cyber/proto/transport_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.cyber.proto.CommunicationMode', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.OptionalMode', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ResourceLimit', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.RtpsParticipantAttr', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ShmConf', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ShmMulticastLocator', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.TransportConf', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ShmMulticastLocator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ShmMulticastLocator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ShmMulticastLocator.displayName = 'proto.apollo.cyber.proto.ShmMulticastLocator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ShmConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ShmConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ShmConf.displayName = 'proto.apollo.cyber.proto.ShmConf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.RtpsParticipantAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.RtpsParticipantAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.RtpsParticipantAttr.displayName = 'proto.apollo.cyber.proto.RtpsParticipantAttr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.CommunicationMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.CommunicationMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.CommunicationMode.displayName = 'proto.apollo.cyber.proto.CommunicationMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ResourceLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ResourceLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ResourceLimit.displayName = 'proto.apollo.cyber.proto.ResourceLimit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.TransportConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.TransportConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.TransportConf.displayName = 'proto.apollo.cyber.proto.TransportConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ShmMulticastLocator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ShmMulticastLocator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ShmMulticastLocator.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    port: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ShmMulticastLocator as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ShmMulticastLocator.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ip;

  /** @type {?|undefined} */
  this.port;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ShmMulticastLocator.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ShmMulticastLocator}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ShmMulticastLocator();
  obj.ip != null && jspb.Message.setField(msg, 1, obj.ip);
  obj.port != null && jspb.Message.setField(msg, 2, obj.port);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ShmMulticastLocator}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ShmMulticastLocator;
  return proto.apollo.cyber.proto.ShmMulticastLocator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ShmMulticastLocator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ShmMulticastLocator}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ShmMulticastLocator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ShmMulticastLocator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ShmMulticastLocator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ShmMulticastLocator} returns this
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.setIp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ShmMulticastLocator} returns this
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.clearIp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.hasIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ShmMulticastLocator} returns this
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ShmMulticastLocator} returns this
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.clearPort = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ShmMulticastLocator.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ShmConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ShmConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ShmConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ShmConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    notifierType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    shmType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    shmLocator: (f = msg.getShmLocator()) && proto.apollo.cyber.proto.ShmMulticastLocator.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ShmConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ShmConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.notifierType;

  /** @type {?|undefined} */
  this.shmType;

  /** @type {?|undefined} */
  this.shmLocator;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ShmConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ShmConf}
 */
proto.apollo.cyber.proto.ShmConf.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ShmConf();
  obj.notifierType != null && jspb.Message.setField(msg, 1, obj.notifierType);
  obj.shmType != null && jspb.Message.setField(msg, 2, obj.shmType);
  obj.shmLocator && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.cyber.proto.ShmMulticastLocator.fromObject(obj.shmLocator));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ShmConf}
 */
proto.apollo.cyber.proto.ShmConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ShmConf;
  return proto.apollo.cyber.proto.ShmConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ShmConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ShmConf}
 */
proto.apollo.cyber.proto.ShmConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotifierType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShmType(value);
      break;
    case 3:
      var value = new proto.apollo.cyber.proto.ShmMulticastLocator;
      reader.readMessage(value,proto.apollo.cyber.proto.ShmMulticastLocator.deserializeBinaryFromReader);
      msg.setShmLocator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ShmConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ShmConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ShmConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ShmConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getShmLocator();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.cyber.proto.ShmMulticastLocator.serializeBinaryToWriter
    );
  }
};


/**
 * optional string notifier_type = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.ShmConf.prototype.getNotifierType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ShmConf} returns this
 */
proto.apollo.cyber.proto.ShmConf.prototype.setNotifierType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ShmConf} returns this
 */
proto.apollo.cyber.proto.ShmConf.prototype.clearNotifierType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ShmConf.prototype.hasNotifierType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string shm_type = 2;
 * @return {string}
 */
proto.apollo.cyber.proto.ShmConf.prototype.getShmType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ShmConf} returns this
 */
proto.apollo.cyber.proto.ShmConf.prototype.setShmType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ShmConf} returns this
 */
proto.apollo.cyber.proto.ShmConf.prototype.clearShmType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ShmConf.prototype.hasShmType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ShmMulticastLocator shm_locator = 3;
 * @return {?proto.apollo.cyber.proto.ShmMulticastLocator}
 */
proto.apollo.cyber.proto.ShmConf.prototype.getShmLocator = function() {
  return /** @type{?proto.apollo.cyber.proto.ShmMulticastLocator} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.ShmMulticastLocator, 3));
};


/**
 * @param {?proto.apollo.cyber.proto.ShmMulticastLocator|undefined} value
 * @return {!proto.apollo.cyber.proto.ShmConf} returns this
*/
proto.apollo.cyber.proto.ShmConf.prototype.setShmLocator = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.ShmConf} returns this
 */
proto.apollo.cyber.proto.ShmConf.prototype.clearShmLocator = function() {
  return this.setShmLocator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ShmConf.prototype.hasShmLocator = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.RtpsParticipantAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.RtpsParticipantAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaseDuration: jspb.Message.getFieldWithDefault(msg, 1, 12),
    announcementPeriod: jspb.Message.getFieldWithDefault(msg, 2, 3),
    domainIdGain: jspb.Message.getFieldWithDefault(msg, 3, 200),
    portBase: jspb.Message.getFieldWithDefault(msg, 4, 10000)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RtpsParticipantAttr as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.leaseDuration;

  /** @type {?|undefined} */
  this.announcementPeriod;

  /** @type {?|undefined} */
  this.domainIdGain;

  /** @type {?|undefined} */
  this.portBase;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.RtpsParticipantAttr.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.RtpsParticipantAttr();
  obj.leaseDuration != null && jspb.Message.setField(msg, 1, obj.leaseDuration);
  obj.announcementPeriod != null && jspb.Message.setField(msg, 2, obj.announcementPeriod);
  obj.domainIdGain != null && jspb.Message.setField(msg, 3, obj.domainIdGain);
  obj.portBase != null && jspb.Message.setField(msg, 4, obj.portBase);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.RtpsParticipantAttr;
  return proto.apollo.cyber.proto.RtpsParticipantAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.RtpsParticipantAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLeaseDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnnouncementPeriod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDomainIdGain(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPortBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.RtpsParticipantAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.RtpsParticipantAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional int32 lease_duration = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.getLeaseDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 12));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.setLeaseDuration = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.clearLeaseDuration = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.hasLeaseDuration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 announcement_period = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.getAnnouncementPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.setAnnouncementPeriod = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.clearAnnouncementPeriod = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.hasAnnouncementPeriod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 domain_id_gain = 3;
 * @return {number}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.getDomainIdGain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 200));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.setDomainIdGain = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.clearDomainIdGain = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.hasDomainIdGain = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 port_base = 4;
 * @return {number}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.getPortBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 10000));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.setPortBase = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.RtpsParticipantAttr} returns this
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.clearPortBase = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.RtpsParticipantAttr.prototype.hasPortBase = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.CommunicationMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.CommunicationMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.CommunicationMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    sameProc: jspb.Message.getFieldWithDefault(msg, 1, 1),
    diffProc: jspb.Message.getFieldWithDefault(msg, 2, 2),
    diffHost: jspb.Message.getFieldWithDefault(msg, 3, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CommunicationMode as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.CommunicationMode.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sameProc;

  /** @type {?|undefined} */
  this.diffProc;

  /** @type {?|undefined} */
  this.diffHost;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.CommunicationMode.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.CommunicationMode}
 */
proto.apollo.cyber.proto.CommunicationMode.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.CommunicationMode();
  obj.sameProc != null && jspb.Message.setField(msg, 1, obj.sameProc);
  obj.diffProc != null && jspb.Message.setField(msg, 2, obj.diffProc);
  obj.diffHost != null && jspb.Message.setField(msg, 3, obj.diffHost);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.CommunicationMode}
 */
proto.apollo.cyber.proto.CommunicationMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.CommunicationMode;
  return proto.apollo.cyber.proto.CommunicationMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.CommunicationMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.CommunicationMode}
 */
proto.apollo.cyber.proto.CommunicationMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (reader.readEnum());
      msg.setSameProc(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (reader.readEnum());
      msg.setDiffProc(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (reader.readEnum());
      msg.setDiffHost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.CommunicationMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.CommunicationMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.CommunicationMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional OptionalMode same_proc = 1;
 * @return {!proto.apollo.cyber.proto.OptionalMode}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.getSameProc = function() {
  return /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.cyber.proto.OptionalMode} value
 * @return {!proto.apollo.cyber.proto.CommunicationMode} returns this
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.setSameProc = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.CommunicationMode} returns this
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.clearSameProc = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.hasSameProc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OptionalMode diff_proc = 2;
 * @return {!proto.apollo.cyber.proto.OptionalMode}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.getDiffProc = function() {
  return /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (jspb.Message.getFieldWithDefault(this, 2, 2));
};


/**
 * @param {!proto.apollo.cyber.proto.OptionalMode} value
 * @return {!proto.apollo.cyber.proto.CommunicationMode} returns this
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.setDiffProc = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.CommunicationMode} returns this
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.clearDiffProc = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.hasDiffProc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OptionalMode diff_host = 3;
 * @return {!proto.apollo.cyber.proto.OptionalMode}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.getDiffHost = function() {
  return /** @type {!proto.apollo.cyber.proto.OptionalMode} */ (jspb.Message.getFieldWithDefault(this, 3, 3));
};


/**
 * @param {!proto.apollo.cyber.proto.OptionalMode} value
 * @return {!proto.apollo.cyber.proto.CommunicationMode} returns this
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.setDiffHost = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.CommunicationMode} returns this
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.clearDiffHost = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.CommunicationMode.prototype.hasDiffHost = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ResourceLimit.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ResourceLimit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ResourceLimit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ResourceLimit.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxHistoryDepth: jspb.Message.getFieldWithDefault(msg, 1, 1000)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ResourceLimit as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ResourceLimit.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxHistoryDepth;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ResourceLimit.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ResourceLimit}
 */
proto.apollo.cyber.proto.ResourceLimit.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ResourceLimit();
  obj.maxHistoryDepth != null && jspb.Message.setField(msg, 1, obj.maxHistoryDepth);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ResourceLimit}
 */
proto.apollo.cyber.proto.ResourceLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ResourceLimit;
  return proto.apollo.cyber.proto.ResourceLimit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ResourceLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ResourceLimit}
 */
proto.apollo.cyber.proto.ResourceLimit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxHistoryDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ResourceLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ResourceLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ResourceLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ResourceLimit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 max_history_depth = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.ResourceLimit.prototype.getMaxHistoryDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1000));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ResourceLimit} returns this
 */
proto.apollo.cyber.proto.ResourceLimit.prototype.setMaxHistoryDepth = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ResourceLimit} returns this
 */
proto.apollo.cyber.proto.ResourceLimit.prototype.clearMaxHistoryDepth = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ResourceLimit.prototype.hasMaxHistoryDepth = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.TransportConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.TransportConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.TransportConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.TransportConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    shmConf: (f = msg.getShmConf()) && proto.apollo.cyber.proto.ShmConf.toObject(includeInstance, f),
    participantAttr: (f = msg.getParticipantAttr()) && proto.apollo.cyber.proto.RtpsParticipantAttr.toObject(includeInstance, f),
    communicationMode: (f = msg.getCommunicationMode()) && proto.apollo.cyber.proto.CommunicationMode.toObject(includeInstance, f),
    resourceLimit: (f = msg.getResourceLimit()) && proto.apollo.cyber.proto.ResourceLimit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TransportConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.TransportConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.shmConf;

  /** @type {?|undefined} */
  this.participantAttr;

  /** @type {?|undefined} */
  this.communicationMode;

  /** @type {?|undefined} */
  this.resourceLimit;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.TransportConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.TransportConf}
 */
proto.apollo.cyber.proto.TransportConf.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.TransportConf();
  obj.shmConf && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.cyber.proto.ShmConf.fromObject(obj.shmConf));
  obj.participantAttr && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.cyber.proto.RtpsParticipantAttr.fromObject(obj.participantAttr));
  obj.communicationMode && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.cyber.proto.CommunicationMode.fromObject(obj.communicationMode));
  obj.resourceLimit && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.cyber.proto.ResourceLimit.fromObject(obj.resourceLimit));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.TransportConf}
 */
proto.apollo.cyber.proto.TransportConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.TransportConf;
  return proto.apollo.cyber.proto.TransportConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.TransportConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.TransportConf}
 */
proto.apollo.cyber.proto.TransportConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.cyber.proto.ShmConf;
      reader.readMessage(value,proto.apollo.cyber.proto.ShmConf.deserializeBinaryFromReader);
      msg.setShmConf(value);
      break;
    case 2:
      var value = new proto.apollo.cyber.proto.RtpsParticipantAttr;
      reader.readMessage(value,proto.apollo.cyber.proto.RtpsParticipantAttr.deserializeBinaryFromReader);
      msg.setParticipantAttr(value);
      break;
    case 3:
      var value = new proto.apollo.cyber.proto.CommunicationMode;
      reader.readMessage(value,proto.apollo.cyber.proto.CommunicationMode.deserializeBinaryFromReader);
      msg.setCommunicationMode(value);
      break;
    case 4:
      var value = new proto.apollo.cyber.proto.ResourceLimit;
      reader.readMessage(value,proto.apollo.cyber.proto.ResourceLimit.deserializeBinaryFromReader);
      msg.setResourceLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.TransportConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.TransportConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.TransportConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.TransportConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShmConf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.cyber.proto.ShmConf.serializeBinaryToWriter
    );
  }
  f = message.getParticipantAttr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.cyber.proto.RtpsParticipantAttr.serializeBinaryToWriter
    );
  }
  f = message.getCommunicationMode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.cyber.proto.CommunicationMode.serializeBinaryToWriter
    );
  }
  f = message.getResourceLimit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.cyber.proto.ResourceLimit.serializeBinaryToWriter
    );
  }
};


/**
 * optional ShmConf shm_conf = 1;
 * @return {?proto.apollo.cyber.proto.ShmConf}
 */
proto.apollo.cyber.proto.TransportConf.prototype.getShmConf = function() {
  return /** @type{?proto.apollo.cyber.proto.ShmConf} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.ShmConf, 1));
};


/**
 * @param {?proto.apollo.cyber.proto.ShmConf|undefined} value
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
*/
proto.apollo.cyber.proto.TransportConf.prototype.setShmConf = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
 */
proto.apollo.cyber.proto.TransportConf.prototype.clearShmConf = function() {
  return this.setShmConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.TransportConf.prototype.hasShmConf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RtpsParticipantAttr participant_attr = 2;
 * @return {?proto.apollo.cyber.proto.RtpsParticipantAttr}
 */
proto.apollo.cyber.proto.TransportConf.prototype.getParticipantAttr = function() {
  return /** @type{?proto.apollo.cyber.proto.RtpsParticipantAttr} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.RtpsParticipantAttr, 2));
};


/**
 * @param {?proto.apollo.cyber.proto.RtpsParticipantAttr|undefined} value
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
*/
proto.apollo.cyber.proto.TransportConf.prototype.setParticipantAttr = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
 */
proto.apollo.cyber.proto.TransportConf.prototype.clearParticipantAttr = function() {
  return this.setParticipantAttr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.TransportConf.prototype.hasParticipantAttr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommunicationMode communication_mode = 3;
 * @return {?proto.apollo.cyber.proto.CommunicationMode}
 */
proto.apollo.cyber.proto.TransportConf.prototype.getCommunicationMode = function() {
  return /** @type{?proto.apollo.cyber.proto.CommunicationMode} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.CommunicationMode, 3));
};


/**
 * @param {?proto.apollo.cyber.proto.CommunicationMode|undefined} value
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
*/
proto.apollo.cyber.proto.TransportConf.prototype.setCommunicationMode = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
 */
proto.apollo.cyber.proto.TransportConf.prototype.clearCommunicationMode = function() {
  return this.setCommunicationMode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.TransportConf.prototype.hasCommunicationMode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResourceLimit resource_limit = 4;
 * @return {?proto.apollo.cyber.proto.ResourceLimit}
 */
proto.apollo.cyber.proto.TransportConf.prototype.getResourceLimit = function() {
  return /** @type{?proto.apollo.cyber.proto.ResourceLimit} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.ResourceLimit, 4));
};


/**
 * @param {?proto.apollo.cyber.proto.ResourceLimit|undefined} value
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
*/
proto.apollo.cyber.proto.TransportConf.prototype.setResourceLimit = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.TransportConf} returns this
 */
proto.apollo.cyber.proto.TransportConf.prototype.clearResourceLimit = function() {
  return this.setResourceLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.TransportConf.prototype.hasResourceLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.apollo.cyber.proto.OptionalMode = {
  HYBRID: 0,
  INTRA: 1,
  SHM: 2,
  RTPS: 3
};

goog.object.extend(exports, proto.apollo.cyber.proto);
