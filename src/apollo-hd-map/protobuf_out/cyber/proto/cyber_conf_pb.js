// source: cyber/proto/cyber_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cyber_proto_scheduler_conf_pb = require('../../cyber/proto/scheduler_conf_pb.js');
goog.object.extend(proto, cyber_proto_scheduler_conf_pb);
var cyber_proto_transport_conf_pb = require('../../cyber/proto/transport_conf_pb.js');
goog.object.extend(proto, cyber_proto_transport_conf_pb);
var cyber_proto_run_mode_conf_pb = require('../../cyber/proto/run_mode_conf_pb.js');
goog.object.extend(proto, cyber_proto_run_mode_conf_pb);
var cyber_proto_perf_conf_pb = require('../../cyber/proto/perf_conf_pb.js');
goog.object.extend(proto, cyber_proto_perf_conf_pb);
goog.exportSymbol('proto.apollo.cyber.proto.CyberConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.CyberConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.CyberConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.CyberConfig.displayName = 'proto.apollo.cyber.proto.CyberConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.CyberConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.CyberConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.CyberConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    schedulerConf: (f = msg.getSchedulerConf()) && cyber_proto_scheduler_conf_pb.SchedulerConf.toObject(includeInstance, f),
    transportConf: (f = msg.getTransportConf()) && cyber_proto_transport_conf_pb.TransportConf.toObject(includeInstance, f),
    runModeConf: (f = msg.getRunModeConf()) && cyber_proto_run_mode_conf_pb.RunModeConf.toObject(includeInstance, f),
    perfConf: (f = msg.getPerfConf()) && cyber_proto_perf_conf_pb.PerfConf.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CyberConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.CyberConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.schedulerConf;

  /** @type {?|undefined} */
  this.transportConf;

  /** @type {?|undefined} */
  this.runModeConf;

  /** @type {?|undefined} */
  this.perfConf;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.CyberConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.CyberConfig}
 */
proto.apollo.cyber.proto.CyberConfig.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.CyberConfig();
  obj.schedulerConf && jspb.Message.setWrapperField(
      msg, 1, cyber_proto_scheduler_conf_pb.SchedulerConf.fromObject(obj.schedulerConf));
  obj.transportConf && jspb.Message.setWrapperField(
      msg, 2, cyber_proto_transport_conf_pb.TransportConf.fromObject(obj.transportConf));
  obj.runModeConf && jspb.Message.setWrapperField(
      msg, 3, cyber_proto_run_mode_conf_pb.RunModeConf.fromObject(obj.runModeConf));
  obj.perfConf && jspb.Message.setWrapperField(
      msg, 4, cyber_proto_perf_conf_pb.PerfConf.fromObject(obj.perfConf));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.CyberConfig}
 */
proto.apollo.cyber.proto.CyberConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.CyberConfig;
  return proto.apollo.cyber.proto.CyberConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.CyberConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.CyberConfig}
 */
proto.apollo.cyber.proto.CyberConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cyber_proto_scheduler_conf_pb.SchedulerConf;
      reader.readMessage(value,cyber_proto_scheduler_conf_pb.SchedulerConf.deserializeBinaryFromReader);
      msg.setSchedulerConf(value);
      break;
    case 2:
      var value = new cyber_proto_transport_conf_pb.TransportConf;
      reader.readMessage(value,cyber_proto_transport_conf_pb.TransportConf.deserializeBinaryFromReader);
      msg.setTransportConf(value);
      break;
    case 3:
      var value = new cyber_proto_run_mode_conf_pb.RunModeConf;
      reader.readMessage(value,cyber_proto_run_mode_conf_pb.RunModeConf.deserializeBinaryFromReader);
      msg.setRunModeConf(value);
      break;
    case 4:
      var value = new cyber_proto_perf_conf_pb.PerfConf;
      reader.readMessage(value,cyber_proto_perf_conf_pb.PerfConf.deserializeBinaryFromReader);
      msg.setPerfConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.CyberConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.CyberConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.CyberConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchedulerConf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cyber_proto_scheduler_conf_pb.SchedulerConf.serializeBinaryToWriter
    );
  }
  f = message.getTransportConf();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cyber_proto_transport_conf_pb.TransportConf.serializeBinaryToWriter
    );
  }
  f = message.getRunModeConf();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cyber_proto_run_mode_conf_pb.RunModeConf.serializeBinaryToWriter
    );
  }
  f = message.getPerfConf();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cyber_proto_perf_conf_pb.PerfConf.serializeBinaryToWriter
    );
  }
};


/**
 * optional SchedulerConf scheduler_conf = 1;
 * @return {?proto.apollo.cyber.proto.SchedulerConf}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.getSchedulerConf = function() {
  return /** @type{?proto.apollo.cyber.proto.SchedulerConf} */ (
    jspb.Message.getWrapperField(this, cyber_proto_scheduler_conf_pb.SchedulerConf, 1));
};


/**
 * @param {?proto.apollo.cyber.proto.SchedulerConf|undefined} value
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
*/
proto.apollo.cyber.proto.CyberConfig.prototype.setSchedulerConf = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
 */
proto.apollo.cyber.proto.CyberConfig.prototype.clearSchedulerConf = function() {
  return this.setSchedulerConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.hasSchedulerConf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransportConf transport_conf = 2;
 * @return {?proto.apollo.cyber.proto.TransportConf}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.getTransportConf = function() {
  return /** @type{?proto.apollo.cyber.proto.TransportConf} */ (
    jspb.Message.getWrapperField(this, cyber_proto_transport_conf_pb.TransportConf, 2));
};


/**
 * @param {?proto.apollo.cyber.proto.TransportConf|undefined} value
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
*/
proto.apollo.cyber.proto.CyberConfig.prototype.setTransportConf = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
 */
proto.apollo.cyber.proto.CyberConfig.prototype.clearTransportConf = function() {
  return this.setTransportConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.hasTransportConf = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RunModeConf run_mode_conf = 3;
 * @return {?proto.apollo.cyber.proto.RunModeConf}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.getRunModeConf = function() {
  return /** @type{?proto.apollo.cyber.proto.RunModeConf} */ (
    jspb.Message.getWrapperField(this, cyber_proto_run_mode_conf_pb.RunModeConf, 3));
};


/**
 * @param {?proto.apollo.cyber.proto.RunModeConf|undefined} value
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
*/
proto.apollo.cyber.proto.CyberConfig.prototype.setRunModeConf = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
 */
proto.apollo.cyber.proto.CyberConfig.prototype.clearRunModeConf = function() {
  return this.setRunModeConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.hasRunModeConf = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PerfConf perf_conf = 4;
 * @return {?proto.apollo.cyber.proto.PerfConf}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.getPerfConf = function() {
  return /** @type{?proto.apollo.cyber.proto.PerfConf} */ (
    jspb.Message.getWrapperField(this, cyber_proto_perf_conf_pb.PerfConf, 4));
};


/**
 * @param {?proto.apollo.cyber.proto.PerfConf|undefined} value
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
*/
proto.apollo.cyber.proto.CyberConfig.prototype.setPerfConf = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.CyberConfig} returns this
 */
proto.apollo.cyber.proto.CyberConfig.prototype.clearPerfConf = function() {
  return this.setPerfConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.CyberConfig.prototype.hasPerfConf = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.apollo.cyber.proto);
