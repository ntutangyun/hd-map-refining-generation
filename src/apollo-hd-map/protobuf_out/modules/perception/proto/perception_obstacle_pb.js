// source: modules/perception/proto/perception_obstacle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_error_code_pb = require('../../../modules/common/proto/error_code_pb.js');
goog.object.extend(proto, modules_common_proto_error_code_pb);
var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_map_proto_map_lane_pb = require('../../../modules/map/proto/map_lane_pb.js');
goog.object.extend(proto, modules_map_proto_map_lane_pb);
goog.exportSymbol('proto.apollo.perception.BBox2D', null, global);
goog.exportSymbol('proto.apollo.perception.CIPVInfo', null, global);
goog.exportSymbol('proto.apollo.perception.DebugMessage', null, global);
goog.exportSymbol('proto.apollo.perception.LaneMarker', null, global);
goog.exportSymbol('proto.apollo.perception.LaneMarkers', null, global);
goog.exportSymbol('proto.apollo.perception.LightStatus', null, global);
goog.exportSymbol('proto.apollo.perception.PerceptionObstacle', null, global);
goog.exportSymbol('proto.apollo.perception.PerceptionObstacle.ConfidenceType', null, global);
goog.exportSymbol('proto.apollo.perception.PerceptionObstacle.Source', null, global);
goog.exportSymbol('proto.apollo.perception.PerceptionObstacle.SubType', null, global);
goog.exportSymbol('proto.apollo.perception.PerceptionObstacle.Type', null, global);
goog.exportSymbol('proto.apollo.perception.PerceptionObstacles', null, global);
goog.exportSymbol('proto.apollo.perception.SensorMeasurement', null, global);
goog.exportSymbol('proto.apollo.perception.Trajectory', null, global);
goog.exportSymbol('proto.apollo.perception.V2XInformation', null, global);
goog.exportSymbol('proto.apollo.perception.V2XInformation.V2XType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.BBox2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.BBox2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.BBox2D.displayName = 'proto.apollo.perception.BBox2D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.LightStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.LightStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.LightStatus.displayName = 'proto.apollo.perception.LightStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.V2XInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.V2XInformation.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.V2XInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.V2XInformation.displayName = 'proto.apollo.perception.V2XInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.SensorMeasurement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.SensorMeasurement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.SensorMeasurement.displayName = 'proto.apollo.perception.SensorMeasurement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.Trajectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.Trajectory.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.Trajectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.Trajectory.displayName = 'proto.apollo.perception.Trajectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.DebugMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.DebugMessage.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.DebugMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.DebugMessage.displayName = 'proto.apollo.perception.DebugMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.PerceptionObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.PerceptionObstacle.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.PerceptionObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.PerceptionObstacle.displayName = 'proto.apollo.perception.PerceptionObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.LaneMarker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.LaneMarker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.LaneMarker.displayName = 'proto.apollo.perception.LaneMarker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.LaneMarkers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.LaneMarkers.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.LaneMarkers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.LaneMarkers.displayName = 'proto.apollo.perception.LaneMarkers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.CIPVInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.CIPVInfo.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.CIPVInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.CIPVInfo.displayName = 'proto.apollo.perception.CIPVInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.PerceptionObstacles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.PerceptionObstacles.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.PerceptionObstacles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.PerceptionObstacles.displayName = 'proto.apollo.perception.PerceptionObstacles';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.BBox2D.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.BBox2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.BBox2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.BBox2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    xmin: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    ymin: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    xmax: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    ymax: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BBox2D as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.BBox2D.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.xmin;

  /** @type {?|undefined} */
  this.ymin;

  /** @type {?|undefined} */
  this.xmax;

  /** @type {?|undefined} */
  this.ymax;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.BBox2D.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.BBox2D}
 */
proto.apollo.perception.BBox2D.fromObject = function(obj) {
  var msg = new proto.apollo.perception.BBox2D();
  obj.xmin != null && jspb.Message.setField(msg, 1, obj.xmin);
  obj.ymin != null && jspb.Message.setField(msg, 2, obj.ymin);
  obj.xmax != null && jspb.Message.setField(msg, 3, obj.xmax);
  obj.ymax != null && jspb.Message.setField(msg, 4, obj.ymax);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.BBox2D}
 */
proto.apollo.perception.BBox2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.BBox2D;
  return proto.apollo.perception.BBox2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.BBox2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.BBox2D}
 */
proto.apollo.perception.BBox2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXmin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYmin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXmax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYmax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.BBox2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.BBox2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.BBox2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.BBox2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double xmin = 1;
 * @return {number}
 */
proto.apollo.perception.BBox2D.prototype.getXmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.setXmin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.clearXmin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.BBox2D.prototype.hasXmin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double ymin = 2;
 * @return {number}
 */
proto.apollo.perception.BBox2D.prototype.getYmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.setYmin = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.clearYmin = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.BBox2D.prototype.hasYmin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double xmax = 3;
 * @return {number}
 */
proto.apollo.perception.BBox2D.prototype.getXmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.setXmax = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.clearXmax = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.BBox2D.prototype.hasXmax = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double ymax = 4;
 * @return {number}
 */
proto.apollo.perception.BBox2D.prototype.getYmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.setYmax = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.BBox2D} returns this
 */
proto.apollo.perception.BBox2D.prototype.clearYmax = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.BBox2D.prototype.hasYmax = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.LightStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.LightStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.LightStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.LightStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    brakeVisible: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    brakeSwitchOn: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    leftTurnVisible: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    leftTurnSwitchOn: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    rightTurnVisible: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    rightTurnSwitchOn: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LightStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.LightStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.brakeVisible;

  /** @type {?|undefined} */
  this.brakeSwitchOn;

  /** @type {?|undefined} */
  this.leftTurnVisible;

  /** @type {?|undefined} */
  this.leftTurnSwitchOn;

  /** @type {?|undefined} */
  this.rightTurnVisible;

  /** @type {?|undefined} */
  this.rightTurnSwitchOn;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.LightStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.LightStatus}
 */
proto.apollo.perception.LightStatus.fromObject = function(obj) {
  var msg = new proto.apollo.perception.LightStatus();
  obj.brakeVisible != null && jspb.Message.setField(msg, 1, obj.brakeVisible);
  obj.brakeSwitchOn != null && jspb.Message.setField(msg, 2, obj.brakeSwitchOn);
  obj.leftTurnVisible != null && jspb.Message.setField(msg, 3, obj.leftTurnVisible);
  obj.leftTurnSwitchOn != null && jspb.Message.setField(msg, 4, obj.leftTurnSwitchOn);
  obj.rightTurnVisible != null && jspb.Message.setField(msg, 5, obj.rightTurnVisible);
  obj.rightTurnSwitchOn != null && jspb.Message.setField(msg, 6, obj.rightTurnSwitchOn);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.LightStatus}
 */
proto.apollo.perception.LightStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.LightStatus;
  return proto.apollo.perception.LightStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.LightStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.LightStatus}
 */
proto.apollo.perception.LightStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakeVisible(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakeSwitchOn(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeftTurnVisible(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeftTurnSwitchOn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRightTurnVisible(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRightTurnSwitchOn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.LightStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.LightStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.LightStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.LightStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional double brake_visible = 1;
 * @return {number}
 */
proto.apollo.perception.LightStatus.prototype.getBrakeVisible = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.setBrakeVisible = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.clearBrakeVisible = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LightStatus.prototype.hasBrakeVisible = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double brake_switch_on = 2;
 * @return {number}
 */
proto.apollo.perception.LightStatus.prototype.getBrakeSwitchOn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.setBrakeSwitchOn = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.clearBrakeSwitchOn = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LightStatus.prototype.hasBrakeSwitchOn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double left_turn_visible = 3;
 * @return {number}
 */
proto.apollo.perception.LightStatus.prototype.getLeftTurnVisible = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.setLeftTurnVisible = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.clearLeftTurnVisible = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LightStatus.prototype.hasLeftTurnVisible = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double left_turn_switch_on = 4;
 * @return {number}
 */
proto.apollo.perception.LightStatus.prototype.getLeftTurnSwitchOn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.setLeftTurnSwitchOn = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.clearLeftTurnSwitchOn = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LightStatus.prototype.hasLeftTurnSwitchOn = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double right_turn_visible = 5;
 * @return {number}
 */
proto.apollo.perception.LightStatus.prototype.getRightTurnVisible = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.setRightTurnVisible = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.clearRightTurnVisible = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LightStatus.prototype.hasRightTurnVisible = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double right_turn_switch_on = 6;
 * @return {number}
 */
proto.apollo.perception.LightStatus.prototype.getRightTurnSwitchOn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.setRightTurnSwitchOn = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LightStatus} returns this
 */
proto.apollo.perception.LightStatus.prototype.clearRightTurnSwitchOn = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LightStatus.prototype.hasRightTurnSwitchOn = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.V2XInformation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.V2XInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.V2XInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.V2XInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.V2XInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    v2xTypeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of V2XInformation as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.V2XInformation.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.v2xTypeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.V2XInformation.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.V2XInformation}
 */
proto.apollo.perception.V2XInformation.fromObject = function(obj) {
  var msg = new proto.apollo.perception.V2XInformation();
  obj.v2xTypeList != null && jspb.Message.setField(msg, 1, obj.v2xTypeList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.V2XInformation}
 */
proto.apollo.perception.V2XInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.V2XInformation;
  return proto.apollo.perception.V2XInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.V2XInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.V2XInformation}
 */
proto.apollo.perception.V2XInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.apollo.perception.V2XInformation.V2XType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addV2xType(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.V2XInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.V2XInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.V2XInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.V2XInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV2xTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.V2XInformation.V2XType = {
  NONE: 0,
  ZOMBIES_CAR: 1,
  BLIND_ZONE: 2
};

/**
 * repeated V2XType v2x_type = 1;
 * @return {!Array<!proto.apollo.perception.V2XInformation.V2XType>}
 */
proto.apollo.perception.V2XInformation.prototype.getV2xTypeList = function() {
  return /** @type {!Array<!proto.apollo.perception.V2XInformation.V2XType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.V2XInformation.V2XType>} value
 * @return {!proto.apollo.perception.V2XInformation} returns this
 */
proto.apollo.perception.V2XInformation.prototype.setV2xTypeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.apollo.perception.V2XInformation.V2XType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.V2XInformation} returns this
 */
proto.apollo.perception.V2XInformation.prototype.addV2xType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.V2XInformation} returns this
 */
proto.apollo.perception.V2XInformation.prototype.clearV2xTypeList = function() {
  return this.setV2xTypeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.SensorMeasurement.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.SensorMeasurement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.SensorMeasurement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.SensorMeasurement.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    position: (f = msg.getPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    theta: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    length: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    velocity: (f = msg.getVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    type: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    subType: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    box: (f = msg.getBox()) && proto.apollo.perception.BBox2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SensorMeasurement as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.SensorMeasurement.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sensorId;

  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.theta;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.velocity;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.subType;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.box;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.SensorMeasurement.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.SensorMeasurement}
 */
proto.apollo.perception.SensorMeasurement.fromObject = function(obj) {
  var msg = new proto.apollo.perception.SensorMeasurement();
  obj.sensorId != null && jspb.Message.setField(msg, 1, obj.sensorId);
  obj.id != null && jspb.Message.setField(msg, 2, obj.id);
  obj.position && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_geometry_pb.Point3D.fromObject(obj.position));
  obj.theta != null && jspb.Message.setField(msg, 4, obj.theta);
  obj.length != null && jspb.Message.setField(msg, 5, obj.length);
  obj.width != null && jspb.Message.setField(msg, 6, obj.width);
  obj.height != null && jspb.Message.setField(msg, 7, obj.height);
  obj.velocity && jspb.Message.setWrapperField(
      msg, 8, modules_common_proto_geometry_pb.Point3D.fromObject(obj.velocity));
  obj.type != null && jspb.Message.setField(msg, 9, obj.type);
  obj.subType != null && jspb.Message.setField(msg, 10, obj.subType);
  obj.timestamp != null && jspb.Message.setField(msg, 11, obj.timestamp);
  obj.box && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.perception.BBox2D.fromObject(obj.box));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.SensorMeasurement}
 */
proto.apollo.perception.SensorMeasurement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.SensorMeasurement;
  return proto.apollo.perception.SensorMeasurement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.SensorMeasurement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.SensorMeasurement}
 */
proto.apollo.perception.SensorMeasurement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 8:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 9:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (reader.readEnum());
      msg.setSubType(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 12:
      var value = new proto.apollo.perception.BBox2D;
      reader.readMessage(value,proto.apollo.perception.BBox2D.deserializeBinaryFromReader);
      msg.setBox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.SensorMeasurement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.SensorMeasurement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.SensorMeasurement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.SensorMeasurement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getBox();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.perception.BBox2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sensor_id = 1;
 * @return {string}
 */
proto.apollo.perception.SensorMeasurement.prototype.getSensorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setSensorId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearSensorId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasSensorId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.apollo.perception.SensorMeasurement.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.Point3D position = 3;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.perception.SensorMeasurement.prototype.getPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 3));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
*/
proto.apollo.perception.SensorMeasurement.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double theta = 4;
 * @return {number}
 */
proto.apollo.perception.SensorMeasurement.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setTheta = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearTheta = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasTheta = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double length = 5;
 * @return {number}
 */
proto.apollo.perception.SensorMeasurement.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearLength = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasLength = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double width = 6;
 * @return {number}
 */
proto.apollo.perception.SensorMeasurement.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double height = 7;
 * @return {number}
 */
proto.apollo.perception.SensorMeasurement.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional apollo.common.Point3D velocity = 8;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.perception.SensorMeasurement.prototype.getVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 8));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
*/
proto.apollo.perception.SensorMeasurement.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PerceptionObstacle.Type type = 9;
 * @return {!proto.apollo.perception.PerceptionObstacle.Type}
 */
proto.apollo.perception.SensorMeasurement.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Type} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setType = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearType = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasType = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PerceptionObstacle.SubType sub_type = 10;
 * @return {!proto.apollo.perception.PerceptionObstacle.SubType}
 */
proto.apollo.perception.SensorMeasurement.prototype.getSubType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.SubType} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setSubType = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearSubType = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasSubType = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double timestamp = 11;
 * @return {number}
 */
proto.apollo.perception.SensorMeasurement.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional BBox2D box = 12;
 * @return {?proto.apollo.perception.BBox2D}
 */
proto.apollo.perception.SensorMeasurement.prototype.getBox = function() {
  return /** @type{?proto.apollo.perception.BBox2D} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.BBox2D, 12));
};


/**
 * @param {?proto.apollo.perception.BBox2D|undefined} value
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
*/
proto.apollo.perception.SensorMeasurement.prototype.setBox = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.SensorMeasurement} returns this
 */
proto.apollo.perception.SensorMeasurement.prototype.clearBox = function() {
  return this.setBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.SensorMeasurement.prototype.hasBox = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.Trajectory.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.Trajectory.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.Trajectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.Trajectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.Trajectory.toObject = function(includeInstance, msg) {
  var f, obj = {
    probability: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    trajectoryPointList: jspb.Message.toObjectList(msg.getTrajectoryPointList(),
    modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Trajectory as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.Trajectory.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.probability;

  /** @type {?|undefined} */
  this.trajectoryPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.Trajectory.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.Trajectory}
 */
proto.apollo.perception.Trajectory.fromObject = function(obj) {
  var msg = new proto.apollo.perception.Trajectory();
  obj.probability != null && jspb.Message.setField(msg, 1, obj.probability);
  obj.trajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.trajectoryPointList.map(
          modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.Trajectory}
 */
proto.apollo.perception.Trajectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.Trajectory;
  return proto.apollo.perception.Trajectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.Trajectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.Trajectory}
 */
proto.apollo.perception.Trajectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 2:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.addTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.Trajectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.Trajectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.Trajectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.Trajectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional double probability = 1;
 * @return {number}
 */
proto.apollo.perception.Trajectory.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.Trajectory} returns this
 */
proto.apollo.perception.Trajectory.prototype.setProbability = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.Trajectory} returns this
 */
proto.apollo.perception.Trajectory.prototype.clearProbability = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.Trajectory.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated apollo.common.TrajectoryPoint trajectory_point = 2;
 * @return {!Array<!proto.apollo.common.TrajectoryPoint>}
 */
proto.apollo.perception.Trajectory.prototype.getTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.common.TrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.common.TrajectoryPoint>} value
 * @return {!proto.apollo.perception.Trajectory} returns this
*/
proto.apollo.perception.Trajectory.prototype.setTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.common.TrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.perception.Trajectory.prototype.addTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.common.TrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.Trajectory} returns this
 */
proto.apollo.perception.Trajectory.prototype.clearTrajectoryPointList = function() {
  return this.setTrajectoryPointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.DebugMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.DebugMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.DebugMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.DebugMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.DebugMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    trajectoryList: jspb.Message.toObjectList(msg.getTrajectoryList(),
    proto.apollo.perception.Trajectory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DebugMessage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.DebugMessage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.trajectoryList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.DebugMessage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.DebugMessage}
 */
proto.apollo.perception.DebugMessage.fromObject = function(obj) {
  var msg = new proto.apollo.perception.DebugMessage();
  obj.trajectoryList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.trajectoryList.map(
          proto.apollo.perception.Trajectory.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.DebugMessage}
 */
proto.apollo.perception.DebugMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.DebugMessage;
  return proto.apollo.perception.DebugMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.DebugMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.DebugMessage}
 */
proto.apollo.perception.DebugMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.Trajectory;
      reader.readMessage(value,proto.apollo.perception.Trajectory.deserializeBinaryFromReader);
      msg.addTrajectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.DebugMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.DebugMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.DebugMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.DebugMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrajectoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.Trajectory.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Trajectory trajectory = 1;
 * @return {!Array<!proto.apollo.perception.Trajectory>}
 */
proto.apollo.perception.DebugMessage.prototype.getTrajectoryList = function() {
  return /** @type{!Array<!proto.apollo.perception.Trajectory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.Trajectory, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.Trajectory>} value
 * @return {!proto.apollo.perception.DebugMessage} returns this
*/
proto.apollo.perception.DebugMessage.prototype.setTrajectoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.Trajectory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.Trajectory}
 */
proto.apollo.perception.DebugMessage.prototype.addTrajectory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.Trajectory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.DebugMessage} returns this
 */
proto.apollo.perception.DebugMessage.prototype.clearTrajectoryList = function() {
  return this.setTrajectoryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.PerceptionObstacle.repeatedFields_ = [8,12,15,20,22,23,24];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.PerceptionObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.PerceptionObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.PerceptionObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.PerceptionObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    position: (f = msg.getPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    theta: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    velocity: (f = msg.getVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    length: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    polygonPointList: jspb.Message.toObjectList(msg.getPolygonPointList(),
    modules_common_proto_geometry_pb.Point3D.toObject, includeInstance),
    trackingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    pointCloudList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 12)) == null ? undefined : f,
    confidence: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    confidenceType: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    dropsList: jspb.Message.toObjectList(msg.getDropsList(),
    modules_common_proto_geometry_pb.Point3D.toObject, includeInstance),
    acceleration: (f = msg.getAcceleration()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    anchorPoint: (f = msg.getAnchorPoint()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    bbox2d: (f = msg.getBbox2d()) && proto.apollo.perception.BBox2D.toObject(includeInstance, f),
    subType: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    measurementsList: jspb.Message.toObjectList(msg.getMeasurementsList(),
    proto.apollo.perception.SensorMeasurement.toObject, includeInstance),
    heightAboveGround: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, NaN),
    positionCovarianceList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 22)) == null ? undefined : f,
    velocityCovarianceList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 23)) == null ? undefined : f,
    accelerationCovarianceList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 24)) == null ? undefined : f,
    lightStatus: (f = msg.getLightStatus()) && proto.apollo.perception.LightStatus.toObject(includeInstance, f),
    msg: (f = msg.getMsg()) && proto.apollo.perception.DebugMessage.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 27, 0),
    v2xInfo: (f = msg.getV2xInfo()) && proto.apollo.perception.V2XInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PerceptionObstacle as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.PerceptionObstacle.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.theta;

  /** @type {?|undefined} */
  this.velocity;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.polygonPointList;

  /** @type {?|undefined} */
  this.trackingTime;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.pointCloudList;

  /** @type {?|undefined} */
  this.confidence;

  /** @type {?|undefined} */
  this.confidenceType;

  /** @type {?|undefined} */
  this.dropsList;

  /** @type {?|undefined} */
  this.acceleration;

  /** @type {?|undefined} */
  this.anchorPoint;

  /** @type {?|undefined} */
  this.bbox2d;

  /** @type {?|undefined} */
  this.subType;

  /** @type {?|undefined} */
  this.measurementsList;

  /** @type {?|undefined} */
  this.heightAboveGround;

  /** @type {?|undefined} */
  this.positionCovarianceList;

  /** @type {?|undefined} */
  this.velocityCovarianceList;

  /** @type {?|undefined} */
  this.accelerationCovarianceList;

  /** @type {?|undefined} */
  this.lightStatus;

  /** @type {?|undefined} */
  this.msg;

  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.v2xInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.PerceptionObstacle.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.PerceptionObstacle}
 */
proto.apollo.perception.PerceptionObstacle.fromObject = function(obj) {
  var msg = new proto.apollo.perception.PerceptionObstacle();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.position && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.Point3D.fromObject(obj.position));
  obj.theta != null && jspb.Message.setField(msg, 3, obj.theta);
  obj.velocity && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_geometry_pb.Point3D.fromObject(obj.velocity));
  obj.length != null && jspb.Message.setField(msg, 5, obj.length);
  obj.width != null && jspb.Message.setField(msg, 6, obj.width);
  obj.height != null && jspb.Message.setField(msg, 7, obj.height);
  obj.polygonPointList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.polygonPointList.map(
          modules_common_proto_geometry_pb.Point3D.fromObject));
  obj.trackingTime != null && jspb.Message.setField(msg, 9, obj.trackingTime);
  obj.type != null && jspb.Message.setField(msg, 10, obj.type);
  obj.timestamp != null && jspb.Message.setField(msg, 11, obj.timestamp);
  obj.pointCloudList != null && jspb.Message.setField(msg, 12, obj.pointCloudList);
  obj.confidence != null && jspb.Message.setField(msg, 13, obj.confidence);
  obj.confidenceType != null && jspb.Message.setField(msg, 14, obj.confidenceType);
  obj.dropsList && jspb.Message.setRepeatedWrapperField(
      msg, 15, obj.dropsList.map(
          modules_common_proto_geometry_pb.Point3D.fromObject));
  obj.acceleration && jspb.Message.setWrapperField(
      msg, 16, modules_common_proto_geometry_pb.Point3D.fromObject(obj.acceleration));
  obj.anchorPoint && jspb.Message.setWrapperField(
      msg, 17, modules_common_proto_geometry_pb.Point3D.fromObject(obj.anchorPoint));
  obj.bbox2d && jspb.Message.setWrapperField(
      msg, 18, proto.apollo.perception.BBox2D.fromObject(obj.bbox2d));
  obj.subType != null && jspb.Message.setField(msg, 19, obj.subType);
  obj.measurementsList && jspb.Message.setRepeatedWrapperField(
      msg, 20, obj.measurementsList.map(
          proto.apollo.perception.SensorMeasurement.fromObject));
  obj.heightAboveGround != null && jspb.Message.setField(msg, 21, obj.heightAboveGround);
  obj.positionCovarianceList != null && jspb.Message.setField(msg, 22, obj.positionCovarianceList);
  obj.velocityCovarianceList != null && jspb.Message.setField(msg, 23, obj.velocityCovarianceList);
  obj.accelerationCovarianceList != null && jspb.Message.setField(msg, 24, obj.accelerationCovarianceList);
  obj.lightStatus && jspb.Message.setWrapperField(
      msg, 25, proto.apollo.perception.LightStatus.fromObject(obj.lightStatus));
  obj.msg && jspb.Message.setWrapperField(
      msg, 26, proto.apollo.perception.DebugMessage.fromObject(obj.msg));
  obj.source != null && jspb.Message.setField(msg, 27, obj.source);
  obj.v2xInfo && jspb.Message.setWrapperField(
      msg, 28, proto.apollo.perception.V2XInformation.fromObject(obj.v2xInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.PerceptionObstacle}
 */
proto.apollo.perception.PerceptionObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.PerceptionObstacle;
  return proto.apollo.perception.PerceptionObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.PerceptionObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.PerceptionObstacle}
 */
proto.apollo.perception.PerceptionObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 4:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 8:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.addPolygonPoint(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrackingTime(value);
      break;
    case 10:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 12:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPointCloud(values[i]);
      }
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 14:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.ConfidenceType} */ (reader.readEnum());
      msg.setConfidenceType(value);
      break;
    case 15:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.addDrops(value);
      break;
    case 16:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setAcceleration(value);
      break;
    case 17:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setAnchorPoint(value);
      break;
    case 18:
      var value = new proto.apollo.perception.BBox2D;
      reader.readMessage(value,proto.apollo.perception.BBox2D.deserializeBinaryFromReader);
      msg.setBbox2d(value);
      break;
    case 19:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (reader.readEnum());
      msg.setSubType(value);
      break;
    case 20:
      var value = new proto.apollo.perception.SensorMeasurement;
      reader.readMessage(value,proto.apollo.perception.SensorMeasurement.deserializeBinaryFromReader);
      msg.addMeasurements(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeightAboveGround(value);
      break;
    case 22:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPositionCovariance(values[i]);
      }
      break;
    case 23:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVelocityCovariance(values[i]);
      }
      break;
    case 24:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAccelerationCovariance(values[i]);
      }
      break;
    case 25:
      var value = new proto.apollo.perception.LightStatus;
      reader.readMessage(value,proto.apollo.perception.LightStatus.deserializeBinaryFromReader);
      msg.setLightStatus(value);
      break;
    case 26:
      var value = new proto.apollo.perception.DebugMessage;
      reader.readMessage(value,proto.apollo.perception.DebugMessage.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 27:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (reader.readEnum());
      msg.setSource(value);
      break;
    case 28:
      var value = new proto.apollo.perception.V2XInformation;
      reader.readMessage(value,proto.apollo.perception.V2XInformation.deserializeBinaryFromReader);
      msg.setV2xInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.PerceptionObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.PerceptionObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.PerceptionObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.PerceptionObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getPolygonPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getPointCloudList();
  if (f.length > 0) {
    writer.writePackedDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.ConfidenceType} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getDropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getAcceleration();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getAnchorPoint();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getBbox2d();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.apollo.perception.BBox2D.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getMeasurementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.apollo.perception.SensorMeasurement.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getPositionCovarianceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      22,
      f
    );
  }
  f = message.getVelocityCovarianceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      23,
      f
    );
  }
  f = message.getAccelerationCovarianceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      24,
      f
    );
  }
  f = message.getLightStatus();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.apollo.perception.LightStatus.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.apollo.perception.DebugMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeEnum(
      27,
      f
    );
  }
  f = message.getV2xInfo();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.apollo.perception.V2XInformation.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.PerceptionObstacle.Type = {
  UNKNOWN: 0,
  UNKNOWN_MOVABLE: 1,
  UNKNOWN_UNMOVABLE: 2,
  PEDESTRIAN: 3,
  BICYCLE: 4,
  VEHICLE: 5
};

/**
 * @enum {number}
 */
proto.apollo.perception.PerceptionObstacle.ConfidenceType = {
  CONFIDENCE_UNKNOWN: 0,
  CONFIDENCE_CNN: 1,
  CONFIDENCE_RADAR: 2
};

/**
 * @enum {number}
 */
proto.apollo.perception.PerceptionObstacle.SubType = {
  ST_UNKNOWN: 0,
  ST_UNKNOWN_MOVABLE: 1,
  ST_UNKNOWN_UNMOVABLE: 2,
  ST_CAR: 3,
  ST_VAN: 4,
  ST_TRUCK: 5,
  ST_BUS: 6,
  ST_CYCLIST: 7,
  ST_MOTORCYCLIST: 8,
  ST_TRICYCLIST: 9,
  ST_PEDESTRIAN: 10,
  ST_TRAFFICCONE: 11
};

/**
 * @enum {number}
 */
proto.apollo.perception.PerceptionObstacle.Source = {
  HOST_VEHICLE: 0,
  V2X: 1
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.Point3D position = 2;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 2));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double theta = 3;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setTheta = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearTheta = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasTheta = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.common.Point3D velocity = 4;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 4));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double length = 5;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearLength = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasLength = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double width = 6;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double height = 7;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated apollo.common.Point3D polygon_point = 8;
 * @return {!Array<!proto.apollo.common.Point3D>}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getPolygonPointList = function() {
  return /** @type{!Array<!proto.apollo.common.Point3D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point3D, 8));
};


/**
 * @param {!Array<!proto.apollo.common.Point3D>} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setPolygonPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.common.Point3D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point3D}
 */
proto.apollo.perception.PerceptionObstacle.prototype.addPolygonPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.common.Point3D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearPolygonPointList = function() {
  return this.setPolygonPointList([]);
};


/**
 * optional double tracking_time = 9;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getTrackingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setTrackingTime = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearTrackingTime = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasTrackingTime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Type type = 10;
 * @return {!proto.apollo.perception.PerceptionObstacle.Type}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Type} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setType = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearType = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasType = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double timestamp = 11;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated double point_cloud = 12;
 * @return {!Array<number>}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getPointCloudList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 12));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setPointCloudList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.addPointCloud = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearPointCloudList = function() {
  return this.setPointCloudList([]);
};


/**
 * optional double confidence = 13;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ConfidenceType confidence_type = 14;
 * @return {!proto.apollo.perception.PerceptionObstacle.ConfidenceType}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getConfidenceType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.ConfidenceType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.ConfidenceType} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setConfidenceType = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearConfidenceType = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasConfidenceType = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated apollo.common.Point3D drops = 15;
 * @return {!Array<!proto.apollo.common.Point3D>}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getDropsList = function() {
  return /** @type{!Array<!proto.apollo.common.Point3D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point3D, 15));
};


/**
 * @param {!Array<!proto.apollo.common.Point3D>} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setDropsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.apollo.common.Point3D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point3D}
 */
proto.apollo.perception.PerceptionObstacle.prototype.addDrops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.apollo.common.Point3D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearDropsList = function() {
  return this.setDropsList([]);
};


/**
 * optional apollo.common.Point3D acceleration = 16;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getAcceleration = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 16));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setAcceleration = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearAcceleration = function() {
  return this.setAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional apollo.common.Point3D anchor_point = 17;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getAnchorPoint = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 17));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setAnchorPoint = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearAnchorPoint = function() {
  return this.setAnchorPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasAnchorPoint = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional BBox2D bbox2d = 18;
 * @return {?proto.apollo.perception.BBox2D}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getBbox2d = function() {
  return /** @type{?proto.apollo.perception.BBox2D} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.BBox2D, 18));
};


/**
 * @param {?proto.apollo.perception.BBox2D|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setBbox2d = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearBbox2d = function() {
  return this.setBbox2d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasBbox2d = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional SubType sub_type = 19;
 * @return {!proto.apollo.perception.PerceptionObstacle.SubType}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getSubType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.SubType} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setSubType = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearSubType = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasSubType = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * repeated SensorMeasurement measurements = 20;
 * @return {!Array<!proto.apollo.perception.SensorMeasurement>}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getMeasurementsList = function() {
  return /** @type{!Array<!proto.apollo.perception.SensorMeasurement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.SensorMeasurement, 20));
};


/**
 * @param {!Array<!proto.apollo.perception.SensorMeasurement>} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setMeasurementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.apollo.perception.SensorMeasurement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.SensorMeasurement}
 */
proto.apollo.perception.PerceptionObstacle.prototype.addMeasurements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.apollo.perception.SensorMeasurement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearMeasurementsList = function() {
  return this.setMeasurementsList([]);
};


/**
 * optional double height_above_ground = 21;
 * @return {number}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getHeightAboveGround = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setHeightAboveGround = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearHeightAboveGround = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasHeightAboveGround = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated double position_covariance = 22;
 * @return {!Array<number>}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getPositionCovarianceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 22));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setPositionCovarianceList = function(value) {
  return jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.addPositionCovariance = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearPositionCovarianceList = function() {
  return this.setPositionCovarianceList([]);
};


/**
 * repeated double velocity_covariance = 23;
 * @return {!Array<number>}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getVelocityCovarianceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 23));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setVelocityCovarianceList = function(value) {
  return jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.addVelocityCovariance = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearVelocityCovarianceList = function() {
  return this.setVelocityCovarianceList([]);
};


/**
 * repeated double acceleration_covariance = 24;
 * @return {!Array<number>}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getAccelerationCovarianceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 24));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setAccelerationCovarianceList = function(value) {
  return jspb.Message.setField(this, 24, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.addAccelerationCovariance = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 24, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearAccelerationCovarianceList = function() {
  return this.setAccelerationCovarianceList([]);
};


/**
 * optional LightStatus light_status = 25;
 * @return {?proto.apollo.perception.LightStatus}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getLightStatus = function() {
  return /** @type{?proto.apollo.perception.LightStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.LightStatus, 25));
};


/**
 * @param {?proto.apollo.perception.LightStatus|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setLightStatus = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearLightStatus = function() {
  return this.setLightStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasLightStatus = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional DebugMessage msg = 26;
 * @return {?proto.apollo.perception.DebugMessage}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getMsg = function() {
  return /** @type{?proto.apollo.perception.DebugMessage} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.DebugMessage, 26));
};


/**
 * @param {?proto.apollo.perception.DebugMessage|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearMsg = function() {
  return this.setMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional Source source = 27;
 * @return {!proto.apollo.perception.PerceptionObstacle.Source}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getSource = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Source} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearSource = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasSource = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional V2XInformation v2x_info = 28;
 * @return {?proto.apollo.perception.V2XInformation}
 */
proto.apollo.perception.PerceptionObstacle.prototype.getV2xInfo = function() {
  return /** @type{?proto.apollo.perception.V2XInformation} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.V2XInformation, 28));
};


/**
 * @param {?proto.apollo.perception.V2XInformation|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
*/
proto.apollo.perception.PerceptionObstacle.prototype.setV2xInfo = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacle} returns this
 */
proto.apollo.perception.PerceptionObstacle.prototype.clearV2xInfo = function() {
  return this.setV2xInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacle.prototype.hasV2xInfo = function() {
  return jspb.Message.getField(this, 28) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.LaneMarker.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.LaneMarker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.LaneMarker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.LaneMarker.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    quality: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    modelDegree: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    c0Position: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    c1HeadingAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    c2Curvature: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    c3CurvatureDerivative: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    viewRange: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    longitudeStart: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    longitudeEnd: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneMarker as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.LaneMarker.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneType;

  /** @type {?|undefined} */
  this.quality;

  /** @type {?|undefined} */
  this.modelDegree;

  /** @type {?|undefined} */
  this.c0Position;

  /** @type {?|undefined} */
  this.c1HeadingAngle;

  /** @type {?|undefined} */
  this.c2Curvature;

  /** @type {?|undefined} */
  this.c3CurvatureDerivative;

  /** @type {?|undefined} */
  this.viewRange;

  /** @type {?|undefined} */
  this.longitudeStart;

  /** @type {?|undefined} */
  this.longitudeEnd;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.LaneMarker.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.LaneMarker}
 */
proto.apollo.perception.LaneMarker.fromObject = function(obj) {
  var msg = new proto.apollo.perception.LaneMarker();
  obj.laneType != null && jspb.Message.setField(msg, 1, obj.laneType);
  obj.quality != null && jspb.Message.setField(msg, 2, obj.quality);
  obj.modelDegree != null && jspb.Message.setField(msg, 3, obj.modelDegree);
  obj.c0Position != null && jspb.Message.setField(msg, 4, obj.c0Position);
  obj.c1HeadingAngle != null && jspb.Message.setField(msg, 5, obj.c1HeadingAngle);
  obj.c2Curvature != null && jspb.Message.setField(msg, 6, obj.c2Curvature);
  obj.c3CurvatureDerivative != null && jspb.Message.setField(msg, 7, obj.c3CurvatureDerivative);
  obj.viewRange != null && jspb.Message.setField(msg, 8, obj.viewRange);
  obj.longitudeStart != null && jspb.Message.setField(msg, 9, obj.longitudeStart);
  obj.longitudeEnd != null && jspb.Message.setField(msg, 10, obj.longitudeEnd);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.LaneMarker}
 */
proto.apollo.perception.LaneMarker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.LaneMarker;
  return proto.apollo.perception.LaneMarker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.LaneMarker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.LaneMarker}
 */
proto.apollo.perception.LaneMarker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.LaneBoundaryType.Type} */ (reader.readEnum());
      msg.setLaneType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuality(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModelDegree(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC0Position(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC1HeadingAngle(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC2Curvature(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setC3CurvatureDerivative(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setViewRange(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeStart(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.LaneMarker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.LaneMarker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.LaneMarker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.LaneMarker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.LaneBoundaryType.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
 * @return {!proto.apollo.hdmap.LaneBoundaryType.Type}
 */
proto.apollo.perception.LaneMarker.prototype.getLaneType = function() {
  return /** @type {!proto.apollo.hdmap.LaneBoundaryType.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.hdmap.LaneBoundaryType.Type} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setLaneType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearLaneType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasLaneType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double quality = 2;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setQuality = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearQuality = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 model_degree = 3;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getModelDegree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setModelDegree = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearModelDegree = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasModelDegree = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double c0_position = 4;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getC0Position = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setC0Position = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearC0Position = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasC0Position = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double c1_heading_angle = 5;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getC1HeadingAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setC1HeadingAngle = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearC1HeadingAngle = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasC1HeadingAngle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double c2_curvature = 6;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getC2Curvature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setC2Curvature = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearC2Curvature = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasC2Curvature = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double c3_curvature_derivative = 7;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getC3CurvatureDerivative = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setC3CurvatureDerivative = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearC3CurvatureDerivative = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasC3CurvatureDerivative = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double view_range = 8;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getViewRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setViewRange = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearViewRange = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasViewRange = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double longitude_start = 9;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getLongitudeStart = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setLongitudeStart = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearLongitudeStart = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasLongitudeStart = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double longitude_end = 10;
 * @return {number}
 */
proto.apollo.perception.LaneMarker.prototype.getLongitudeEnd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.setLongitudeEnd = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.LaneMarker} returns this
 */
proto.apollo.perception.LaneMarker.prototype.clearLongitudeEnd = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarker.prototype.hasLongitudeEnd = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.LaneMarkers.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.LaneMarkers.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.LaneMarkers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.LaneMarkers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.LaneMarkers.toObject = function(includeInstance, msg) {
  var f, obj = {
    leftLaneMarker: (f = msg.getLeftLaneMarker()) && proto.apollo.perception.LaneMarker.toObject(includeInstance, f),
    rightLaneMarker: (f = msg.getRightLaneMarker()) && proto.apollo.perception.LaneMarker.toObject(includeInstance, f),
    nextLeftLaneMarkerList: jspb.Message.toObjectList(msg.getNextLeftLaneMarkerList(),
    proto.apollo.perception.LaneMarker.toObject, includeInstance),
    nextRightLaneMarkerList: jspb.Message.toObjectList(msg.getNextRightLaneMarkerList(),
    proto.apollo.perception.LaneMarker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneMarkers as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.LaneMarkers.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.leftLaneMarker;

  /** @type {?|undefined} */
  this.rightLaneMarker;

  /** @type {?|undefined} */
  this.nextLeftLaneMarkerList;

  /** @type {?|undefined} */
  this.nextRightLaneMarkerList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.LaneMarkers.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.LaneMarkers}
 */
proto.apollo.perception.LaneMarkers.fromObject = function(obj) {
  var msg = new proto.apollo.perception.LaneMarkers();
  obj.leftLaneMarker && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.LaneMarker.fromObject(obj.leftLaneMarker));
  obj.rightLaneMarker && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.LaneMarker.fromObject(obj.rightLaneMarker));
  obj.nextLeftLaneMarkerList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.nextLeftLaneMarkerList.map(
          proto.apollo.perception.LaneMarker.fromObject));
  obj.nextRightLaneMarkerList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.nextRightLaneMarkerList.map(
          proto.apollo.perception.LaneMarker.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.LaneMarkers}
 */
proto.apollo.perception.LaneMarkers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.LaneMarkers;
  return proto.apollo.perception.LaneMarkers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.LaneMarkers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.LaneMarkers}
 */
proto.apollo.perception.LaneMarkers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.LaneMarker;
      reader.readMessage(value,proto.apollo.perception.LaneMarker.deserializeBinaryFromReader);
      msg.setLeftLaneMarker(value);
      break;
    case 2:
      var value = new proto.apollo.perception.LaneMarker;
      reader.readMessage(value,proto.apollo.perception.LaneMarker.deserializeBinaryFromReader);
      msg.setRightLaneMarker(value);
      break;
    case 3:
      var value = new proto.apollo.perception.LaneMarker;
      reader.readMessage(value,proto.apollo.perception.LaneMarker.deserializeBinaryFromReader);
      msg.addNextLeftLaneMarker(value);
      break;
    case 4:
      var value = new proto.apollo.perception.LaneMarker;
      reader.readMessage(value,proto.apollo.perception.LaneMarker.deserializeBinaryFromReader);
      msg.addNextRightLaneMarker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.LaneMarkers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.LaneMarkers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.LaneMarkers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.LaneMarkers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeftLaneMarker();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.LaneMarker.serializeBinaryToWriter
    );
  }
  f = message.getRightLaneMarker();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.LaneMarker.serializeBinaryToWriter
    );
  }
  f = message.getNextLeftLaneMarkerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.perception.LaneMarker.serializeBinaryToWriter
    );
  }
  f = message.getNextRightLaneMarkerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.perception.LaneMarker.serializeBinaryToWriter
    );
  }
};


/**
 * optional LaneMarker left_lane_marker = 1;
 * @return {?proto.apollo.perception.LaneMarker}
 */
proto.apollo.perception.LaneMarkers.prototype.getLeftLaneMarker = function() {
  return /** @type{?proto.apollo.perception.LaneMarker} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.LaneMarker, 1));
};


/**
 * @param {?proto.apollo.perception.LaneMarker|undefined} value
 * @return {!proto.apollo.perception.LaneMarkers} returns this
*/
proto.apollo.perception.LaneMarkers.prototype.setLeftLaneMarker = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.LaneMarkers} returns this
 */
proto.apollo.perception.LaneMarkers.prototype.clearLeftLaneMarker = function() {
  return this.setLeftLaneMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarkers.prototype.hasLeftLaneMarker = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LaneMarker right_lane_marker = 2;
 * @return {?proto.apollo.perception.LaneMarker}
 */
proto.apollo.perception.LaneMarkers.prototype.getRightLaneMarker = function() {
  return /** @type{?proto.apollo.perception.LaneMarker} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.LaneMarker, 2));
};


/**
 * @param {?proto.apollo.perception.LaneMarker|undefined} value
 * @return {!proto.apollo.perception.LaneMarkers} returns this
*/
proto.apollo.perception.LaneMarkers.prototype.setRightLaneMarker = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.LaneMarkers} returns this
 */
proto.apollo.perception.LaneMarkers.prototype.clearRightLaneMarker = function() {
  return this.setRightLaneMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.LaneMarkers.prototype.hasRightLaneMarker = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated LaneMarker next_left_lane_marker = 3;
 * @return {!Array<!proto.apollo.perception.LaneMarker>}
 */
proto.apollo.perception.LaneMarkers.prototype.getNextLeftLaneMarkerList = function() {
  return /** @type{!Array<!proto.apollo.perception.LaneMarker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.LaneMarker, 3));
};


/**
 * @param {!Array<!proto.apollo.perception.LaneMarker>} value
 * @return {!proto.apollo.perception.LaneMarkers} returns this
*/
proto.apollo.perception.LaneMarkers.prototype.setNextLeftLaneMarkerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.perception.LaneMarker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.LaneMarker}
 */
proto.apollo.perception.LaneMarkers.prototype.addNextLeftLaneMarker = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.perception.LaneMarker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.LaneMarkers} returns this
 */
proto.apollo.perception.LaneMarkers.prototype.clearNextLeftLaneMarkerList = function() {
  return this.setNextLeftLaneMarkerList([]);
};


/**
 * repeated LaneMarker next_right_lane_marker = 4;
 * @return {!Array<!proto.apollo.perception.LaneMarker>}
 */
proto.apollo.perception.LaneMarkers.prototype.getNextRightLaneMarkerList = function() {
  return /** @type{!Array<!proto.apollo.perception.LaneMarker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.LaneMarker, 4));
};


/**
 * @param {!Array<!proto.apollo.perception.LaneMarker>} value
 * @return {!proto.apollo.perception.LaneMarkers} returns this
*/
proto.apollo.perception.LaneMarkers.prototype.setNextRightLaneMarkerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.perception.LaneMarker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.LaneMarker}
 */
proto.apollo.perception.LaneMarkers.prototype.addNextRightLaneMarker = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.perception.LaneMarker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.LaneMarkers} returns this
 */
proto.apollo.perception.LaneMarkers.prototype.clearNextRightLaneMarkerList = function() {
  return this.setNextRightLaneMarkerList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.CIPVInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.CIPVInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.CIPVInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.CIPVInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.CIPVInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    cipvId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    potentialCipvIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CIPVInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.CIPVInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cipvId;

  /** @type {?|undefined} */
  this.potentialCipvIdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.CIPVInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.CIPVInfo}
 */
proto.apollo.perception.CIPVInfo.fromObject = function(obj) {
  var msg = new proto.apollo.perception.CIPVInfo();
  obj.cipvId != null && jspb.Message.setField(msg, 1, obj.cipvId);
  obj.potentialCipvIdList != null && jspb.Message.setField(msg, 2, obj.potentialCipvIdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.CIPVInfo}
 */
proto.apollo.perception.CIPVInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.CIPVInfo;
  return proto.apollo.perception.CIPVInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.CIPVInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.CIPVInfo}
 */
proto.apollo.perception.CIPVInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCipvId(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPotentialCipvId(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.CIPVInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.CIPVInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.CIPVInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.CIPVInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPotentialCipvIdList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 cipv_id = 1;
 * @return {number}
 */
proto.apollo.perception.CIPVInfo.prototype.getCipvId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.CIPVInfo} returns this
 */
proto.apollo.perception.CIPVInfo.prototype.setCipvId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.CIPVInfo} returns this
 */
proto.apollo.perception.CIPVInfo.prototype.clearCipvId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.CIPVInfo.prototype.hasCipvId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 potential_cipv_id = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.CIPVInfo.prototype.getPotentialCipvIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.CIPVInfo} returns this
 */
proto.apollo.perception.CIPVInfo.prototype.setPotentialCipvIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.CIPVInfo} returns this
 */
proto.apollo.perception.CIPVInfo.prototype.addPotentialCipvId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.CIPVInfo} returns this
 */
proto.apollo.perception.CIPVInfo.prototype.clearPotentialCipvIdList = function() {
  return this.setPotentialCipvIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.PerceptionObstacles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.PerceptionObstacles.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.PerceptionObstacles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.PerceptionObstacles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.PerceptionObstacles.toObject = function(includeInstance, msg) {
  var f, obj = {
    perceptionObstacleList: jspb.Message.toObjectList(msg.getPerceptionObstacleList(),
    proto.apollo.perception.PerceptionObstacle.toObject, includeInstance),
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    errorCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    laneMarker: (f = msg.getLaneMarker()) && proto.apollo.perception.LaneMarkers.toObject(includeInstance, f),
    cipvInfo: (f = msg.getCipvInfo()) && proto.apollo.perception.CIPVInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PerceptionObstacles as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.PerceptionObstacles.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.perceptionObstacleList;

  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.errorCode;

  /** @type {?|undefined} */
  this.laneMarker;

  /** @type {?|undefined} */
  this.cipvInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.PerceptionObstacles.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.PerceptionObstacles}
 */
proto.apollo.perception.PerceptionObstacles.fromObject = function(obj) {
  var msg = new proto.apollo.perception.PerceptionObstacles();
  obj.perceptionObstacleList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.perceptionObstacleList.map(
          proto.apollo.perception.PerceptionObstacle.fromObject));
  obj.header && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.errorCode != null && jspb.Message.setField(msg, 3, obj.errorCode);
  obj.laneMarker && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.LaneMarkers.fromObject(obj.laneMarker));
  obj.cipvInfo && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.perception.CIPVInfo.fromObject(obj.cipvInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.PerceptionObstacles}
 */
proto.apollo.perception.PerceptionObstacles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.PerceptionObstacles;
  return proto.apollo.perception.PerceptionObstacles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.PerceptionObstacles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.PerceptionObstacles}
 */
proto.apollo.perception.PerceptionObstacles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.PerceptionObstacle;
      reader.readMessage(value,proto.apollo.perception.PerceptionObstacle.deserializeBinaryFromReader);
      msg.addPerceptionObstacle(value);
      break;
    case 2:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.common.ErrorCode} */ (reader.readEnum());
      msg.setErrorCode(value);
      break;
    case 4:
      var value = new proto.apollo.perception.LaneMarkers;
      reader.readMessage(value,proto.apollo.perception.LaneMarkers.deserializeBinaryFromReader);
      msg.setLaneMarker(value);
      break;
    case 5:
      var value = new proto.apollo.perception.CIPVInfo;
      reader.readMessage(value,proto.apollo.perception.CIPVInfo.deserializeBinaryFromReader);
      msg.setCipvInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.PerceptionObstacles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.PerceptionObstacles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.PerceptionObstacles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.PerceptionObstacles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPerceptionObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.PerceptionObstacle.serializeBinaryToWriter
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.common.ErrorCode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLaneMarker();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.LaneMarkers.serializeBinaryToWriter
    );
  }
  f = message.getCipvInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.perception.CIPVInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PerceptionObstacle perception_obstacle = 1;
 * @return {!Array<!proto.apollo.perception.PerceptionObstacle>}
 */
proto.apollo.perception.PerceptionObstacles.prototype.getPerceptionObstacleList = function() {
  return /** @type{!Array<!proto.apollo.perception.PerceptionObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.PerceptionObstacle, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.PerceptionObstacle>} value
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
*/
proto.apollo.perception.PerceptionObstacles.prototype.setPerceptionObstacleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.PerceptionObstacle}
 */
proto.apollo.perception.PerceptionObstacles.prototype.addPerceptionObstacle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.PerceptionObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
 */
proto.apollo.perception.PerceptionObstacles.prototype.clearPerceptionObstacleList = function() {
  return this.setPerceptionObstacleList([]);
};


/**
 * optional apollo.common.Header header = 2;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.perception.PerceptionObstacles.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 2));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
*/
proto.apollo.perception.PerceptionObstacles.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
 */
proto.apollo.perception.PerceptionObstacles.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacles.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.ErrorCode error_code = 3;
 * @return {!proto.apollo.common.ErrorCode}
 */
proto.apollo.perception.PerceptionObstacles.prototype.getErrorCode = function() {
  return /** @type {!proto.apollo.common.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.common.ErrorCode} value
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
 */
proto.apollo.perception.PerceptionObstacles.prototype.setErrorCode = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
 */
proto.apollo.perception.PerceptionObstacles.prototype.clearErrorCode = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacles.prototype.hasErrorCode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LaneMarkers lane_marker = 4;
 * @return {?proto.apollo.perception.LaneMarkers}
 */
proto.apollo.perception.PerceptionObstacles.prototype.getLaneMarker = function() {
  return /** @type{?proto.apollo.perception.LaneMarkers} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.LaneMarkers, 4));
};


/**
 * @param {?proto.apollo.perception.LaneMarkers|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
*/
proto.apollo.perception.PerceptionObstacles.prototype.setLaneMarker = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
 */
proto.apollo.perception.PerceptionObstacles.prototype.clearLaneMarker = function() {
  return this.setLaneMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacles.prototype.hasLaneMarker = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CIPVInfo cipv_info = 5;
 * @return {?proto.apollo.perception.CIPVInfo}
 */
proto.apollo.perception.PerceptionObstacles.prototype.getCipvInfo = function() {
  return /** @type{?proto.apollo.perception.CIPVInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.CIPVInfo, 5));
};


/**
 * @param {?proto.apollo.perception.CIPVInfo|undefined} value
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
*/
proto.apollo.perception.PerceptionObstacles.prototype.setCipvInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.PerceptionObstacles} returns this
 */
proto.apollo.perception.PerceptionObstacles.prototype.clearCipvInfo = function() {
  return this.setCipvInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.PerceptionObstacles.prototype.hasCipvInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.apollo.perception);
