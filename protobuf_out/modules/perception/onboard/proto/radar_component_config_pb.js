// source: modules/perception/onboard/proto/radar_component_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.onboard.RadarComponentConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.onboard.RadarComponentConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.onboard.RadarComponentConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.onboard.RadarComponentConfig.displayName = 'proto.apollo.perception.onboard.RadarComponentConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.onboard.RadarComponentConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.onboard.RadarComponentConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.RadarComponentConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    radarName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    tfChildFrameId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    radarForwardDistance: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    radarPreprocessorMethod: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    radarPerceptionMethod: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    radarPipelineName: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    odometryChannelName: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    outputChannelName: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RadarComponentConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.onboard.RadarComponentConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.radarName;

  /** @type {?|undefined} */
  this.tfChildFrameId;

  /** @type {?|undefined} */
  this.radarForwardDistance;

  /** @type {?|undefined} */
  this.radarPreprocessorMethod;

  /** @type {?|undefined} */
  this.radarPerceptionMethod;

  /** @type {?|undefined} */
  this.radarPipelineName;

  /** @type {?|undefined} */
  this.odometryChannelName;

  /** @type {?|undefined} */
  this.outputChannelName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.onboard.RadarComponentConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig}
 */
proto.apollo.perception.onboard.RadarComponentConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.onboard.RadarComponentConfig();
  obj.radarName != null && jspb.Message.setField(msg, 1, obj.radarName);
  obj.tfChildFrameId != null && jspb.Message.setField(msg, 2, obj.tfChildFrameId);
  obj.radarForwardDistance != null && jspb.Message.setField(msg, 3, obj.radarForwardDistance);
  obj.radarPreprocessorMethod != null && jspb.Message.setField(msg, 4, obj.radarPreprocessorMethod);
  obj.radarPerceptionMethod != null && jspb.Message.setField(msg, 5, obj.radarPerceptionMethod);
  obj.radarPipelineName != null && jspb.Message.setField(msg, 6, obj.radarPipelineName);
  obj.odometryChannelName != null && jspb.Message.setField(msg, 7, obj.odometryChannelName);
  obj.outputChannelName != null && jspb.Message.setField(msg, 8, obj.outputChannelName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig}
 */
proto.apollo.perception.onboard.RadarComponentConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.onboard.RadarComponentConfig;
  return proto.apollo.perception.onboard.RadarComponentConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.onboard.RadarComponentConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig}
 */
proto.apollo.perception.onboard.RadarComponentConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRadarName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTfChildFrameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadarForwardDistance(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRadarPreprocessorMethod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRadarPerceptionMethod(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRadarPipelineName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOdometryChannelName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.onboard.RadarComponentConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.onboard.RadarComponentConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.RadarComponentConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string radar_name = 1;
 * @return {string}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getRadarName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setRadarName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearRadarName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasRadarName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tf_child_frame_id = 2;
 * @return {string}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getTfChildFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setTfChildFrameId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearTfChildFrameId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasTfChildFrameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double radar_forward_distance = 3;
 * @return {number}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getRadarForwardDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setRadarForwardDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearRadarForwardDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasRadarForwardDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string radar_preprocessor_method = 4;
 * @return {string}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getRadarPreprocessorMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setRadarPreprocessorMethod = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearRadarPreprocessorMethod = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasRadarPreprocessorMethod = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string radar_perception_method = 5;
 * @return {string}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getRadarPerceptionMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setRadarPerceptionMethod = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearRadarPerceptionMethod = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasRadarPerceptionMethod = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string radar_pipeline_name = 6;
 * @return {string}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getRadarPipelineName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setRadarPipelineName = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearRadarPipelineName = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasRadarPipelineName = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string odometry_channel_name = 7;
 * @return {string}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getOdometryChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setOdometryChannelName = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearOdometryChannelName = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasOdometryChannelName = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string output_channel_name = 8;
 * @return {string}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.getOutputChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.setOutputChannelName = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.RadarComponentConfig} returns this
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.clearOutputChannelName = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.RadarComponentConfig.prototype.hasOutputChannelName = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.apollo.perception.onboard);
