// source: modules/prediction/proto/vector_net.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.prediction.CarPosition', null, global);
goog.exportSymbol('proto.apollo.prediction.Polyline', null, global);
goog.exportSymbol('proto.apollo.prediction.VNVector', null, global);
goog.exportSymbol('proto.apollo.prediction.VectorNetFeature', null, global);
goog.exportSymbol('proto.apollo.prediction.WorldCoord', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.VNVector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.VNVector.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.VNVector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.VNVector.displayName = 'proto.apollo.prediction.VNVector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.Polyline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.Polyline.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.Polyline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.Polyline.displayName = 'proto.apollo.prediction.Polyline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.CarPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.CarPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.CarPosition.displayName = 'proto.apollo.prediction.CarPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.VectorNetFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.VectorNetFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.VectorNetFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.VectorNetFeature.displayName = 'proto.apollo.prediction.VectorNetFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.WorldCoord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.WorldCoord.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.WorldCoord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.WorldCoord.displayName = 'proto.apollo.prediction.WorldCoord';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.VNVector.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.VNVector.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.VNVector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.VNVector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.VNVector.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VNVector as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.VNVector.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.elementList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.VNVector.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.VNVector}
 */
proto.apollo.prediction.VNVector.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.VNVector();
  obj.elementList != null && jspb.Message.setField(msg, 1, obj.elementList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.VNVector}
 */
proto.apollo.prediction.VNVector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.VNVector;
  return proto.apollo.prediction.VNVector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.VNVector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.VNVector}
 */
proto.apollo.prediction.VNVector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addElement(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.VNVector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.VNVector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.VNVector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.VNVector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double element = 1;
 * @return {!Array<number>}
 */
proto.apollo.prediction.VNVector.prototype.getElementList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.VNVector} returns this
 */
proto.apollo.prediction.VNVector.prototype.setElementList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.VNVector} returns this
 */
proto.apollo.prediction.VNVector.prototype.addElement = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.VNVector} returns this
 */
proto.apollo.prediction.VNVector.prototype.clearElementList = function() {
  return this.setElementList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.Polyline.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.Polyline.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.Polyline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.Polyline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Polyline.toObject = function(includeInstance, msg) {
  var f, obj = {
    vectorList: jspb.Message.toObjectList(msg.getVectorList(),
    proto.apollo.prediction.VNVector.toObject, includeInstance),
    pIdX: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    pIdY: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Polyline as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.Polyline.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.vectorList;

  /** @type {?|undefined} */
  this.pIdX;

  /** @type {?|undefined} */
  this.pIdY;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.Polyline.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.Polyline}
 */
proto.apollo.prediction.Polyline.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.Polyline();
  obj.vectorList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.vectorList.map(
          proto.apollo.prediction.VNVector.fromObject));
  obj.pIdX != null && jspb.Message.setField(msg, 2, obj.pIdX);
  obj.pIdY != null && jspb.Message.setField(msg, 3, obj.pIdY);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.Polyline}
 */
proto.apollo.prediction.Polyline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.Polyline;
  return proto.apollo.prediction.Polyline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.Polyline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.Polyline}
 */
proto.apollo.prediction.Polyline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.VNVector;
      reader.readMessage(value,proto.apollo.prediction.VNVector.deserializeBinaryFromReader);
      msg.addVector(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPIdX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPIdY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.Polyline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.Polyline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.Polyline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Polyline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVectorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.VNVector.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * repeated VNVector vector = 1;
 * @return {!Array<!proto.apollo.prediction.VNVector>}
 */
proto.apollo.prediction.Polyline.prototype.getVectorList = function() {
  return /** @type{!Array<!proto.apollo.prediction.VNVector>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.VNVector, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.VNVector>} value
 * @return {!proto.apollo.prediction.Polyline} returns this
*/
proto.apollo.prediction.Polyline.prototype.setVectorList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.VNVector=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.VNVector}
 */
proto.apollo.prediction.Polyline.prototype.addVector = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.VNVector, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Polyline} returns this
 */
proto.apollo.prediction.Polyline.prototype.clearVectorList = function() {
  return this.setVectorList([]);
};


/**
 * optional double p_id_x = 2;
 * @return {number}
 */
proto.apollo.prediction.Polyline.prototype.getPIdX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Polyline} returns this
 */
proto.apollo.prediction.Polyline.prototype.setPIdX = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Polyline} returns this
 */
proto.apollo.prediction.Polyline.prototype.clearPIdX = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Polyline.prototype.hasPIdX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double p_id_y = 3;
 * @return {number}
 */
proto.apollo.prediction.Polyline.prototype.getPIdY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Polyline} returns this
 */
proto.apollo.prediction.Polyline.prototype.setPIdY = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Polyline} returns this
 */
proto.apollo.prediction.Polyline.prototype.clearPIdY = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Polyline.prototype.hasPIdY = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.CarPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.CarPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.CarPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.CarPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    phi: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CarPosition as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.CarPosition.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.phi;

  /** @type {?|undefined} */
  this.id;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.CarPosition.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.CarPosition}
 */
proto.apollo.prediction.CarPosition.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.CarPosition();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.phi != null && jspb.Message.setField(msg, 3, obj.phi);
  obj.id != null && jspb.Message.setField(msg, 4, obj.id);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.CarPosition}
 */
proto.apollo.prediction.CarPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.CarPosition;
  return proto.apollo.prediction.CarPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.CarPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.CarPosition}
 */
proto.apollo.prediction.CarPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPhi(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.CarPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.CarPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.CarPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.CarPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.apollo.prediction.CarPosition.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.CarPosition.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.apollo.prediction.CarPosition.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.CarPosition.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double phi = 3;
 * @return {number}
 */
proto.apollo.prediction.CarPosition.prototype.getPhi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.setPhi = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.clearPhi = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.CarPosition.prototype.hasPhi = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.apollo.prediction.CarPosition.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.setId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.CarPosition} returns this
 */
proto.apollo.prediction.CarPosition.prototype.clearId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.CarPosition.prototype.hasId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.VectorNetFeature.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.VectorNetFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.VectorNetFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.VectorNetFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.VectorNetFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    carPosition: (f = msg.getCarPosition()) && proto.apollo.prediction.CarPosition.toObject(includeInstance, f),
    polylineList: jspb.Message.toObjectList(msg.getPolylineList(),
    proto.apollo.prediction.Polyline.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VectorNetFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.VectorNetFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.carPosition;

  /** @type {?|undefined} */
  this.polylineList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.VectorNetFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.VectorNetFeature}
 */
proto.apollo.prediction.VectorNetFeature.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.VectorNetFeature();
  obj.carPosition && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.prediction.CarPosition.fromObject(obj.carPosition));
  obj.polylineList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.polylineList.map(
          proto.apollo.prediction.Polyline.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.VectorNetFeature}
 */
proto.apollo.prediction.VectorNetFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.VectorNetFeature;
  return proto.apollo.prediction.VectorNetFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.VectorNetFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.VectorNetFeature}
 */
proto.apollo.prediction.VectorNetFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.CarPosition;
      reader.readMessage(value,proto.apollo.prediction.CarPosition.deserializeBinaryFromReader);
      msg.setCarPosition(value);
      break;
    case 2:
      var value = new proto.apollo.prediction.Polyline;
      reader.readMessage(value,proto.apollo.prediction.Polyline.deserializeBinaryFromReader);
      msg.addPolyline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.VectorNetFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.VectorNetFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.VectorNetFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.VectorNetFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCarPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.prediction.CarPosition.serializeBinaryToWriter
    );
  }
  f = message.getPolylineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.prediction.Polyline.serializeBinaryToWriter
    );
  }
};


/**
 * optional CarPosition car_position = 1;
 * @return {?proto.apollo.prediction.CarPosition}
 */
proto.apollo.prediction.VectorNetFeature.prototype.getCarPosition = function() {
  return /** @type{?proto.apollo.prediction.CarPosition} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.CarPosition, 1));
};


/**
 * @param {?proto.apollo.prediction.CarPosition|undefined} value
 * @return {!proto.apollo.prediction.VectorNetFeature} returns this
*/
proto.apollo.prediction.VectorNetFeature.prototype.setCarPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.VectorNetFeature} returns this
 */
proto.apollo.prediction.VectorNetFeature.prototype.clearCarPosition = function() {
  return this.setCarPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.VectorNetFeature.prototype.hasCarPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Polyline polyline = 2;
 * @return {!Array<!proto.apollo.prediction.Polyline>}
 */
proto.apollo.prediction.VectorNetFeature.prototype.getPolylineList = function() {
  return /** @type{!Array<!proto.apollo.prediction.Polyline>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.Polyline, 2));
};


/**
 * @param {!Array<!proto.apollo.prediction.Polyline>} value
 * @return {!proto.apollo.prediction.VectorNetFeature} returns this
*/
proto.apollo.prediction.VectorNetFeature.prototype.setPolylineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.prediction.Polyline=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.Polyline}
 */
proto.apollo.prediction.VectorNetFeature.prototype.addPolyline = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.prediction.Polyline, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.VectorNetFeature} returns this
 */
proto.apollo.prediction.VectorNetFeature.prototype.clearPolylineList = function() {
  return this.setPolylineList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.WorldCoord.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.WorldCoord.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.WorldCoord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.WorldCoord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.WorldCoord.toObject = function(includeInstance, msg) {
  var f, obj = {
    poseList: jspb.Message.toObjectList(msg.getPoseList(),
    proto.apollo.prediction.CarPosition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of WorldCoord as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.WorldCoord.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.poseList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.WorldCoord.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.WorldCoord}
 */
proto.apollo.prediction.WorldCoord.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.WorldCoord();
  obj.poseList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.poseList.map(
          proto.apollo.prediction.CarPosition.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.WorldCoord}
 */
proto.apollo.prediction.WorldCoord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.WorldCoord;
  return proto.apollo.prediction.WorldCoord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.WorldCoord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.WorldCoord}
 */
proto.apollo.prediction.WorldCoord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.CarPosition;
      reader.readMessage(value,proto.apollo.prediction.CarPosition.deserializeBinaryFromReader);
      msg.addPose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.WorldCoord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.WorldCoord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.WorldCoord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.WorldCoord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.CarPosition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CarPosition pose = 1;
 * @return {!Array<!proto.apollo.prediction.CarPosition>}
 */
proto.apollo.prediction.WorldCoord.prototype.getPoseList = function() {
  return /** @type{!Array<!proto.apollo.prediction.CarPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.CarPosition, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.CarPosition>} value
 * @return {!proto.apollo.prediction.WorldCoord} returns this
*/
proto.apollo.prediction.WorldCoord.prototype.setPoseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.CarPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.CarPosition}
 */
proto.apollo.prediction.WorldCoord.prototype.addPose = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.CarPosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.WorldCoord} returns this
 */
proto.apollo.prediction.WorldCoord.prototype.clearPoseList = function() {
  return this.setPoseList([]);
};


goog.object.extend(exports, proto.apollo.prediction);
