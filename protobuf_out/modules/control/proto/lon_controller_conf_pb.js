// source: modules/control/proto/lon_controller_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_control_proto_calibration_table_pb = require('../../../modules/control/proto/calibration_table_pb.js');
goog.object.extend(proto, modules_control_proto_calibration_table_pb);
var modules_control_proto_leadlag_conf_pb = require('../../../modules/control/proto/leadlag_conf_pb.js');
goog.object.extend(proto, modules_control_proto_leadlag_conf_pb);
var modules_control_proto_pid_conf_pb = require('../../../modules/control/proto/pid_conf_pb.js');
goog.object.extend(proto, modules_control_proto_pid_conf_pb);
goog.exportSymbol('proto.apollo.control.FilterConf', null, global);
goog.exportSymbol('proto.apollo.control.LonControllerConf', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.FilterConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.FilterConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.FilterConf.displayName = 'proto.apollo.control.FilterConf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.LonControllerConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.LonControllerConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.LonControllerConf.displayName = 'proto.apollo.control.LonControllerConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.FilterConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.FilterConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.FilterConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.FilterConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    cutoffFreq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FilterConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.FilterConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cutoffFreq;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.FilterConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.FilterConf}
 */
proto.apollo.control.FilterConf.fromObject = function(obj) {
  var msg = new proto.apollo.control.FilterConf();
  obj.cutoffFreq != null && jspb.Message.setField(msg, 1, obj.cutoffFreq);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.FilterConf}
 */
proto.apollo.control.FilterConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.FilterConf;
  return proto.apollo.control.FilterConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.FilterConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.FilterConf}
 */
proto.apollo.control.FilterConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCutoffFreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.FilterConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.FilterConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.FilterConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.FilterConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 cutoff_freq = 1;
 * @return {number}
 */
proto.apollo.control.FilterConf.prototype.getCutoffFreq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.FilterConf} returns this
 */
proto.apollo.control.FilterConf.prototype.setCutoffFreq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.FilterConf} returns this
 */
proto.apollo.control.FilterConf.prototype.clearCutoffFreq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.FilterConf.prototype.hasCutoffFreq = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.LonControllerConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.LonControllerConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.LonControllerConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.LonControllerConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    brakeMinimumAction: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    throttleMinimumAction: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    speedControllerInputLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    stationErrorLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    previewWindow: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    standstillAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    stationPidConf: (f = msg.getStationPidConf()) && modules_control_proto_pid_conf_pb.PidConf.toObject(includeInstance, f),
    lowSpeedPidConf: (f = msg.getLowSpeedPidConf()) && modules_control_proto_pid_conf_pb.PidConf.toObject(includeInstance, f),
    highSpeedPidConf: (f = msg.getHighSpeedPidConf()) && modules_control_proto_pid_conf_pb.PidConf.toObject(includeInstance, f),
    switchSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    reverseStationPidConf: (f = msg.getReverseStationPidConf()) && modules_control_proto_pid_conf_pb.PidConf.toObject(includeInstance, f),
    reverseSpeedPidConf: (f = msg.getReverseSpeedPidConf()) && modules_control_proto_pid_conf_pb.PidConf.toObject(includeInstance, f),
    pitchAngleFilterConf: (f = msg.getPitchAngleFilterConf()) && proto.apollo.control.FilterConf.toObject(includeInstance, f),
    reverseStationLeadlagConf: (f = msg.getReverseStationLeadlagConf()) && modules_control_proto_leadlag_conf_pb.LeadlagConf.toObject(includeInstance, f),
    reverseSpeedLeadlagConf: (f = msg.getReverseSpeedLeadlagConf()) && modules_control_proto_leadlag_conf_pb.LeadlagConf.toObject(includeInstance, f),
    calibrationTable: (f = msg.getCalibrationTable()) && modules_control_proto_calibration_table_pb.ControlCalibrationTable.toObject(includeInstance, f),
    enableReverseLeadlagCompensation: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    switchSpeedWindow: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LonControllerConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.LonControllerConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ts;

  /** @type {?|undefined} */
  this.brakeMinimumAction;

  /** @type {?|undefined} */
  this.throttleMinimumAction;

  /** @type {?|undefined} */
  this.speedControllerInputLimit;

  /** @type {?|undefined} */
  this.stationErrorLimit;

  /** @type {?|undefined} */
  this.previewWindow;

  /** @type {?|undefined} */
  this.standstillAcceleration;

  /** @type {?|undefined} */
  this.stationPidConf;

  /** @type {?|undefined} */
  this.lowSpeedPidConf;

  /** @type {?|undefined} */
  this.highSpeedPidConf;

  /** @type {?|undefined} */
  this.switchSpeed;

  /** @type {?|undefined} */
  this.reverseStationPidConf;

  /** @type {?|undefined} */
  this.reverseSpeedPidConf;

  /** @type {?|undefined} */
  this.pitchAngleFilterConf;

  /** @type {?|undefined} */
  this.reverseStationLeadlagConf;

  /** @type {?|undefined} */
  this.reverseSpeedLeadlagConf;

  /** @type {?|undefined} */
  this.calibrationTable;

  /** @type {?|undefined} */
  this.enableReverseLeadlagCompensation;

  /** @type {?|undefined} */
  this.switchSpeedWindow;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.LonControllerConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.LonControllerConf}
 */
proto.apollo.control.LonControllerConf.fromObject = function(obj) {
  var msg = new proto.apollo.control.LonControllerConf();
  obj.ts != null && jspb.Message.setField(msg, 1, obj.ts);
  obj.brakeMinimumAction != null && jspb.Message.setField(msg, 2, obj.brakeMinimumAction);
  obj.throttleMinimumAction != null && jspb.Message.setField(msg, 3, obj.throttleMinimumAction);
  obj.speedControllerInputLimit != null && jspb.Message.setField(msg, 4, obj.speedControllerInputLimit);
  obj.stationErrorLimit != null && jspb.Message.setField(msg, 5, obj.stationErrorLimit);
  obj.previewWindow != null && jspb.Message.setField(msg, 6, obj.previewWindow);
  obj.standstillAcceleration != null && jspb.Message.setField(msg, 7, obj.standstillAcceleration);
  obj.stationPidConf && jspb.Message.setWrapperField(
      msg, 8, modules_control_proto_pid_conf_pb.PidConf.fromObject(obj.stationPidConf));
  obj.lowSpeedPidConf && jspb.Message.setWrapperField(
      msg, 9, modules_control_proto_pid_conf_pb.PidConf.fromObject(obj.lowSpeedPidConf));
  obj.highSpeedPidConf && jspb.Message.setWrapperField(
      msg, 10, modules_control_proto_pid_conf_pb.PidConf.fromObject(obj.highSpeedPidConf));
  obj.switchSpeed != null && jspb.Message.setField(msg, 11, obj.switchSpeed);
  obj.reverseStationPidConf && jspb.Message.setWrapperField(
      msg, 12, modules_control_proto_pid_conf_pb.PidConf.fromObject(obj.reverseStationPidConf));
  obj.reverseSpeedPidConf && jspb.Message.setWrapperField(
      msg, 13, modules_control_proto_pid_conf_pb.PidConf.fromObject(obj.reverseSpeedPidConf));
  obj.pitchAngleFilterConf && jspb.Message.setWrapperField(
      msg, 14, proto.apollo.control.FilterConf.fromObject(obj.pitchAngleFilterConf));
  obj.reverseStationLeadlagConf && jspb.Message.setWrapperField(
      msg, 15, modules_control_proto_leadlag_conf_pb.LeadlagConf.fromObject(obj.reverseStationLeadlagConf));
  obj.reverseSpeedLeadlagConf && jspb.Message.setWrapperField(
      msg, 16, modules_control_proto_leadlag_conf_pb.LeadlagConf.fromObject(obj.reverseSpeedLeadlagConf));
  obj.calibrationTable && jspb.Message.setWrapperField(
      msg, 17, modules_control_proto_calibration_table_pb.ControlCalibrationTable.fromObject(obj.calibrationTable));
  obj.enableReverseLeadlagCompensation != null && jspb.Message.setField(msg, 18, obj.enableReverseLeadlagCompensation);
  obj.switchSpeedWindow != null && jspb.Message.setField(msg, 19, obj.switchSpeedWindow);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.LonControllerConf}
 */
proto.apollo.control.LonControllerConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.LonControllerConf;
  return proto.apollo.control.LonControllerConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.LonControllerConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.LonControllerConf}
 */
proto.apollo.control.LonControllerConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakeMinimumAction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottleMinimumAction(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedControllerInputLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationErrorLimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreviewWindow(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStandstillAcceleration(value);
      break;
    case 8:
      var value = new modules_control_proto_pid_conf_pb.PidConf;
      reader.readMessage(value,modules_control_proto_pid_conf_pb.PidConf.deserializeBinaryFromReader);
      msg.setStationPidConf(value);
      break;
    case 9:
      var value = new modules_control_proto_pid_conf_pb.PidConf;
      reader.readMessage(value,modules_control_proto_pid_conf_pb.PidConf.deserializeBinaryFromReader);
      msg.setLowSpeedPidConf(value);
      break;
    case 10:
      var value = new modules_control_proto_pid_conf_pb.PidConf;
      reader.readMessage(value,modules_control_proto_pid_conf_pb.PidConf.deserializeBinaryFromReader);
      msg.setHighSpeedPidConf(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSwitchSpeed(value);
      break;
    case 12:
      var value = new modules_control_proto_pid_conf_pb.PidConf;
      reader.readMessage(value,modules_control_proto_pid_conf_pb.PidConf.deserializeBinaryFromReader);
      msg.setReverseStationPidConf(value);
      break;
    case 13:
      var value = new modules_control_proto_pid_conf_pb.PidConf;
      reader.readMessage(value,modules_control_proto_pid_conf_pb.PidConf.deserializeBinaryFromReader);
      msg.setReverseSpeedPidConf(value);
      break;
    case 14:
      var value = new proto.apollo.control.FilterConf;
      reader.readMessage(value,proto.apollo.control.FilterConf.deserializeBinaryFromReader);
      msg.setPitchAngleFilterConf(value);
      break;
    case 15:
      var value = new modules_control_proto_leadlag_conf_pb.LeadlagConf;
      reader.readMessage(value,modules_control_proto_leadlag_conf_pb.LeadlagConf.deserializeBinaryFromReader);
      msg.setReverseStationLeadlagConf(value);
      break;
    case 16:
      var value = new modules_control_proto_leadlag_conf_pb.LeadlagConf;
      reader.readMessage(value,modules_control_proto_leadlag_conf_pb.LeadlagConf.deserializeBinaryFromReader);
      msg.setReverseSpeedLeadlagConf(value);
      break;
    case 17:
      var value = new modules_control_proto_calibration_table_pb.ControlCalibrationTable;
      reader.readMessage(value,modules_control_proto_calibration_table_pb.ControlCalibrationTable.deserializeBinaryFromReader);
      msg.setCalibrationTable(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableReverseLeadlagCompensation(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSwitchSpeedWindow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.LonControllerConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.LonControllerConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.LonControllerConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.LonControllerConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getStationPidConf();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      modules_control_proto_pid_conf_pb.PidConf.serializeBinaryToWriter
    );
  }
  f = message.getLowSpeedPidConf();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      modules_control_proto_pid_conf_pb.PidConf.serializeBinaryToWriter
    );
  }
  f = message.getHighSpeedPidConf();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      modules_control_proto_pid_conf_pb.PidConf.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getReverseStationPidConf();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      modules_control_proto_pid_conf_pb.PidConf.serializeBinaryToWriter
    );
  }
  f = message.getReverseSpeedPidConf();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      modules_control_proto_pid_conf_pb.PidConf.serializeBinaryToWriter
    );
  }
  f = message.getPitchAngleFilterConf();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.apollo.control.FilterConf.serializeBinaryToWriter
    );
  }
  f = message.getReverseStationLeadlagConf();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      modules_control_proto_leadlag_conf_pb.LeadlagConf.serializeBinaryToWriter
    );
  }
  f = message.getReverseSpeedLeadlagConf();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      modules_control_proto_leadlag_conf_pb.LeadlagConf.serializeBinaryToWriter
    );
  }
  f = message.getCalibrationTable();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      modules_control_proto_calibration_table_pb.ControlCalibrationTable.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
};


/**
 * optional double ts = 1;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setTs = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearTs = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasTs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double brake_minimum_action = 2;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getBrakeMinimumAction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setBrakeMinimumAction = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearBrakeMinimumAction = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasBrakeMinimumAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double throttle_minimum_action = 3;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getThrottleMinimumAction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setThrottleMinimumAction = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearThrottleMinimumAction = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasThrottleMinimumAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double speed_controller_input_limit = 4;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getSpeedControllerInputLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setSpeedControllerInputLimit = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearSpeedControllerInputLimit = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasSpeedControllerInputLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double station_error_limit = 5;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getStationErrorLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setStationErrorLimit = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearStationErrorLimit = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasStationErrorLimit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double preview_window = 6;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getPreviewWindow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setPreviewWindow = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearPreviewWindow = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasPreviewWindow = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double standstill_acceleration = 7;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getStandstillAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setStandstillAcceleration = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearStandstillAcceleration = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasStandstillAcceleration = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PidConf station_pid_conf = 8;
 * @return {?proto.apollo.control.PidConf}
 */
proto.apollo.control.LonControllerConf.prototype.getStationPidConf = function() {
  return /** @type{?proto.apollo.control.PidConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_pid_conf_pb.PidConf, 8));
};


/**
 * @param {?proto.apollo.control.PidConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setStationPidConf = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearStationPidConf = function() {
  return this.setStationPidConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasStationPidConf = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PidConf low_speed_pid_conf = 9;
 * @return {?proto.apollo.control.PidConf}
 */
proto.apollo.control.LonControllerConf.prototype.getLowSpeedPidConf = function() {
  return /** @type{?proto.apollo.control.PidConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_pid_conf_pb.PidConf, 9));
};


/**
 * @param {?proto.apollo.control.PidConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setLowSpeedPidConf = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearLowSpeedPidConf = function() {
  return this.setLowSpeedPidConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasLowSpeedPidConf = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PidConf high_speed_pid_conf = 10;
 * @return {?proto.apollo.control.PidConf}
 */
proto.apollo.control.LonControllerConf.prototype.getHighSpeedPidConf = function() {
  return /** @type{?proto.apollo.control.PidConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_pid_conf_pb.PidConf, 10));
};


/**
 * @param {?proto.apollo.control.PidConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setHighSpeedPidConf = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearHighSpeedPidConf = function() {
  return this.setHighSpeedPidConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasHighSpeedPidConf = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double switch_speed = 11;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getSwitchSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setSwitchSpeed = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearSwitchSpeed = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasSwitchSpeed = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PidConf reverse_station_pid_conf = 12;
 * @return {?proto.apollo.control.PidConf}
 */
proto.apollo.control.LonControllerConf.prototype.getReverseStationPidConf = function() {
  return /** @type{?proto.apollo.control.PidConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_pid_conf_pb.PidConf, 12));
};


/**
 * @param {?proto.apollo.control.PidConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setReverseStationPidConf = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearReverseStationPidConf = function() {
  return this.setReverseStationPidConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasReverseStationPidConf = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PidConf reverse_speed_pid_conf = 13;
 * @return {?proto.apollo.control.PidConf}
 */
proto.apollo.control.LonControllerConf.prototype.getReverseSpeedPidConf = function() {
  return /** @type{?proto.apollo.control.PidConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_pid_conf_pb.PidConf, 13));
};


/**
 * @param {?proto.apollo.control.PidConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setReverseSpeedPidConf = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearReverseSpeedPidConf = function() {
  return this.setReverseSpeedPidConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasReverseSpeedPidConf = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional FilterConf pitch_angle_filter_conf = 14;
 * @return {?proto.apollo.control.FilterConf}
 */
proto.apollo.control.LonControllerConf.prototype.getPitchAngleFilterConf = function() {
  return /** @type{?proto.apollo.control.FilterConf} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.FilterConf, 14));
};


/**
 * @param {?proto.apollo.control.FilterConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setPitchAngleFilterConf = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearPitchAngleFilterConf = function() {
  return this.setPitchAngleFilterConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasPitchAngleFilterConf = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional LeadlagConf reverse_station_leadlag_conf = 15;
 * @return {?proto.apollo.control.LeadlagConf}
 */
proto.apollo.control.LonControllerConf.prototype.getReverseStationLeadlagConf = function() {
  return /** @type{?proto.apollo.control.LeadlagConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_leadlag_conf_pb.LeadlagConf, 15));
};


/**
 * @param {?proto.apollo.control.LeadlagConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setReverseStationLeadlagConf = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearReverseStationLeadlagConf = function() {
  return this.setReverseStationLeadlagConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasReverseStationLeadlagConf = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional LeadlagConf reverse_speed_leadlag_conf = 16;
 * @return {?proto.apollo.control.LeadlagConf}
 */
proto.apollo.control.LonControllerConf.prototype.getReverseSpeedLeadlagConf = function() {
  return /** @type{?proto.apollo.control.LeadlagConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_leadlag_conf_pb.LeadlagConf, 16));
};


/**
 * @param {?proto.apollo.control.LeadlagConf|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setReverseSpeedLeadlagConf = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearReverseSpeedLeadlagConf = function() {
  return this.setReverseSpeedLeadlagConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasReverseSpeedLeadlagConf = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional calibrationtable.ControlCalibrationTable calibration_table = 17;
 * @return {?proto.apollo.control.calibrationtable.ControlCalibrationTable}
 */
proto.apollo.control.LonControllerConf.prototype.getCalibrationTable = function() {
  return /** @type{?proto.apollo.control.calibrationtable.ControlCalibrationTable} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_calibration_table_pb.ControlCalibrationTable, 17));
};


/**
 * @param {?proto.apollo.control.calibrationtable.ControlCalibrationTable|undefined} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
*/
proto.apollo.control.LonControllerConf.prototype.setCalibrationTable = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearCalibrationTable = function() {
  return this.setCalibrationTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasCalibrationTable = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool enable_reverse_leadlag_compensation = 18;
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.getEnableReverseLeadlagCompensation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setEnableReverseLeadlagCompensation = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearEnableReverseLeadlagCompensation = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasEnableReverseLeadlagCompensation = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double switch_speed_window = 19;
 * @return {number}
 */
proto.apollo.control.LonControllerConf.prototype.getSwitchSpeedWindow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.setSwitchSpeedWindow = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LonControllerConf} returns this
 */
proto.apollo.control.LonControllerConf.prototype.clearSwitchSpeedWindow = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LonControllerConf.prototype.hasSwitchSpeedWindow = function() {
  return jspb.Message.getField(this, 19) != null;
};


goog.object.extend(exports, proto.apollo.control);
