// source: modules/perception/lidar/lib/pointcloud_preprocessor/proto/pointcloud_preprocessor_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.lidar.PointCloudPreprocessorConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.PointCloudPreprocessorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.PointCloudPreprocessorConfig.displayName = 'proto.apollo.perception.lidar.PointCloudPreprocessorConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.PointCloudPreprocessorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterNaninfPoints: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    filterNearbyBoxPoints: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    boxForwardX: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    boxBackwardX: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    boxForwardY: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    boxBackwardY: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    filterHighZPoints: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    zThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 5.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PointCloudPreprocessorConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.filterNaninfPoints;

  /** @type {?|undefined} */
  this.filterNearbyBoxPoints;

  /** @type {?|undefined} */
  this.boxForwardX;

  /** @type {?|undefined} */
  this.boxBackwardX;

  /** @type {?|undefined} */
  this.boxForwardY;

  /** @type {?|undefined} */
  this.boxBackwardY;

  /** @type {?|undefined} */
  this.filterHighZPoints;

  /** @type {?|undefined} */
  this.zThreshold;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.PointCloudPreprocessorConfig();
  obj.filterNaninfPoints != null && jspb.Message.setField(msg, 1, obj.filterNaninfPoints);
  obj.filterNearbyBoxPoints != null && jspb.Message.setField(msg, 2, obj.filterNearbyBoxPoints);
  obj.boxForwardX != null && jspb.Message.setField(msg, 3, obj.boxForwardX);
  obj.boxBackwardX != null && jspb.Message.setField(msg, 4, obj.boxBackwardX);
  obj.boxForwardY != null && jspb.Message.setField(msg, 5, obj.boxForwardY);
  obj.boxBackwardY != null && jspb.Message.setField(msg, 6, obj.boxBackwardY);
  obj.filterHighZPoints != null && jspb.Message.setField(msg, 7, obj.filterHighZPoints);
  obj.zThreshold != null && jspb.Message.setField(msg, 8, obj.zThreshold);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.PointCloudPreprocessorConfig;
  return proto.apollo.perception.lidar.PointCloudPreprocessorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterNaninfPoints(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterNearbyBoxPoints(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoxForwardX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoxBackwardX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoxForwardY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoxBackwardY(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterHighZPoints(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.PointCloudPreprocessorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional bool filter_naninf_points = 1;
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getFilterNaninfPoints = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setFilterNaninfPoints = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearFilterNaninfPoints = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasFilterNaninfPoints = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool filter_nearby_box_points = 2;
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getFilterNearbyBoxPoints = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setFilterNearbyBoxPoints = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearFilterNearbyBoxPoints = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasFilterNearbyBoxPoints = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float box_forward_x = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getBoxForwardX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setBoxForwardX = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearBoxForwardX = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasBoxForwardX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float box_backward_x = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getBoxBackwardX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setBoxBackwardX = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearBoxBackwardX = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasBoxBackwardX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float box_forward_y = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getBoxForwardY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setBoxForwardY = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearBoxForwardY = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasBoxForwardY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float box_backward_y = 6;
 * @return {number}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getBoxBackwardY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setBoxBackwardY = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearBoxBackwardY = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasBoxBackwardY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool filter_high_z_points = 7;
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getFilterHighZPoints = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setFilterHighZPoints = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearFilterHighZPoints = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasFilterHighZPoints = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float z_threshold = 8;
 * @return {number}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.getZThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.setZThreshold = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.PointCloudPreprocessorConfig} returns this
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.clearZThreshold = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.PointCloudPreprocessorConfig.prototype.hasZThreshold = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.apollo.perception.lidar);
