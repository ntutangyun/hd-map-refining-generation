// source: modules/drivers/microphone/proto/microphone_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.drivers.microphone.config.ChannelType', null, global);
goog.exportSymbol('proto.apollo.drivers.microphone.config.MicrophoneConfig', null, global);
goog.exportSymbol('proto.apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.drivers.microphone.config.MicrophoneConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.drivers.microphone.config.MicrophoneConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.microphone.config.MicrophoneConfig.displayName = 'proto.apollo.drivers.microphone.config.MicrophoneConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.microphone.config.MicrophoneConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.microphone.config.MicrophoneConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    microphoneModel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    chunk: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    sampleRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    recordSeconds: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    sampleWidth: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    channelName: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    frameId: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    micDistance: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    channelTypeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MicrophoneConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.microphoneModel;

  /** @type {?|undefined} */
  this.chunk;

  /** @type {?|undefined} */
  this.sampleRate;

  /** @type {?|undefined} */
  this.recordSeconds;

  /** @type {?|undefined} */
  this.sampleWidth;

  /** @type {?|undefined} */
  this.channelName;

  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.micDistance;

  /** @type {?|undefined} */
  this.channelTypeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.microphone.config.MicrophoneConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.microphone.config.MicrophoneConfig();
  obj.microphoneModel != null && jspb.Message.setField(msg, 2, obj.microphoneModel);
  obj.chunk != null && jspb.Message.setField(msg, 3, obj.chunk);
  obj.sampleRate != null && jspb.Message.setField(msg, 4, obj.sampleRate);
  obj.recordSeconds != null && jspb.Message.setField(msg, 5, obj.recordSeconds);
  obj.sampleWidth != null && jspb.Message.setField(msg, 6, obj.sampleWidth);
  obj.channelName != null && jspb.Message.setField(msg, 7, obj.channelName);
  obj.frameId != null && jspb.Message.setField(msg, 8, obj.frameId);
  obj.micDistance != null && jspb.Message.setField(msg, 9, obj.micDistance);
  obj.channelTypeList != null && jspb.Message.setField(msg, 1, obj.channelTypeList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.microphone.config.MicrophoneConfig;
  return proto.apollo.drivers.microphone.config.MicrophoneConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.microphone.config.MicrophoneConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel} */ (reader.readEnum());
      msg.setMicrophoneModel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunk(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSampleRate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRecordSeconds(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleWidth(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMicDistance(value);
      break;
    case 1:
      var values = /** @type {!Array<!proto.apollo.drivers.microphone.config.ChannelType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addChannelType(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.microphone.config.MicrophoneConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.microphone.config.MicrophoneConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getChannelTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel = {
  UNKNOWN: 0,
  RESPEAKER: 1
};

/**
 * optional MicrophoneModel microphone_model = 2;
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getMicrophoneModel = function() {
  return /** @type {!proto.apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.drivers.microphone.config.MicrophoneConfig.MicrophoneModel} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setMicrophoneModel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearMicrophoneModel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasMicrophoneModel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 chunk = 3;
 * @return {number}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getChunk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setChunk = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearChunk = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float sample_rate = 4;
 * @return {number}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setSampleRate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearSampleRate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasSampleRate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float record_seconds = 5;
 * @return {number}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getRecordSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setRecordSeconds = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearRecordSeconds = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasRecordSeconds = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 sample_width = 6;
 * @return {number}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getSampleWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setSampleWidth = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearSampleWidth = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasSampleWidth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string channel_name = 7;
 * @return {string}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setChannelName = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearChannelName = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasChannelName = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string frame_id = 8;
 * @return {string}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float mic_distance = 9;
 * @return {number}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getMicDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setMicDistance = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearMicDistance = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.hasMicDistance = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated ChannelType channel_type = 1;
 * @return {!Array<!proto.apollo.drivers.microphone.config.ChannelType>}
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.getChannelTypeList = function() {
  return /** @type {!Array<!proto.apollo.drivers.microphone.config.ChannelType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.apollo.drivers.microphone.config.ChannelType>} value
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.setChannelTypeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.apollo.drivers.microphone.config.ChannelType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.addChannelType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.drivers.microphone.config.MicrophoneConfig} returns this
 */
proto.apollo.drivers.microphone.config.MicrophoneConfig.prototype.clearChannelTypeList = function() {
  return this.setChannelTypeList([]);
};


/**
 * @enum {number}
 */
proto.apollo.drivers.microphone.config.ChannelType = {
  UNKNOWN: 0,
  ASR: 1,
  RAW: 2,
  PLAYBACK: 3
};

goog.object.extend(exports, proto.apollo.drivers.microphone.config);
