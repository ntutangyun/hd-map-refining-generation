// source: modules/control/proto/control_cmd.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_canbus_proto_chassis_pb = require('../../../modules/canbus/proto/chassis_pb.js');
goog.object.extend(proto, modules_canbus_proto_chassis_pb);
var modules_common_proto_drive_state_pb = require('../../../modules/common/proto/drive_state_pb.js');
goog.object.extend(proto, modules_common_proto_drive_state_pb);
var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_common_proto_vehicle_signal_pb = require('../../../modules/common/proto/vehicle_signal_pb.js');
goog.object.extend(proto, modules_common_proto_vehicle_signal_pb);
var modules_control_proto_input_debug_pb = require('../../../modules/control/proto/input_debug_pb.js');
goog.object.extend(proto, modules_control_proto_input_debug_pb);
var modules_control_proto_pad_msg_pb = require('../../../modules/control/proto/pad_msg_pb.js');
goog.object.extend(proto, modules_control_proto_pad_msg_pb);
goog.exportSymbol('proto.apollo.control.ControlCommand', null, global);
goog.exportSymbol('proto.apollo.control.Debug', null, global);
goog.exportSymbol('proto.apollo.control.LatencyStats', null, global);
goog.exportSymbol('proto.apollo.control.MracAdaptiveGain', null, global);
goog.exportSymbol('proto.apollo.control.MracDebug', null, global);
goog.exportSymbol('proto.apollo.control.SimpleLateralDebug', null, global);
goog.exportSymbol('proto.apollo.control.SimpleLongitudinalDebug', null, global);
goog.exportSymbol('proto.apollo.control.SimpleMPCDebug', null, global);
goog.exportSymbol('proto.apollo.control.TurnSignal', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.LatencyStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.control.LatencyStats.repeatedFields_, null);
};
goog.inherits(proto.apollo.control.LatencyStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.LatencyStats.displayName = 'proto.apollo.control.LatencyStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.ControlCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.ControlCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.ControlCommand.displayName = 'proto.apollo.control.ControlCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.SimpleLongitudinalDebug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.SimpleLongitudinalDebug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.SimpleLongitudinalDebug.displayName = 'proto.apollo.control.SimpleLongitudinalDebug';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.SimpleLateralDebug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.SimpleLateralDebug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.SimpleLateralDebug.displayName = 'proto.apollo.control.SimpleLateralDebug';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.SimpleMPCDebug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.control.SimpleMPCDebug.repeatedFields_, null);
};
goog.inherits(proto.apollo.control.SimpleMPCDebug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.SimpleMPCDebug.displayName = 'proto.apollo.control.SimpleMPCDebug';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.MracDebug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.control.MracDebug.repeatedFields_, null);
};
goog.inherits(proto.apollo.control.MracDebug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.MracDebug.displayName = 'proto.apollo.control.MracDebug';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.MracAdaptiveGain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.control.MracAdaptiveGain.repeatedFields_, null);
};
goog.inherits(proto.apollo.control.MracAdaptiveGain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.MracAdaptiveGain.displayName = 'proto.apollo.control.MracAdaptiveGain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.Debug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.Debug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.Debug.displayName = 'proto.apollo.control.Debug';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.control.LatencyStats.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.LatencyStats.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.LatencyStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.LatencyStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.LatencyStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalTimeMs: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    controllerTimeMsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    totalTimeExceeded: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LatencyStats as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.LatencyStats.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.totalTimeMs;

  /** @type {?|undefined} */
  this.controllerTimeMsList;

  /** @type {?|undefined} */
  this.totalTimeExceeded;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.LatencyStats.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.LatencyStats}
 */
proto.apollo.control.LatencyStats.fromObject = function(obj) {
  var msg = new proto.apollo.control.LatencyStats();
  obj.totalTimeMs != null && jspb.Message.setField(msg, 1, obj.totalTimeMs);
  obj.controllerTimeMsList != null && jspb.Message.setField(msg, 2, obj.controllerTimeMsList);
  obj.totalTimeExceeded != null && jspb.Message.setField(msg, 3, obj.totalTimeExceeded);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.LatencyStats}
 */
proto.apollo.control.LatencyStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.LatencyStats;
  return proto.apollo.control.LatencyStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.LatencyStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.LatencyStats}
 */
proto.apollo.control.LatencyStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalTimeMs(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addControllerTimeMs(values[i]);
      }
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTotalTimeExceeded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.LatencyStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.LatencyStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.LatencyStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.LatencyStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getControllerTimeMsList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional double total_time_ms = 1;
 * @return {number}
 */
proto.apollo.control.LatencyStats.prototype.getTotalTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.LatencyStats} returns this
 */
proto.apollo.control.LatencyStats.prototype.setTotalTimeMs = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LatencyStats} returns this
 */
proto.apollo.control.LatencyStats.prototype.clearTotalTimeMs = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LatencyStats.prototype.hasTotalTimeMs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated double controller_time_ms = 2;
 * @return {!Array<number>}
 */
proto.apollo.control.LatencyStats.prototype.getControllerTimeMsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.LatencyStats} returns this
 */
proto.apollo.control.LatencyStats.prototype.setControllerTimeMsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.LatencyStats} returns this
 */
proto.apollo.control.LatencyStats.prototype.addControllerTimeMs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.LatencyStats} returns this
 */
proto.apollo.control.LatencyStats.prototype.clearControllerTimeMsList = function() {
  return this.setControllerTimeMsList([]);
};


/**
 * optional bool total_time_exceeded = 3;
 * @return {boolean}
 */
proto.apollo.control.LatencyStats.prototype.getTotalTimeExceeded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.LatencyStats} returns this
 */
proto.apollo.control.LatencyStats.prototype.setTotalTimeExceeded = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.LatencyStats} returns this
 */
proto.apollo.control.LatencyStats.prototype.clearTotalTimeExceeded = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.LatencyStats.prototype.hasTotalTimeExceeded = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.ControlCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.ControlCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.ControlCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.ControlCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    throttle: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    brake: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    steeringRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    steeringTarget: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    parkingBrake: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    acceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    resetModel: (f = jspb.Message.getBooleanField(msg, 16)) == null ? undefined : f,
    engineOnOff: (f = jspb.Message.getBooleanField(msg, 17)) == null ? undefined : f,
    trajectoryFraction: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    drivingMode: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    gearLocation: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    debug: (f = msg.getDebug()) && proto.apollo.control.Debug.toObject(includeInstance, f),
    signal: (f = msg.getSignal()) && modules_common_proto_vehicle_signal_pb.VehicleSignal.toObject(includeInstance, f),
    latencyStats: (f = msg.getLatencyStats()) && proto.apollo.control.LatencyStats.toObject(includeInstance, f),
    padMsg: (f = msg.getPadMsg()) && modules_control_proto_pad_msg_pb.PadMessage.toObject(includeInstance, f),
    engageAdvice: (f = msg.getEngageAdvice()) && modules_common_proto_drive_state_pb.EngageAdvice.toObject(includeInstance, f),
    isInSafeMode: jspb.Message.getBooleanFieldWithDefault(msg, 27, false),
    leftTurn: (f = jspb.Message.getBooleanField(msg, 13)) == null ? undefined : f,
    rightTurn: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    highBeam: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    lowBeam: (f = jspb.Message.getBooleanField(msg, 12)) == null ? undefined : f,
    horn: (f = jspb.Message.getBooleanField(msg, 15)) == null ? undefined : f,
    turnsignal: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ControlCommand as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.ControlCommand.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.throttle;

  /** @type {?|undefined} */
  this.brake;

  /** @type {?|undefined} */
  this.steeringRate;

  /** @type {?|undefined} */
  this.steeringTarget;

  /** @type {?|undefined} */
  this.parkingBrake;

  /** @type {?|undefined} */
  this.speed;

  /** @type {?|undefined} */
  this.acceleration;

  /** @type {?|undefined} */
  this.resetModel;

  /** @type {?|undefined} */
  this.engineOnOff;

  /** @type {?|undefined} */
  this.trajectoryFraction;

  /** @type {?|undefined} */
  this.drivingMode;

  /** @type {?|undefined} */
  this.gearLocation;

  /** @type {?|undefined} */
  this.debug;

  /** @type {?|undefined} */
  this.signal;

  /** @type {?|undefined} */
  this.latencyStats;

  /** @type {?|undefined} */
  this.padMsg;

  /** @type {?|undefined} */
  this.engageAdvice;

  /** @type {?|undefined} */
  this.isInSafeMode;

  /** @type {?|undefined} */
  this.leftTurn;

  /** @type {?|undefined} */
  this.rightTurn;

  /** @type {?|undefined} */
  this.highBeam;

  /** @type {?|undefined} */
  this.lowBeam;

  /** @type {?|undefined} */
  this.horn;

  /** @type {?|undefined} */
  this.turnsignal;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.ControlCommand.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.ControlCommand}
 */
proto.apollo.control.ControlCommand.fromObject = function(obj) {
  var msg = new proto.apollo.control.ControlCommand();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.throttle != null && jspb.Message.setField(msg, 3, obj.throttle);
  obj.brake != null && jspb.Message.setField(msg, 4, obj.brake);
  obj.steeringRate != null && jspb.Message.setField(msg, 6, obj.steeringRate);
  obj.steeringTarget != null && jspb.Message.setField(msg, 7, obj.steeringTarget);
  obj.parkingBrake != null && jspb.Message.setField(msg, 8, obj.parkingBrake);
  obj.speed != null && jspb.Message.setField(msg, 9, obj.speed);
  obj.acceleration != null && jspb.Message.setField(msg, 10, obj.acceleration);
  obj.resetModel != null && jspb.Message.setField(msg, 16, obj.resetModel);
  obj.engineOnOff != null && jspb.Message.setField(msg, 17, obj.engineOnOff);
  obj.trajectoryFraction != null && jspb.Message.setField(msg, 18, obj.trajectoryFraction);
  obj.drivingMode != null && jspb.Message.setField(msg, 19, obj.drivingMode);
  obj.gearLocation != null && jspb.Message.setField(msg, 20, obj.gearLocation);
  obj.debug && jspb.Message.setWrapperField(
      msg, 22, proto.apollo.control.Debug.fromObject(obj.debug));
  obj.signal && jspb.Message.setWrapperField(
      msg, 23, modules_common_proto_vehicle_signal_pb.VehicleSignal.fromObject(obj.signal));
  obj.latencyStats && jspb.Message.setWrapperField(
      msg, 24, proto.apollo.control.LatencyStats.fromObject(obj.latencyStats));
  obj.padMsg && jspb.Message.setWrapperField(
      msg, 25, modules_control_proto_pad_msg_pb.PadMessage.fromObject(obj.padMsg));
  obj.engageAdvice && jspb.Message.setWrapperField(
      msg, 26, modules_common_proto_drive_state_pb.EngageAdvice.fromObject(obj.engageAdvice));
  obj.isInSafeMode != null && jspb.Message.setField(msg, 27, obj.isInSafeMode);
  obj.leftTurn != null && jspb.Message.setField(msg, 13, obj.leftTurn);
  obj.rightTurn != null && jspb.Message.setField(msg, 14, obj.rightTurn);
  obj.highBeam != null && jspb.Message.setField(msg, 11, obj.highBeam);
  obj.lowBeam != null && jspb.Message.setField(msg, 12, obj.lowBeam);
  obj.horn != null && jspb.Message.setField(msg, 15, obj.horn);
  obj.turnsignal != null && jspb.Message.setField(msg, 21, obj.turnsignal);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.ControlCommand}
 */
proto.apollo.control.ControlCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.ControlCommand;
  return proto.apollo.control.ControlCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.ControlCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.ControlCommand}
 */
proto.apollo.control.ControlCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrake(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringRate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringTarget(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParkingBrake(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcceleration(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResetModel(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEngineOnOff(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajectoryFraction(value);
      break;
    case 19:
      var value = /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (reader.readEnum());
      msg.setDrivingMode(value);
      break;
    case 20:
      var value = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (reader.readEnum());
      msg.setGearLocation(value);
      break;
    case 22:
      var value = new proto.apollo.control.Debug;
      reader.readMessage(value,proto.apollo.control.Debug.deserializeBinaryFromReader);
      msg.setDebug(value);
      break;
    case 23:
      var value = new modules_common_proto_vehicle_signal_pb.VehicleSignal;
      reader.readMessage(value,modules_common_proto_vehicle_signal_pb.VehicleSignal.deserializeBinaryFromReader);
      msg.setSignal(value);
      break;
    case 24:
      var value = new proto.apollo.control.LatencyStats;
      reader.readMessage(value,proto.apollo.control.LatencyStats.deserializeBinaryFromReader);
      msg.setLatencyStats(value);
      break;
    case 25:
      var value = new modules_control_proto_pad_msg_pb.PadMessage;
      reader.readMessage(value,modules_control_proto_pad_msg_pb.PadMessage.deserializeBinaryFromReader);
      msg.setPadMsg(value);
      break;
    case 26:
      var value = new modules_common_proto_drive_state_pb.EngageAdvice;
      reader.readMessage(value,modules_common_proto_drive_state_pb.EngageAdvice.deserializeBinaryFromReader);
      msg.setEngageAdvice(value);
      break;
    case 27:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInSafeMode(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLeftTurn(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRightTurn(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHighBeam(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLowBeam(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHorn(value);
      break;
    case 21:
      var value = /** @type {!proto.apollo.control.TurnSignal} */ (reader.readEnum());
      msg.setTurnsignal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.ControlCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.ControlCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.ControlCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.ControlCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getDebug();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.apollo.control.Debug.serializeBinaryToWriter
    );
  }
  f = message.getSignal();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      modules_common_proto_vehicle_signal_pb.VehicleSignal.serializeBinaryToWriter
    );
  }
  f = message.getLatencyStats();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.apollo.control.LatencyStats.serializeBinaryToWriter
    );
  }
  f = message.getPadMsg();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      modules_control_proto_pad_msg_pb.PadMessage.serializeBinaryToWriter
    );
  }
  f = message.getEngageAdvice();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      modules_common_proto_drive_state_pb.EngageAdvice.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeBool(
      27,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {!proto.apollo.control.TurnSignal} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeEnum(
      21,
      f
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.control.ControlCommand.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.control.ControlCommand} returns this
*/
proto.apollo.control.ControlCommand.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double throttle = 3;
 * @return {number}
 */
proto.apollo.control.ControlCommand.prototype.getThrottle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setThrottle = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearThrottle = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasThrottle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double brake = 4;
 * @return {number}
 */
proto.apollo.control.ControlCommand.prototype.getBrake = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setBrake = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearBrake = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasBrake = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double steering_rate = 6;
 * @return {number}
 */
proto.apollo.control.ControlCommand.prototype.getSteeringRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setSteeringRate = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearSteeringRate = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasSteeringRate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double steering_target = 7;
 * @return {number}
 */
proto.apollo.control.ControlCommand.prototype.getSteeringTarget = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setSteeringTarget = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearSteeringTarget = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasSteeringTarget = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool parking_brake = 8;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getParkingBrake = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setParkingBrake = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearParkingBrake = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasParkingBrake = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double speed = 9;
 * @return {number}
 */
proto.apollo.control.ControlCommand.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double acceleration = 10;
 * @return {number}
 */
proto.apollo.control.ControlCommand.prototype.getAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setAcceleration = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearAcceleration = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool reset_model = 16;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getResetModel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setResetModel = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearResetModel = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasResetModel = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool engine_on_off = 17;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getEngineOnOff = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setEngineOnOff = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearEngineOnOff = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasEngineOnOff = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double trajectory_fraction = 18;
 * @return {number}
 */
proto.apollo.control.ControlCommand.prototype.getTrajectoryFraction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setTrajectoryFraction = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearTrajectoryFraction = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasTrajectoryFraction = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional apollo.canbus.Chassis.DrivingMode driving_mode = 19;
 * @return {!proto.apollo.canbus.Chassis.DrivingMode}
 */
proto.apollo.control.ControlCommand.prototype.getDrivingMode = function() {
  return /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.DrivingMode} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setDrivingMode = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearDrivingMode = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasDrivingMode = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional apollo.canbus.Chassis.GearPosition gear_location = 20;
 * @return {!proto.apollo.canbus.Chassis.GearPosition}
 */
proto.apollo.control.ControlCommand.prototype.getGearLocation = function() {
  return /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.GearPosition} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setGearLocation = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearGearLocation = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasGearLocation = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Debug debug = 22;
 * @return {?proto.apollo.control.Debug}
 */
proto.apollo.control.ControlCommand.prototype.getDebug = function() {
  return /** @type{?proto.apollo.control.Debug} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.Debug, 22));
};


/**
 * @param {?proto.apollo.control.Debug|undefined} value
 * @return {!proto.apollo.control.ControlCommand} returns this
*/
proto.apollo.control.ControlCommand.prototype.setDebug = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearDebug = function() {
  return this.setDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasDebug = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional apollo.common.VehicleSignal signal = 23;
 * @return {?proto.apollo.common.VehicleSignal}
 */
proto.apollo.control.ControlCommand.prototype.getSignal = function() {
  return /** @type{?proto.apollo.common.VehicleSignal} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_vehicle_signal_pb.VehicleSignal, 23));
};


/**
 * @param {?proto.apollo.common.VehicleSignal|undefined} value
 * @return {!proto.apollo.control.ControlCommand} returns this
*/
proto.apollo.control.ControlCommand.prototype.setSignal = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearSignal = function() {
  return this.setSignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasSignal = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional LatencyStats latency_stats = 24;
 * @return {?proto.apollo.control.LatencyStats}
 */
proto.apollo.control.ControlCommand.prototype.getLatencyStats = function() {
  return /** @type{?proto.apollo.control.LatencyStats} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.LatencyStats, 24));
};


/**
 * @param {?proto.apollo.control.LatencyStats|undefined} value
 * @return {!proto.apollo.control.ControlCommand} returns this
*/
proto.apollo.control.ControlCommand.prototype.setLatencyStats = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearLatencyStats = function() {
  return this.setLatencyStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasLatencyStats = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional PadMessage pad_msg = 25;
 * @return {?proto.apollo.control.PadMessage}
 */
proto.apollo.control.ControlCommand.prototype.getPadMsg = function() {
  return /** @type{?proto.apollo.control.PadMessage} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_pad_msg_pb.PadMessage, 25));
};


/**
 * @param {?proto.apollo.control.PadMessage|undefined} value
 * @return {!proto.apollo.control.ControlCommand} returns this
*/
proto.apollo.control.ControlCommand.prototype.setPadMsg = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearPadMsg = function() {
  return this.setPadMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasPadMsg = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional apollo.common.EngageAdvice engage_advice = 26;
 * @return {?proto.apollo.common.EngageAdvice}
 */
proto.apollo.control.ControlCommand.prototype.getEngageAdvice = function() {
  return /** @type{?proto.apollo.common.EngageAdvice} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_drive_state_pb.EngageAdvice, 26));
};


/**
 * @param {?proto.apollo.common.EngageAdvice|undefined} value
 * @return {!proto.apollo.control.ControlCommand} returns this
*/
proto.apollo.control.ControlCommand.prototype.setEngageAdvice = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearEngageAdvice = function() {
  return this.setEngageAdvice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasEngageAdvice = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional bool is_in_safe_mode = 27;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getIsInSafeMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 27, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setIsInSafeMode = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearIsInSafeMode = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasIsInSafeMode = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional bool left_turn = 13;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getLeftTurn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setLeftTurn = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearLeftTurn = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasLeftTurn = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool right_turn = 14;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getRightTurn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setRightTurn = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearRightTurn = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasRightTurn = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool high_beam = 11;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getHighBeam = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setHighBeam = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearHighBeam = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasHighBeam = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool low_beam = 12;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getLowBeam = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setLowBeam = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearLowBeam = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasLowBeam = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool horn = 15;
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.getHorn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setHorn = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearHorn = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasHorn = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional TurnSignal turnsignal = 21;
 * @return {!proto.apollo.control.TurnSignal}
 */
proto.apollo.control.ControlCommand.prototype.getTurnsignal = function() {
  return /** @type {!proto.apollo.control.TurnSignal} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.apollo.control.TurnSignal} value
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.setTurnsignal = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlCommand} returns this
 */
proto.apollo.control.ControlCommand.prototype.clearTurnsignal = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlCommand.prototype.hasTurnsignal = function() {
  return jspb.Message.getField(this, 21) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.SimpleLongitudinalDebug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.SimpleLongitudinalDebug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.SimpleLongitudinalDebug.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    stationError: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    stationErrorLimited: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    previewStationError: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    speedReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    speedError: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    speedControllerInputLimited: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    previewSpeedReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    previewSpeedError: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    previewAccelerationReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    accelerationCmdCloseloop: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    accelerationCmd: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    accelerationLookup: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    speedLookup: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    calibrationValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    throttleCmd: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    brakeCmd: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    isFullStop: (f = jspb.Message.getBooleanField(msg, 18)) == null ? undefined : f,
    slopeOffsetCompensation: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    currentStation: (f = jspb.Message.getOptionalFloatingPointField(msg, 20)) == null ? undefined : f,
    pathRemain: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    pidSaturationStatus: (f = jspb.Message.getField(msg, 22)) == null ? undefined : f,
    leadlagSaturationStatus: (f = jspb.Message.getField(msg, 23)) == null ? undefined : f,
    speedOffset: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    currentSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 25)) == null ? undefined : f,
    accelerationReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 26)) == null ? undefined : f,
    currentAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 27)) == null ? undefined : f,
    accelerationError: (f = jspb.Message.getOptionalFloatingPointField(msg, 28)) == null ? undefined : f,
    jerkReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 29)) == null ? undefined : f,
    currentJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 30)) == null ? undefined : f,
    jerkError: (f = jspb.Message.getOptionalFloatingPointField(msg, 31)) == null ? undefined : f,
    currentMatchedPoint: (f = msg.getCurrentMatchedPoint()) && modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject(includeInstance, f),
    currentReferencePoint: (f = msg.getCurrentReferencePoint()) && modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject(includeInstance, f),
    previewReferencePoint: (f = msg.getPreviewReferencePoint()) && modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SimpleLongitudinalDebug as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.SimpleLongitudinalDebug.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stationReference;

  /** @type {?|undefined} */
  this.stationError;

  /** @type {?|undefined} */
  this.stationErrorLimited;

  /** @type {?|undefined} */
  this.previewStationError;

  /** @type {?|undefined} */
  this.speedReference;

  /** @type {?|undefined} */
  this.speedError;

  /** @type {?|undefined} */
  this.speedControllerInputLimited;

  /** @type {?|undefined} */
  this.previewSpeedReference;

  /** @type {?|undefined} */
  this.previewSpeedError;

  /** @type {?|undefined} */
  this.previewAccelerationReference;

  /** @type {?|undefined} */
  this.accelerationCmdCloseloop;

  /** @type {?|undefined} */
  this.accelerationCmd;

  /** @type {?|undefined} */
  this.accelerationLookup;

  /** @type {?|undefined} */
  this.speedLookup;

  /** @type {?|undefined} */
  this.calibrationValue;

  /** @type {?|undefined} */
  this.throttleCmd;

  /** @type {?|undefined} */
  this.brakeCmd;

  /** @type {?|undefined} */
  this.isFullStop;

  /** @type {?|undefined} */
  this.slopeOffsetCompensation;

  /** @type {?|undefined} */
  this.currentStation;

  /** @type {?|undefined} */
  this.pathRemain;

  /** @type {?|undefined} */
  this.pidSaturationStatus;

  /** @type {?|undefined} */
  this.leadlagSaturationStatus;

  /** @type {?|undefined} */
  this.speedOffset;

  /** @type {?|undefined} */
  this.currentSpeed;

  /** @type {?|undefined} */
  this.accelerationReference;

  /** @type {?|undefined} */
  this.currentAcceleration;

  /** @type {?|undefined} */
  this.accelerationError;

  /** @type {?|undefined} */
  this.jerkReference;

  /** @type {?|undefined} */
  this.currentJerk;

  /** @type {?|undefined} */
  this.jerkError;

  /** @type {?|undefined} */
  this.currentMatchedPoint;

  /** @type {?|undefined} */
  this.currentReferencePoint;

  /** @type {?|undefined} */
  this.previewReferencePoint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.SimpleLongitudinalDebug.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug}
 */
proto.apollo.control.SimpleLongitudinalDebug.fromObject = function(obj) {
  var msg = new proto.apollo.control.SimpleLongitudinalDebug();
  obj.stationReference != null && jspb.Message.setField(msg, 1, obj.stationReference);
  obj.stationError != null && jspb.Message.setField(msg, 2, obj.stationError);
  obj.stationErrorLimited != null && jspb.Message.setField(msg, 3, obj.stationErrorLimited);
  obj.previewStationError != null && jspb.Message.setField(msg, 4, obj.previewStationError);
  obj.speedReference != null && jspb.Message.setField(msg, 5, obj.speedReference);
  obj.speedError != null && jspb.Message.setField(msg, 6, obj.speedError);
  obj.speedControllerInputLimited != null && jspb.Message.setField(msg, 7, obj.speedControllerInputLimited);
  obj.previewSpeedReference != null && jspb.Message.setField(msg, 8, obj.previewSpeedReference);
  obj.previewSpeedError != null && jspb.Message.setField(msg, 9, obj.previewSpeedError);
  obj.previewAccelerationReference != null && jspb.Message.setField(msg, 10, obj.previewAccelerationReference);
  obj.accelerationCmdCloseloop != null && jspb.Message.setField(msg, 11, obj.accelerationCmdCloseloop);
  obj.accelerationCmd != null && jspb.Message.setField(msg, 12, obj.accelerationCmd);
  obj.accelerationLookup != null && jspb.Message.setField(msg, 13, obj.accelerationLookup);
  obj.speedLookup != null && jspb.Message.setField(msg, 14, obj.speedLookup);
  obj.calibrationValue != null && jspb.Message.setField(msg, 15, obj.calibrationValue);
  obj.throttleCmd != null && jspb.Message.setField(msg, 16, obj.throttleCmd);
  obj.brakeCmd != null && jspb.Message.setField(msg, 17, obj.brakeCmd);
  obj.isFullStop != null && jspb.Message.setField(msg, 18, obj.isFullStop);
  obj.slopeOffsetCompensation != null && jspb.Message.setField(msg, 19, obj.slopeOffsetCompensation);
  obj.currentStation != null && jspb.Message.setField(msg, 20, obj.currentStation);
  obj.pathRemain != null && jspb.Message.setField(msg, 21, obj.pathRemain);
  obj.pidSaturationStatus != null && jspb.Message.setField(msg, 22, obj.pidSaturationStatus);
  obj.leadlagSaturationStatus != null && jspb.Message.setField(msg, 23, obj.leadlagSaturationStatus);
  obj.speedOffset != null && jspb.Message.setField(msg, 24, obj.speedOffset);
  obj.currentSpeed != null && jspb.Message.setField(msg, 25, obj.currentSpeed);
  obj.accelerationReference != null && jspb.Message.setField(msg, 26, obj.accelerationReference);
  obj.currentAcceleration != null && jspb.Message.setField(msg, 27, obj.currentAcceleration);
  obj.accelerationError != null && jspb.Message.setField(msg, 28, obj.accelerationError);
  obj.jerkReference != null && jspb.Message.setField(msg, 29, obj.jerkReference);
  obj.currentJerk != null && jspb.Message.setField(msg, 30, obj.currentJerk);
  obj.jerkError != null && jspb.Message.setField(msg, 31, obj.jerkError);
  obj.currentMatchedPoint && jspb.Message.setWrapperField(
      msg, 32, modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject(obj.currentMatchedPoint));
  obj.currentReferencePoint && jspb.Message.setWrapperField(
      msg, 33, modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject(obj.currentReferencePoint));
  obj.previewReferencePoint && jspb.Message.setWrapperField(
      msg, 34, modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject(obj.previewReferencePoint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug}
 */
proto.apollo.control.SimpleLongitudinalDebug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.SimpleLongitudinalDebug;
  return proto.apollo.control.SimpleLongitudinalDebug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.SimpleLongitudinalDebug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug}
 */
proto.apollo.control.SimpleLongitudinalDebug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationReference(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationErrorLimited(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreviewStationError(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedReference(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedError(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedControllerInputLimited(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreviewSpeedReference(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreviewSpeedError(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreviewAccelerationReference(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationCmdCloseloop(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationCmd(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationLookup(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLookup(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCalibrationValue(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottleCmd(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakeCmd(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFullStop(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSlopeOffsetCompensation(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentStation(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPathRemain(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPidSaturationStatus(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLeadlagSaturationStatus(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedOffset(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentSpeed(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationReference(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentAcceleration(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationError(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkReference(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentJerk(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkError(value);
      break;
    case 32:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.setCurrentMatchedPoint(value);
      break;
    case 33:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.setCurrentReferencePoint(value);
      break;
    case 34:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.setPreviewReferencePoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.SimpleLongitudinalDebug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.SimpleLongitudinalDebug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.SimpleLongitudinalDebug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeDouble(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeDouble(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getCurrentMatchedPoint();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = message.getCurrentReferencePoint();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = message.getPreviewReferencePoint();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional double station_reference = 1;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getStationReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setStationReference = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearStationReference = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasStationReference = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double station_error = 2;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getStationError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setStationError = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearStationError = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasStationError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double station_error_limited = 3;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getStationErrorLimited = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setStationErrorLimited = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearStationErrorLimited = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasStationErrorLimited = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double preview_station_error = 4;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getPreviewStationError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setPreviewStationError = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearPreviewStationError = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasPreviewStationError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double speed_reference = 5;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getSpeedReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setSpeedReference = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearSpeedReference = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasSpeedReference = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double speed_error = 6;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getSpeedError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setSpeedError = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearSpeedError = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasSpeedError = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double speed_controller_input_limited = 7;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getSpeedControllerInputLimited = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setSpeedControllerInputLimited = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearSpeedControllerInputLimited = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasSpeedControllerInputLimited = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double preview_speed_reference = 8;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getPreviewSpeedReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setPreviewSpeedReference = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearPreviewSpeedReference = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasPreviewSpeedReference = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double preview_speed_error = 9;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getPreviewSpeedError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setPreviewSpeedError = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearPreviewSpeedError = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasPreviewSpeedError = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double preview_acceleration_reference = 10;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getPreviewAccelerationReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setPreviewAccelerationReference = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearPreviewAccelerationReference = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasPreviewAccelerationReference = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double acceleration_cmd_closeloop = 11;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getAccelerationCmdCloseloop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setAccelerationCmdCloseloop = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearAccelerationCmdCloseloop = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasAccelerationCmdCloseloop = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double acceleration_cmd = 12;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getAccelerationCmd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setAccelerationCmd = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearAccelerationCmd = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasAccelerationCmd = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double acceleration_lookup = 13;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getAccelerationLookup = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setAccelerationLookup = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearAccelerationLookup = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasAccelerationLookup = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double speed_lookup = 14;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getSpeedLookup = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setSpeedLookup = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearSpeedLookup = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasSpeedLookup = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double calibration_value = 15;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getCalibrationValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setCalibrationValue = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearCalibrationValue = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasCalibrationValue = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double throttle_cmd = 16;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getThrottleCmd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setThrottleCmd = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearThrottleCmd = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasThrottleCmd = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double brake_cmd = 17;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getBrakeCmd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setBrakeCmd = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearBrakeCmd = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasBrakeCmd = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool is_full_stop = 18;
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getIsFullStop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setIsFullStop = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearIsFullStop = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasIsFullStop = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double slope_offset_compensation = 19;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getSlopeOffsetCompensation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setSlopeOffsetCompensation = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearSlopeOffsetCompensation = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasSlopeOffsetCompensation = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional double current_station = 20;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getCurrentStation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setCurrentStation = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearCurrentStation = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasCurrentStation = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double path_remain = 21;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getPathRemain = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setPathRemain = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearPathRemain = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasPathRemain = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int32 pid_saturation_status = 22;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getPidSaturationStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setPidSaturationStatus = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearPidSaturationStatus = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasPidSaturationStatus = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional int32 leadlag_saturation_status = 23;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getLeadlagSaturationStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setLeadlagSaturationStatus = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearLeadlagSaturationStatus = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasLeadlagSaturationStatus = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double speed_offset = 24;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getSpeedOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setSpeedOffset = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearSpeedOffset = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasSpeedOffset = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional double current_speed = 25;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getCurrentSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setCurrentSpeed = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearCurrentSpeed = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasCurrentSpeed = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional double acceleration_reference = 26;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getAccelerationReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setAccelerationReference = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearAccelerationReference = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasAccelerationReference = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional double current_acceleration = 27;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getCurrentAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setCurrentAcceleration = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearCurrentAcceleration = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasCurrentAcceleration = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional double acceleration_error = 28;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getAccelerationError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setAccelerationError = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearAccelerationError = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasAccelerationError = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional double jerk_reference = 29;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getJerkReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setJerkReference = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearJerkReference = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasJerkReference = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional double current_jerk = 30;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getCurrentJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setCurrentJerk = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearCurrentJerk = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasCurrentJerk = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional double jerk_error = 31;
 * @return {number}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getJerkError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.setJerkError = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearJerkError = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasJerkError = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional apollo.common.TrajectoryPoint current_matched_point = 32;
 * @return {?proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getCurrentMatchedPoint = function() {
  return /** @type{?proto.apollo.common.TrajectoryPoint} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 32));
};


/**
 * @param {?proto.apollo.common.TrajectoryPoint|undefined} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
*/
proto.apollo.control.SimpleLongitudinalDebug.prototype.setCurrentMatchedPoint = function(value) {
  return jspb.Message.setWrapperField(this, 32, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearCurrentMatchedPoint = function() {
  return this.setCurrentMatchedPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasCurrentMatchedPoint = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional apollo.common.TrajectoryPoint current_reference_point = 33;
 * @return {?proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getCurrentReferencePoint = function() {
  return /** @type{?proto.apollo.common.TrajectoryPoint} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 33));
};


/**
 * @param {?proto.apollo.common.TrajectoryPoint|undefined} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
*/
proto.apollo.control.SimpleLongitudinalDebug.prototype.setCurrentReferencePoint = function(value) {
  return jspb.Message.setWrapperField(this, 33, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearCurrentReferencePoint = function() {
  return this.setCurrentReferencePoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasCurrentReferencePoint = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional apollo.common.TrajectoryPoint preview_reference_point = 34;
 * @return {?proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.getPreviewReferencePoint = function() {
  return /** @type{?proto.apollo.common.TrajectoryPoint} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 34));
};


/**
 * @param {?proto.apollo.common.TrajectoryPoint|undefined} value
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
*/
proto.apollo.control.SimpleLongitudinalDebug.prototype.setPreviewReferencePoint = function(value) {
  return jspb.Message.setWrapperField(this, 34, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.SimpleLongitudinalDebug} returns this
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.clearPreviewReferencePoint = function() {
  return this.setPreviewReferencePoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLongitudinalDebug.prototype.hasPreviewReferencePoint = function() {
  return jspb.Message.getField(this, 34) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.SimpleLateralDebug.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.SimpleLateralDebug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.SimpleLateralDebug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.SimpleLateralDebug.toObject = function(includeInstance, msg) {
  var f, obj = {
    lateralError: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    refHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    headingError: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    headingErrorRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    lateralErrorRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    curvature: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    steerAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    steerAngleFeedforward: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    steerAngleLateralContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    steerAngleLateralRateContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    steerAngleHeadingContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    steerAngleHeadingRateContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    steerAngleFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    steeringPosition: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    refSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    steerAngleLimited: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    lateralAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    lateralJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    refHeadingRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 20)) == null ? undefined : f,
    headingRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    refHeadingAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 22)) == null ? undefined : f,
    headingAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 23)) == null ? undefined : f,
    headingErrorAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    refHeadingJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 25)) == null ? undefined : f,
    headingJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 26)) == null ? undefined : f,
    headingErrorJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 27)) == null ? undefined : f,
    lateralErrorFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 28)) == null ? undefined : f,
    headingErrorFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 29)) == null ? undefined : f,
    currentTargetPoint: (f = msg.getCurrentTargetPoint()) && modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject(includeInstance, f),
    steerAngleFeedbackAugment: (f = jspb.Message.getOptionalFloatingPointField(msg, 31)) == null ? undefined : f,
    steerMracDebug: (f = msg.getSteerMracDebug()) && proto.apollo.control.MracDebug.toObject(includeInstance, f),
    steerMracEnableStatus: (f = jspb.Message.getBooleanField(msg, 33)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SimpleLateralDebug as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.SimpleLateralDebug.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lateralError;

  /** @type {?|undefined} */
  this.refHeading;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.headingError;

  /** @type {?|undefined} */
  this.headingErrorRate;

  /** @type {?|undefined} */
  this.lateralErrorRate;

  /** @type {?|undefined} */
  this.curvature;

  /** @type {?|undefined} */
  this.steerAngle;

  /** @type {?|undefined} */
  this.steerAngleFeedforward;

  /** @type {?|undefined} */
  this.steerAngleLateralContribution;

  /** @type {?|undefined} */
  this.steerAngleLateralRateContribution;

  /** @type {?|undefined} */
  this.steerAngleHeadingContribution;

  /** @type {?|undefined} */
  this.steerAngleHeadingRateContribution;

  /** @type {?|undefined} */
  this.steerAngleFeedback;

  /** @type {?|undefined} */
  this.steeringPosition;

  /** @type {?|undefined} */
  this.refSpeed;

  /** @type {?|undefined} */
  this.steerAngleLimited;

  /** @type {?|undefined} */
  this.lateralAcceleration;

  /** @type {?|undefined} */
  this.lateralJerk;

  /** @type {?|undefined} */
  this.refHeadingRate;

  /** @type {?|undefined} */
  this.headingRate;

  /** @type {?|undefined} */
  this.refHeadingAcceleration;

  /** @type {?|undefined} */
  this.headingAcceleration;

  /** @type {?|undefined} */
  this.headingErrorAcceleration;

  /** @type {?|undefined} */
  this.refHeadingJerk;

  /** @type {?|undefined} */
  this.headingJerk;

  /** @type {?|undefined} */
  this.headingErrorJerk;

  /** @type {?|undefined} */
  this.lateralErrorFeedback;

  /** @type {?|undefined} */
  this.headingErrorFeedback;

  /** @type {?|undefined} */
  this.currentTargetPoint;

  /** @type {?|undefined} */
  this.steerAngleFeedbackAugment;

  /** @type {?|undefined} */
  this.steerMracDebug;

  /** @type {?|undefined} */
  this.steerMracEnableStatus;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.SimpleLateralDebug.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.SimpleLateralDebug}
 */
proto.apollo.control.SimpleLateralDebug.fromObject = function(obj) {
  var msg = new proto.apollo.control.SimpleLateralDebug();
  obj.lateralError != null && jspb.Message.setField(msg, 1, obj.lateralError);
  obj.refHeading != null && jspb.Message.setField(msg, 2, obj.refHeading);
  obj.heading != null && jspb.Message.setField(msg, 3, obj.heading);
  obj.headingError != null && jspb.Message.setField(msg, 4, obj.headingError);
  obj.headingErrorRate != null && jspb.Message.setField(msg, 5, obj.headingErrorRate);
  obj.lateralErrorRate != null && jspb.Message.setField(msg, 6, obj.lateralErrorRate);
  obj.curvature != null && jspb.Message.setField(msg, 7, obj.curvature);
  obj.steerAngle != null && jspb.Message.setField(msg, 8, obj.steerAngle);
  obj.steerAngleFeedforward != null && jspb.Message.setField(msg, 9, obj.steerAngleFeedforward);
  obj.steerAngleLateralContribution != null && jspb.Message.setField(msg, 10, obj.steerAngleLateralContribution);
  obj.steerAngleLateralRateContribution != null && jspb.Message.setField(msg, 11, obj.steerAngleLateralRateContribution);
  obj.steerAngleHeadingContribution != null && jspb.Message.setField(msg, 12, obj.steerAngleHeadingContribution);
  obj.steerAngleHeadingRateContribution != null && jspb.Message.setField(msg, 13, obj.steerAngleHeadingRateContribution);
  obj.steerAngleFeedback != null && jspb.Message.setField(msg, 14, obj.steerAngleFeedback);
  obj.steeringPosition != null && jspb.Message.setField(msg, 15, obj.steeringPosition);
  obj.refSpeed != null && jspb.Message.setField(msg, 16, obj.refSpeed);
  obj.steerAngleLimited != null && jspb.Message.setField(msg, 17, obj.steerAngleLimited);
  obj.lateralAcceleration != null && jspb.Message.setField(msg, 18, obj.lateralAcceleration);
  obj.lateralJerk != null && jspb.Message.setField(msg, 19, obj.lateralJerk);
  obj.refHeadingRate != null && jspb.Message.setField(msg, 20, obj.refHeadingRate);
  obj.headingRate != null && jspb.Message.setField(msg, 21, obj.headingRate);
  obj.refHeadingAcceleration != null && jspb.Message.setField(msg, 22, obj.refHeadingAcceleration);
  obj.headingAcceleration != null && jspb.Message.setField(msg, 23, obj.headingAcceleration);
  obj.headingErrorAcceleration != null && jspb.Message.setField(msg, 24, obj.headingErrorAcceleration);
  obj.refHeadingJerk != null && jspb.Message.setField(msg, 25, obj.refHeadingJerk);
  obj.headingJerk != null && jspb.Message.setField(msg, 26, obj.headingJerk);
  obj.headingErrorJerk != null && jspb.Message.setField(msg, 27, obj.headingErrorJerk);
  obj.lateralErrorFeedback != null && jspb.Message.setField(msg, 28, obj.lateralErrorFeedback);
  obj.headingErrorFeedback != null && jspb.Message.setField(msg, 29, obj.headingErrorFeedback);
  obj.currentTargetPoint && jspb.Message.setWrapperField(
      msg, 30, modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject(obj.currentTargetPoint));
  obj.steerAngleFeedbackAugment != null && jspb.Message.setField(msg, 31, obj.steerAngleFeedbackAugment);
  obj.steerMracDebug && jspb.Message.setWrapperField(
      msg, 32, proto.apollo.control.MracDebug.fromObject(obj.steerMracDebug));
  obj.steerMracEnableStatus != null && jspb.Message.setField(msg, 33, obj.steerMracEnableStatus);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.SimpleLateralDebug}
 */
proto.apollo.control.SimpleLateralDebug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.SimpleLateralDebug;
  return proto.apollo.control.SimpleLateralDebug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.SimpleLateralDebug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.SimpleLateralDebug}
 */
proto.apollo.control.SimpleLateralDebug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeading(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingError(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingErrorRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralErrorRate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurvature(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleFeedforward(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleLateralContribution(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleLateralRateContribution(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleHeadingContribution(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleHeadingRateContribution(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleFeedback(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringPosition(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefSpeed(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleLimited(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralAcceleration(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralJerk(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeadingRate(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingRate(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeadingAcceleration(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingAcceleration(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingErrorAcceleration(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeadingJerk(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingJerk(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingErrorJerk(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralErrorFeedback(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingErrorFeedback(value);
      break;
    case 30:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.setCurrentTargetPoint(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleFeedbackAugment(value);
      break;
    case 32:
      var value = new proto.apollo.control.MracDebug;
      reader.readMessage(value,proto.apollo.control.MracDebug.deserializeBinaryFromReader);
      msg.setSteerMracDebug(value);
      break;
    case 33:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSteerMracEnableStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.SimpleLateralDebug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.SimpleLateralDebug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.SimpleLateralDebug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.SimpleLateralDebug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeDouble(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = message.getCurrentTargetPoint();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getSteerMracDebug();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.apollo.control.MracDebug.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeBool(
      33,
      f
    );
  }
};


/**
 * optional double lateral_error = 1;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getLateralError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setLateralError = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearLateralError = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasLateralError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double ref_heading = 2;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getRefHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setRefHeading = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearRefHeading = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasRefHeading = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double heading = 3;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double heading_error = 4;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingError = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingError = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double heading_error_rate = 5;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingErrorRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingErrorRate = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingErrorRate = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingErrorRate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double lateral_error_rate = 6;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getLateralErrorRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setLateralErrorRate = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearLateralErrorRate = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasLateralErrorRate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double curvature = 7;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getCurvature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setCurvature = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearCurvature = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasCurvature = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double steer_angle = 8;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double steer_angle_feedforward = 9;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleFeedforward = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleFeedforward = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleFeedforward = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleFeedforward = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double steer_angle_lateral_contribution = 10;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleLateralContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleLateralContribution = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleLateralContribution = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleLateralContribution = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double steer_angle_lateral_rate_contribution = 11;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleLateralRateContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleLateralRateContribution = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleLateralRateContribution = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleLateralRateContribution = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double steer_angle_heading_contribution = 12;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleHeadingContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleHeadingContribution = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleHeadingContribution = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleHeadingContribution = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double steer_angle_heading_rate_contribution = 13;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleHeadingRateContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleHeadingRateContribution = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleHeadingRateContribution = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleHeadingRateContribution = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double steer_angle_feedback = 14;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleFeedback = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleFeedback = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleFeedback = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double steering_position = 15;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteeringPosition = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteeringPosition = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteeringPosition = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteeringPosition = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double ref_speed = 16;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getRefSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setRefSpeed = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearRefSpeed = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasRefSpeed = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double steer_angle_limited = 17;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleLimited = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleLimited = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleLimited = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleLimited = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double lateral_acceleration = 18;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getLateralAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setLateralAcceleration = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearLateralAcceleration = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasLateralAcceleration = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double lateral_jerk = 19;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getLateralJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setLateralJerk = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearLateralJerk = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasLateralJerk = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional double ref_heading_rate = 20;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getRefHeadingRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setRefHeadingRate = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearRefHeadingRate = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasRefHeadingRate = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double heading_rate = 21;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingRate = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingRate = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingRate = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional double ref_heading_acceleration = 22;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getRefHeadingAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setRefHeadingAcceleration = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearRefHeadingAcceleration = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasRefHeadingAcceleration = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional double heading_acceleration = 23;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingAcceleration = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingAcceleration = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingAcceleration = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double heading_error_acceleration = 24;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingErrorAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingErrorAcceleration = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingErrorAcceleration = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingErrorAcceleration = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional double ref_heading_jerk = 25;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getRefHeadingJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setRefHeadingJerk = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearRefHeadingJerk = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasRefHeadingJerk = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional double heading_jerk = 26;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingJerk = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingJerk = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingJerk = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional double heading_error_jerk = 27;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingErrorJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingErrorJerk = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingErrorJerk = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingErrorJerk = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional double lateral_error_feedback = 28;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getLateralErrorFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setLateralErrorFeedback = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearLateralErrorFeedback = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasLateralErrorFeedback = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional double heading_error_feedback = 29;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getHeadingErrorFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setHeadingErrorFeedback = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearHeadingErrorFeedback = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasHeadingErrorFeedback = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional apollo.common.TrajectoryPoint current_target_point = 30;
 * @return {?proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getCurrentTargetPoint = function() {
  return /** @type{?proto.apollo.common.TrajectoryPoint} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 30));
};


/**
 * @param {?proto.apollo.common.TrajectoryPoint|undefined} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
*/
proto.apollo.control.SimpleLateralDebug.prototype.setCurrentTargetPoint = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearCurrentTargetPoint = function() {
  return this.setCurrentTargetPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasCurrentTargetPoint = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional double steer_angle_feedback_augment = 31;
 * @return {number}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerAngleFeedbackAugment = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerAngleFeedbackAugment = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerAngleFeedbackAugment = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerAngleFeedbackAugment = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional MracDebug steer_mrac_debug = 32;
 * @return {?proto.apollo.control.MracDebug}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerMracDebug = function() {
  return /** @type{?proto.apollo.control.MracDebug} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.MracDebug, 32));
};


/**
 * @param {?proto.apollo.control.MracDebug|undefined} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
*/
proto.apollo.control.SimpleLateralDebug.prototype.setSteerMracDebug = function(value) {
  return jspb.Message.setWrapperField(this, 32, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerMracDebug = function() {
  return this.setSteerMracDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerMracDebug = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional bool steer_mrac_enable_status = 33;
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.getSteerMracEnableStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 33, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.setSteerMracEnableStatus = function(value) {
  return jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleLateralDebug} returns this
 */
proto.apollo.control.SimpleLateralDebug.prototype.clearSteerMracEnableStatus = function() {
  return jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleLateralDebug.prototype.hasSteerMracEnableStatus = function() {
  return jspb.Message.getField(this, 33) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.control.SimpleMPCDebug.repeatedFields_ = [33,34];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.SimpleMPCDebug.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.SimpleMPCDebug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.SimpleMPCDebug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.SimpleMPCDebug.toObject = function(includeInstance, msg) {
  var f, obj = {
    lateralError: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    refHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    headingError: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    headingErrorRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    lateralErrorRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    curvature: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    steerAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    steerAngleFeedforward: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    steerAngleLateralContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    steerAngleLateralRateContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    steerAngleHeadingContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    steerAngleHeadingRateContribution: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    steerAngleFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    steeringPosition: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    refSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    steerAngleLimited: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    stationReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    stationError: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    speedReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 20)) == null ? undefined : f,
    speedError: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    accelerationReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 22)) == null ? undefined : f,
    isFullStop: (f = jspb.Message.getBooleanField(msg, 23)) == null ? undefined : f,
    stationFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    speedFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 25)) == null ? undefined : f,
    accelerationCmdCloseloop: (f = jspb.Message.getOptionalFloatingPointField(msg, 26)) == null ? undefined : f,
    accelerationCmd: (f = jspb.Message.getOptionalFloatingPointField(msg, 27)) == null ? undefined : f,
    accelerationLookup: (f = jspb.Message.getOptionalFloatingPointField(msg, 28)) == null ? undefined : f,
    speedLookup: (f = jspb.Message.getOptionalFloatingPointField(msg, 29)) == null ? undefined : f,
    calibrationValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 30)) == null ? undefined : f,
    steerUnconstrainedControlDiff: (f = jspb.Message.getOptionalFloatingPointField(msg, 31)) == null ? undefined : f,
    steerAngleFeedforwardCompensation: (f = jspb.Message.getOptionalFloatingPointField(msg, 32)) == null ? undefined : f,
    matrixQUpdatedList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 33)) == null ? undefined : f,
    matrixRUpdatedList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 34)) == null ? undefined : f,
    lateralAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 35)) == null ? undefined : f,
    lateralJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 36)) == null ? undefined : f,
    refHeadingRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 37)) == null ? undefined : f,
    headingRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 38)) == null ? undefined : f,
    refHeadingAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 39)) == null ? undefined : f,
    headingAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 40)) == null ? undefined : f,
    headingErrorAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 41)) == null ? undefined : f,
    refHeadingJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 42)) == null ? undefined : f,
    headingJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 43)) == null ? undefined : f,
    headingErrorJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 44)) == null ? undefined : f,
    accelerationFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 45)) == null ? undefined : f,
    accelerationError: (f = jspb.Message.getOptionalFloatingPointField(msg, 46)) == null ? undefined : f,
    jerkReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 47)) == null ? undefined : f,
    jerkFeedback: (f = jspb.Message.getOptionalFloatingPointField(msg, 48)) == null ? undefined : f,
    jerkError: (f = jspb.Message.getOptionalFloatingPointField(msg, 49)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SimpleMPCDebug as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.SimpleMPCDebug.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lateralError;

  /** @type {?|undefined} */
  this.refHeading;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.headingError;

  /** @type {?|undefined} */
  this.headingErrorRate;

  /** @type {?|undefined} */
  this.lateralErrorRate;

  /** @type {?|undefined} */
  this.curvature;

  /** @type {?|undefined} */
  this.steerAngle;

  /** @type {?|undefined} */
  this.steerAngleFeedforward;

  /** @type {?|undefined} */
  this.steerAngleLateralContribution;

  /** @type {?|undefined} */
  this.steerAngleLateralRateContribution;

  /** @type {?|undefined} */
  this.steerAngleHeadingContribution;

  /** @type {?|undefined} */
  this.steerAngleHeadingRateContribution;

  /** @type {?|undefined} */
  this.steerAngleFeedback;

  /** @type {?|undefined} */
  this.steeringPosition;

  /** @type {?|undefined} */
  this.refSpeed;

  /** @type {?|undefined} */
  this.steerAngleLimited;

  /** @type {?|undefined} */
  this.stationReference;

  /** @type {?|undefined} */
  this.stationError;

  /** @type {?|undefined} */
  this.speedReference;

  /** @type {?|undefined} */
  this.speedError;

  /** @type {?|undefined} */
  this.accelerationReference;

  /** @type {?|undefined} */
  this.isFullStop;

  /** @type {?|undefined} */
  this.stationFeedback;

  /** @type {?|undefined} */
  this.speedFeedback;

  /** @type {?|undefined} */
  this.accelerationCmdCloseloop;

  /** @type {?|undefined} */
  this.accelerationCmd;

  /** @type {?|undefined} */
  this.accelerationLookup;

  /** @type {?|undefined} */
  this.speedLookup;

  /** @type {?|undefined} */
  this.calibrationValue;

  /** @type {?|undefined} */
  this.steerUnconstrainedControlDiff;

  /** @type {?|undefined} */
  this.steerAngleFeedforwardCompensation;

  /** @type {?|undefined} */
  this.matrixQUpdatedList;

  /** @type {?|undefined} */
  this.matrixRUpdatedList;

  /** @type {?|undefined} */
  this.lateralAcceleration;

  /** @type {?|undefined} */
  this.lateralJerk;

  /** @type {?|undefined} */
  this.refHeadingRate;

  /** @type {?|undefined} */
  this.headingRate;

  /** @type {?|undefined} */
  this.refHeadingAcceleration;

  /** @type {?|undefined} */
  this.headingAcceleration;

  /** @type {?|undefined} */
  this.headingErrorAcceleration;

  /** @type {?|undefined} */
  this.refHeadingJerk;

  /** @type {?|undefined} */
  this.headingJerk;

  /** @type {?|undefined} */
  this.headingErrorJerk;

  /** @type {?|undefined} */
  this.accelerationFeedback;

  /** @type {?|undefined} */
  this.accelerationError;

  /** @type {?|undefined} */
  this.jerkReference;

  /** @type {?|undefined} */
  this.jerkFeedback;

  /** @type {?|undefined} */
  this.jerkError;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.SimpleMPCDebug.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.SimpleMPCDebug}
 */
proto.apollo.control.SimpleMPCDebug.fromObject = function(obj) {
  var msg = new proto.apollo.control.SimpleMPCDebug();
  obj.lateralError != null && jspb.Message.setField(msg, 1, obj.lateralError);
  obj.refHeading != null && jspb.Message.setField(msg, 2, obj.refHeading);
  obj.heading != null && jspb.Message.setField(msg, 3, obj.heading);
  obj.headingError != null && jspb.Message.setField(msg, 4, obj.headingError);
  obj.headingErrorRate != null && jspb.Message.setField(msg, 5, obj.headingErrorRate);
  obj.lateralErrorRate != null && jspb.Message.setField(msg, 6, obj.lateralErrorRate);
  obj.curvature != null && jspb.Message.setField(msg, 7, obj.curvature);
  obj.steerAngle != null && jspb.Message.setField(msg, 8, obj.steerAngle);
  obj.steerAngleFeedforward != null && jspb.Message.setField(msg, 9, obj.steerAngleFeedforward);
  obj.steerAngleLateralContribution != null && jspb.Message.setField(msg, 10, obj.steerAngleLateralContribution);
  obj.steerAngleLateralRateContribution != null && jspb.Message.setField(msg, 11, obj.steerAngleLateralRateContribution);
  obj.steerAngleHeadingContribution != null && jspb.Message.setField(msg, 12, obj.steerAngleHeadingContribution);
  obj.steerAngleHeadingRateContribution != null && jspb.Message.setField(msg, 13, obj.steerAngleHeadingRateContribution);
  obj.steerAngleFeedback != null && jspb.Message.setField(msg, 14, obj.steerAngleFeedback);
  obj.steeringPosition != null && jspb.Message.setField(msg, 15, obj.steeringPosition);
  obj.refSpeed != null && jspb.Message.setField(msg, 16, obj.refSpeed);
  obj.steerAngleLimited != null && jspb.Message.setField(msg, 17, obj.steerAngleLimited);
  obj.stationReference != null && jspb.Message.setField(msg, 18, obj.stationReference);
  obj.stationError != null && jspb.Message.setField(msg, 19, obj.stationError);
  obj.speedReference != null && jspb.Message.setField(msg, 20, obj.speedReference);
  obj.speedError != null && jspb.Message.setField(msg, 21, obj.speedError);
  obj.accelerationReference != null && jspb.Message.setField(msg, 22, obj.accelerationReference);
  obj.isFullStop != null && jspb.Message.setField(msg, 23, obj.isFullStop);
  obj.stationFeedback != null && jspb.Message.setField(msg, 24, obj.stationFeedback);
  obj.speedFeedback != null && jspb.Message.setField(msg, 25, obj.speedFeedback);
  obj.accelerationCmdCloseloop != null && jspb.Message.setField(msg, 26, obj.accelerationCmdCloseloop);
  obj.accelerationCmd != null && jspb.Message.setField(msg, 27, obj.accelerationCmd);
  obj.accelerationLookup != null && jspb.Message.setField(msg, 28, obj.accelerationLookup);
  obj.speedLookup != null && jspb.Message.setField(msg, 29, obj.speedLookup);
  obj.calibrationValue != null && jspb.Message.setField(msg, 30, obj.calibrationValue);
  obj.steerUnconstrainedControlDiff != null && jspb.Message.setField(msg, 31, obj.steerUnconstrainedControlDiff);
  obj.steerAngleFeedforwardCompensation != null && jspb.Message.setField(msg, 32, obj.steerAngleFeedforwardCompensation);
  obj.matrixQUpdatedList != null && jspb.Message.setField(msg, 33, obj.matrixQUpdatedList);
  obj.matrixRUpdatedList != null && jspb.Message.setField(msg, 34, obj.matrixRUpdatedList);
  obj.lateralAcceleration != null && jspb.Message.setField(msg, 35, obj.lateralAcceleration);
  obj.lateralJerk != null && jspb.Message.setField(msg, 36, obj.lateralJerk);
  obj.refHeadingRate != null && jspb.Message.setField(msg, 37, obj.refHeadingRate);
  obj.headingRate != null && jspb.Message.setField(msg, 38, obj.headingRate);
  obj.refHeadingAcceleration != null && jspb.Message.setField(msg, 39, obj.refHeadingAcceleration);
  obj.headingAcceleration != null && jspb.Message.setField(msg, 40, obj.headingAcceleration);
  obj.headingErrorAcceleration != null && jspb.Message.setField(msg, 41, obj.headingErrorAcceleration);
  obj.refHeadingJerk != null && jspb.Message.setField(msg, 42, obj.refHeadingJerk);
  obj.headingJerk != null && jspb.Message.setField(msg, 43, obj.headingJerk);
  obj.headingErrorJerk != null && jspb.Message.setField(msg, 44, obj.headingErrorJerk);
  obj.accelerationFeedback != null && jspb.Message.setField(msg, 45, obj.accelerationFeedback);
  obj.accelerationError != null && jspb.Message.setField(msg, 46, obj.accelerationError);
  obj.jerkReference != null && jspb.Message.setField(msg, 47, obj.jerkReference);
  obj.jerkFeedback != null && jspb.Message.setField(msg, 48, obj.jerkFeedback);
  obj.jerkError != null && jspb.Message.setField(msg, 49, obj.jerkError);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.SimpleMPCDebug}
 */
proto.apollo.control.SimpleMPCDebug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.SimpleMPCDebug;
  return proto.apollo.control.SimpleMPCDebug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.SimpleMPCDebug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.SimpleMPCDebug}
 */
proto.apollo.control.SimpleMPCDebug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeading(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingError(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingErrorRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralErrorRate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurvature(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleFeedforward(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleLateralContribution(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleLateralRateContribution(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleHeadingContribution(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleHeadingRateContribution(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleFeedback(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringPosition(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefSpeed(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleLimited(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationReference(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationError(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedReference(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedError(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationReference(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFullStop(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationFeedback(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedFeedback(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationCmdCloseloop(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationCmd(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationLookup(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLookup(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCalibrationValue(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerUnconstrainedControlDiff(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleFeedforwardCompensation(value);
      break;
    case 33:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatrixQUpdated(values[i]);
      }
      break;
    case 34:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatrixRUpdated(values[i]);
      }
      break;
    case 35:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralAcceleration(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralJerk(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeadingRate(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingRate(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeadingAcceleration(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingAcceleration(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingErrorAcceleration(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefHeadingJerk(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingJerk(value);
      break;
    case 44:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingErrorJerk(value);
      break;
    case 45:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationFeedback(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelerationError(value);
      break;
    case 47:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkReference(value);
      break;
    case 48:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkFeedback(value);
      break;
    case 49:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.SimpleMPCDebug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.SimpleMPCDebug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.SimpleMPCDebug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.SimpleMPCDebug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeDouble(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeDouble(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeDouble(
      32,
      f
    );
  }
  f = message.getMatrixQUpdatedList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      33,
      f
    );
  }
  f = message.getMatrixRUpdatedList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      34,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeDouble(
      35,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeDouble(
      36,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeDouble(
      37,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeDouble(
      38,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeDouble(
      39,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeDouble(
      40,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 41));
  if (f != null) {
    writer.writeDouble(
      41,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 42));
  if (f != null) {
    writer.writeDouble(
      42,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 43));
  if (f != null) {
    writer.writeDouble(
      43,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 44));
  if (f != null) {
    writer.writeDouble(
      44,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 45));
  if (f != null) {
    writer.writeDouble(
      45,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 46));
  if (f != null) {
    writer.writeDouble(
      46,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 47));
  if (f != null) {
    writer.writeDouble(
      47,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 48));
  if (f != null) {
    writer.writeDouble(
      48,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 49));
  if (f != null) {
    writer.writeDouble(
      49,
      f
    );
  }
};


/**
 * optional double lateral_error = 1;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getLateralError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setLateralError = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearLateralError = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasLateralError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double ref_heading = 2;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getRefHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setRefHeading = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearRefHeading = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasRefHeading = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double heading = 3;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double heading_error = 4;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeadingError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeadingError = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeadingError = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeadingError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double heading_error_rate = 5;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeadingErrorRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeadingErrorRate = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeadingErrorRate = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeadingErrorRate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double lateral_error_rate = 6;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getLateralErrorRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setLateralErrorRate = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearLateralErrorRate = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasLateralErrorRate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double curvature = 7;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getCurvature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setCurvature = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearCurvature = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasCurvature = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double steer_angle = 8;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double steer_angle_feedforward = 9;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleFeedforward = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleFeedforward = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleFeedforward = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleFeedforward = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double steer_angle_lateral_contribution = 10;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleLateralContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleLateralContribution = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleLateralContribution = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleLateralContribution = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double steer_angle_lateral_rate_contribution = 11;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleLateralRateContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleLateralRateContribution = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleLateralRateContribution = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleLateralRateContribution = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double steer_angle_heading_contribution = 12;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleHeadingContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleHeadingContribution = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleHeadingContribution = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleHeadingContribution = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double steer_angle_heading_rate_contribution = 13;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleHeadingRateContribution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleHeadingRateContribution = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleHeadingRateContribution = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleHeadingRateContribution = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double steer_angle_feedback = 14;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleFeedback = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleFeedback = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleFeedback = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double steering_position = 15;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteeringPosition = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteeringPosition = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteeringPosition = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteeringPosition = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double ref_speed = 16;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getRefSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setRefSpeed = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearRefSpeed = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasRefSpeed = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double steer_angle_limited = 17;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleLimited = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleLimited = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleLimited = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleLimited = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double station_reference = 18;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getStationReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setStationReference = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearStationReference = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasStationReference = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double station_error = 19;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getStationError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setStationError = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearStationError = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasStationError = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional double speed_reference = 20;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSpeedReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSpeedReference = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSpeedReference = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSpeedReference = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double speed_error = 21;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSpeedError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSpeedError = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSpeedError = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSpeedError = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional double acceleration_reference = 22;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getAccelerationReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setAccelerationReference = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearAccelerationReference = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasAccelerationReference = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool is_full_stop = 23;
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getIsFullStop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setIsFullStop = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearIsFullStop = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasIsFullStop = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double station_feedback = 24;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getStationFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setStationFeedback = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearStationFeedback = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasStationFeedback = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional double speed_feedback = 25;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSpeedFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSpeedFeedback = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSpeedFeedback = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSpeedFeedback = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional double acceleration_cmd_closeloop = 26;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getAccelerationCmdCloseloop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setAccelerationCmdCloseloop = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearAccelerationCmdCloseloop = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasAccelerationCmdCloseloop = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional double acceleration_cmd = 27;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getAccelerationCmd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setAccelerationCmd = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearAccelerationCmd = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasAccelerationCmd = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional double acceleration_lookup = 28;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getAccelerationLookup = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setAccelerationLookup = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearAccelerationLookup = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasAccelerationLookup = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional double speed_lookup = 29;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSpeedLookup = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSpeedLookup = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSpeedLookup = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSpeedLookup = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional double calibration_value = 30;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getCalibrationValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setCalibrationValue = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearCalibrationValue = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasCalibrationValue = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional double steer_unconstrained_control_diff = 31;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerUnconstrainedControlDiff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerUnconstrainedControlDiff = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerUnconstrainedControlDiff = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerUnconstrainedControlDiff = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional double steer_angle_feedforward_compensation = 32;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getSteerAngleFeedforwardCompensation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setSteerAngleFeedforwardCompensation = function(value) {
  return jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearSteerAngleFeedforwardCompensation = function() {
  return jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasSteerAngleFeedforwardCompensation = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * repeated double matrix_q_updated = 33;
 * @return {!Array<number>}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getMatrixQUpdatedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 33));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setMatrixQUpdatedList = function(value) {
  return jspb.Message.setField(this, 33, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.addMatrixQUpdated = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 33, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearMatrixQUpdatedList = function() {
  return this.setMatrixQUpdatedList([]);
};


/**
 * repeated double matrix_r_updated = 34;
 * @return {!Array<number>}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getMatrixRUpdatedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 34));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setMatrixRUpdatedList = function(value) {
  return jspb.Message.setField(this, 34, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.addMatrixRUpdated = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 34, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearMatrixRUpdatedList = function() {
  return this.setMatrixRUpdatedList([]);
};


/**
 * optional double lateral_acceleration = 35;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getLateralAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 35, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setLateralAcceleration = function(value) {
  return jspb.Message.setField(this, 35, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearLateralAcceleration = function() {
  return jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasLateralAcceleration = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional double lateral_jerk = 36;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getLateralJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 36, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setLateralJerk = function(value) {
  return jspb.Message.setField(this, 36, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearLateralJerk = function() {
  return jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasLateralJerk = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional double ref_heading_rate = 37;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getRefHeadingRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 37, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setRefHeadingRate = function(value) {
  return jspb.Message.setField(this, 37, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearRefHeadingRate = function() {
  return jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasRefHeadingRate = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional double heading_rate = 38;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeadingRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 38, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeadingRate = function(value) {
  return jspb.Message.setField(this, 38, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeadingRate = function() {
  return jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeadingRate = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional double ref_heading_acceleration = 39;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getRefHeadingAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 39, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setRefHeadingAcceleration = function(value) {
  return jspb.Message.setField(this, 39, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearRefHeadingAcceleration = function() {
  return jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasRefHeadingAcceleration = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional double heading_acceleration = 40;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeadingAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 40, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeadingAcceleration = function(value) {
  return jspb.Message.setField(this, 40, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeadingAcceleration = function() {
  return jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeadingAcceleration = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional double heading_error_acceleration = 41;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeadingErrorAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 41, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeadingErrorAcceleration = function(value) {
  return jspb.Message.setField(this, 41, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeadingErrorAcceleration = function() {
  return jspb.Message.setField(this, 41, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeadingErrorAcceleration = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional double ref_heading_jerk = 42;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getRefHeadingJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 42, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setRefHeadingJerk = function(value) {
  return jspb.Message.setField(this, 42, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearRefHeadingJerk = function() {
  return jspb.Message.setField(this, 42, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasRefHeadingJerk = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional double heading_jerk = 43;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeadingJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 43, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeadingJerk = function(value) {
  return jspb.Message.setField(this, 43, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeadingJerk = function() {
  return jspb.Message.setField(this, 43, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeadingJerk = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional double heading_error_jerk = 44;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getHeadingErrorJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 44, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setHeadingErrorJerk = function(value) {
  return jspb.Message.setField(this, 44, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearHeadingErrorJerk = function() {
  return jspb.Message.setField(this, 44, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasHeadingErrorJerk = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * optional double acceleration_feedback = 45;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getAccelerationFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 45, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setAccelerationFeedback = function(value) {
  return jspb.Message.setField(this, 45, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearAccelerationFeedback = function() {
  return jspb.Message.setField(this, 45, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasAccelerationFeedback = function() {
  return jspb.Message.getField(this, 45) != null;
};


/**
 * optional double acceleration_error = 46;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getAccelerationError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 46, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setAccelerationError = function(value) {
  return jspb.Message.setField(this, 46, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearAccelerationError = function() {
  return jspb.Message.setField(this, 46, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasAccelerationError = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * optional double jerk_reference = 47;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getJerkReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 47, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setJerkReference = function(value) {
  return jspb.Message.setField(this, 47, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearJerkReference = function() {
  return jspb.Message.setField(this, 47, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasJerkReference = function() {
  return jspb.Message.getField(this, 47) != null;
};


/**
 * optional double jerk_feedback = 48;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getJerkFeedback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 48, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setJerkFeedback = function(value) {
  return jspb.Message.setField(this, 48, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearJerkFeedback = function() {
  return jspb.Message.setField(this, 48, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasJerkFeedback = function() {
  return jspb.Message.getField(this, 48) != null;
};


/**
 * optional double jerk_error = 49;
 * @return {number}
 */
proto.apollo.control.SimpleMPCDebug.prototype.getJerkError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 49, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.setJerkError = function(value) {
  return jspb.Message.setField(this, 49, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.SimpleMPCDebug} returns this
 */
proto.apollo.control.SimpleMPCDebug.prototype.clearJerkError = function() {
  return jspb.Message.setField(this, 49, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.SimpleMPCDebug.prototype.hasJerkError = function() {
  return jspb.Message.getField(this, 49) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.control.MracDebug.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.MracDebug.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.MracDebug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.MracDebug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MracDebug.toObject = function(includeInstance, msg) {
  var f, obj = {
    mracModelOrder: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    mracReferenceStateList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    mracStateErrorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    mracAdaptiveGain: (f = msg.getMracAdaptiveGain()) && proto.apollo.control.MracAdaptiveGain.toObject(includeInstance, f),
    mracReferenceSaturationStatus: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    mracControlSaturationStatus: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MracDebug as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.MracDebug.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.mracModelOrder;

  /** @type {?|undefined} */
  this.mracReferenceStateList;

  /** @type {?|undefined} */
  this.mracStateErrorList;

  /** @type {?|undefined} */
  this.mracAdaptiveGain;

  /** @type {?|undefined} */
  this.mracReferenceSaturationStatus;

  /** @type {?|undefined} */
  this.mracControlSaturationStatus;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.MracDebug.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.MracDebug}
 */
proto.apollo.control.MracDebug.fromObject = function(obj) {
  var msg = new proto.apollo.control.MracDebug();
  obj.mracModelOrder != null && jspb.Message.setField(msg, 1, obj.mracModelOrder);
  obj.mracReferenceStateList != null && jspb.Message.setField(msg, 2, obj.mracReferenceStateList);
  obj.mracStateErrorList != null && jspb.Message.setField(msg, 3, obj.mracStateErrorList);
  obj.mracAdaptiveGain && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.control.MracAdaptiveGain.fromObject(obj.mracAdaptiveGain));
  obj.mracReferenceSaturationStatus != null && jspb.Message.setField(msg, 5, obj.mracReferenceSaturationStatus);
  obj.mracControlSaturationStatus != null && jspb.Message.setField(msg, 6, obj.mracControlSaturationStatus);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.MracDebug}
 */
proto.apollo.control.MracDebug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.MracDebug;
  return proto.apollo.control.MracDebug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.MracDebug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.MracDebug}
 */
proto.apollo.control.MracDebug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMracModelOrder(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMracReferenceState(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMracStateError(values[i]);
      }
      break;
    case 4:
      var value = new proto.apollo.control.MracAdaptiveGain;
      reader.readMessage(value,proto.apollo.control.MracAdaptiveGain.deserializeBinaryFromReader);
      msg.setMracAdaptiveGain(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMracReferenceSaturationStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMracControlSaturationStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.MracDebug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.MracDebug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.MracDebug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MracDebug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMracReferenceStateList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      2,
      f
    );
  }
  f = message.getMracStateErrorList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      3,
      f
    );
  }
  f = message.getMracAdaptiveGain();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.control.MracAdaptiveGain.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 mrac_model_order = 1;
 * @return {number}
 */
proto.apollo.control.MracDebug.prototype.getMracModelOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.setMracModelOrder = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.clearMracModelOrder = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracDebug.prototype.hasMracModelOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated double mrac_reference_state = 2;
 * @return {!Array<number>}
 */
proto.apollo.control.MracDebug.prototype.getMracReferenceStateList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.setMracReferenceStateList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.addMracReferenceState = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.clearMracReferenceStateList = function() {
  return this.setMracReferenceStateList([]);
};


/**
 * repeated double mrac_state_error = 3;
 * @return {!Array<number>}
 */
proto.apollo.control.MracDebug.prototype.getMracStateErrorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.setMracStateErrorList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.addMracStateError = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.clearMracStateErrorList = function() {
  return this.setMracStateErrorList([]);
};


/**
 * optional MracAdaptiveGain mrac_adaptive_gain = 4;
 * @return {?proto.apollo.control.MracAdaptiveGain}
 */
proto.apollo.control.MracDebug.prototype.getMracAdaptiveGain = function() {
  return /** @type{?proto.apollo.control.MracAdaptiveGain} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.MracAdaptiveGain, 4));
};


/**
 * @param {?proto.apollo.control.MracAdaptiveGain|undefined} value
 * @return {!proto.apollo.control.MracDebug} returns this
*/
proto.apollo.control.MracDebug.prototype.setMracAdaptiveGain = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.clearMracAdaptiveGain = function() {
  return this.setMracAdaptiveGain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracDebug.prototype.hasMracAdaptiveGain = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 mrac_reference_saturation_status = 5;
 * @return {number}
 */
proto.apollo.control.MracDebug.prototype.getMracReferenceSaturationStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.setMracReferenceSaturationStatus = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.clearMracReferenceSaturationStatus = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracDebug.prototype.hasMracReferenceSaturationStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 mrac_control_saturation_status = 6;
 * @return {number}
 */
proto.apollo.control.MracDebug.prototype.getMracControlSaturationStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.setMracControlSaturationStatus = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracDebug} returns this
 */
proto.apollo.control.MracDebug.prototype.clearMracControlSaturationStatus = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracDebug.prototype.hasMracControlSaturationStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.control.MracAdaptiveGain.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.MracAdaptiveGain.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.MracAdaptiveGain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.MracAdaptiveGain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MracAdaptiveGain.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateAdaptiveGainList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    inputAdaptiveGainList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    nonlinearAdaptiveGainList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MracAdaptiveGain as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.MracAdaptiveGain.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stateAdaptiveGainList;

  /** @type {?|undefined} */
  this.inputAdaptiveGainList;

  /** @type {?|undefined} */
  this.nonlinearAdaptiveGainList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.MracAdaptiveGain.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.MracAdaptiveGain}
 */
proto.apollo.control.MracAdaptiveGain.fromObject = function(obj) {
  var msg = new proto.apollo.control.MracAdaptiveGain();
  obj.stateAdaptiveGainList != null && jspb.Message.setField(msg, 1, obj.stateAdaptiveGainList);
  obj.inputAdaptiveGainList != null && jspb.Message.setField(msg, 2, obj.inputAdaptiveGainList);
  obj.nonlinearAdaptiveGainList != null && jspb.Message.setField(msg, 3, obj.nonlinearAdaptiveGainList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.MracAdaptiveGain}
 */
proto.apollo.control.MracAdaptiveGain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.MracAdaptiveGain;
  return proto.apollo.control.MracAdaptiveGain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.MracAdaptiveGain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.MracAdaptiveGain}
 */
proto.apollo.control.MracAdaptiveGain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStateAdaptiveGain(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInputAdaptiveGain(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNonlinearAdaptiveGain(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.MracAdaptiveGain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.MracAdaptiveGain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.MracAdaptiveGain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MracAdaptiveGain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateAdaptiveGainList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      1,
      f
    );
  }
  f = message.getInputAdaptiveGainList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      2,
      f
    );
  }
  f = message.getNonlinearAdaptiveGainList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      3,
      f
    );
  }
};


/**
 * repeated double state_adaptive_gain = 1;
 * @return {!Array<number>}
 */
proto.apollo.control.MracAdaptiveGain.prototype.getStateAdaptiveGainList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.setStateAdaptiveGainList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.addStateAdaptiveGain = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.clearStateAdaptiveGainList = function() {
  return this.setStateAdaptiveGainList([]);
};


/**
 * repeated double input_adaptive_gain = 2;
 * @return {!Array<number>}
 */
proto.apollo.control.MracAdaptiveGain.prototype.getInputAdaptiveGainList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.setInputAdaptiveGainList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.addInputAdaptiveGain = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.clearInputAdaptiveGainList = function() {
  return this.setInputAdaptiveGainList([]);
};


/**
 * repeated double nonlinear_adaptive_gain = 3;
 * @return {!Array<number>}
 */
proto.apollo.control.MracAdaptiveGain.prototype.getNonlinearAdaptiveGainList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.setNonlinearAdaptiveGainList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.addNonlinearAdaptiveGain = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracAdaptiveGain} returns this
 */
proto.apollo.control.MracAdaptiveGain.prototype.clearNonlinearAdaptiveGainList = function() {
  return this.setNonlinearAdaptiveGainList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.Debug.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.Debug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.Debug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.Debug.toObject = function(includeInstance, msg) {
  var f, obj = {
    simpleLonDebug: (f = msg.getSimpleLonDebug()) && proto.apollo.control.SimpleLongitudinalDebug.toObject(includeInstance, f),
    simpleLatDebug: (f = msg.getSimpleLatDebug()) && proto.apollo.control.SimpleLateralDebug.toObject(includeInstance, f),
    inputDebug: (f = msg.getInputDebug()) && modules_control_proto_input_debug_pb.InputDebug.toObject(includeInstance, f),
    simpleMpcDebug: (f = msg.getSimpleMpcDebug()) && proto.apollo.control.SimpleMPCDebug.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Debug as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.Debug.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.simpleLonDebug;

  /** @type {?|undefined} */
  this.simpleLatDebug;

  /** @type {?|undefined} */
  this.inputDebug;

  /** @type {?|undefined} */
  this.simpleMpcDebug;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.Debug.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.Debug}
 */
proto.apollo.control.Debug.fromObject = function(obj) {
  var msg = new proto.apollo.control.Debug();
  obj.simpleLonDebug && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.control.SimpleLongitudinalDebug.fromObject(obj.simpleLonDebug));
  obj.simpleLatDebug && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.control.SimpleLateralDebug.fromObject(obj.simpleLatDebug));
  obj.inputDebug && jspb.Message.setWrapperField(
      msg, 3, modules_control_proto_input_debug_pb.InputDebug.fromObject(obj.inputDebug));
  obj.simpleMpcDebug && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.control.SimpleMPCDebug.fromObject(obj.simpleMpcDebug));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.Debug}
 */
proto.apollo.control.Debug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.Debug;
  return proto.apollo.control.Debug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.Debug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.Debug}
 */
proto.apollo.control.Debug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.control.SimpleLongitudinalDebug;
      reader.readMessage(value,proto.apollo.control.SimpleLongitudinalDebug.deserializeBinaryFromReader);
      msg.setSimpleLonDebug(value);
      break;
    case 2:
      var value = new proto.apollo.control.SimpleLateralDebug;
      reader.readMessage(value,proto.apollo.control.SimpleLateralDebug.deserializeBinaryFromReader);
      msg.setSimpleLatDebug(value);
      break;
    case 3:
      var value = new modules_control_proto_input_debug_pb.InputDebug;
      reader.readMessage(value,modules_control_proto_input_debug_pb.InputDebug.deserializeBinaryFromReader);
      msg.setInputDebug(value);
      break;
    case 4:
      var value = new proto.apollo.control.SimpleMPCDebug;
      reader.readMessage(value,proto.apollo.control.SimpleMPCDebug.deserializeBinaryFromReader);
      msg.setSimpleMpcDebug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.Debug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.Debug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.Debug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.Debug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleLonDebug();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.control.SimpleLongitudinalDebug.serializeBinaryToWriter
    );
  }
  f = message.getSimpleLatDebug();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.control.SimpleLateralDebug.serializeBinaryToWriter
    );
  }
  f = message.getInputDebug();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_control_proto_input_debug_pb.InputDebug.serializeBinaryToWriter
    );
  }
  f = message.getSimpleMpcDebug();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.control.SimpleMPCDebug.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleLongitudinalDebug simple_lon_debug = 1;
 * @return {?proto.apollo.control.SimpleLongitudinalDebug}
 */
proto.apollo.control.Debug.prototype.getSimpleLonDebug = function() {
  return /** @type{?proto.apollo.control.SimpleLongitudinalDebug} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.SimpleLongitudinalDebug, 1));
};


/**
 * @param {?proto.apollo.control.SimpleLongitudinalDebug|undefined} value
 * @return {!proto.apollo.control.Debug} returns this
*/
proto.apollo.control.Debug.prototype.setSimpleLonDebug = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Debug} returns this
 */
proto.apollo.control.Debug.prototype.clearSimpleLonDebug = function() {
  return this.setSimpleLonDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Debug.prototype.hasSimpleLonDebug = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SimpleLateralDebug simple_lat_debug = 2;
 * @return {?proto.apollo.control.SimpleLateralDebug}
 */
proto.apollo.control.Debug.prototype.getSimpleLatDebug = function() {
  return /** @type{?proto.apollo.control.SimpleLateralDebug} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.SimpleLateralDebug, 2));
};


/**
 * @param {?proto.apollo.control.SimpleLateralDebug|undefined} value
 * @return {!proto.apollo.control.Debug} returns this
*/
proto.apollo.control.Debug.prototype.setSimpleLatDebug = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Debug} returns this
 */
proto.apollo.control.Debug.prototype.clearSimpleLatDebug = function() {
  return this.setSimpleLatDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Debug.prototype.hasSimpleLatDebug = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InputDebug input_debug = 3;
 * @return {?proto.apollo.control.InputDebug}
 */
proto.apollo.control.Debug.prototype.getInputDebug = function() {
  return /** @type{?proto.apollo.control.InputDebug} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_input_debug_pb.InputDebug, 3));
};


/**
 * @param {?proto.apollo.control.InputDebug|undefined} value
 * @return {!proto.apollo.control.Debug} returns this
*/
proto.apollo.control.Debug.prototype.setInputDebug = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Debug} returns this
 */
proto.apollo.control.Debug.prototype.clearInputDebug = function() {
  return this.setInputDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Debug.prototype.hasInputDebug = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SimpleMPCDebug simple_mpc_debug = 4;
 * @return {?proto.apollo.control.SimpleMPCDebug}
 */
proto.apollo.control.Debug.prototype.getSimpleMpcDebug = function() {
  return /** @type{?proto.apollo.control.SimpleMPCDebug} */ (
    jspb.Message.getWrapperField(this, proto.apollo.control.SimpleMPCDebug, 4));
};


/**
 * @param {?proto.apollo.control.SimpleMPCDebug|undefined} value
 * @return {!proto.apollo.control.Debug} returns this
*/
proto.apollo.control.Debug.prototype.setSimpleMpcDebug = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Debug} returns this
 */
proto.apollo.control.Debug.prototype.clearSimpleMpcDebug = function() {
  return this.setSimpleMpcDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Debug.prototype.hasSimpleMpcDebug = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.apollo.control.TurnSignal = {
  TURN_NONE: 0,
  TURN_LEFT: 1,
  TURN_RIGHT: 2
};

goog.object.extend(exports, proto.apollo.control);
