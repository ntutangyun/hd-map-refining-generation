// source: cyber/proto/parameter.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.cyber.proto.BoolResult', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.NodeName', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.Param', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.Param.OneofValueCase', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ParamName', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ParamType', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.Params', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.Param = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.cyber.proto.Param.oneofGroups_);
};
goog.inherits(proto.apollo.cyber.proto.Param, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.Param.displayName = 'proto.apollo.cyber.proto.Param';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.NodeName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.NodeName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.NodeName.displayName = 'proto.apollo.cyber.proto.NodeName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ParamName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ParamName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ParamName.displayName = 'proto.apollo.cyber.proto.ParamName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.BoolResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.BoolResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.BoolResult.displayName = 'proto.apollo.cyber.proto.BoolResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.cyber.proto.Params.repeatedFields_, null);
};
goog.inherits(proto.apollo.cyber.proto.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.Params.displayName = 'proto.apollo.cyber.proto.Params';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.cyber.proto.Param.oneofGroups_ = [[4,5,6,7]];

/**
 * @enum {number}
 */
proto.apollo.cyber.proto.Param.OneofValueCase = {
  ONEOF_VALUE_NOT_SET: 0,
  BOOL_VALUE: 4,
  INT_VALUE: 5,
  DOUBLE_VALUE: 6,
  STRING_VALUE: 7
};

/**
 * @return {proto.apollo.cyber.proto.Param.OneofValueCase}
 */
proto.apollo.cyber.proto.Param.prototype.getOneofValueCase = function() {
  return /** @type {proto.apollo.cyber.proto.Param.OneofValueCase} */(jspb.Message.computeOneofCase(this, proto.apollo.cyber.proto.Param.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.Param.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.Param.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.Param} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Param.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    typeName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    boolValue: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    intValue: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    doubleValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    stringValue: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    protoDesc: msg.getProtoDesc_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Param as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.Param.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.typeName;

  /** @type {?|undefined} */
  this.boolValue;

  /** @type {?|undefined} */
  this.intValue;

  /** @type {?|undefined} */
  this.doubleValue;

  /** @type {?|undefined} */
  this.stringValue;

  /** @type {?|undefined} */
  this.protoDesc;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.Param.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.Param}
 */
proto.apollo.cyber.proto.Param.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.Param();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.type != null && jspb.Message.setField(msg, 2, obj.type);
  obj.typeName != null && jspb.Message.setField(msg, 3, obj.typeName);
  obj.boolValue != null && jspb.Message.setField(msg, 4, obj.boolValue);
  obj.intValue != null && jspb.Message.setField(msg, 5, obj.intValue);
  obj.doubleValue != null && jspb.Message.setField(msg, 6, obj.doubleValue);
  obj.stringValue != null && jspb.Message.setField(msg, 7, obj.stringValue);
  obj.protoDesc != null && jspb.Message.setField(msg, 8, obj.protoDesc);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.Param}
 */
proto.apollo.cyber.proto.Param.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.Param;
  return proto.apollo.cyber.proto.Param.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.Param} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.Param}
 */
proto.apollo.cyber.proto.Param.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.cyber.proto.ParamType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtoDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.Param.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.Param.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.Param} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Param.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.cyber.proto.ParamType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.Param.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ParamType type = 2;
 * @return {!proto.apollo.cyber.proto.ParamType}
 */
proto.apollo.cyber.proto.Param.prototype.getType = function() {
  return /** @type {!proto.apollo.cyber.proto.ParamType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.cyber.proto.ParamType} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string type_name = 3;
 * @return {string}
 */
proto.apollo.cyber.proto.Param.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setTypeName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearTypeName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasTypeName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_value = 4;
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.apollo.cyber.proto.Param.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.apollo.cyber.proto.Param.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 int_value = 5;
 * @return {number}
 */
proto.apollo.cyber.proto.Param.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.apollo.cyber.proto.Param.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 5, proto.apollo.cyber.proto.Param.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double double_value = 6;
 * @return {number}
 */
proto.apollo.cyber.proto.Param.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setDoubleValue = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.apollo.cyber.proto.Param.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearDoubleValue = function() {
  return jspb.Message.setOneofField(this, 6, proto.apollo.cyber.proto.Param.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string string_value = 7;
 * @return {string}
 */
proto.apollo.cyber.proto.Param.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.apollo.cyber.proto.Param.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 7, proto.apollo.cyber.proto.Param.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes proto_desc = 8;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.cyber.proto.Param.prototype.getProtoDesc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes proto_desc = 8;
 * This is a type-conversion wrapper around `getProtoDesc()`
 * @return {string}
 */
proto.apollo.cyber.proto.Param.prototype.getProtoDesc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtoDesc()));
};


/**
 * optional bytes proto_desc = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtoDesc()`
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.Param.prototype.getProtoDesc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtoDesc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.setProtoDesc = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Param} returns this
 */
proto.apollo.cyber.proto.Param.prototype.clearProtoDesc = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Param.prototype.hasProtoDesc = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.NodeName.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.NodeName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.NodeName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.NodeName.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NodeName as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.NodeName.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.NodeName.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.NodeName}
 */
proto.apollo.cyber.proto.NodeName.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.NodeName();
  obj.value != null && jspb.Message.setField(msg, 1, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.NodeName}
 */
proto.apollo.cyber.proto.NodeName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.NodeName;
  return proto.apollo.cyber.proto.NodeName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.NodeName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.NodeName}
 */
proto.apollo.cyber.proto.NodeName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.NodeName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.NodeName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.NodeName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.NodeName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.NodeName.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.NodeName} returns this
 */
proto.apollo.cyber.proto.NodeName.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.NodeName} returns this
 */
proto.apollo.cyber.proto.NodeName.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.NodeName.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ParamName.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ParamName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ParamName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ParamName.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ParamName as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ParamName.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ParamName.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ParamName}
 */
proto.apollo.cyber.proto.ParamName.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ParamName();
  obj.value != null && jspb.Message.setField(msg, 1, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ParamName}
 */
proto.apollo.cyber.proto.ParamName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ParamName;
  return proto.apollo.cyber.proto.ParamName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ParamName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ParamName}
 */
proto.apollo.cyber.proto.ParamName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ParamName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ParamName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ParamName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ParamName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.ParamName.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ParamName} returns this
 */
proto.apollo.cyber.proto.ParamName.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ParamName} returns this
 */
proto.apollo.cyber.proto.ParamName.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ParamName.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.BoolResult.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.BoolResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.BoolResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.BoolResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BoolResult as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.BoolResult.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.BoolResult.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.BoolResult}
 */
proto.apollo.cyber.proto.BoolResult.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.BoolResult();
  obj.value != null && jspb.Message.setField(msg, 1, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.BoolResult}
 */
proto.apollo.cyber.proto.BoolResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.BoolResult;
  return proto.apollo.cyber.proto.BoolResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.BoolResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.BoolResult}
 */
proto.apollo.cyber.proto.BoolResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.BoolResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.BoolResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.BoolResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.BoolResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool value = 1;
 * @return {boolean}
 */
proto.apollo.cyber.proto.BoolResult.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.cyber.proto.BoolResult} returns this
 */
proto.apollo.cyber.proto.BoolResult.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.BoolResult} returns this
 */
proto.apollo.cyber.proto.BoolResult.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.BoolResult.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.cyber.proto.Params.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramList: jspb.Message.toObjectList(msg.getParamList(),
    proto.apollo.cyber.proto.Param.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Params as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.Params.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.paramList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.Params.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.Params}
 */
proto.apollo.cyber.proto.Params.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.Params();
  obj.paramList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.paramList.map(
          proto.apollo.cyber.proto.Param.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.Params}
 */
proto.apollo.cyber.proto.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.Params;
  return proto.apollo.cyber.proto.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.Params}
 */
proto.apollo.cyber.proto.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.cyber.proto.Param;
      reader.readMessage(value,proto.apollo.cyber.proto.Param.deserializeBinaryFromReader);
      msg.addParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.cyber.proto.Param.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Param param = 1;
 * @return {!Array<!proto.apollo.cyber.proto.Param>}
 */
proto.apollo.cyber.proto.Params.prototype.getParamList = function() {
  return /** @type{!Array<!proto.apollo.cyber.proto.Param>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.cyber.proto.Param, 1));
};


/**
 * @param {!Array<!proto.apollo.cyber.proto.Param>} value
 * @return {!proto.apollo.cyber.proto.Params} returns this
*/
proto.apollo.cyber.proto.Params.prototype.setParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.cyber.proto.Param=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.cyber.proto.Param}
 */
proto.apollo.cyber.proto.Params.prototype.addParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.cyber.proto.Param, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.cyber.proto.Params} returns this
 */
proto.apollo.cyber.proto.Params.prototype.clearParamList = function() {
  return this.setParamList([]);
};


/**
 * @enum {number}
 */
proto.apollo.cyber.proto.ParamType = {
  NOT_SET: 0,
  BOOL: 1,
  INT: 2,
  DOUBLE: 3,
  STRING: 4,
  PROTOBUF: 5
};

goog.object.extend(exports, proto.apollo.cyber.proto);
