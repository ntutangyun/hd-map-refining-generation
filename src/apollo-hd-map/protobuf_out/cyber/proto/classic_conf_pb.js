// source: cyber/proto/classic_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.cyber.proto.ClassicConf', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ClassicTask', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.SchedGroup', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ClassicTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ClassicTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ClassicTask.displayName = 'proto.apollo.cyber.proto.ClassicTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.SchedGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.cyber.proto.SchedGroup.repeatedFields_, null);
};
goog.inherits(proto.apollo.cyber.proto.SchedGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.SchedGroup.displayName = 'proto.apollo.cyber.proto.SchedGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ClassicConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.cyber.proto.ClassicConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.cyber.proto.ClassicConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ClassicConf.displayName = 'proto.apollo.cyber.proto.ClassicConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ClassicTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ClassicTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ClassicTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    prio: jspb.Message.getFieldWithDefault(msg, 2, 1),
    groupName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ClassicTask as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ClassicTask.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.prio;

  /** @type {?|undefined} */
  this.groupName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ClassicTask.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ClassicTask}
 */
proto.apollo.cyber.proto.ClassicTask.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ClassicTask();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.prio != null && jspb.Message.setField(msg, 2, obj.prio);
  obj.groupName != null && jspb.Message.setField(msg, 3, obj.groupName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ClassicTask}
 */
proto.apollo.cyber.proto.ClassicTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ClassicTask;
  return proto.apollo.cyber.proto.ClassicTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ClassicTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ClassicTask}
 */
proto.apollo.cyber.proto.ClassicTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrio(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ClassicTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ClassicTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ClassicTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ClassicTask} returns this
 */
proto.apollo.cyber.proto.ClassicTask.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ClassicTask} returns this
 */
proto.apollo.cyber.proto.ClassicTask.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 prio = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.getPrio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ClassicTask} returns this
 */
proto.apollo.cyber.proto.ClassicTask.prototype.setPrio = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ClassicTask} returns this
 */
proto.apollo.cyber.proto.ClassicTask.prototype.clearPrio = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.hasPrio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string group_name = 3;
 * @return {string}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ClassicTask} returns this
 */
proto.apollo.cyber.proto.ClassicTask.prototype.setGroupName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ClassicTask} returns this
 */
proto.apollo.cyber.proto.ClassicTask.prototype.clearGroupName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ClassicTask.prototype.hasGroupName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.cyber.proto.SchedGroup.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.SchedGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.SchedGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SchedGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "default_grp"),
    processorNum: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    affinity: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    cpuset: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    processorPolicy: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    processorPrio: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.apollo.cyber.proto.ClassicTask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SchedGroup as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.SchedGroup.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.processorNum;

  /** @type {?|undefined} */
  this.affinity;

  /** @type {?|undefined} */
  this.cpuset;

  /** @type {?|undefined} */
  this.processorPolicy;

  /** @type {?|undefined} */
  this.processorPrio;

  /** @type {?|undefined} */
  this.tasksList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.SchedGroup.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.SchedGroup}
 */
proto.apollo.cyber.proto.SchedGroup.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.SchedGroup();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.processorNum != null && jspb.Message.setField(msg, 2, obj.processorNum);
  obj.affinity != null && jspb.Message.setField(msg, 3, obj.affinity);
  obj.cpuset != null && jspb.Message.setField(msg, 4, obj.cpuset);
  obj.processorPolicy != null && jspb.Message.setField(msg, 5, obj.processorPolicy);
  obj.processorPrio != null && jspb.Message.setField(msg, 6, obj.processorPrio);
  obj.tasksList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.tasksList.map(
          proto.apollo.cyber.proto.ClassicTask.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.SchedGroup}
 */
proto.apollo.cyber.proto.SchedGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.SchedGroup;
  return proto.apollo.cyber.proto.SchedGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.SchedGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.SchedGroup}
 */
proto.apollo.cyber.proto.SchedGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProcessorNum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAffinity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpuset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessorPolicy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessorPrio(value);
      break;
    case 7:
      var value = new proto.apollo.cyber.proto.ClassicTask;
      reader.readMessage(value,proto.apollo.cyber.proto.ClassicTask.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.SchedGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.SchedGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SchedGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.cyber.proto.ClassicTask.serializeBinaryToWriter
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "default_grp"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 processor_num = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.getProcessorNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.setProcessorNum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.clearProcessorNum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.hasProcessorNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string affinity = 3;
 * @return {string}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.getAffinity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.setAffinity = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.clearAffinity = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.hasAffinity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string cpuset = 4;
 * @return {string}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.getCpuset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.setCpuset = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.clearCpuset = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.hasCpuset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string processor_policy = 5;
 * @return {string}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.getProcessorPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.setProcessorPolicy = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.clearProcessorPolicy = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.hasProcessorPolicy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 processor_prio = 6;
 * @return {number}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.getProcessorPrio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.setProcessorPrio = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.clearProcessorPrio = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.hasProcessorPrio = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated ClassicTask tasks = 7;
 * @return {!Array<!proto.apollo.cyber.proto.ClassicTask>}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.apollo.cyber.proto.ClassicTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.cyber.proto.ClassicTask, 7));
};


/**
 * @param {!Array<!proto.apollo.cyber.proto.ClassicTask>} value
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
*/
proto.apollo.cyber.proto.SchedGroup.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.cyber.proto.ClassicTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.cyber.proto.ClassicTask}
 */
proto.apollo.cyber.proto.SchedGroup.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.cyber.proto.ClassicTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.cyber.proto.SchedGroup} returns this
 */
proto.apollo.cyber.proto.SchedGroup.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.cyber.proto.ClassicConf.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ClassicConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ClassicConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ClassicConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ClassicConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.apollo.cyber.proto.SchedGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ClassicConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ClassicConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.groupsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ClassicConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ClassicConf}
 */
proto.apollo.cyber.proto.ClassicConf.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ClassicConf();
  obj.groupsList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.groupsList.map(
          proto.apollo.cyber.proto.SchedGroup.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ClassicConf}
 */
proto.apollo.cyber.proto.ClassicConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ClassicConf;
  return proto.apollo.cyber.proto.ClassicConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ClassicConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ClassicConf}
 */
proto.apollo.cyber.proto.ClassicConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.cyber.proto.SchedGroup;
      reader.readMessage(value,proto.apollo.cyber.proto.SchedGroup.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ClassicConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ClassicConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ClassicConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ClassicConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.cyber.proto.SchedGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SchedGroup groups = 1;
 * @return {!Array<!proto.apollo.cyber.proto.SchedGroup>}
 */
proto.apollo.cyber.proto.ClassicConf.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.apollo.cyber.proto.SchedGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.cyber.proto.SchedGroup, 1));
};


/**
 * @param {!Array<!proto.apollo.cyber.proto.SchedGroup>} value
 * @return {!proto.apollo.cyber.proto.ClassicConf} returns this
*/
proto.apollo.cyber.proto.ClassicConf.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.cyber.proto.SchedGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.cyber.proto.SchedGroup}
 */
proto.apollo.cyber.proto.ClassicConf.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.cyber.proto.SchedGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.cyber.proto.ClassicConf} returns this
 */
proto.apollo.cyber.proto.ClassicConf.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


goog.object.extend(exports, proto.apollo.cyber.proto);
