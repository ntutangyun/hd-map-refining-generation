// source: modules/drivers/lidar/proto/hesai_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_drivers_lidar_proto_hesai_pb = require('../../../../modules/drivers/lidar/proto/hesai_pb.js');
goog.object.extend(proto, modules_drivers_lidar_proto_hesai_pb);
goog.exportSymbol('proto.apollo.drivers.hesai.Config', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.hesai.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.hesai.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.hesai.Config.displayName = 'proto.apollo.drivers.hesai.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.hesai.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.hesai.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.hesai.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.hesai.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    model: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    ip: jspb.Message.getFieldWithDefault(msg, 2, "192.168.20.13"),
    lidarRecvPort: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    gpsRecvPort: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    startAngle: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    pointcloudChannel: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    timeZone: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    frameId: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    scanChannel: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    isOnlineCalibration: jspb.Message.getBooleanFieldWithDefault(msg, 11, true),
    calibrationFile: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    tcpCmdPort: jspb.Message.getFieldWithDefault(msg, 13, 9347)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Config as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.hesai.Config.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.model;

  /** @type {?|undefined} */
  this.ip;

  /** @type {?|undefined} */
  this.lidarRecvPort;

  /** @type {?|undefined} */
  this.gpsRecvPort;

  /** @type {?|undefined} */
  this.startAngle;

  /** @type {?|undefined} */
  this.pointcloudChannel;

  /** @type {?|undefined} */
  this.timeZone;

  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.scanChannel;

  /** @type {?|undefined} */
  this.isOnlineCalibration;

  /** @type {?|undefined} */
  this.calibrationFile;

  /** @type {?|undefined} */
  this.tcpCmdPort;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.hesai.Config.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.hesai.Config}
 */
proto.apollo.drivers.hesai.Config.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.hesai.Config();
  obj.model != null && jspb.Message.setField(msg, 1, obj.model);
  obj.ip != null && jspb.Message.setField(msg, 2, obj.ip);
  obj.lidarRecvPort != null && jspb.Message.setField(msg, 3, obj.lidarRecvPort);
  obj.gpsRecvPort != null && jspb.Message.setField(msg, 4, obj.gpsRecvPort);
  obj.startAngle != null && jspb.Message.setField(msg, 5, obj.startAngle);
  obj.pointcloudChannel != null && jspb.Message.setField(msg, 6, obj.pointcloudChannel);
  obj.timeZone != null && jspb.Message.setField(msg, 7, obj.timeZone);
  obj.frameId != null && jspb.Message.setField(msg, 8, obj.frameId);
  obj.scanChannel != null && jspb.Message.setField(msg, 9, obj.scanChannel);
  obj.isOnlineCalibration != null && jspb.Message.setField(msg, 11, obj.isOnlineCalibration);
  obj.calibrationFile != null && jspb.Message.setField(msg, 12, obj.calibrationFile);
  obj.tcpCmdPort != null && jspb.Message.setField(msg, 13, obj.tcpCmdPort);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.hesai.Config}
 */
proto.apollo.drivers.hesai.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.hesai.Config;
  return proto.apollo.drivers.hesai.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.hesai.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.hesai.Config}
 */
proto.apollo.drivers.hesai.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.drivers.hesai.Model} */ (reader.readEnum());
      msg.setModel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLidarRecvPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGpsRecvPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartAngle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointcloudChannel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeZone(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setScanChannel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOnlineCalibration(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibrationFile(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpCmdPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.hesai.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.hesai.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.hesai.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.hesai.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.drivers.hesai.Model} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * optional Model model = 1;
 * @return {!proto.apollo.drivers.hesai.Model}
 */
proto.apollo.drivers.hesai.Config.prototype.getModel = function() {
  return /** @type {!proto.apollo.drivers.hesai.Model} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.drivers.hesai.Model} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setModel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearModel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasModel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.apollo.drivers.hesai.Config.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "192.168.20.13"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setIp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearIp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasIp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 lidar_recv_port = 3;
 * @return {number}
 */
proto.apollo.drivers.hesai.Config.prototype.getLidarRecvPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setLidarRecvPort = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearLidarRecvPort = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasLidarRecvPort = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 gps_recv_port = 4;
 * @return {number}
 */
proto.apollo.drivers.hesai.Config.prototype.getGpsRecvPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setGpsRecvPort = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearGpsRecvPort = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasGpsRecvPort = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 start_angle = 5;
 * @return {number}
 */
proto.apollo.drivers.hesai.Config.prototype.getStartAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setStartAngle = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearStartAngle = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasStartAngle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string pointcloud_channel = 6;
 * @return {string}
 */
proto.apollo.drivers.hesai.Config.prototype.getPointcloudChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setPointcloudChannel = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearPointcloudChannel = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasPointcloudChannel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 time_zone = 7;
 * @return {number}
 */
proto.apollo.drivers.hesai.Config.prototype.getTimeZone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setTimeZone = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearTimeZone = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasTimeZone = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string frame_id = 8;
 * @return {string}
 */
proto.apollo.drivers.hesai.Config.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string scan_channel = 9;
 * @return {string}
 */
proto.apollo.drivers.hesai.Config.prototype.getScanChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setScanChannel = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearScanChannel = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasScanChannel = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool is_online_calibration = 11;
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.getIsOnlineCalibration = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setIsOnlineCalibration = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearIsOnlineCalibration = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasIsOnlineCalibration = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string calibration_file = 12;
 * @return {string}
 */
proto.apollo.drivers.hesai.Config.prototype.getCalibrationFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setCalibrationFile = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearCalibrationFile = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasCalibrationFile = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 tcp_cmd_port = 13;
 * @return {number}
 */
proto.apollo.drivers.hesai.Config.prototype.getTcpCmdPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 9347));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.setTcpCmdPort = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.hesai.Config} returns this
 */
proto.apollo.drivers.hesai.Config.prototype.clearTcpCmdPort = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.hesai.Config.prototype.hasTcpCmdPort = function() {
  return jspb.Message.getField(this, 13) != null;
};


goog.object.extend(exports, proto.apollo.drivers.hesai);
