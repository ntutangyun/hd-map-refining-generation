// source: modules/common/configs/proto/vehicle_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_geometry_pb = require('../../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
goog.exportSymbol('proto.apollo.common.Extrinsics', null, global);
goog.exportSymbol('proto.apollo.common.LatencyParam', null, global);
goog.exportSymbol('proto.apollo.common.Transform', null, global);
goog.exportSymbol('proto.apollo.common.VehicleBrand', null, global);
goog.exportSymbol('proto.apollo.common.VehicleConfig', null, global);
goog.exportSymbol('proto.apollo.common.VehicleID', null, global);
goog.exportSymbol('proto.apollo.common.VehicleParam', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.Transform.displayName = 'proto.apollo.common.Transform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.Extrinsics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.common.Extrinsics.repeatedFields_, null);
};
goog.inherits(proto.apollo.common.Extrinsics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.Extrinsics.displayName = 'proto.apollo.common.Extrinsics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.VehicleID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.VehicleID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.VehicleID.displayName = 'proto.apollo.common.VehicleID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.LatencyParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.LatencyParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.LatencyParam.displayName = 'proto.apollo.common.LatencyParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.VehicleParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.VehicleParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.VehicleParam.displayName = 'proto.apollo.common.VehicleParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.VehicleConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.VehicleConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.VehicleConfig.displayName = 'proto.apollo.common.VehicleConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceFrame: msg.getSourceFrame_asB64(),
    targetFrame: msg.getTargetFrame_asB64(),
    translation: (f = msg.getTranslation()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && modules_common_proto_geometry_pb.Quaternion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Transform as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.Transform.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sourceFrame;

  /** @type {?|undefined} */
  this.targetFrame;

  /** @type {?|undefined} */
  this.translation;

  /** @type {?|undefined} */
  this.rotation;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.Transform.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.Transform}
 */
proto.apollo.common.Transform.fromObject = function(obj) {
  var msg = new proto.apollo.common.Transform();
  obj.sourceFrame != null && jspb.Message.setField(msg, 1, obj.sourceFrame);
  obj.targetFrame != null && jspb.Message.setField(msg, 2, obj.targetFrame);
  obj.translation && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_geometry_pb.Point3D.fromObject(obj.translation));
  obj.rotation && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_geometry_pb.Quaternion.fromObject(obj.rotation));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.Transform}
 */
proto.apollo.common.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.Transform;
  return proto.apollo.common.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.Transform}
 */
proto.apollo.common.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSourceFrame(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTargetFrame(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setTranslation(value);
      break;
    case 4:
      var value = new modules_common_proto_geometry_pb.Quaternion;
      reader.readMessage(value,modules_common_proto_geometry_pb.Quaternion.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTranslation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_geometry_pb.Quaternion.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes source_frame = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.common.Transform.prototype.getSourceFrame = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes source_frame = 1;
 * This is a type-conversion wrapper around `getSourceFrame()`
 * @return {string}
 */
proto.apollo.common.Transform.prototype.getSourceFrame_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSourceFrame()));
};


/**
 * optional bytes source_frame = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSourceFrame()`
 * @return {!Uint8Array}
 */
proto.apollo.common.Transform.prototype.getSourceFrame_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSourceFrame()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.common.Transform} returns this
 */
proto.apollo.common.Transform.prototype.setSourceFrame = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.Transform} returns this
 */
proto.apollo.common.Transform.prototype.clearSourceFrame = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.Transform.prototype.hasSourceFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes target_frame = 2;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.common.Transform.prototype.getTargetFrame = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes target_frame = 2;
 * This is a type-conversion wrapper around `getTargetFrame()`
 * @return {string}
 */
proto.apollo.common.Transform.prototype.getTargetFrame_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTargetFrame()));
};


/**
 * optional bytes target_frame = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTargetFrame()`
 * @return {!Uint8Array}
 */
proto.apollo.common.Transform.prototype.getTargetFrame_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTargetFrame()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.common.Transform} returns this
 */
proto.apollo.common.Transform.prototype.setTargetFrame = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.Transform} returns this
 */
proto.apollo.common.Transform.prototype.clearTargetFrame = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.Transform.prototype.hasTargetFrame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point3D translation = 3;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.common.Transform.prototype.getTranslation = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 3));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.common.Transform} returns this
*/
proto.apollo.common.Transform.prototype.setTranslation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.Transform} returns this
 */
proto.apollo.common.Transform.prototype.clearTranslation = function() {
  return this.setTranslation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.Transform.prototype.hasTranslation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Quaternion rotation = 4;
 * @return {?proto.apollo.common.Quaternion}
 */
proto.apollo.common.Transform.prototype.getRotation = function() {
  return /** @type{?proto.apollo.common.Quaternion} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Quaternion, 4));
};


/**
 * @param {?proto.apollo.common.Quaternion|undefined} value
 * @return {!proto.apollo.common.Transform} returns this
*/
proto.apollo.common.Transform.prototype.setRotation = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.Transform} returns this
 */
proto.apollo.common.Transform.prototype.clearRotation = function() {
  return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.Transform.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.common.Extrinsics.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.Extrinsics.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.Extrinsics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.Extrinsics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Extrinsics.toObject = function(includeInstance, msg) {
  var f, obj = {
    tansformsList: jspb.Message.toObjectList(msg.getTansformsList(),
    proto.apollo.common.Transform.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Extrinsics as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.Extrinsics.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.tansformsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.Extrinsics.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.Extrinsics}
 */
proto.apollo.common.Extrinsics.fromObject = function(obj) {
  var msg = new proto.apollo.common.Extrinsics();
  obj.tansformsList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.tansformsList.map(
          proto.apollo.common.Transform.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.Extrinsics}
 */
proto.apollo.common.Extrinsics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.Extrinsics;
  return proto.apollo.common.Extrinsics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.Extrinsics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.Extrinsics}
 */
proto.apollo.common.Extrinsics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.common.Transform;
      reader.readMessage(value,proto.apollo.common.Transform.deserializeBinaryFromReader);
      msg.addTansforms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.Extrinsics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.Extrinsics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.Extrinsics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Extrinsics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTansformsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.common.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Transform tansforms = 1;
 * @return {!Array<!proto.apollo.common.Transform>}
 */
proto.apollo.common.Extrinsics.prototype.getTansformsList = function() {
  return /** @type{!Array<!proto.apollo.common.Transform>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.common.Transform, 1));
};


/**
 * @param {!Array<!proto.apollo.common.Transform>} value
 * @return {!proto.apollo.common.Extrinsics} returns this
*/
proto.apollo.common.Extrinsics.prototype.setTansformsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.common.Transform=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Transform}
 */
proto.apollo.common.Extrinsics.prototype.addTansforms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.common.Transform, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.common.Extrinsics} returns this
 */
proto.apollo.common.Extrinsics.prototype.clearTansformsList = function() {
  return this.setTansformsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.VehicleID.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.VehicleID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.VehicleID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleID.toObject = function(includeInstance, msg) {
  var f, obj = {
    vin: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    plate: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    otherUniqueId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VehicleID as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.VehicleID.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.vin;

  /** @type {?|undefined} */
  this.plate;

  /** @type {?|undefined} */
  this.otherUniqueId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.VehicleID.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.VehicleID}
 */
proto.apollo.common.VehicleID.fromObject = function(obj) {
  var msg = new proto.apollo.common.VehicleID();
  obj.vin != null && jspb.Message.setField(msg, 1, obj.vin);
  obj.plate != null && jspb.Message.setField(msg, 2, obj.plate);
  obj.otherUniqueId != null && jspb.Message.setField(msg, 3, obj.otherUniqueId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.VehicleID}
 */
proto.apollo.common.VehicleID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.VehicleID;
  return proto.apollo.common.VehicleID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.VehicleID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.VehicleID}
 */
proto.apollo.common.VehicleID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherUniqueId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.VehicleID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.VehicleID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.VehicleID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string vin = 1;
 * @return {string}
 */
proto.apollo.common.VehicleID.prototype.getVin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.VehicleID} returns this
 */
proto.apollo.common.VehicleID.prototype.setVin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleID} returns this
 */
proto.apollo.common.VehicleID.prototype.clearVin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleID.prototype.hasVin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plate = 2;
 * @return {string}
 */
proto.apollo.common.VehicleID.prototype.getPlate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.VehicleID} returns this
 */
proto.apollo.common.VehicleID.prototype.setPlate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleID} returns this
 */
proto.apollo.common.VehicleID.prototype.clearPlate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleID.prototype.hasPlate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string other_unique_id = 3;
 * @return {string}
 */
proto.apollo.common.VehicleID.prototype.getOtherUniqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.VehicleID} returns this
 */
proto.apollo.common.VehicleID.prototype.setOtherUniqueId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleID} returns this
 */
proto.apollo.common.VehicleID.prototype.clearOtherUniqueId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleID.prototype.hasOtherUniqueId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.LatencyParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.LatencyParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.LatencyParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.LatencyParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    riseTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    peakTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    settlingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LatencyParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.LatencyParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.deadTime;

  /** @type {?|undefined} */
  this.riseTime;

  /** @type {?|undefined} */
  this.peakTime;

  /** @type {?|undefined} */
  this.settlingTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.LatencyParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.LatencyParam}
 */
proto.apollo.common.LatencyParam.fromObject = function(obj) {
  var msg = new proto.apollo.common.LatencyParam();
  obj.deadTime != null && jspb.Message.setField(msg, 1, obj.deadTime);
  obj.riseTime != null && jspb.Message.setField(msg, 2, obj.riseTime);
  obj.peakTime != null && jspb.Message.setField(msg, 3, obj.peakTime);
  obj.settlingTime != null && jspb.Message.setField(msg, 4, obj.settlingTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.LatencyParam}
 */
proto.apollo.common.LatencyParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.LatencyParam;
  return proto.apollo.common.LatencyParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.LatencyParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.LatencyParam}
 */
proto.apollo.common.LatencyParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeadTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRiseTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPeakTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSettlingTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.LatencyParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.LatencyParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.LatencyParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.LatencyParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double dead_time = 1;
 * @return {number}
 */
proto.apollo.common.LatencyParam.prototype.getDeadTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.setDeadTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.clearDeadTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.LatencyParam.prototype.hasDeadTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double rise_time = 2;
 * @return {number}
 */
proto.apollo.common.LatencyParam.prototype.getRiseTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.setRiseTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.clearRiseTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.LatencyParam.prototype.hasRiseTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double peak_time = 3;
 * @return {number}
 */
proto.apollo.common.LatencyParam.prototype.getPeakTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.setPeakTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.clearPeakTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.LatencyParam.prototype.hasPeakTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double settling_time = 4;
 * @return {number}
 */
proto.apollo.common.LatencyParam.prototype.getSettlingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.setSettlingTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.LatencyParam} returns this
 */
proto.apollo.common.LatencyParam.prototype.clearSettlingTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.LatencyParam.prototype.hasSettlingTime = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.VehicleParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.VehicleParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.VehicleParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    brand: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    vehicleId: (f = msg.getVehicleId()) && proto.apollo.common.VehicleID.toObject(includeInstance, f),
    frontEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, NaN),
    backEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, NaN),
    leftEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, NaN),
    rightEdgeToCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, NaN),
    length: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, NaN),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, NaN),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, NaN),
    minTurnRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, NaN),
    maxAcceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, NaN),
    maxDeceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, NaN),
    maxSteerAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, NaN),
    maxSteerAngleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, NaN),
    minSteerAngleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, NaN),
    steerRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, NaN),
    wheelBase: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, NaN),
    wheelRollingRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, NaN),
    maxAbsSpeedWhenStopped: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, NaN),
    brakeDeadzone: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, NaN),
    throttleDeadzone: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, NaN),
    steeringLatencyParam: (f = msg.getSteeringLatencyParam()) && proto.apollo.common.LatencyParam.toObject(includeInstance, f),
    throttleLatencyParam: (f = msg.getThrottleLatencyParam()) && proto.apollo.common.LatencyParam.toObject(includeInstance, f),
    brakeLatencyParam: (f = msg.getBrakeLatencyParam()) && proto.apollo.common.LatencyParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VehicleParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.VehicleParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.brand;

  /** @type {?|undefined} */
  this.vehicleId;

  /** @type {?|undefined} */
  this.frontEdgeToCenter;

  /** @type {?|undefined} */
  this.backEdgeToCenter;

  /** @type {?|undefined} */
  this.leftEdgeToCenter;

  /** @type {?|undefined} */
  this.rightEdgeToCenter;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.minTurnRadius;

  /** @type {?|undefined} */
  this.maxAcceleration;

  /** @type {?|undefined} */
  this.maxDeceleration;

  /** @type {?|undefined} */
  this.maxSteerAngle;

  /** @type {?|undefined} */
  this.maxSteerAngleRate;

  /** @type {?|undefined} */
  this.minSteerAngleRate;

  /** @type {?|undefined} */
  this.steerRatio;

  /** @type {?|undefined} */
  this.wheelBase;

  /** @type {?|undefined} */
  this.wheelRollingRadius;

  /** @type {?|undefined} */
  this.maxAbsSpeedWhenStopped;

  /** @type {?|undefined} */
  this.brakeDeadzone;

  /** @type {?|undefined} */
  this.throttleDeadzone;

  /** @type {?|undefined} */
  this.steeringLatencyParam;

  /** @type {?|undefined} */
  this.throttleLatencyParam;

  /** @type {?|undefined} */
  this.brakeLatencyParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.VehicleParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.VehicleParam}
 */
proto.apollo.common.VehicleParam.fromObject = function(obj) {
  var msg = new proto.apollo.common.VehicleParam();
  obj.brand != null && jspb.Message.setField(msg, 1, obj.brand);
  obj.vehicleId && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.common.VehicleID.fromObject(obj.vehicleId));
  obj.frontEdgeToCenter != null && jspb.Message.setField(msg, 3, obj.frontEdgeToCenter);
  obj.backEdgeToCenter != null && jspb.Message.setField(msg, 4, obj.backEdgeToCenter);
  obj.leftEdgeToCenter != null && jspb.Message.setField(msg, 5, obj.leftEdgeToCenter);
  obj.rightEdgeToCenter != null && jspb.Message.setField(msg, 6, obj.rightEdgeToCenter);
  obj.length != null && jspb.Message.setField(msg, 7, obj.length);
  obj.width != null && jspb.Message.setField(msg, 8, obj.width);
  obj.height != null && jspb.Message.setField(msg, 9, obj.height);
  obj.minTurnRadius != null && jspb.Message.setField(msg, 10, obj.minTurnRadius);
  obj.maxAcceleration != null && jspb.Message.setField(msg, 11, obj.maxAcceleration);
  obj.maxDeceleration != null && jspb.Message.setField(msg, 12, obj.maxDeceleration);
  obj.maxSteerAngle != null && jspb.Message.setField(msg, 13, obj.maxSteerAngle);
  obj.maxSteerAngleRate != null && jspb.Message.setField(msg, 14, obj.maxSteerAngleRate);
  obj.minSteerAngleRate != null && jspb.Message.setField(msg, 15, obj.minSteerAngleRate);
  obj.steerRatio != null && jspb.Message.setField(msg, 16, obj.steerRatio);
  obj.wheelBase != null && jspb.Message.setField(msg, 17, obj.wheelBase);
  obj.wheelRollingRadius != null && jspb.Message.setField(msg, 18, obj.wheelRollingRadius);
  obj.maxAbsSpeedWhenStopped != null && jspb.Message.setField(msg, 19, obj.maxAbsSpeedWhenStopped);
  obj.brakeDeadzone != null && jspb.Message.setField(msg, 20, obj.brakeDeadzone);
  obj.throttleDeadzone != null && jspb.Message.setField(msg, 21, obj.throttleDeadzone);
  obj.steeringLatencyParam && jspb.Message.setWrapperField(
      msg, 22, proto.apollo.common.LatencyParam.fromObject(obj.steeringLatencyParam));
  obj.throttleLatencyParam && jspb.Message.setWrapperField(
      msg, 23, proto.apollo.common.LatencyParam.fromObject(obj.throttleLatencyParam));
  obj.brakeLatencyParam && jspb.Message.setWrapperField(
      msg, 24, proto.apollo.common.LatencyParam.fromObject(obj.brakeLatencyParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.VehicleParam}
 */
proto.apollo.common.VehicleParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.VehicleParam;
  return proto.apollo.common.VehicleParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.VehicleParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.VehicleParam}
 */
proto.apollo.common.VehicleParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.common.VehicleBrand} */ (reader.readEnum());
      msg.setBrand(value);
      break;
    case 2:
      var value = new proto.apollo.common.VehicleID;
      reader.readMessage(value,proto.apollo.common.VehicleID.deserializeBinaryFromReader);
      msg.setVehicleId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrontEdgeToCenter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBackEdgeToCenter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeftEdgeToCenter(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRightEdgeToCenter(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinTurnRadius(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAcceleration(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDeceleration(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSteerAngle(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSteerAngleRate(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinSteerAngleRate(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerRatio(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWheelBase(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWheelRollingRadius(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxAbsSpeedWhenStopped(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakeDeadzone(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottleDeadzone(value);
      break;
    case 22:
      var value = new proto.apollo.common.LatencyParam;
      reader.readMessage(value,proto.apollo.common.LatencyParam.deserializeBinaryFromReader);
      msg.setSteeringLatencyParam(value);
      break;
    case 23:
      var value = new proto.apollo.common.LatencyParam;
      reader.readMessage(value,proto.apollo.common.LatencyParam.deserializeBinaryFromReader);
      msg.setThrottleLatencyParam(value);
      break;
    case 24:
      var value = new proto.apollo.common.LatencyParam;
      reader.readMessage(value,proto.apollo.common.LatencyParam.deserializeBinaryFromReader);
      msg.setBrakeLatencyParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.VehicleParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.VehicleParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.VehicleParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.common.VehicleBrand} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVehicleId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.common.VehicleID.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getSteeringLatencyParam();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.apollo.common.LatencyParam.serializeBinaryToWriter
    );
  }
  f = message.getThrottleLatencyParam();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.apollo.common.LatencyParam.serializeBinaryToWriter
    );
  }
  f = message.getBrakeLatencyParam();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.apollo.common.LatencyParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional VehicleBrand brand = 1;
 * @return {!proto.apollo.common.VehicleBrand}
 */
proto.apollo.common.VehicleParam.prototype.getBrand = function() {
  return /** @type {!proto.apollo.common.VehicleBrand} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.common.VehicleBrand} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setBrand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBrand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VehicleID vehicle_id = 2;
 * @return {?proto.apollo.common.VehicleID}
 */
proto.apollo.common.VehicleParam.prototype.getVehicleId = function() {
  return /** @type{?proto.apollo.common.VehicleID} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.VehicleID, 2));
};


/**
 * @param {?proto.apollo.common.VehicleID|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setVehicleId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearVehicleId = function() {
  return this.setVehicleId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasVehicleId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double front_edge_to_center = 3;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getFrontEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setFrontEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearFrontEdgeToCenter = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasFrontEdgeToCenter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double back_edge_to_center = 4;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getBackEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setBackEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBackEdgeToCenter = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBackEdgeToCenter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double left_edge_to_center = 5;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getLeftEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setLeftEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearLeftEdgeToCenter = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasLeftEdgeToCenter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double right_edge_to_center = 6;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getRightEdgeToCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setRightEdgeToCenter = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearRightEdgeToCenter = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasRightEdgeToCenter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double length = 7;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearLength = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasLength = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double width = 8;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double height = 9;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double min_turn_radius = 10;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMinTurnRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMinTurnRadius = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMinTurnRadius = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMinTurnRadius = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double max_acceleration = 11;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxAcceleration = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxAcceleration = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxAcceleration = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double max_deceleration = 12;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxDeceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxDeceleration = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxDeceleration = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxDeceleration = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double max_steer_angle = 13;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxSteerAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxSteerAngle = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxSteerAngle = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxSteerAngle = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double max_steer_angle_rate = 14;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxSteerAngleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxSteerAngleRate = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxSteerAngleRate = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxSteerAngleRate = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double min_steer_angle_rate = 15;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMinSteerAngleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMinSteerAngleRate = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMinSteerAngleRate = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMinSteerAngleRate = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double steer_ratio = 16;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getSteerRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setSteerRatio = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearSteerRatio = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasSteerRatio = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double wheel_base = 17;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getWheelBase = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setWheelBase = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearWheelBase = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasWheelBase = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double wheel_rolling_radius = 18;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getWheelRollingRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setWheelRollingRadius = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearWheelRollingRadius = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasWheelRollingRadius = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional float max_abs_speed_when_stopped = 19;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getMaxAbsSpeedWhenStopped = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setMaxAbsSpeedWhenStopped = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearMaxAbsSpeedWhenStopped = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasMaxAbsSpeedWhenStopped = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional double brake_deadzone = 20;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getBrakeDeadzone = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setBrakeDeadzone = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBrakeDeadzone = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBrakeDeadzone = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double throttle_deadzone = 21;
 * @return {number}
 */
proto.apollo.common.VehicleParam.prototype.getThrottleDeadzone = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.setThrottleDeadzone = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearThrottleDeadzone = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasThrottleDeadzone = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional LatencyParam steering_latency_param = 22;
 * @return {?proto.apollo.common.LatencyParam}
 */
proto.apollo.common.VehicleParam.prototype.getSteeringLatencyParam = function() {
  return /** @type{?proto.apollo.common.LatencyParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.LatencyParam, 22));
};


/**
 * @param {?proto.apollo.common.LatencyParam|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setSteeringLatencyParam = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearSteeringLatencyParam = function() {
  return this.setSteeringLatencyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasSteeringLatencyParam = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional LatencyParam throttle_latency_param = 23;
 * @return {?proto.apollo.common.LatencyParam}
 */
proto.apollo.common.VehicleParam.prototype.getThrottleLatencyParam = function() {
  return /** @type{?proto.apollo.common.LatencyParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.LatencyParam, 23));
};


/**
 * @param {?proto.apollo.common.LatencyParam|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setThrottleLatencyParam = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearThrottleLatencyParam = function() {
  return this.setThrottleLatencyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasThrottleLatencyParam = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional LatencyParam brake_latency_param = 24;
 * @return {?proto.apollo.common.LatencyParam}
 */
proto.apollo.common.VehicleParam.prototype.getBrakeLatencyParam = function() {
  return /** @type{?proto.apollo.common.LatencyParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.LatencyParam, 24));
};


/**
 * @param {?proto.apollo.common.LatencyParam|undefined} value
 * @return {!proto.apollo.common.VehicleParam} returns this
*/
proto.apollo.common.VehicleParam.prototype.setBrakeLatencyParam = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleParam} returns this
 */
proto.apollo.common.VehicleParam.prototype.clearBrakeLatencyParam = function() {
  return this.setBrakeLatencyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleParam.prototype.hasBrakeLatencyParam = function() {
  return jspb.Message.getField(this, 24) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.VehicleConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.VehicleConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.VehicleConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    vehicleParam: (f = msg.getVehicleParam()) && proto.apollo.common.VehicleParam.toObject(includeInstance, f),
    extrinsics: (f = msg.getExtrinsics()) && proto.apollo.common.Extrinsics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VehicleConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.VehicleConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.vehicleParam;

  /** @type {?|undefined} */
  this.extrinsics;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.VehicleConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.VehicleConfig}
 */
proto.apollo.common.VehicleConfig.fromObject = function(obj) {
  var msg = new proto.apollo.common.VehicleConfig();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.vehicleParam && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.common.VehicleParam.fromObject(obj.vehicleParam));
  obj.extrinsics && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.common.Extrinsics.fromObject(obj.extrinsics));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.VehicleConfig}
 */
proto.apollo.common.VehicleConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.VehicleConfig;
  return proto.apollo.common.VehicleConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.VehicleConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.VehicleConfig}
 */
proto.apollo.common.VehicleConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.apollo.common.VehicleParam;
      reader.readMessage(value,proto.apollo.common.VehicleParam.deserializeBinaryFromReader);
      msg.setVehicleParam(value);
      break;
    case 3:
      var value = new proto.apollo.common.Extrinsics;
      reader.readMessage(value,proto.apollo.common.Extrinsics.deserializeBinaryFromReader);
      msg.setExtrinsics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.VehicleConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.VehicleConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.VehicleConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getVehicleParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.common.VehicleParam.serializeBinaryToWriter
    );
  }
  f = message.getExtrinsics();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.common.Extrinsics.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.common.VehicleConfig.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.common.VehicleConfig} returns this
*/
proto.apollo.common.VehicleConfig.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleConfig} returns this
 */
proto.apollo.common.VehicleConfig.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleConfig.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VehicleParam vehicle_param = 2;
 * @return {?proto.apollo.common.VehicleParam}
 */
proto.apollo.common.VehicleConfig.prototype.getVehicleParam = function() {
  return /** @type{?proto.apollo.common.VehicleParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.VehicleParam, 2));
};


/**
 * @param {?proto.apollo.common.VehicleParam|undefined} value
 * @return {!proto.apollo.common.VehicleConfig} returns this
*/
proto.apollo.common.VehicleConfig.prototype.setVehicleParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleConfig} returns this
 */
proto.apollo.common.VehicleConfig.prototype.clearVehicleParam = function() {
  return this.setVehicleParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleConfig.prototype.hasVehicleParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Extrinsics extrinsics = 3;
 * @return {?proto.apollo.common.Extrinsics}
 */
proto.apollo.common.VehicleConfig.prototype.getExtrinsics = function() {
  return /** @type{?proto.apollo.common.Extrinsics} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.Extrinsics, 3));
};


/**
 * @param {?proto.apollo.common.Extrinsics|undefined} value
 * @return {!proto.apollo.common.VehicleConfig} returns this
*/
proto.apollo.common.VehicleConfig.prototype.setExtrinsics = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleConfig} returns this
 */
proto.apollo.common.VehicleConfig.prototype.clearExtrinsics = function() {
  return this.setExtrinsics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleConfig.prototype.hasExtrinsics = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.apollo.common.VehicleBrand = {
  LINCOLN_MKZ: 0,
  GEM: 1,
  LEXUS: 2,
  TRANSIT: 3,
  GE3: 4,
  WEY: 5,
  ZHONGYUN: 6,
  CH: 7,
  DKIT: 8,
  NEOLIX: 9
};

goog.object.extend(exports, proto.apollo.common);
