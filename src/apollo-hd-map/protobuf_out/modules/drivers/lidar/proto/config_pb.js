// source: modules/drivers/lidar/proto/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_drivers_lidar_proto_hesai_config_pb = require('../../../../modules/drivers/lidar/proto/hesai_config_pb.js');
goog.object.extend(proto, modules_drivers_lidar_proto_hesai_config_pb);
var modules_drivers_lidar_proto_velodyne_config_pb = require('../../../../modules/drivers/lidar/proto/velodyne_config_pb.js');
goog.object.extend(proto, modules_drivers_lidar_proto_velodyne_config_pb);
var modules_drivers_lidar_proto_lidar_parameter_pb = require('../../../../modules/drivers/lidar/proto/lidar_parameter_pb.js');
goog.object.extend(proto, modules_drivers_lidar_proto_lidar_parameter_pb);
var modules_drivers_lidar_proto_robosense_config_pb = require('../../../../modules/drivers/lidar/proto/robosense_config_pb.js');
goog.object.extend(proto, modules_drivers_lidar_proto_robosense_config_pb);
goog.exportSymbol('proto.apollo.drivers.lidar.config', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.lidar.config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.lidar.config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.lidar.config.displayName = 'proto.apollo.drivers.lidar.config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.lidar.config.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.lidar.config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.lidar.config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.lidar.config.toObject = function(includeInstance, msg) {
  var f, obj = {
    brand: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    hesai: (f = msg.getHesai()) && modules_drivers_lidar_proto_hesai_config_pb.Config.toObject(includeInstance, f),
    robosense: (f = msg.getRobosense()) && modules_drivers_lidar_proto_robosense_config_pb.Config.toObject(includeInstance, f),
    velodyne: (f = msg.getVelodyne()) && modules_drivers_lidar_proto_velodyne_config_pb.Config.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of config as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.lidar.config.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.brand;

  /** @type {?|undefined} */
  this.hesai;

  /** @type {?|undefined} */
  this.robosense;

  /** @type {?|undefined} */
  this.velodyne;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.lidar.config.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.lidar.config}
 */
proto.apollo.drivers.lidar.config.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.lidar.config();
  obj.brand != null && jspb.Message.setField(msg, 1, obj.brand);
  obj.hesai && jspb.Message.setWrapperField(
      msg, 2, modules_drivers_lidar_proto_hesai_config_pb.Config.fromObject(obj.hesai));
  obj.robosense && jspb.Message.setWrapperField(
      msg, 3, modules_drivers_lidar_proto_robosense_config_pb.Config.fromObject(obj.robosense));
  obj.velodyne && jspb.Message.setWrapperField(
      msg, 4, modules_drivers_lidar_proto_velodyne_config_pb.Config.fromObject(obj.velodyne));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.lidar.config}
 */
proto.apollo.drivers.lidar.config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.lidar.config;
  return proto.apollo.drivers.lidar.config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.lidar.config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.lidar.config}
 */
proto.apollo.drivers.lidar.config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.drivers.lidar.LidarParameter.LidarBrand} */ (reader.readEnum());
      msg.setBrand(value);
      break;
    case 2:
      var value = new modules_drivers_lidar_proto_hesai_config_pb.Config;
      reader.readMessage(value,modules_drivers_lidar_proto_hesai_config_pb.Config.deserializeBinaryFromReader);
      msg.setHesai(value);
      break;
    case 3:
      var value = new modules_drivers_lidar_proto_robosense_config_pb.Config;
      reader.readMessage(value,modules_drivers_lidar_proto_robosense_config_pb.Config.deserializeBinaryFromReader);
      msg.setRobosense(value);
      break;
    case 4:
      var value = new modules_drivers_lidar_proto_velodyne_config_pb.Config;
      reader.readMessage(value,modules_drivers_lidar_proto_velodyne_config_pb.Config.deserializeBinaryFromReader);
      msg.setVelodyne(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.lidar.config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.lidar.config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.lidar.config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.lidar.config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.drivers.lidar.LidarParameter.LidarBrand} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHesai();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_drivers_lidar_proto_hesai_config_pb.Config.serializeBinaryToWriter
    );
  }
  f = message.getRobosense();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_drivers_lidar_proto_robosense_config_pb.Config.serializeBinaryToWriter
    );
  }
  f = message.getVelodyne();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_drivers_lidar_proto_velodyne_config_pb.Config.serializeBinaryToWriter
    );
  }
};


/**
 * optional LidarParameter.LidarBrand brand = 1;
 * @return {!proto.apollo.drivers.lidar.LidarParameter.LidarBrand}
 */
proto.apollo.drivers.lidar.config.prototype.getBrand = function() {
  return /** @type {!proto.apollo.drivers.lidar.LidarParameter.LidarBrand} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.drivers.lidar.LidarParameter.LidarBrand} value
 * @return {!proto.apollo.drivers.lidar.config} returns this
 */
proto.apollo.drivers.lidar.config.prototype.setBrand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.lidar.config} returns this
 */
proto.apollo.drivers.lidar.config.prototype.clearBrand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.lidar.config.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.drivers.hesai.Config hesai = 2;
 * @return {?proto.apollo.drivers.hesai.Config}
 */
proto.apollo.drivers.lidar.config.prototype.getHesai = function() {
  return /** @type{?proto.apollo.drivers.hesai.Config} */ (
    jspb.Message.getWrapperField(this, modules_drivers_lidar_proto_hesai_config_pb.Config, 2));
};


/**
 * @param {?proto.apollo.drivers.hesai.Config|undefined} value
 * @return {!proto.apollo.drivers.lidar.config} returns this
*/
proto.apollo.drivers.lidar.config.prototype.setHesai = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.lidar.config} returns this
 */
proto.apollo.drivers.lidar.config.prototype.clearHesai = function() {
  return this.setHesai(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.lidar.config.prototype.hasHesai = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.drivers.robosense.Config robosense = 3;
 * @return {?proto.apollo.drivers.robosense.Config}
 */
proto.apollo.drivers.lidar.config.prototype.getRobosense = function() {
  return /** @type{?proto.apollo.drivers.robosense.Config} */ (
    jspb.Message.getWrapperField(this, modules_drivers_lidar_proto_robosense_config_pb.Config, 3));
};


/**
 * @param {?proto.apollo.drivers.robosense.Config|undefined} value
 * @return {!proto.apollo.drivers.lidar.config} returns this
*/
proto.apollo.drivers.lidar.config.prototype.setRobosense = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.lidar.config} returns this
 */
proto.apollo.drivers.lidar.config.prototype.clearRobosense = function() {
  return this.setRobosense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.lidar.config.prototype.hasRobosense = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.drivers.velodyne.Config velodyne = 4;
 * @return {?proto.apollo.drivers.velodyne.Config}
 */
proto.apollo.drivers.lidar.config.prototype.getVelodyne = function() {
  return /** @type{?proto.apollo.drivers.velodyne.Config} */ (
    jspb.Message.getWrapperField(this, modules_drivers_lidar_proto_velodyne_config_pb.Config, 4));
};


/**
 * @param {?proto.apollo.drivers.velodyne.Config|undefined} value
 * @return {!proto.apollo.drivers.lidar.config} returns this
*/
proto.apollo.drivers.lidar.config.prototype.setVelodyne = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.lidar.config} returns this
 */
proto.apollo.drivers.lidar.config.prototype.clearVelodyne = function() {
  return this.setVelodyne(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.lidar.config.prototype.hasVelodyne = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.apollo.drivers.lidar);
