// source: modules/planning/proto/decision.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_vehicle_signal_pb = require('../../../modules/common/proto/vehicle_signal_pb.js');
goog.object.extend(proto, modules_common_proto_vehicle_signal_pb);
var modules_routing_proto_routing_pb = require('../../../modules/routing/proto/routing_pb.js');
goog.object.extend(proto, modules_routing_proto_routing_pb);
goog.exportSymbol('proto.apollo.planning.DecisionResult', null, global);
goog.exportSymbol('proto.apollo.planning.EmergencyStopCruiseToStop', null, global);
goog.exportSymbol('proto.apollo.planning.EmergencyStopHardBrake', null, global);
goog.exportSymbol('proto.apollo.planning.MainChangeLane', null, global);
goog.exportSymbol('proto.apollo.planning.MainChangeLane.Type', null, global);
goog.exportSymbol('proto.apollo.planning.MainCruise', null, global);
goog.exportSymbol('proto.apollo.planning.MainDecision', null, global);
goog.exportSymbol('proto.apollo.planning.MainDecision.TaskCase', null, global);
goog.exportSymbol('proto.apollo.planning.MainEmergencyStop', null, global);
goog.exportSymbol('proto.apollo.planning.MainEmergencyStop.ReasonCode', null, global);
goog.exportSymbol('proto.apollo.planning.MainEmergencyStop.TaskCase', null, global);
goog.exportSymbol('proto.apollo.planning.MainMissionComplete', null, global);
goog.exportSymbol('proto.apollo.planning.MainNotReady', null, global);
goog.exportSymbol('proto.apollo.planning.MainParking', null, global);
goog.exportSymbol('proto.apollo.planning.MainParking.ParkingStatus', null, global);
goog.exportSymbol('proto.apollo.planning.MainStop', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectAvoid', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectDecision', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectDecisionType', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectDecisionType.ObjectTagCase', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectDecisions', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectDynamic', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectFollow', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectIgnore', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectMotionType', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectMotionType.MotionTagCase', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectNudge', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectNudge.Type', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectOvertake', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectSidePass', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectSidePass.Type', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectStatic', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectStatus', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectStop', null, global);
goog.exportSymbol('proto.apollo.planning.ObjectYield', null, global);
goog.exportSymbol('proto.apollo.planning.StopReasonCode', null, global);
goog.exportSymbol('proto.apollo.planning.TargetLane', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TargetLane = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.TargetLane, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TargetLane.displayName = 'proto.apollo.planning.TargetLane';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectIgnore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectIgnore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectIgnore.displayName = 'proto.apollo.planning.ObjectIgnore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ObjectStop.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.ObjectStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectStop.displayName = 'proto.apollo.planning.ObjectStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectNudge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectNudge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectNudge.displayName = 'proto.apollo.planning.ObjectNudge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectYield = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectYield, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectYield.displayName = 'proto.apollo.planning.ObjectYield';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectFollow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectFollow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectFollow.displayName = 'proto.apollo.planning.ObjectFollow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectOvertake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectOvertake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectOvertake.displayName = 'proto.apollo.planning.ObjectOvertake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectSidePass = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectSidePass, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectSidePass.displayName = 'proto.apollo.planning.ObjectSidePass';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectAvoid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectAvoid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectAvoid.displayName = 'proto.apollo.planning.ObjectAvoid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectStatus.displayName = 'proto.apollo.planning.ObjectStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectStatic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectStatic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectStatic.displayName = 'proto.apollo.planning.ObjectStatic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectDynamic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObjectDynamic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectDynamic.displayName = 'proto.apollo.planning.ObjectDynamic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectMotionType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.planning.ObjectMotionType.oneofGroups_);
};
goog.inherits(proto.apollo.planning.ObjectMotionType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectMotionType.displayName = 'proto.apollo.planning.ObjectMotionType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectDecisionType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.planning.ObjectDecisionType.oneofGroups_);
};
goog.inherits(proto.apollo.planning.ObjectDecisionType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectDecisionType.displayName = 'proto.apollo.planning.ObjectDecisionType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectDecision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ObjectDecision.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.ObjectDecision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectDecision.displayName = 'proto.apollo.planning.ObjectDecision';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObjectDecisions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ObjectDecisions.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.ObjectDecisions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObjectDecisions.displayName = 'proto.apollo.planning.ObjectDecisions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.MainStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainStop.displayName = 'proto.apollo.planning.MainStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.EmergencyStopHardBrake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.EmergencyStopHardBrake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.EmergencyStopHardBrake.displayName = 'proto.apollo.planning.EmergencyStopHardBrake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.EmergencyStopCruiseToStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.EmergencyStopCruiseToStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.EmergencyStopCruiseToStop.displayName = 'proto.apollo.planning.EmergencyStopCruiseToStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainEmergencyStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.planning.MainEmergencyStop.oneofGroups_);
};
goog.inherits(proto.apollo.planning.MainEmergencyStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainEmergencyStop.displayName = 'proto.apollo.planning.MainEmergencyStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainCruise = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.MainCruise, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainCruise.displayName = 'proto.apollo.planning.MainCruise';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainChangeLane = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.MainChangeLane.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.MainChangeLane, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainChangeLane.displayName = 'proto.apollo.planning.MainChangeLane';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainMissionComplete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.MainMissionComplete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainMissionComplete.displayName = 'proto.apollo.planning.MainMissionComplete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainNotReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.MainNotReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainNotReady.displayName = 'proto.apollo.planning.MainNotReady';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainParking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.MainParking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainParking.displayName = 'proto.apollo.planning.MainParking';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MainDecision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.MainDecision.repeatedFields_, proto.apollo.planning.MainDecision.oneofGroups_);
};
goog.inherits(proto.apollo.planning.MainDecision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MainDecision.displayName = 'proto.apollo.planning.MainDecision';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DecisionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DecisionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DecisionResult.displayName = 'proto.apollo.planning.DecisionResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TargetLane.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TargetLane.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TargetLane} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TargetLane.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    startS: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    endS: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    speedLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TargetLane as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TargetLane.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.startS;

  /** @type {?|undefined} */
  this.endS;

  /** @type {?|undefined} */
  this.speedLimit;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TargetLane.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TargetLane}
 */
proto.apollo.planning.TargetLane.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TargetLane();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.startS != null && jspb.Message.setField(msg, 2, obj.startS);
  obj.endS != null && jspb.Message.setField(msg, 3, obj.endS);
  obj.speedLimit != null && jspb.Message.setField(msg, 4, obj.speedLimit);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TargetLane}
 */
proto.apollo.planning.TargetLane.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TargetLane;
  return proto.apollo.planning.TargetLane.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TargetLane} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TargetLane}
 */
proto.apollo.planning.TargetLane.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TargetLane.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TargetLane.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TargetLane} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TargetLane.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.planning.TargetLane.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TargetLane.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double start_s = 2;
 * @return {number}
 */
proto.apollo.planning.TargetLane.prototype.getStartS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.setStartS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.clearStartS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TargetLane.prototype.hasStartS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double end_s = 3;
 * @return {number}
 */
proto.apollo.planning.TargetLane.prototype.getEndS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.setEndS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.clearEndS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TargetLane.prototype.hasEndS = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double speed_limit = 4;
 * @return {number}
 */
proto.apollo.planning.TargetLane.prototype.getSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.setSpeedLimit = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TargetLane} returns this
 */
proto.apollo.planning.TargetLane.prototype.clearSpeedLimit = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TargetLane.prototype.hasSpeedLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectIgnore.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectIgnore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectIgnore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectIgnore.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectIgnore as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectIgnore.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectIgnore.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectIgnore}
 */
proto.apollo.planning.ObjectIgnore.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectIgnore();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectIgnore}
 */
proto.apollo.planning.ObjectIgnore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectIgnore;
  return proto.apollo.planning.ObjectIgnore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectIgnore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectIgnore}
 */
proto.apollo.planning.ObjectIgnore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectIgnore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectIgnore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectIgnore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectIgnore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ObjectStop.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectStop.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    reasonCode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distanceS: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    stopPoint: (f = msg.getStopPoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    stopHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    waitForObstacleList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectStop as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectStop.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.reasonCode;

  /** @type {?|undefined} */
  this.distanceS;

  /** @type {?|undefined} */
  this.stopPoint;

  /** @type {?|undefined} */
  this.stopHeading;

  /** @type {?|undefined} */
  this.waitForObstacleList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectStop.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectStop}
 */
proto.apollo.planning.ObjectStop.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectStop();
  obj.reasonCode != null && jspb.Message.setField(msg, 1, obj.reasonCode);
  obj.distanceS != null && jspb.Message.setField(msg, 2, obj.distanceS);
  obj.stopPoint && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_geometry_pb.PointENU.fromObject(obj.stopPoint));
  obj.stopHeading != null && jspb.Message.setField(msg, 4, obj.stopHeading);
  obj.waitForObstacleList != null && jspb.Message.setField(msg, 5, obj.waitForObstacleList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectStop}
 */
proto.apollo.planning.ObjectStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectStop;
  return proto.apollo.planning.ObjectStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectStop}
 */
proto.apollo.planning.ObjectStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.StopReasonCode} */ (reader.readEnum());
      msg.setReasonCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceS(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setStopPoint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopHeading(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addWaitForObstacle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.StopReasonCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getStopPoint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getWaitForObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional StopReasonCode reason_code = 1;
 * @return {!proto.apollo.planning.StopReasonCode}
 */
proto.apollo.planning.ObjectStop.prototype.getReasonCode = function() {
  return /** @type {!proto.apollo.planning.StopReasonCode} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.StopReasonCode} value
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.setReasonCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.clearReasonCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectStop.prototype.hasReasonCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance_s = 2;
 * @return {number}
 */
proto.apollo.planning.ObjectStop.prototype.getDistanceS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.setDistanceS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.clearDistanceS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectStop.prototype.hasDistanceS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.PointENU stop_point = 3;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.ObjectStop.prototype.getStopPoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 3));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.ObjectStop} returns this
*/
proto.apollo.planning.ObjectStop.prototype.setStopPoint = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.clearStopPoint = function() {
  return this.setStopPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectStop.prototype.hasStopPoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double stop_heading = 4;
 * @return {number}
 */
proto.apollo.planning.ObjectStop.prototype.getStopHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.setStopHeading = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.clearStopHeading = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectStop.prototype.hasStopHeading = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string wait_for_obstacle = 5;
 * @return {!Array<string>}
 */
proto.apollo.planning.ObjectStop.prototype.getWaitForObstacleList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.setWaitForObstacleList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.addWaitForObstacle = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ObjectStop} returns this
 */
proto.apollo.planning.ObjectStop.prototype.clearWaitForObstacleList = function() {
  return this.setWaitForObstacleList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectNudge.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectNudge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectNudge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectNudge.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distanceL: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectNudge as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectNudge.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.distanceL;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectNudge.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectNudge}
 */
proto.apollo.planning.ObjectNudge.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectNudge();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.distanceL != null && jspb.Message.setField(msg, 2, obj.distanceL);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectNudge}
 */
proto.apollo.planning.ObjectNudge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectNudge;
  return proto.apollo.planning.ObjectNudge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectNudge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectNudge}
 */
proto.apollo.planning.ObjectNudge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.ObjectNudge.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectNudge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectNudge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectNudge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectNudge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.ObjectNudge.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.ObjectNudge.Type = {
  LEFT_NUDGE: 1,
  RIGHT_NUDGE: 2,
  DYNAMIC_LEFT_NUDGE: 3,
  DYNAMIC_RIGHT_NUDGE: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.apollo.planning.ObjectNudge.Type}
 */
proto.apollo.planning.ObjectNudge.prototype.getType = function() {
  return /** @type {!proto.apollo.planning.ObjectNudge.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.ObjectNudge.Type} value
 * @return {!proto.apollo.planning.ObjectNudge} returns this
 */
proto.apollo.planning.ObjectNudge.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectNudge} returns this
 */
proto.apollo.planning.ObjectNudge.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectNudge.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance_l = 2;
 * @return {number}
 */
proto.apollo.planning.ObjectNudge.prototype.getDistanceL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectNudge} returns this
 */
proto.apollo.planning.ObjectNudge.prototype.setDistanceL = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectNudge} returns this
 */
proto.apollo.planning.ObjectNudge.prototype.clearDistanceL = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectNudge.prototype.hasDistanceL = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectYield.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectYield.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectYield} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectYield.toObject = function(includeInstance, msg) {
  var f, obj = {
    distanceS: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    fencePoint: (f = msg.getFencePoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    fenceHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    timeBuffer: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectYield as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectYield.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.distanceS;

  /** @type {?|undefined} */
  this.fencePoint;

  /** @type {?|undefined} */
  this.fenceHeading;

  /** @type {?|undefined} */
  this.timeBuffer;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectYield.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectYield}
 */
proto.apollo.planning.ObjectYield.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectYield();
  obj.distanceS != null && jspb.Message.setField(msg, 1, obj.distanceS);
  obj.fencePoint && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.PointENU.fromObject(obj.fencePoint));
  obj.fenceHeading != null && jspb.Message.setField(msg, 3, obj.fenceHeading);
  obj.timeBuffer != null && jspb.Message.setField(msg, 4, obj.timeBuffer);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectYield}
 */
proto.apollo.planning.ObjectYield.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectYield;
  return proto.apollo.planning.ObjectYield.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectYield} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectYield}
 */
proto.apollo.planning.ObjectYield.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceS(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setFencePoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFenceHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectYield.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectYield.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectYield} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectYield.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFencePoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double distance_s = 1;
 * @return {number}
 */
proto.apollo.planning.ObjectYield.prototype.getDistanceS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectYield} returns this
 */
proto.apollo.planning.ObjectYield.prototype.setDistanceS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectYield} returns this
 */
proto.apollo.planning.ObjectYield.prototype.clearDistanceS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectYield.prototype.hasDistanceS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.PointENU fence_point = 2;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.ObjectYield.prototype.getFencePoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 2));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.ObjectYield} returns this
*/
proto.apollo.planning.ObjectYield.prototype.setFencePoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectYield} returns this
 */
proto.apollo.planning.ObjectYield.prototype.clearFencePoint = function() {
  return this.setFencePoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectYield.prototype.hasFencePoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double fence_heading = 3;
 * @return {number}
 */
proto.apollo.planning.ObjectYield.prototype.getFenceHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectYield} returns this
 */
proto.apollo.planning.ObjectYield.prototype.setFenceHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectYield} returns this
 */
proto.apollo.planning.ObjectYield.prototype.clearFenceHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectYield.prototype.hasFenceHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double time_buffer = 4;
 * @return {number}
 */
proto.apollo.planning.ObjectYield.prototype.getTimeBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectYield} returns this
 */
proto.apollo.planning.ObjectYield.prototype.setTimeBuffer = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectYield} returns this
 */
proto.apollo.planning.ObjectYield.prototype.clearTimeBuffer = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectYield.prototype.hasTimeBuffer = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectFollow.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectFollow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectFollow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectFollow.toObject = function(includeInstance, msg) {
  var f, obj = {
    distanceS: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    fencePoint: (f = msg.getFencePoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    fenceHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectFollow as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectFollow.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.distanceS;

  /** @type {?|undefined} */
  this.fencePoint;

  /** @type {?|undefined} */
  this.fenceHeading;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectFollow.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectFollow}
 */
proto.apollo.planning.ObjectFollow.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectFollow();
  obj.distanceS != null && jspb.Message.setField(msg, 1, obj.distanceS);
  obj.fencePoint && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.PointENU.fromObject(obj.fencePoint));
  obj.fenceHeading != null && jspb.Message.setField(msg, 3, obj.fenceHeading);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectFollow}
 */
proto.apollo.planning.ObjectFollow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectFollow;
  return proto.apollo.planning.ObjectFollow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectFollow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectFollow}
 */
proto.apollo.planning.ObjectFollow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceS(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setFencePoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFenceHeading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectFollow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectFollow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectFollow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectFollow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFencePoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double distance_s = 1;
 * @return {number}
 */
proto.apollo.planning.ObjectFollow.prototype.getDistanceS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectFollow} returns this
 */
proto.apollo.planning.ObjectFollow.prototype.setDistanceS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectFollow} returns this
 */
proto.apollo.planning.ObjectFollow.prototype.clearDistanceS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectFollow.prototype.hasDistanceS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.PointENU fence_point = 2;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.ObjectFollow.prototype.getFencePoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 2));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.ObjectFollow} returns this
*/
proto.apollo.planning.ObjectFollow.prototype.setFencePoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectFollow} returns this
 */
proto.apollo.planning.ObjectFollow.prototype.clearFencePoint = function() {
  return this.setFencePoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectFollow.prototype.hasFencePoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double fence_heading = 3;
 * @return {number}
 */
proto.apollo.planning.ObjectFollow.prototype.getFenceHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectFollow} returns this
 */
proto.apollo.planning.ObjectFollow.prototype.setFenceHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectFollow} returns this
 */
proto.apollo.planning.ObjectFollow.prototype.clearFenceHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectFollow.prototype.hasFenceHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectOvertake.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectOvertake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectOvertake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectOvertake.toObject = function(includeInstance, msg) {
  var f, obj = {
    distanceS: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    fencePoint: (f = msg.getFencePoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    fenceHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    timeBuffer: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectOvertake as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectOvertake.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.distanceS;

  /** @type {?|undefined} */
  this.fencePoint;

  /** @type {?|undefined} */
  this.fenceHeading;

  /** @type {?|undefined} */
  this.timeBuffer;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectOvertake.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectOvertake}
 */
proto.apollo.planning.ObjectOvertake.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectOvertake();
  obj.distanceS != null && jspb.Message.setField(msg, 1, obj.distanceS);
  obj.fencePoint && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.PointENU.fromObject(obj.fencePoint));
  obj.fenceHeading != null && jspb.Message.setField(msg, 3, obj.fenceHeading);
  obj.timeBuffer != null && jspb.Message.setField(msg, 4, obj.timeBuffer);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectOvertake}
 */
proto.apollo.planning.ObjectOvertake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectOvertake;
  return proto.apollo.planning.ObjectOvertake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectOvertake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectOvertake}
 */
proto.apollo.planning.ObjectOvertake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceS(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setFencePoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFenceHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectOvertake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectOvertake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectOvertake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectOvertake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFencePoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double distance_s = 1;
 * @return {number}
 */
proto.apollo.planning.ObjectOvertake.prototype.getDistanceS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
 */
proto.apollo.planning.ObjectOvertake.prototype.setDistanceS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
 */
proto.apollo.planning.ObjectOvertake.prototype.clearDistanceS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectOvertake.prototype.hasDistanceS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.PointENU fence_point = 2;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.ObjectOvertake.prototype.getFencePoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 2));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
*/
proto.apollo.planning.ObjectOvertake.prototype.setFencePoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
 */
proto.apollo.planning.ObjectOvertake.prototype.clearFencePoint = function() {
  return this.setFencePoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectOvertake.prototype.hasFencePoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double fence_heading = 3;
 * @return {number}
 */
proto.apollo.planning.ObjectOvertake.prototype.getFenceHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
 */
proto.apollo.planning.ObjectOvertake.prototype.setFenceHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
 */
proto.apollo.planning.ObjectOvertake.prototype.clearFenceHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectOvertake.prototype.hasFenceHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double time_buffer = 4;
 * @return {number}
 */
proto.apollo.planning.ObjectOvertake.prototype.getTimeBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
 */
proto.apollo.planning.ObjectOvertake.prototype.setTimeBuffer = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectOvertake} returns this
 */
proto.apollo.planning.ObjectOvertake.prototype.clearTimeBuffer = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectOvertake.prototype.hasTimeBuffer = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectSidePass.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectSidePass.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectSidePass} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectSidePass.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectSidePass as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectSidePass.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectSidePass.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectSidePass}
 */
proto.apollo.planning.ObjectSidePass.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectSidePass();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectSidePass}
 */
proto.apollo.planning.ObjectSidePass.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectSidePass;
  return proto.apollo.planning.ObjectSidePass.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectSidePass} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectSidePass}
 */
proto.apollo.planning.ObjectSidePass.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.ObjectSidePass.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectSidePass.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectSidePass.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectSidePass} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectSidePass.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.ObjectSidePass.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.ObjectSidePass.Type = {
  LEFT: 1,
  RIGHT: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.apollo.planning.ObjectSidePass.Type}
 */
proto.apollo.planning.ObjectSidePass.prototype.getType = function() {
  return /** @type {!proto.apollo.planning.ObjectSidePass.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.ObjectSidePass.Type} value
 * @return {!proto.apollo.planning.ObjectSidePass} returns this
 */
proto.apollo.planning.ObjectSidePass.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectSidePass} returns this
 */
proto.apollo.planning.ObjectSidePass.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectSidePass.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectAvoid.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectAvoid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectAvoid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectAvoid.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectAvoid as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectAvoid.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectAvoid.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectAvoid}
 */
proto.apollo.planning.ObjectAvoid.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectAvoid();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectAvoid}
 */
proto.apollo.planning.ObjectAvoid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectAvoid;
  return proto.apollo.planning.ObjectAvoid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectAvoid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectAvoid}
 */
proto.apollo.planning.ObjectAvoid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectAvoid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectAvoid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectAvoid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectAvoid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    motionType: (f = msg.getMotionType()) && proto.apollo.planning.ObjectMotionType.toObject(includeInstance, f),
    decisionType: (f = msg.getDecisionType()) && proto.apollo.planning.ObjectDecisionType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.motionType;

  /** @type {?|undefined} */
  this.decisionType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectStatus}
 */
proto.apollo.planning.ObjectStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectStatus();
  obj.motionType && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.ObjectMotionType.fromObject(obj.motionType));
  obj.decisionType && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.ObjectDecisionType.fromObject(obj.decisionType));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectStatus}
 */
proto.apollo.planning.ObjectStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectStatus;
  return proto.apollo.planning.ObjectStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectStatus}
 */
proto.apollo.planning.ObjectStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.ObjectMotionType;
      reader.readMessage(value,proto.apollo.planning.ObjectMotionType.deserializeBinaryFromReader);
      msg.setMotionType(value);
      break;
    case 2:
      var value = new proto.apollo.planning.ObjectDecisionType;
      reader.readMessage(value,proto.apollo.planning.ObjectDecisionType.deserializeBinaryFromReader);
      msg.setDecisionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMotionType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.ObjectMotionType.serializeBinaryToWriter
    );
  }
  f = message.getDecisionType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.ObjectDecisionType.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectMotionType motion_type = 1;
 * @return {?proto.apollo.planning.ObjectMotionType}
 */
proto.apollo.planning.ObjectStatus.prototype.getMotionType = function() {
  return /** @type{?proto.apollo.planning.ObjectMotionType} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectMotionType, 1));
};


/**
 * @param {?proto.apollo.planning.ObjectMotionType|undefined} value
 * @return {!proto.apollo.planning.ObjectStatus} returns this
*/
proto.apollo.planning.ObjectStatus.prototype.setMotionType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectStatus} returns this
 */
proto.apollo.planning.ObjectStatus.prototype.clearMotionType = function() {
  return this.setMotionType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectStatus.prototype.hasMotionType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectDecisionType decision_type = 2;
 * @return {?proto.apollo.planning.ObjectDecisionType}
 */
proto.apollo.planning.ObjectStatus.prototype.getDecisionType = function() {
  return /** @type{?proto.apollo.planning.ObjectDecisionType} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectDecisionType, 2));
};


/**
 * @param {?proto.apollo.planning.ObjectDecisionType|undefined} value
 * @return {!proto.apollo.planning.ObjectStatus} returns this
*/
proto.apollo.planning.ObjectStatus.prototype.setDecisionType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectStatus} returns this
 */
proto.apollo.planning.ObjectStatus.prototype.clearDecisionType = function() {
  return this.setDecisionType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectStatus.prototype.hasDecisionType = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectStatic.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectStatic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectStatic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectStatic.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectStatic as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectStatic.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectStatic.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectStatic}
 */
proto.apollo.planning.ObjectStatic.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectStatic();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectStatic}
 */
proto.apollo.planning.ObjectStatic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectStatic;
  return proto.apollo.planning.ObjectStatic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectStatic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectStatic}
 */
proto.apollo.planning.ObjectStatic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectStatic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectStatic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectStatic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectStatic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectDynamic.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectDynamic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectDynamic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDynamic.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectDynamic as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectDynamic.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectDynamic.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectDynamic}
 */
proto.apollo.planning.ObjectDynamic.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectDynamic();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectDynamic}
 */
proto.apollo.planning.ObjectDynamic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectDynamic;
  return proto.apollo.planning.ObjectDynamic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectDynamic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectDynamic}
 */
proto.apollo.planning.ObjectDynamic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectDynamic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectDynamic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectDynamic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDynamic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.ObjectMotionType.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.apollo.planning.ObjectMotionType.MotionTagCase = {
  MOTION_TAG_NOT_SET: 0,
  STATIC: 1,
  DYNAMIC: 2
};

/**
 * @return {proto.apollo.planning.ObjectMotionType.MotionTagCase}
 */
proto.apollo.planning.ObjectMotionType.prototype.getMotionTagCase = function() {
  return /** @type {proto.apollo.planning.ObjectMotionType.MotionTagCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.ObjectMotionType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectMotionType.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectMotionType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectMotionType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectMotionType.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_static: (f = msg.getStatic()) && proto.apollo.planning.ObjectStatic.toObject(includeInstance, f),
    dynamic: (f = msg.getDynamic()) && proto.apollo.planning.ObjectDynamic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectMotionType as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectMotionType.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pb_static;

  /** @type {?|undefined} */
  this.dynamic;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectMotionType.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectMotionType}
 */
proto.apollo.planning.ObjectMotionType.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectMotionType();
  obj.pb_static && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.ObjectStatic.fromObject(obj.pb_static));
  obj.dynamic && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.ObjectDynamic.fromObject(obj.dynamic));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectMotionType}
 */
proto.apollo.planning.ObjectMotionType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectMotionType;
  return proto.apollo.planning.ObjectMotionType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectMotionType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectMotionType}
 */
proto.apollo.planning.ObjectMotionType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.ObjectStatic;
      reader.readMessage(value,proto.apollo.planning.ObjectStatic.deserializeBinaryFromReader);
      msg.setStatic(value);
      break;
    case 2:
      var value = new proto.apollo.planning.ObjectDynamic;
      reader.readMessage(value,proto.apollo.planning.ObjectDynamic.deserializeBinaryFromReader);
      msg.setDynamic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectMotionType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectMotionType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectMotionType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectMotionType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatic();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.ObjectStatic.serializeBinaryToWriter
    );
  }
  f = message.getDynamic();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.ObjectDynamic.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectStatic static = 1;
 * @return {?proto.apollo.planning.ObjectStatic}
 */
proto.apollo.planning.ObjectMotionType.prototype.getStatic = function() {
  return /** @type{?proto.apollo.planning.ObjectStatic} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectStatic, 1));
};


/**
 * @param {?proto.apollo.planning.ObjectStatic|undefined} value
 * @return {!proto.apollo.planning.ObjectMotionType} returns this
*/
proto.apollo.planning.ObjectMotionType.prototype.setStatic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.apollo.planning.ObjectMotionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectMotionType} returns this
 */
proto.apollo.planning.ObjectMotionType.prototype.clearStatic = function() {
  return this.setStatic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectMotionType.prototype.hasStatic = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectDynamic dynamic = 2;
 * @return {?proto.apollo.planning.ObjectDynamic}
 */
proto.apollo.planning.ObjectMotionType.prototype.getDynamic = function() {
  return /** @type{?proto.apollo.planning.ObjectDynamic} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectDynamic, 2));
};


/**
 * @param {?proto.apollo.planning.ObjectDynamic|undefined} value
 * @return {!proto.apollo.planning.ObjectMotionType} returns this
*/
proto.apollo.planning.ObjectMotionType.prototype.setDynamic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.apollo.planning.ObjectMotionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectMotionType} returns this
 */
proto.apollo.planning.ObjectMotionType.prototype.clearDynamic = function() {
  return this.setDynamic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectMotionType.prototype.hasDynamic = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.ObjectDecisionType.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.apollo.planning.ObjectDecisionType.ObjectTagCase = {
  OBJECT_TAG_NOT_SET: 0,
  IGNORE: 1,
  STOP: 2,
  FOLLOW: 3,
  YIELD: 4,
  OVERTAKE: 5,
  NUDGE: 6,
  AVOID: 7,
  SIDE_PASS: 8
};

/**
 * @return {proto.apollo.planning.ObjectDecisionType.ObjectTagCase}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getObjectTagCase = function() {
  return /** @type {proto.apollo.planning.ObjectDecisionType.ObjectTagCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectDecisionType.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectDecisionType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectDecisionType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDecisionType.toObject = function(includeInstance, msg) {
  var f, obj = {
    ignore: (f = msg.getIgnore()) && proto.apollo.planning.ObjectIgnore.toObject(includeInstance, f),
    stop: (f = msg.getStop()) && proto.apollo.planning.ObjectStop.toObject(includeInstance, f),
    follow: (f = msg.getFollow()) && proto.apollo.planning.ObjectFollow.toObject(includeInstance, f),
    yield: (f = msg.getYield()) && proto.apollo.planning.ObjectYield.toObject(includeInstance, f),
    overtake: (f = msg.getOvertake()) && proto.apollo.planning.ObjectOvertake.toObject(includeInstance, f),
    nudge: (f = msg.getNudge()) && proto.apollo.planning.ObjectNudge.toObject(includeInstance, f),
    avoid: (f = msg.getAvoid()) && proto.apollo.planning.ObjectAvoid.toObject(includeInstance, f),
    sidePass: (f = msg.getSidePass()) && proto.apollo.planning.ObjectSidePass.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectDecisionType as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectDecisionType.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ignore;

  /** @type {?|undefined} */
  this.stop;

  /** @type {?|undefined} */
  this.follow;

  /** @type {?|undefined} */
  this.yield;

  /** @type {?|undefined} */
  this.overtake;

  /** @type {?|undefined} */
  this.nudge;

  /** @type {?|undefined} */
  this.avoid;

  /** @type {?|undefined} */
  this.sidePass;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectDecisionType.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectDecisionType}
 */
proto.apollo.planning.ObjectDecisionType.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectDecisionType();
  obj.ignore && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.ObjectIgnore.fromObject(obj.ignore));
  obj.stop && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.ObjectStop.fromObject(obj.stop));
  obj.follow && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.ObjectFollow.fromObject(obj.follow));
  obj.yield && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.ObjectYield.fromObject(obj.yield));
  obj.overtake && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.ObjectOvertake.fromObject(obj.overtake));
  obj.nudge && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.ObjectNudge.fromObject(obj.nudge));
  obj.avoid && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.ObjectAvoid.fromObject(obj.avoid));
  obj.sidePass && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.planning.ObjectSidePass.fromObject(obj.sidePass));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectDecisionType}
 */
proto.apollo.planning.ObjectDecisionType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectDecisionType;
  return proto.apollo.planning.ObjectDecisionType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectDecisionType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectDecisionType}
 */
proto.apollo.planning.ObjectDecisionType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.ObjectIgnore;
      reader.readMessage(value,proto.apollo.planning.ObjectIgnore.deserializeBinaryFromReader);
      msg.setIgnore(value);
      break;
    case 2:
      var value = new proto.apollo.planning.ObjectStop;
      reader.readMessage(value,proto.apollo.planning.ObjectStop.deserializeBinaryFromReader);
      msg.setStop(value);
      break;
    case 3:
      var value = new proto.apollo.planning.ObjectFollow;
      reader.readMessage(value,proto.apollo.planning.ObjectFollow.deserializeBinaryFromReader);
      msg.setFollow(value);
      break;
    case 4:
      var value = new proto.apollo.planning.ObjectYield;
      reader.readMessage(value,proto.apollo.planning.ObjectYield.deserializeBinaryFromReader);
      msg.setYield(value);
      break;
    case 5:
      var value = new proto.apollo.planning.ObjectOvertake;
      reader.readMessage(value,proto.apollo.planning.ObjectOvertake.deserializeBinaryFromReader);
      msg.setOvertake(value);
      break;
    case 6:
      var value = new proto.apollo.planning.ObjectNudge;
      reader.readMessage(value,proto.apollo.planning.ObjectNudge.deserializeBinaryFromReader);
      msg.setNudge(value);
      break;
    case 7:
      var value = new proto.apollo.planning.ObjectAvoid;
      reader.readMessage(value,proto.apollo.planning.ObjectAvoid.deserializeBinaryFromReader);
      msg.setAvoid(value);
      break;
    case 8:
      var value = new proto.apollo.planning.ObjectSidePass;
      reader.readMessage(value,proto.apollo.planning.ObjectSidePass.deserializeBinaryFromReader);
      msg.setSidePass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectDecisionType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectDecisionType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectDecisionType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDecisionType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIgnore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.ObjectIgnore.serializeBinaryToWriter
    );
  }
  f = message.getStop();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.ObjectStop.serializeBinaryToWriter
    );
  }
  f = message.getFollow();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.ObjectFollow.serializeBinaryToWriter
    );
  }
  f = message.getYield();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.ObjectYield.serializeBinaryToWriter
    );
  }
  f = message.getOvertake();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.ObjectOvertake.serializeBinaryToWriter
    );
  }
  f = message.getNudge();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.ObjectNudge.serializeBinaryToWriter
    );
  }
  f = message.getAvoid();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.ObjectAvoid.serializeBinaryToWriter
    );
  }
  f = message.getSidePass();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.planning.ObjectSidePass.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectIgnore ignore = 1;
 * @return {?proto.apollo.planning.ObjectIgnore}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getIgnore = function() {
  return /** @type{?proto.apollo.planning.ObjectIgnore} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectIgnore, 1));
};


/**
 * @param {?proto.apollo.planning.ObjectIgnore|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setIgnore = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearIgnore = function() {
  return this.setIgnore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasIgnore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectStop stop = 2;
 * @return {?proto.apollo.planning.ObjectStop}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getStop = function() {
  return /** @type{?proto.apollo.planning.ObjectStop} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectStop, 2));
};


/**
 * @param {?proto.apollo.planning.ObjectStop|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setStop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearStop = function() {
  return this.setStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasStop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ObjectFollow follow = 3;
 * @return {?proto.apollo.planning.ObjectFollow}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getFollow = function() {
  return /** @type{?proto.apollo.planning.ObjectFollow} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectFollow, 3));
};


/**
 * @param {?proto.apollo.planning.ObjectFollow|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setFollow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearFollow = function() {
  return this.setFollow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasFollow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ObjectYield yield = 4;
 * @return {?proto.apollo.planning.ObjectYield}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getYield = function() {
  return /** @type{?proto.apollo.planning.ObjectYield} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectYield, 4));
};


/**
 * @param {?proto.apollo.planning.ObjectYield|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setYield = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearYield = function() {
  return this.setYield(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasYield = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ObjectOvertake overtake = 5;
 * @return {?proto.apollo.planning.ObjectOvertake}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getOvertake = function() {
  return /** @type{?proto.apollo.planning.ObjectOvertake} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectOvertake, 5));
};


/**
 * @param {?proto.apollo.planning.ObjectOvertake|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setOvertake = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearOvertake = function() {
  return this.setOvertake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasOvertake = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ObjectNudge nudge = 6;
 * @return {?proto.apollo.planning.ObjectNudge}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getNudge = function() {
  return /** @type{?proto.apollo.planning.ObjectNudge} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectNudge, 6));
};


/**
 * @param {?proto.apollo.planning.ObjectNudge|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setNudge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearNudge = function() {
  return this.setNudge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasNudge = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ObjectAvoid avoid = 7;
 * @return {?proto.apollo.planning.ObjectAvoid}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getAvoid = function() {
  return /** @type{?proto.apollo.planning.ObjectAvoid} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectAvoid, 7));
};


/**
 * @param {?proto.apollo.planning.ObjectAvoid|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setAvoid = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearAvoid = function() {
  return this.setAvoid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasAvoid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ObjectSidePass side_pass = 8;
 * @return {?proto.apollo.planning.ObjectSidePass}
 */
proto.apollo.planning.ObjectDecisionType.prototype.getSidePass = function() {
  return /** @type{?proto.apollo.planning.ObjectSidePass} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectSidePass, 8));
};


/**
 * @param {?proto.apollo.planning.ObjectSidePass|undefined} value
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
*/
proto.apollo.planning.ObjectDecisionType.prototype.setSidePass = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.planning.ObjectDecisionType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecisionType} returns this
 */
proto.apollo.planning.ObjectDecisionType.prototype.clearSidePass = function() {
  return this.setSidePass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecisionType.prototype.hasSidePass = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ObjectDecision.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectDecision.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectDecision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectDecision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDecision.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    perceptionId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    objectDecisionList: jspb.Message.toObjectList(msg.getObjectDecisionList(),
    proto.apollo.planning.ObjectDecisionType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectDecision as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectDecision.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.perceptionId;

  /** @type {?|undefined} */
  this.objectDecisionList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectDecision.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectDecision}
 */
proto.apollo.planning.ObjectDecision.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectDecision();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.perceptionId != null && jspb.Message.setField(msg, 2, obj.perceptionId);
  obj.objectDecisionList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.objectDecisionList.map(
          proto.apollo.planning.ObjectDecisionType.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectDecision}
 */
proto.apollo.planning.ObjectDecision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectDecision;
  return proto.apollo.planning.ObjectDecision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectDecision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectDecision}
 */
proto.apollo.planning.ObjectDecision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPerceptionId(value);
      break;
    case 3:
      var value = new proto.apollo.planning.ObjectDecisionType;
      reader.readMessage(value,proto.apollo.planning.ObjectDecisionType.deserializeBinaryFromReader);
      msg.addObjectDecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectDecision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectDecision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectDecision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDecision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getObjectDecisionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.planning.ObjectDecisionType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.planning.ObjectDecision.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.ObjectDecision} returns this
 */
proto.apollo.planning.ObjectDecision.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecision} returns this
 */
proto.apollo.planning.ObjectDecision.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecision.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 perception_id = 2;
 * @return {number}
 */
proto.apollo.planning.ObjectDecision.prototype.getPerceptionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObjectDecision} returns this
 */
proto.apollo.planning.ObjectDecision.prototype.setPerceptionId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObjectDecision} returns this
 */
proto.apollo.planning.ObjectDecision.prototype.clearPerceptionId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObjectDecision.prototype.hasPerceptionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ObjectDecisionType object_decision = 3;
 * @return {!Array<!proto.apollo.planning.ObjectDecisionType>}
 */
proto.apollo.planning.ObjectDecision.prototype.getObjectDecisionList = function() {
  return /** @type{!Array<!proto.apollo.planning.ObjectDecisionType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.ObjectDecisionType, 3));
};


/**
 * @param {!Array<!proto.apollo.planning.ObjectDecisionType>} value
 * @return {!proto.apollo.planning.ObjectDecision} returns this
*/
proto.apollo.planning.ObjectDecision.prototype.setObjectDecisionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.planning.ObjectDecisionType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ObjectDecisionType}
 */
proto.apollo.planning.ObjectDecision.prototype.addObjectDecision = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.planning.ObjectDecisionType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ObjectDecision} returns this
 */
proto.apollo.planning.ObjectDecision.prototype.clearObjectDecisionList = function() {
  return this.setObjectDecisionList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ObjectDecisions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObjectDecisions.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObjectDecisions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObjectDecisions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDecisions.toObject = function(includeInstance, msg) {
  var f, obj = {
    decisionList: jspb.Message.toObjectList(msg.getDecisionList(),
    proto.apollo.planning.ObjectDecision.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectDecisions as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObjectDecisions.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.decisionList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObjectDecisions.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObjectDecisions}
 */
proto.apollo.planning.ObjectDecisions.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObjectDecisions();
  obj.decisionList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.decisionList.map(
          proto.apollo.planning.ObjectDecision.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObjectDecisions}
 */
proto.apollo.planning.ObjectDecisions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObjectDecisions;
  return proto.apollo.planning.ObjectDecisions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObjectDecisions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObjectDecisions}
 */
proto.apollo.planning.ObjectDecisions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.ObjectDecision;
      reader.readMessage(value,proto.apollo.planning.ObjectDecision.deserializeBinaryFromReader);
      msg.addDecision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObjectDecisions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObjectDecisions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObjectDecisions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObjectDecisions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecisionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.ObjectDecision.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ObjectDecision decision = 1;
 * @return {!Array<!proto.apollo.planning.ObjectDecision>}
 */
proto.apollo.planning.ObjectDecisions.prototype.getDecisionList = function() {
  return /** @type{!Array<!proto.apollo.planning.ObjectDecision>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.ObjectDecision, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.ObjectDecision>} value
 * @return {!proto.apollo.planning.ObjectDecisions} returns this
*/
proto.apollo.planning.ObjectDecisions.prototype.setDecisionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.ObjectDecision=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ObjectDecision}
 */
proto.apollo.planning.ObjectDecisions.prototype.addDecision = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.ObjectDecision, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ObjectDecisions} returns this
 */
proto.apollo.planning.ObjectDecisions.prototype.clearDecisionList = function() {
  return this.setDecisionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainStop.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    reasonCode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    stopPoint: (f = msg.getStopPoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    stopHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    changeLaneType: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainStop as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainStop.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.reasonCode;

  /** @type {?|undefined} */
  this.reason;

  /** @type {?|undefined} */
  this.stopPoint;

  /** @type {?|undefined} */
  this.stopHeading;

  /** @type {?|undefined} */
  this.changeLaneType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainStop.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainStop}
 */
proto.apollo.planning.MainStop.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainStop();
  obj.reasonCode != null && jspb.Message.setField(msg, 1, obj.reasonCode);
  obj.reason != null && jspb.Message.setField(msg, 2, obj.reason);
  obj.stopPoint && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_geometry_pb.PointENU.fromObject(obj.stopPoint));
  obj.stopHeading != null && jspb.Message.setField(msg, 4, obj.stopHeading);
  obj.changeLaneType != null && jspb.Message.setField(msg, 5, obj.changeLaneType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainStop}
 */
proto.apollo.planning.MainStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainStop;
  return proto.apollo.planning.MainStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainStop}
 */
proto.apollo.planning.MainStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.StopReasonCode} */ (reader.readEnum());
      msg.setReasonCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setStopPoint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopHeading(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.routing.ChangeLaneType} */ (reader.readEnum());
      msg.setChangeLaneType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.StopReasonCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStopPoint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional StopReasonCode reason_code = 1;
 * @return {!proto.apollo.planning.StopReasonCode}
 */
proto.apollo.planning.MainStop.prototype.getReasonCode = function() {
  return /** @type {!proto.apollo.planning.StopReasonCode} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.StopReasonCode} value
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.setReasonCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.clearReasonCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainStop.prototype.hasReasonCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.apollo.planning.MainStop.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.clearReason = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainStop.prototype.hasReason = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.PointENU stop_point = 3;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.MainStop.prototype.getStopPoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 3));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.MainStop} returns this
*/
proto.apollo.planning.MainStop.prototype.setStopPoint = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.clearStopPoint = function() {
  return this.setStopPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainStop.prototype.hasStopPoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double stop_heading = 4;
 * @return {number}
 */
proto.apollo.planning.MainStop.prototype.getStopHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.setStopHeading = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.clearStopHeading = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainStop.prototype.hasStopHeading = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.routing.ChangeLaneType change_lane_type = 5;
 * @return {!proto.apollo.routing.ChangeLaneType}
 */
proto.apollo.planning.MainStop.prototype.getChangeLaneType = function() {
  return /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.apollo.routing.ChangeLaneType} value
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.setChangeLaneType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainStop} returns this
 */
proto.apollo.planning.MainStop.prototype.clearChangeLaneType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainStop.prototype.hasChangeLaneType = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.EmergencyStopHardBrake.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.EmergencyStopHardBrake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.EmergencyStopHardBrake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EmergencyStopHardBrake.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EmergencyStopHardBrake as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.EmergencyStopHardBrake.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.EmergencyStopHardBrake.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.EmergencyStopHardBrake}
 */
proto.apollo.planning.EmergencyStopHardBrake.fromObject = function(obj) {
  var msg = new proto.apollo.planning.EmergencyStopHardBrake();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.EmergencyStopHardBrake}
 */
proto.apollo.planning.EmergencyStopHardBrake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.EmergencyStopHardBrake;
  return proto.apollo.planning.EmergencyStopHardBrake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.EmergencyStopHardBrake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.EmergencyStopHardBrake}
 */
proto.apollo.planning.EmergencyStopHardBrake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.EmergencyStopHardBrake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.EmergencyStopHardBrake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.EmergencyStopHardBrake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EmergencyStopHardBrake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.EmergencyStopCruiseToStop.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.EmergencyStopCruiseToStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.EmergencyStopCruiseToStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EmergencyStopCruiseToStop.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EmergencyStopCruiseToStop as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.EmergencyStopCruiseToStop.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.EmergencyStopCruiseToStop.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.EmergencyStopCruiseToStop}
 */
proto.apollo.planning.EmergencyStopCruiseToStop.fromObject = function(obj) {
  var msg = new proto.apollo.planning.EmergencyStopCruiseToStop();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.EmergencyStopCruiseToStop}
 */
proto.apollo.planning.EmergencyStopCruiseToStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.EmergencyStopCruiseToStop;
  return proto.apollo.planning.EmergencyStopCruiseToStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.EmergencyStopCruiseToStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.EmergencyStopCruiseToStop}
 */
proto.apollo.planning.EmergencyStopCruiseToStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.EmergencyStopCruiseToStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.EmergencyStopCruiseToStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.EmergencyStopCruiseToStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EmergencyStopCruiseToStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.MainEmergencyStop.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.apollo.planning.MainEmergencyStop.TaskCase = {
  TASK_NOT_SET: 0,
  HARD_BRAKE: 3,
  CRUISE_TO_STOP: 4
};

/**
 * @return {proto.apollo.planning.MainEmergencyStop.TaskCase}
 */
proto.apollo.planning.MainEmergencyStop.prototype.getTaskCase = function() {
  return /** @type {proto.apollo.planning.MainEmergencyStop.TaskCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.MainEmergencyStop.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainEmergencyStop.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainEmergencyStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainEmergencyStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainEmergencyStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    reasonCode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    hardBrake: (f = msg.getHardBrake()) && proto.apollo.planning.EmergencyStopHardBrake.toObject(includeInstance, f),
    cruiseToStop: (f = msg.getCruiseToStop()) && proto.apollo.planning.EmergencyStopCruiseToStop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainEmergencyStop as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainEmergencyStop.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.reasonCode;

  /** @type {?|undefined} */
  this.reason;

  /** @type {?|undefined} */
  this.hardBrake;

  /** @type {?|undefined} */
  this.cruiseToStop;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainEmergencyStop.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainEmergencyStop}
 */
proto.apollo.planning.MainEmergencyStop.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainEmergencyStop();
  obj.reasonCode != null && jspb.Message.setField(msg, 1, obj.reasonCode);
  obj.reason != null && jspb.Message.setField(msg, 2, obj.reason);
  obj.hardBrake && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.EmergencyStopHardBrake.fromObject(obj.hardBrake));
  obj.cruiseToStop && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.EmergencyStopCruiseToStop.fromObject(obj.cruiseToStop));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainEmergencyStop}
 */
proto.apollo.planning.MainEmergencyStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainEmergencyStop;
  return proto.apollo.planning.MainEmergencyStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainEmergencyStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainEmergencyStop}
 */
proto.apollo.planning.MainEmergencyStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.MainEmergencyStop.ReasonCode} */ (reader.readEnum());
      msg.setReasonCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = new proto.apollo.planning.EmergencyStopHardBrake;
      reader.readMessage(value,proto.apollo.planning.EmergencyStopHardBrake.deserializeBinaryFromReader);
      msg.setHardBrake(value);
      break;
    case 4:
      var value = new proto.apollo.planning.EmergencyStopCruiseToStop;
      reader.readMessage(value,proto.apollo.planning.EmergencyStopCruiseToStop.deserializeBinaryFromReader);
      msg.setCruiseToStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainEmergencyStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainEmergencyStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainEmergencyStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainEmergencyStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.MainEmergencyStop.ReasonCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHardBrake();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.EmergencyStopHardBrake.serializeBinaryToWriter
    );
  }
  f = message.getCruiseToStop();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.EmergencyStopCruiseToStop.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.MainEmergencyStop.ReasonCode = {
  ESTOP_REASON_INTERNAL_ERR: 1,
  ESTOP_REASON_COLLISION: 2,
  ESTOP_REASON_ST_FIND_PATH: 3,
  ESTOP_REASON_ST_MAKE_DECISION: 4,
  ESTOP_REASON_SENSOR_ERROR: 5
};

/**
 * optional ReasonCode reason_code = 1;
 * @return {!proto.apollo.planning.MainEmergencyStop.ReasonCode}
 */
proto.apollo.planning.MainEmergencyStop.prototype.getReasonCode = function() {
  return /** @type {!proto.apollo.planning.MainEmergencyStop.ReasonCode} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.MainEmergencyStop.ReasonCode} value
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
 */
proto.apollo.planning.MainEmergencyStop.prototype.setReasonCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
 */
proto.apollo.planning.MainEmergencyStop.prototype.clearReasonCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainEmergencyStop.prototype.hasReasonCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.apollo.planning.MainEmergencyStop.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
 */
proto.apollo.planning.MainEmergencyStop.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
 */
proto.apollo.planning.MainEmergencyStop.prototype.clearReason = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainEmergencyStop.prototype.hasReason = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EmergencyStopHardBrake hard_brake = 3;
 * @return {?proto.apollo.planning.EmergencyStopHardBrake}
 */
proto.apollo.planning.MainEmergencyStop.prototype.getHardBrake = function() {
  return /** @type{?proto.apollo.planning.EmergencyStopHardBrake} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.EmergencyStopHardBrake, 3));
};


/**
 * @param {?proto.apollo.planning.EmergencyStopHardBrake|undefined} value
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
*/
proto.apollo.planning.MainEmergencyStop.prototype.setHardBrake = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.planning.MainEmergencyStop.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
 */
proto.apollo.planning.MainEmergencyStop.prototype.clearHardBrake = function() {
  return this.setHardBrake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainEmergencyStop.prototype.hasHardBrake = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EmergencyStopCruiseToStop cruise_to_stop = 4;
 * @return {?proto.apollo.planning.EmergencyStopCruiseToStop}
 */
proto.apollo.planning.MainEmergencyStop.prototype.getCruiseToStop = function() {
  return /** @type{?proto.apollo.planning.EmergencyStopCruiseToStop} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.EmergencyStopCruiseToStop, 4));
};


/**
 * @param {?proto.apollo.planning.EmergencyStopCruiseToStop|undefined} value
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
*/
proto.apollo.planning.MainEmergencyStop.prototype.setCruiseToStop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.MainEmergencyStop.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainEmergencyStop} returns this
 */
proto.apollo.planning.MainEmergencyStop.prototype.clearCruiseToStop = function() {
  return this.setCruiseToStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainEmergencyStop.prototype.hasCruiseToStop = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainCruise.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainCruise.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainCruise} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainCruise.toObject = function(includeInstance, msg) {
  var f, obj = {
    changeLaneType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainCruise as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainCruise.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.changeLaneType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainCruise.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainCruise}
 */
proto.apollo.planning.MainCruise.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainCruise();
  obj.changeLaneType != null && jspb.Message.setField(msg, 1, obj.changeLaneType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainCruise}
 */
proto.apollo.planning.MainCruise.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainCruise;
  return proto.apollo.planning.MainCruise.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainCruise} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainCruise}
 */
proto.apollo.planning.MainCruise.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.routing.ChangeLaneType} */ (reader.readEnum());
      msg.setChangeLaneType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainCruise.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainCruise.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainCruise} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainCruise.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional apollo.routing.ChangeLaneType change_lane_type = 1;
 * @return {!proto.apollo.routing.ChangeLaneType}
 */
proto.apollo.planning.MainCruise.prototype.getChangeLaneType = function() {
  return /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.routing.ChangeLaneType} value
 * @return {!proto.apollo.planning.MainCruise} returns this
 */
proto.apollo.planning.MainCruise.prototype.setChangeLaneType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainCruise} returns this
 */
proto.apollo.planning.MainCruise.prototype.clearChangeLaneType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainCruise.prototype.hasChangeLaneType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.MainChangeLane.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainChangeLane.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainChangeLane.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainChangeLane} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainChangeLane.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    defaultLaneList: jspb.Message.toObjectList(msg.getDefaultLaneList(),
    proto.apollo.planning.TargetLane.toObject, includeInstance),
    defaultLaneStop: (f = msg.getDefaultLaneStop()) && proto.apollo.planning.MainStop.toObject(includeInstance, f),
    targetLaneStop: (f = msg.getTargetLaneStop()) && proto.apollo.planning.MainStop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainChangeLane as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainChangeLane.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.defaultLaneList;

  /** @type {?|undefined} */
  this.defaultLaneStop;

  /** @type {?|undefined} */
  this.targetLaneStop;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainChangeLane.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainChangeLane}
 */
proto.apollo.planning.MainChangeLane.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainChangeLane();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.defaultLaneList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.defaultLaneList.map(
          proto.apollo.planning.TargetLane.fromObject));
  obj.defaultLaneStop && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.MainStop.fromObject(obj.defaultLaneStop));
  obj.targetLaneStop && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.MainStop.fromObject(obj.targetLaneStop));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainChangeLane}
 */
proto.apollo.planning.MainChangeLane.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainChangeLane;
  return proto.apollo.planning.MainChangeLane.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainChangeLane} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainChangeLane}
 */
proto.apollo.planning.MainChangeLane.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.MainChangeLane.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.apollo.planning.TargetLane;
      reader.readMessage(value,proto.apollo.planning.TargetLane.deserializeBinaryFromReader);
      msg.addDefaultLane(value);
      break;
    case 3:
      var value = new proto.apollo.planning.MainStop;
      reader.readMessage(value,proto.apollo.planning.MainStop.deserializeBinaryFromReader);
      msg.setDefaultLaneStop(value);
      break;
    case 4:
      var value = new proto.apollo.planning.MainStop;
      reader.readMessage(value,proto.apollo.planning.MainStop.deserializeBinaryFromReader);
      msg.setTargetLaneStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainChangeLane.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainChangeLane.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainChangeLane} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainChangeLane.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.MainChangeLane.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDefaultLaneList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.planning.TargetLane.serializeBinaryToWriter
    );
  }
  f = message.getDefaultLaneStop();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.MainStop.serializeBinaryToWriter
    );
  }
  f = message.getTargetLaneStop();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.MainStop.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.MainChangeLane.Type = {
  LEFT: 1,
  RIGHT: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.apollo.planning.MainChangeLane.Type}
 */
proto.apollo.planning.MainChangeLane.prototype.getType = function() {
  return /** @type {!proto.apollo.planning.MainChangeLane.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.MainChangeLane.Type} value
 * @return {!proto.apollo.planning.MainChangeLane} returns this
 */
proto.apollo.planning.MainChangeLane.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainChangeLane} returns this
 */
proto.apollo.planning.MainChangeLane.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainChangeLane.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TargetLane default_lane = 2;
 * @return {!Array<!proto.apollo.planning.TargetLane>}
 */
proto.apollo.planning.MainChangeLane.prototype.getDefaultLaneList = function() {
  return /** @type{!Array<!proto.apollo.planning.TargetLane>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TargetLane, 2));
};


/**
 * @param {!Array<!proto.apollo.planning.TargetLane>} value
 * @return {!proto.apollo.planning.MainChangeLane} returns this
*/
proto.apollo.planning.MainChangeLane.prototype.setDefaultLaneList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.planning.TargetLane=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TargetLane}
 */
proto.apollo.planning.MainChangeLane.prototype.addDefaultLane = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.planning.TargetLane, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.MainChangeLane} returns this
 */
proto.apollo.planning.MainChangeLane.prototype.clearDefaultLaneList = function() {
  return this.setDefaultLaneList([]);
};


/**
 * optional MainStop default_lane_stop = 3;
 * @return {?proto.apollo.planning.MainStop}
 */
proto.apollo.planning.MainChangeLane.prototype.getDefaultLaneStop = function() {
  return /** @type{?proto.apollo.planning.MainStop} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainStop, 3));
};


/**
 * @param {?proto.apollo.planning.MainStop|undefined} value
 * @return {!proto.apollo.planning.MainChangeLane} returns this
*/
proto.apollo.planning.MainChangeLane.prototype.setDefaultLaneStop = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainChangeLane} returns this
 */
proto.apollo.planning.MainChangeLane.prototype.clearDefaultLaneStop = function() {
  return this.setDefaultLaneStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainChangeLane.prototype.hasDefaultLaneStop = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MainStop target_lane_stop = 4;
 * @return {?proto.apollo.planning.MainStop}
 */
proto.apollo.planning.MainChangeLane.prototype.getTargetLaneStop = function() {
  return /** @type{?proto.apollo.planning.MainStop} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainStop, 4));
};


/**
 * @param {?proto.apollo.planning.MainStop|undefined} value
 * @return {!proto.apollo.planning.MainChangeLane} returns this
*/
proto.apollo.planning.MainChangeLane.prototype.setTargetLaneStop = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainChangeLane} returns this
 */
proto.apollo.planning.MainChangeLane.prototype.clearTargetLaneStop = function() {
  return this.setTargetLaneStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainChangeLane.prototype.hasTargetLaneStop = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainMissionComplete.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainMissionComplete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainMissionComplete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainMissionComplete.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopPoint: (f = msg.getStopPoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    stopHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainMissionComplete as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainMissionComplete.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopPoint;

  /** @type {?|undefined} */
  this.stopHeading;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainMissionComplete.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainMissionComplete}
 */
proto.apollo.planning.MainMissionComplete.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainMissionComplete();
  obj.stopPoint && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_geometry_pb.PointENU.fromObject(obj.stopPoint));
  obj.stopHeading != null && jspb.Message.setField(msg, 2, obj.stopHeading);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainMissionComplete}
 */
proto.apollo.planning.MainMissionComplete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainMissionComplete;
  return proto.apollo.planning.MainMissionComplete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainMissionComplete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainMissionComplete}
 */
proto.apollo.planning.MainMissionComplete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setStopPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopHeading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainMissionComplete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainMissionComplete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainMissionComplete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainMissionComplete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStopPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional apollo.common.PointENU stop_point = 1;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.MainMissionComplete.prototype.getStopPoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 1));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.MainMissionComplete} returns this
*/
proto.apollo.planning.MainMissionComplete.prototype.setStopPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainMissionComplete} returns this
 */
proto.apollo.planning.MainMissionComplete.prototype.clearStopPoint = function() {
  return this.setStopPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainMissionComplete.prototype.hasStopPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double stop_heading = 2;
 * @return {number}
 */
proto.apollo.planning.MainMissionComplete.prototype.getStopHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.MainMissionComplete} returns this
 */
proto.apollo.planning.MainMissionComplete.prototype.setStopHeading = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainMissionComplete} returns this
 */
proto.apollo.planning.MainMissionComplete.prototype.clearStopHeading = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainMissionComplete.prototype.hasStopHeading = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainNotReady.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainNotReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainNotReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainNotReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainNotReady as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainNotReady.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.reason;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainNotReady.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainNotReady}
 */
proto.apollo.planning.MainNotReady.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainNotReady();
  obj.reason != null && jspb.Message.setField(msg, 1, obj.reason);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainNotReady}
 */
proto.apollo.planning.MainNotReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainNotReady;
  return proto.apollo.planning.MainNotReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainNotReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainNotReady}
 */
proto.apollo.planning.MainNotReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainNotReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainNotReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainNotReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainNotReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.apollo.planning.MainNotReady.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.MainNotReady} returns this
 */
proto.apollo.planning.MainNotReady.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainNotReady} returns this
 */
proto.apollo.planning.MainNotReady.prototype.clearReason = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainNotReady.prototype.hasReason = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainParking.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainParking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainParking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainParking.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainParking as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainParking.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.status;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainParking.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainParking}
 */
proto.apollo.planning.MainParking.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainParking();
  obj.status != null && jspb.Message.setField(msg, 1, obj.status);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainParking}
 */
proto.apollo.planning.MainParking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainParking;
  return proto.apollo.planning.MainParking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainParking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainParking}
 */
proto.apollo.planning.MainParking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.MainParking.ParkingStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainParking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainParking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainParking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainParking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.MainParking.ParkingStatus} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.MainParking.ParkingStatus = {
  IN_PARKING: 1
};

/**
 * optional ParkingStatus status = 1;
 * @return {!proto.apollo.planning.MainParking.ParkingStatus}
 */
proto.apollo.planning.MainParking.prototype.getStatus = function() {
  return /** @type {!proto.apollo.planning.MainParking.ParkingStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.MainParking.ParkingStatus} value
 * @return {!proto.apollo.planning.MainParking} returns this
 */
proto.apollo.planning.MainParking.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.MainParking} returns this
 */
proto.apollo.planning.MainParking.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainParking.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.MainDecision.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.MainDecision.oneofGroups_ = [[1,2,3,4,6,7,8]];

/**
 * @enum {number}
 */
proto.apollo.planning.MainDecision.TaskCase = {
  TASK_NOT_SET: 0,
  CRUISE: 1,
  STOP: 2,
  ESTOP: 3,
  CHANGE_LANE: 4,
  MISSION_COMPLETE: 6,
  NOT_READY: 7,
  PARKING: 8
};

/**
 * @return {proto.apollo.planning.MainDecision.TaskCase}
 */
proto.apollo.planning.MainDecision.prototype.getTaskCase = function() {
  return /** @type {proto.apollo.planning.MainDecision.TaskCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.MainDecision.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MainDecision.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MainDecision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MainDecision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainDecision.toObject = function(includeInstance, msg) {
  var f, obj = {
    cruise: (f = msg.getCruise()) && proto.apollo.planning.MainCruise.toObject(includeInstance, f),
    stop: (f = msg.getStop()) && proto.apollo.planning.MainStop.toObject(includeInstance, f),
    estop: (f = msg.getEstop()) && proto.apollo.planning.MainEmergencyStop.toObject(includeInstance, f),
    changeLane: (f = msg.getChangeLane()) && proto.apollo.planning.MainChangeLane.toObject(includeInstance, f),
    missionComplete: (f = msg.getMissionComplete()) && proto.apollo.planning.MainMissionComplete.toObject(includeInstance, f),
    notReady: (f = msg.getNotReady()) && proto.apollo.planning.MainNotReady.toObject(includeInstance, f),
    parking: (f = msg.getParking()) && proto.apollo.planning.MainParking.toObject(includeInstance, f),
    targetLaneList: jspb.Message.toObjectList(msg.getTargetLaneList(),
    proto.apollo.planning.TargetLane.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MainDecision as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MainDecision.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cruise;

  /** @type {?|undefined} */
  this.stop;

  /** @type {?|undefined} */
  this.estop;

  /** @type {?|undefined} */
  this.changeLane;

  /** @type {?|undefined} */
  this.missionComplete;

  /** @type {?|undefined} */
  this.notReady;

  /** @type {?|undefined} */
  this.parking;

  /** @type {?|undefined} */
  this.targetLaneList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MainDecision.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MainDecision}
 */
proto.apollo.planning.MainDecision.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MainDecision();
  obj.cruise && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.MainCruise.fromObject(obj.cruise));
  obj.stop && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.MainStop.fromObject(obj.stop));
  obj.estop && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.MainEmergencyStop.fromObject(obj.estop));
  obj.changeLane && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.MainChangeLane.fromObject(obj.changeLane));
  obj.missionComplete && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.MainMissionComplete.fromObject(obj.missionComplete));
  obj.notReady && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.MainNotReady.fromObject(obj.notReady));
  obj.parking && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.planning.MainParking.fromObject(obj.parking));
  obj.targetLaneList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.targetLaneList.map(
          proto.apollo.planning.TargetLane.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MainDecision}
 */
proto.apollo.planning.MainDecision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MainDecision;
  return proto.apollo.planning.MainDecision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MainDecision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MainDecision}
 */
proto.apollo.planning.MainDecision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.MainCruise;
      reader.readMessage(value,proto.apollo.planning.MainCruise.deserializeBinaryFromReader);
      msg.setCruise(value);
      break;
    case 2:
      var value = new proto.apollo.planning.MainStop;
      reader.readMessage(value,proto.apollo.planning.MainStop.deserializeBinaryFromReader);
      msg.setStop(value);
      break;
    case 3:
      var value = new proto.apollo.planning.MainEmergencyStop;
      reader.readMessage(value,proto.apollo.planning.MainEmergencyStop.deserializeBinaryFromReader);
      msg.setEstop(value);
      break;
    case 4:
      var value = new proto.apollo.planning.MainChangeLane;
      reader.readMessage(value,proto.apollo.planning.MainChangeLane.deserializeBinaryFromReader);
      msg.setChangeLane(value);
      break;
    case 6:
      var value = new proto.apollo.planning.MainMissionComplete;
      reader.readMessage(value,proto.apollo.planning.MainMissionComplete.deserializeBinaryFromReader);
      msg.setMissionComplete(value);
      break;
    case 7:
      var value = new proto.apollo.planning.MainNotReady;
      reader.readMessage(value,proto.apollo.planning.MainNotReady.deserializeBinaryFromReader);
      msg.setNotReady(value);
      break;
    case 8:
      var value = new proto.apollo.planning.MainParking;
      reader.readMessage(value,proto.apollo.planning.MainParking.deserializeBinaryFromReader);
      msg.setParking(value);
      break;
    case 5:
      var value = new proto.apollo.planning.TargetLane;
      reader.readMessage(value,proto.apollo.planning.TargetLane.deserializeBinaryFromReader);
      msg.addTargetLane(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MainDecision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MainDecision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MainDecision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MainDecision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCruise();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.MainCruise.serializeBinaryToWriter
    );
  }
  f = message.getStop();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.MainStop.serializeBinaryToWriter
    );
  }
  f = message.getEstop();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.MainEmergencyStop.serializeBinaryToWriter
    );
  }
  f = message.getChangeLane();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.MainChangeLane.serializeBinaryToWriter
    );
  }
  f = message.getMissionComplete();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.MainMissionComplete.serializeBinaryToWriter
    );
  }
  f = message.getNotReady();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.MainNotReady.serializeBinaryToWriter
    );
  }
  f = message.getParking();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.planning.MainParking.serializeBinaryToWriter
    );
  }
  f = message.getTargetLaneList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.planning.TargetLane.serializeBinaryToWriter
    );
  }
};


/**
 * optional MainCruise cruise = 1;
 * @return {?proto.apollo.planning.MainCruise}
 */
proto.apollo.planning.MainDecision.prototype.getCruise = function() {
  return /** @type{?proto.apollo.planning.MainCruise} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainCruise, 1));
};


/**
 * @param {?proto.apollo.planning.MainCruise|undefined} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setCruise = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.apollo.planning.MainDecision.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearCruise = function() {
  return this.setCruise(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainDecision.prototype.hasCruise = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MainStop stop = 2;
 * @return {?proto.apollo.planning.MainStop}
 */
proto.apollo.planning.MainDecision.prototype.getStop = function() {
  return /** @type{?proto.apollo.planning.MainStop} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainStop, 2));
};


/**
 * @param {?proto.apollo.planning.MainStop|undefined} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setStop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.apollo.planning.MainDecision.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearStop = function() {
  return this.setStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainDecision.prototype.hasStop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MainEmergencyStop estop = 3;
 * @return {?proto.apollo.planning.MainEmergencyStop}
 */
proto.apollo.planning.MainDecision.prototype.getEstop = function() {
  return /** @type{?proto.apollo.planning.MainEmergencyStop} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainEmergencyStop, 3));
};


/**
 * @param {?proto.apollo.planning.MainEmergencyStop|undefined} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setEstop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.planning.MainDecision.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearEstop = function() {
  return this.setEstop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainDecision.prototype.hasEstop = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MainChangeLane change_lane = 4;
 * @return {?proto.apollo.planning.MainChangeLane}
 */
proto.apollo.planning.MainDecision.prototype.getChangeLane = function() {
  return /** @type{?proto.apollo.planning.MainChangeLane} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainChangeLane, 4));
};


/**
 * @param {?proto.apollo.planning.MainChangeLane|undefined} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setChangeLane = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.MainDecision.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearChangeLane = function() {
  return this.setChangeLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainDecision.prototype.hasChangeLane = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MainMissionComplete mission_complete = 6;
 * @return {?proto.apollo.planning.MainMissionComplete}
 */
proto.apollo.planning.MainDecision.prototype.getMissionComplete = function() {
  return /** @type{?proto.apollo.planning.MainMissionComplete} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainMissionComplete, 6));
};


/**
 * @param {?proto.apollo.planning.MainMissionComplete|undefined} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setMissionComplete = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.apollo.planning.MainDecision.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearMissionComplete = function() {
  return this.setMissionComplete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainDecision.prototype.hasMissionComplete = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MainNotReady not_ready = 7;
 * @return {?proto.apollo.planning.MainNotReady}
 */
proto.apollo.planning.MainDecision.prototype.getNotReady = function() {
  return /** @type{?proto.apollo.planning.MainNotReady} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainNotReady, 7));
};


/**
 * @param {?proto.apollo.planning.MainNotReady|undefined} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setNotReady = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.planning.MainDecision.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearNotReady = function() {
  return this.setNotReady(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainDecision.prototype.hasNotReady = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MainParking parking = 8;
 * @return {?proto.apollo.planning.MainParking}
 */
proto.apollo.planning.MainDecision.prototype.getParking = function() {
  return /** @type{?proto.apollo.planning.MainParking} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainParking, 8));
};


/**
 * @param {?proto.apollo.planning.MainParking|undefined} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setParking = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.planning.MainDecision.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearParking = function() {
  return this.setParking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.MainDecision.prototype.hasParking = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated TargetLane target_lane = 5;
 * @return {!Array<!proto.apollo.planning.TargetLane>}
 */
proto.apollo.planning.MainDecision.prototype.getTargetLaneList = function() {
  return /** @type{!Array<!proto.apollo.planning.TargetLane>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TargetLane, 5));
};


/**
 * @param {!Array<!proto.apollo.planning.TargetLane>} value
 * @return {!proto.apollo.planning.MainDecision} returns this
*/
proto.apollo.planning.MainDecision.prototype.setTargetLaneList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.planning.TargetLane=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TargetLane}
 */
proto.apollo.planning.MainDecision.prototype.addTargetLane = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.planning.TargetLane, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.MainDecision} returns this
 */
proto.apollo.planning.MainDecision.prototype.clearTargetLaneList = function() {
  return this.setTargetLaneList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DecisionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DecisionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DecisionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DecisionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainDecision: (f = msg.getMainDecision()) && proto.apollo.planning.MainDecision.toObject(includeInstance, f),
    objectDecision: (f = msg.getObjectDecision()) && proto.apollo.planning.ObjectDecisions.toObject(includeInstance, f),
    vehicleSignal: (f = msg.getVehicleSignal()) && modules_common_proto_vehicle_signal_pb.VehicleSignal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DecisionResult as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DecisionResult.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.mainDecision;

  /** @type {?|undefined} */
  this.objectDecision;

  /** @type {?|undefined} */
  this.vehicleSignal;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DecisionResult.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DecisionResult}
 */
proto.apollo.planning.DecisionResult.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DecisionResult();
  obj.mainDecision && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.MainDecision.fromObject(obj.mainDecision));
  obj.objectDecision && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.ObjectDecisions.fromObject(obj.objectDecision));
  obj.vehicleSignal && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_vehicle_signal_pb.VehicleSignal.fromObject(obj.vehicleSignal));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DecisionResult}
 */
proto.apollo.planning.DecisionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DecisionResult;
  return proto.apollo.planning.DecisionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DecisionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DecisionResult}
 */
proto.apollo.planning.DecisionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.MainDecision;
      reader.readMessage(value,proto.apollo.planning.MainDecision.deserializeBinaryFromReader);
      msg.setMainDecision(value);
      break;
    case 2:
      var value = new proto.apollo.planning.ObjectDecisions;
      reader.readMessage(value,proto.apollo.planning.ObjectDecisions.deserializeBinaryFromReader);
      msg.setObjectDecision(value);
      break;
    case 3:
      var value = new modules_common_proto_vehicle_signal_pb.VehicleSignal;
      reader.readMessage(value,modules_common_proto_vehicle_signal_pb.VehicleSignal.deserializeBinaryFromReader);
      msg.setVehicleSignal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DecisionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DecisionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DecisionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DecisionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMainDecision();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.MainDecision.serializeBinaryToWriter
    );
  }
  f = message.getObjectDecision();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.ObjectDecisions.serializeBinaryToWriter
    );
  }
  f = message.getVehicleSignal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_vehicle_signal_pb.VehicleSignal.serializeBinaryToWriter
    );
  }
};


/**
 * optional MainDecision main_decision = 1;
 * @return {?proto.apollo.planning.MainDecision}
 */
proto.apollo.planning.DecisionResult.prototype.getMainDecision = function() {
  return /** @type{?proto.apollo.planning.MainDecision} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MainDecision, 1));
};


/**
 * @param {?proto.apollo.planning.MainDecision|undefined} value
 * @return {!proto.apollo.planning.DecisionResult} returns this
*/
proto.apollo.planning.DecisionResult.prototype.setMainDecision = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DecisionResult} returns this
 */
proto.apollo.planning.DecisionResult.prototype.clearMainDecision = function() {
  return this.setMainDecision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DecisionResult.prototype.hasMainDecision = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectDecisions object_decision = 2;
 * @return {?proto.apollo.planning.ObjectDecisions}
 */
proto.apollo.planning.DecisionResult.prototype.getObjectDecision = function() {
  return /** @type{?proto.apollo.planning.ObjectDecisions} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObjectDecisions, 2));
};


/**
 * @param {?proto.apollo.planning.ObjectDecisions|undefined} value
 * @return {!proto.apollo.planning.DecisionResult} returns this
*/
proto.apollo.planning.DecisionResult.prototype.setObjectDecision = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DecisionResult} returns this
 */
proto.apollo.planning.DecisionResult.prototype.clearObjectDecision = function() {
  return this.setObjectDecision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DecisionResult.prototype.hasObjectDecision = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.VehicleSignal vehicle_signal = 3;
 * @return {?proto.apollo.common.VehicleSignal}
 */
proto.apollo.planning.DecisionResult.prototype.getVehicleSignal = function() {
  return /** @type{?proto.apollo.common.VehicleSignal} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_vehicle_signal_pb.VehicleSignal, 3));
};


/**
 * @param {?proto.apollo.common.VehicleSignal|undefined} value
 * @return {!proto.apollo.planning.DecisionResult} returns this
*/
proto.apollo.planning.DecisionResult.prototype.setVehicleSignal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DecisionResult} returns this
 */
proto.apollo.planning.DecisionResult.prototype.clearVehicleSignal = function() {
  return this.setVehicleSignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DecisionResult.prototype.hasVehicleSignal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.apollo.planning.StopReasonCode = {
  STOP_REASON_HEAD_VEHICLE: 1,
  STOP_REASON_DESTINATION: 2,
  STOP_REASON_PEDESTRIAN: 3,
  STOP_REASON_OBSTACLE: 4,
  STOP_REASON_PREPARKING: 5,
  STOP_REASON_SIGNAL: 100,
  STOP_REASON_STOP_SIGN: 101,
  STOP_REASON_YIELD_SIGN: 102,
  STOP_REASON_CLEAR_ZONE: 103,
  STOP_REASON_CROSSWALK: 104,
  STOP_REASON_CREEPER: 105,
  STOP_REASON_REFERENCE_END: 106,
  STOP_REASON_YELLOW_SIGNAL: 107,
  STOP_REASON_PULL_OVER: 108,
  STOP_REASON_SIDEPASS_SAFETY: 109,
  STOP_REASON_PRE_OPEN_SPACE_STOP: 200,
  STOP_REASON_LANE_CHANGE_URGENCY: 201,
  STOP_REASON_EMERGENCY: 202
};

goog.object.extend(exports, proto.apollo.planning);
