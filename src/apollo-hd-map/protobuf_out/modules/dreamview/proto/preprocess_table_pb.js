// source: modules/dreamview/proto/preprocess_table.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.dreamview.CameraConfig', null, global);
goog.exportSymbol('proto.apollo.dreamview.LidarConfig', null, global);
goog.exportSymbol('proto.apollo.dreamview.PreprocessTable', null, global);
goog.exportSymbol('proto.apollo.dreamview.Progress', null, global);
goog.exportSymbol('proto.apollo.dreamview.Status', null, global);
goog.exportSymbol('proto.apollo.dreamview.Translation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Translation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Translation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Translation.displayName = 'proto.apollo.dreamview.Translation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.LidarConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.LidarConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.LidarConfig.displayName = 'proto.apollo.dreamview.LidarConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.CameraConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.CameraConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.CameraConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.CameraConfig.displayName = 'proto.apollo.dreamview.CameraConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Progress.displayName = 'proto.apollo.dreamview.Progress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.PreprocessTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.PreprocessTable.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.PreprocessTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.PreprocessTable.displayName = 'proto.apollo.dreamview.PreprocessTable';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Translation.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Translation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Translation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Translation.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Translation as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Translation.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Translation.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Translation}
 */
proto.apollo.dreamview.Translation.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Translation();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Translation}
 */
proto.apollo.dreamview.Translation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Translation;
  return proto.apollo.dreamview.Translation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Translation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Translation}
 */
proto.apollo.dreamview.Translation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Translation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Translation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Translation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Translation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.apollo.dreamview.Translation.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Translation} returns this
 */
proto.apollo.dreamview.Translation.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Translation} returns this
 */
proto.apollo.dreamview.Translation.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Translation.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.apollo.dreamview.Translation.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Translation} returns this
 */
proto.apollo.dreamview.Translation.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Translation} returns this
 */
proto.apollo.dreamview.Translation.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Translation.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.apollo.dreamview.Translation.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Translation} returns this
 */
proto.apollo.dreamview.Translation.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Translation} returns this
 */
proto.apollo.dreamview.Translation.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Translation.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.LidarConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.LidarConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.LidarConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.LidarConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    translation: (f = msg.getTranslation()) && proto.apollo.dreamview.Translation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LidarConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.LidarConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sensorName;

  /** @type {?|undefined} */
  this.translation;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.LidarConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.LidarConfig}
 */
proto.apollo.dreamview.LidarConfig.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.LidarConfig();
  obj.sensorName != null && jspb.Message.setField(msg, 1, obj.sensorName);
  obj.translation && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.dreamview.Translation.fromObject(obj.translation));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.LidarConfig}
 */
proto.apollo.dreamview.LidarConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.LidarConfig;
  return proto.apollo.dreamview.LidarConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.LidarConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.LidarConfig}
 */
proto.apollo.dreamview.LidarConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorName(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.Translation;
      reader.readMessage(value,proto.apollo.dreamview.Translation.deserializeBinaryFromReader);
      msg.setTranslation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.LidarConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.LidarConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.LidarConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.LidarConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTranslation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.dreamview.Translation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sensor_name = 1;
 * @return {string}
 */
proto.apollo.dreamview.LidarConfig.prototype.getSensorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.LidarConfig} returns this
 */
proto.apollo.dreamview.LidarConfig.prototype.setSensorName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.LidarConfig} returns this
 */
proto.apollo.dreamview.LidarConfig.prototype.clearSensorName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.LidarConfig.prototype.hasSensorName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Translation translation = 2;
 * @return {?proto.apollo.dreamview.Translation}
 */
proto.apollo.dreamview.LidarConfig.prototype.getTranslation = function() {
  return /** @type{?proto.apollo.dreamview.Translation} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Translation, 2));
};


/**
 * @param {?proto.apollo.dreamview.Translation|undefined} value
 * @return {!proto.apollo.dreamview.LidarConfig} returns this
*/
proto.apollo.dreamview.LidarConfig.prototype.setTranslation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.LidarConfig} returns this
 */
proto.apollo.dreamview.LidarConfig.prototype.clearTranslation = function() {
  return this.setTranslation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.LidarConfig.prototype.hasTranslation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.CameraConfig.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.CameraConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.CameraConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.CameraConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.CameraConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    translation: (f = msg.getTranslation()) && proto.apollo.dreamview.Translation.toObject(includeInstance, f),
    dList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    kList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CameraConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.CameraConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.translation;

  /** @type {?|undefined} */
  this.dList;

  /** @type {?|undefined} */
  this.kList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.CameraConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.CameraConfig}
 */
proto.apollo.dreamview.CameraConfig.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.CameraConfig();
  obj.translation && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.dreamview.Translation.fromObject(obj.translation));
  obj.dList != null && jspb.Message.setField(msg, 2, obj.dList);
  obj.kList != null && jspb.Message.setField(msg, 3, obj.kList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.CameraConfig}
 */
proto.apollo.dreamview.CameraConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.CameraConfig;
  return proto.apollo.dreamview.CameraConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.CameraConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.CameraConfig}
 */
proto.apollo.dreamview.CameraConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dreamview.Translation;
      reader.readMessage(value,proto.apollo.dreamview.Translation.deserializeBinaryFromReader);
      msg.setTranslation(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addD(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addK(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.CameraConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.CameraConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.CameraConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.CameraConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranslation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.dreamview.Translation.serializeBinaryToWriter
    );
  }
  f = message.getDList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
  f = message.getKList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      3,
      f
    );
  }
};


/**
 * optional Translation translation = 1;
 * @return {?proto.apollo.dreamview.Translation}
 */
proto.apollo.dreamview.CameraConfig.prototype.getTranslation = function() {
  return /** @type{?proto.apollo.dreamview.Translation} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Translation, 1));
};


/**
 * @param {?proto.apollo.dreamview.Translation|undefined} value
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
*/
proto.apollo.dreamview.CameraConfig.prototype.setTranslation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
 */
proto.apollo.dreamview.CameraConfig.prototype.clearTranslation = function() {
  return this.setTranslation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.CameraConfig.prototype.hasTranslation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float D = 2;
 * @return {!Array<number>}
 */
proto.apollo.dreamview.CameraConfig.prototype.getDList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
 */
proto.apollo.dreamview.CameraConfig.prototype.setDList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
 */
proto.apollo.dreamview.CameraConfig.prototype.addD = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
 */
proto.apollo.dreamview.CameraConfig.prototype.clearDList = function() {
  return this.setDList([]);
};


/**
 * repeated float K = 3;
 * @return {!Array<number>}
 */
proto.apollo.dreamview.CameraConfig.prototype.getKList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
 */
proto.apollo.dreamview.CameraConfig.prototype.setKList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
 */
proto.apollo.dreamview.CameraConfig.prototype.addK = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.CameraConfig} returns this
 */
proto.apollo.dreamview.CameraConfig.prototype.clearKList = function() {
  return this.setKList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Progress.toObject = function(includeInstance, msg) {
  var f, obj = {
    percentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    logString: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Progress as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Progress.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.percentage;

  /** @type {?|undefined} */
  this.logString;

  /** @type {?|undefined} */
  this.status;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Progress.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Progress}
 */
proto.apollo.dreamview.Progress.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Progress();
  obj.percentage != null && jspb.Message.setField(msg, 1, obj.percentage);
  obj.logString != null && jspb.Message.setField(msg, 2, obj.logString);
  obj.status != null && jspb.Message.setField(msg, 3, obj.status);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Progress}
 */
proto.apollo.dreamview.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Progress;
  return proto.apollo.dreamview.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Progress}
 */
proto.apollo.dreamview.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogString(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.dreamview.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.dreamview.Status} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional float percentage = 1;
 * @return {number}
 */
proto.apollo.dreamview.Progress.prototype.getPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Progress} returns this
 */
proto.apollo.dreamview.Progress.prototype.setPercentage = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Progress} returns this
 */
proto.apollo.dreamview.Progress.prototype.clearPercentage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Progress.prototype.hasPercentage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string log_string = 2;
 * @return {string}
 */
proto.apollo.dreamview.Progress.prototype.getLogString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Progress} returns this
 */
proto.apollo.dreamview.Progress.prototype.setLogString = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Progress} returns this
 */
proto.apollo.dreamview.Progress.prototype.clearLogString = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Progress.prototype.hasLogString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Status status = 3;
 * @return {!proto.apollo.dreamview.Status}
 */
proto.apollo.dreamview.Progress.prototype.getStatus = function() {
  return /** @type {!proto.apollo.dreamview.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.dreamview.Status} value
 * @return {!proto.apollo.dreamview.Progress} returns this
 */
proto.apollo.dreamview.Progress.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Progress} returns this
 */
proto.apollo.dreamview.Progress.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Progress.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.PreprocessTable.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.PreprocessTable.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.PreprocessTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.PreprocessTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.PreprocessTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    lidarConfigList: jspb.Message.toObjectList(msg.getLidarConfigList(),
    proto.apollo.dreamview.LidarConfig.toObject, includeInstance),
    cameraConfig: (f = msg.getCameraConfig()) && proto.apollo.dreamview.CameraConfig.toObject(includeInstance, f),
    mainSensor: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    progress: (f = msg.getProgress()) && proto.apollo.dreamview.Progress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PreprocessTable as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.PreprocessTable.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lidarConfigList;

  /** @type {?|undefined} */
  this.cameraConfig;

  /** @type {?|undefined} */
  this.mainSensor;

  /** @type {?|undefined} */
  this.progress;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.PreprocessTable.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.PreprocessTable}
 */
proto.apollo.dreamview.PreprocessTable.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.PreprocessTable();
  obj.lidarConfigList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.lidarConfigList.map(
          proto.apollo.dreamview.LidarConfig.fromObject));
  obj.cameraConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.dreamview.CameraConfig.fromObject(obj.cameraConfig));
  obj.mainSensor != null && jspb.Message.setField(msg, 3, obj.mainSensor);
  obj.progress && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.dreamview.Progress.fromObject(obj.progress));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.PreprocessTable}
 */
proto.apollo.dreamview.PreprocessTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.PreprocessTable;
  return proto.apollo.dreamview.PreprocessTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.PreprocessTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.PreprocessTable}
 */
proto.apollo.dreamview.PreprocessTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dreamview.LidarConfig;
      reader.readMessage(value,proto.apollo.dreamview.LidarConfig.deserializeBinaryFromReader);
      msg.addLidarConfig(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.CameraConfig;
      reader.readMessage(value,proto.apollo.dreamview.CameraConfig.deserializeBinaryFromReader);
      msg.setCameraConfig(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainSensor(value);
      break;
    case 4:
      var value = new proto.apollo.dreamview.Progress;
      reader.readMessage(value,proto.apollo.dreamview.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.PreprocessTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.PreprocessTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.PreprocessTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.PreprocessTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLidarConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.dreamview.LidarConfig.serializeBinaryToWriter
    );
  }
  f = message.getCameraConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.dreamview.CameraConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.dreamview.Progress.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LidarConfig lidar_config = 1;
 * @return {!Array<!proto.apollo.dreamview.LidarConfig>}
 */
proto.apollo.dreamview.PreprocessTable.prototype.getLidarConfigList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.LidarConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.LidarConfig, 1));
};


/**
 * @param {!Array<!proto.apollo.dreamview.LidarConfig>} value
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
*/
proto.apollo.dreamview.PreprocessTable.prototype.setLidarConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.dreamview.LidarConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.LidarConfig}
 */
proto.apollo.dreamview.PreprocessTable.prototype.addLidarConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.dreamview.LidarConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
 */
proto.apollo.dreamview.PreprocessTable.prototype.clearLidarConfigList = function() {
  return this.setLidarConfigList([]);
};


/**
 * optional CameraConfig camera_config = 2;
 * @return {?proto.apollo.dreamview.CameraConfig}
 */
proto.apollo.dreamview.PreprocessTable.prototype.getCameraConfig = function() {
  return /** @type{?proto.apollo.dreamview.CameraConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.CameraConfig, 2));
};


/**
 * @param {?proto.apollo.dreamview.CameraConfig|undefined} value
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
*/
proto.apollo.dreamview.PreprocessTable.prototype.setCameraConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
 */
proto.apollo.dreamview.PreprocessTable.prototype.clearCameraConfig = function() {
  return this.setCameraConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.PreprocessTable.prototype.hasCameraConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string main_sensor = 3;
 * @return {string}
 */
proto.apollo.dreamview.PreprocessTable.prototype.getMainSensor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
 */
proto.apollo.dreamview.PreprocessTable.prototype.setMainSensor = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
 */
proto.apollo.dreamview.PreprocessTable.prototype.clearMainSensor = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.PreprocessTable.prototype.hasMainSensor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Progress progress = 4;
 * @return {?proto.apollo.dreamview.Progress}
 */
proto.apollo.dreamview.PreprocessTable.prototype.getProgress = function() {
  return /** @type{?proto.apollo.dreamview.Progress} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Progress, 4));
};


/**
 * @param {?proto.apollo.dreamview.Progress|undefined} value
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
*/
proto.apollo.dreamview.PreprocessTable.prototype.setProgress = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.PreprocessTable} returns this
 */
proto.apollo.dreamview.PreprocessTable.prototype.clearProgress = function() {
  return this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.PreprocessTable.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.apollo.dreamview.Status = {
  SUCCESS: 0,
  FAIL: 1,
  UNKNOWN: 2
};

goog.object.extend(exports, proto.apollo.dreamview);
