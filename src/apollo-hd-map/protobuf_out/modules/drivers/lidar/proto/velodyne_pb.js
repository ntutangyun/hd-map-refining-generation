// source: modules/drivers/lidar/proto/velodyne.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
goog.exportSymbol('proto.apollo.drivers.velodyne.Mode', null, global);
goog.exportSymbol('proto.apollo.drivers.velodyne.Model', null, global);
goog.exportSymbol('proto.apollo.drivers.velodyne.VelodynePacket', null, global);
goog.exportSymbol('proto.apollo.drivers.velodyne.VelodyneScan', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.velodyne.VelodynePacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.velodyne.VelodynePacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.velodyne.VelodynePacket.displayName = 'proto.apollo.drivers.velodyne.VelodynePacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.velodyne.VelodyneScan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.drivers.velodyne.VelodyneScan.repeatedFields_, null);
};
goog.inherits(proto.apollo.drivers.velodyne.VelodyneScan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.velodyne.VelodyneScan.displayName = 'proto.apollo.drivers.velodyne.VelodyneScan';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.velodyne.VelodynePacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.velodyne.VelodynePacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.VelodynePacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    stamp: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VelodynePacket as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.velodyne.VelodynePacket.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stamp;

  /** @type {?|undefined} */
  this.data;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.velodyne.VelodynePacket.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket}
 */
proto.apollo.drivers.velodyne.VelodynePacket.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.velodyne.VelodynePacket();
  obj.stamp != null && jspb.Message.setField(msg, 1, obj.stamp);
  obj.data != null && jspb.Message.setField(msg, 2, obj.data);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket}
 */
proto.apollo.drivers.velodyne.VelodynePacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.velodyne.VelodynePacket;
  return proto.apollo.drivers.velodyne.VelodynePacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.velodyne.VelodynePacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket}
 */
proto.apollo.drivers.velodyne.VelodynePacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.velodyne.VelodynePacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.velodyne.VelodynePacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.VelodynePacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 stamp = 1;
 * @return {number}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.getStamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket} returns this
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.setStamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket} returns this
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.clearStamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.hasStamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket} returns this
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.setData = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket} returns this
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.clearData = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.VelodynePacket.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.drivers.velodyne.VelodyneScan.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.velodyne.VelodyneScan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.velodyne.VelodyneScan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.VelodyneScan.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    model: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    mode: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    firingPktsList: jspb.Message.toObjectList(msg.getFiringPktsList(),
    proto.apollo.drivers.velodyne.VelodynePacket.toObject, includeInstance),
    positioningPktsList: jspb.Message.toObjectList(msg.getPositioningPktsList(),
    proto.apollo.drivers.velodyne.VelodynePacket.toObject, includeInstance),
    sn: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    basetime: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VelodyneScan as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.velodyne.VelodyneScan.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.model;

  /** @type {?|undefined} */
  this.mode;

  /** @type {?|undefined} */
  this.firingPktsList;

  /** @type {?|undefined} */
  this.positioningPktsList;

  /** @type {?|undefined} */
  this.sn;

  /** @type {?|undefined} */
  this.basetime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.velodyne.VelodyneScan.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan}
 */
proto.apollo.drivers.velodyne.VelodyneScan.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.velodyne.VelodyneScan();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.model != null && jspb.Message.setField(msg, 2, obj.model);
  obj.mode != null && jspb.Message.setField(msg, 3, obj.mode);
  obj.firingPktsList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.firingPktsList.map(
          proto.apollo.drivers.velodyne.VelodynePacket.fromObject));
  obj.positioningPktsList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.positioningPktsList.map(
          proto.apollo.drivers.velodyne.VelodynePacket.fromObject));
  obj.sn != null && jspb.Message.setField(msg, 6, obj.sn);
  obj.basetime != null && jspb.Message.setField(msg, 7, obj.basetime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan}
 */
proto.apollo.drivers.velodyne.VelodyneScan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.velodyne.VelodyneScan;
  return proto.apollo.drivers.velodyne.VelodyneScan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.velodyne.VelodyneScan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan}
 */
proto.apollo.drivers.velodyne.VelodyneScan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.drivers.velodyne.Model} */ (reader.readEnum());
      msg.setModel(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.drivers.velodyne.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 4:
      var value = new proto.apollo.drivers.velodyne.VelodynePacket;
      reader.readMessage(value,proto.apollo.drivers.velodyne.VelodynePacket.deserializeBinaryFromReader);
      msg.addFiringPkts(value);
      break;
    case 5:
      var value = new proto.apollo.drivers.velodyne.VelodynePacket;
      reader.readMessage(value,proto.apollo.drivers.velodyne.VelodynePacket.deserializeBinaryFromReader);
      msg.addPositioningPkts(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBasetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.velodyne.VelodyneScan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.velodyne.VelodyneScan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.VelodyneScan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.drivers.velodyne.Model} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.velodyne.Mode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFiringPktsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.drivers.velodyne.VelodynePacket.serializeBinaryToWriter
    );
  }
  f = message.getPositioningPktsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.drivers.velodyne.VelodynePacket.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
*/
proto.apollo.drivers.velodyne.VelodyneScan.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Model model = 2;
 * @return {!proto.apollo.drivers.velodyne.Model}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.getModel = function() {
  return /** @type {!proto.apollo.drivers.velodyne.Model} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.drivers.velodyne.Model} value
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.setModel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.clearModel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.hasModel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Mode mode = 3;
 * @return {!proto.apollo.drivers.velodyne.Mode}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.getMode = function() {
  return /** @type {!proto.apollo.drivers.velodyne.Mode} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.apollo.drivers.velodyne.Mode} value
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.clearMode = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.hasMode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated VelodynePacket firing_pkts = 4;
 * @return {!Array<!proto.apollo.drivers.velodyne.VelodynePacket>}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.getFiringPktsList = function() {
  return /** @type{!Array<!proto.apollo.drivers.velodyne.VelodynePacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.drivers.velodyne.VelodynePacket, 4));
};


/**
 * @param {!Array<!proto.apollo.drivers.velodyne.VelodynePacket>} value
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
*/
proto.apollo.drivers.velodyne.VelodyneScan.prototype.setFiringPktsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.drivers.velodyne.VelodynePacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.addFiringPkts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.drivers.velodyne.VelodynePacket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.clearFiringPktsList = function() {
  return this.setFiringPktsList([]);
};


/**
 * repeated VelodynePacket positioning_pkts = 5;
 * @return {!Array<!proto.apollo.drivers.velodyne.VelodynePacket>}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.getPositioningPktsList = function() {
  return /** @type{!Array<!proto.apollo.drivers.velodyne.VelodynePacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.drivers.velodyne.VelodynePacket, 5));
};


/**
 * @param {!Array<!proto.apollo.drivers.velodyne.VelodynePacket>} value
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
*/
proto.apollo.drivers.velodyne.VelodyneScan.prototype.setPositioningPktsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.drivers.velodyne.VelodynePacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.drivers.velodyne.VelodynePacket}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.addPositioningPkts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.drivers.velodyne.VelodynePacket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.clearPositioningPktsList = function() {
  return this.setPositioningPktsList([]);
};


/**
 * optional string sn = 6;
 * @return {string}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.setSn = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.clearSn = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.hasSn = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 basetime = 7;
 * @return {number}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.getBasetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.setBasetime = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.VelodyneScan} returns this
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.clearBasetime = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.VelodyneScan.prototype.hasBasetime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.apollo.drivers.velodyne.Model = {
  UNKNOWN: 0,
  HDL64E_S3S: 1,
  HDL64E_S3D: 2,
  HDL64E_S2: 3,
  HDL32E: 4,
  VLP16: 5,
  VLP32C: 6,
  VLS128: 7
};

/**
 * @enum {number}
 */
proto.apollo.drivers.velodyne.Mode = {
  STRONGEST: 1,
  LAST: 2,
  DUAL: 3
};

goog.object.extend(exports, proto.apollo.drivers.velodyne);
