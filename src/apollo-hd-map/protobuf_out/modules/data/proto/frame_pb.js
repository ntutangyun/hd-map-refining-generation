// source: modules/data/proto/frame.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CameraImage', null, global);
goog.exportSymbol('proto.Frame', null, global);
goog.exportSymbol('proto.GPSPose', null, global);
goog.exportSymbol('proto.Quaternion', null, global);
goog.exportSymbol('proto.RadarPoint', null, global);
goog.exportSymbol('proto.RadarPoint.RadarType', null, global);
goog.exportSymbol('proto.Vector3', null, global);
goog.exportSymbol('proto.Vector4', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vector3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vector3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vector3.displayName = 'proto.Vector3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vector4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vector4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vector4.displayName = 'proto.Vector4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Quaternion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Quaternion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Quaternion.displayName = 'proto.Quaternion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GPSPose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GPSPose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GPSPose.displayName = 'proto.GPSPose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CameraImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CameraImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CameraImage.displayName = 'proto.CameraImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RadarPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RadarPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RadarPoint.displayName = 'proto.RadarPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Frame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Frame.repeatedFields_, null);
};
goog.inherits(proto.Frame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Frame.displayName = 'proto.Frame';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vector3.prototype.toObject = function(opt_includeInstance) {
  return proto.Vector3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vector3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector3.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Vector3 as accepted by the `fromObject` method.
 * @record
 */
proto.Vector3.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Vector3.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Vector3}
 */
proto.Vector3.fromObject = function(obj) {
  var msg = new proto.Vector3();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vector3}
 */
proto.Vector3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vector3;
  return proto.Vector3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vector3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vector3}
 */
proto.Vector3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vector3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vector3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vector3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.Vector3.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector3.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.Vector3.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector3.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.Vector3.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector3} returns this
 */
proto.Vector3.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector3.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vector4.prototype.toObject = function(opt_includeInstance) {
  return proto.Vector4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vector4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector4.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    i: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    isGround: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Vector4 as accepted by the `fromObject` method.
 * @record
 */
proto.Vector4.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.i;

  /** @type {?|undefined} */
  this.isGround;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Vector4.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Vector4}
 */
proto.Vector4.fromObject = function(obj) {
  var msg = new proto.Vector4();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  obj.i != null && jspb.Message.setField(msg, 4, obj.i);
  obj.isGround != null && jspb.Message.setField(msg, 5, obj.isGround);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vector4}
 */
proto.Vector4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vector4;
  return proto.Vector4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vector4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vector4}
 */
proto.Vector4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setI(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsGround(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vector4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vector4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vector4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.Vector4.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector4.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.Vector4.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector4.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.Vector4.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector4.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double i = 4;
 * @return {number}
 */
proto.Vector4.prototype.getI = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.setI = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.clearI = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector4.prototype.hasI = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_ground = 5;
 * @return {boolean}
 */
proto.Vector4.prototype.getIsGround = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.setIsGround = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Vector4} returns this
 */
proto.Vector4.prototype.clearIsGround = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Vector4.prototype.hasIsGround = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Quaternion.prototype.toObject = function(opt_includeInstance) {
  return proto.Quaternion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Quaternion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Quaternion.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    w: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Quaternion as accepted by the `fromObject` method.
 * @record
 */
proto.Quaternion.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.w;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Quaternion.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Quaternion}
 */
proto.Quaternion.fromObject = function(obj) {
  var msg = new proto.Quaternion();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  obj.w != null && jspb.Message.setField(msg, 4, obj.w);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Quaternion}
 */
proto.Quaternion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Quaternion;
  return proto.Quaternion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Quaternion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Quaternion}
 */
proto.Quaternion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Quaternion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Quaternion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Quaternion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Quaternion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.Quaternion.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Quaternion.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.Quaternion.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Quaternion.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.Quaternion.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Quaternion.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double w = 4;
 * @return {number}
 */
proto.Quaternion.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.setW = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Quaternion} returns this
 */
proto.Quaternion.prototype.clearW = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Quaternion.prototype.hasW = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GPSPose.prototype.toObject = function(opt_includeInstance) {
  return proto.GPSPose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GPSPose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GPSPose.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    lon: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    bearing: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    qw: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    qx: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    qy: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    qz: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of GPSPose as accepted by the `fromObject` method.
 * @record
 */
proto.GPSPose.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lat;

  /** @type {?|undefined} */
  this.lon;

  /** @type {?|undefined} */
  this.bearing;

  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.qw;

  /** @type {?|undefined} */
  this.qx;

  /** @type {?|undefined} */
  this.qy;

  /** @type {?|undefined} */
  this.qz;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.GPSPose.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.GPSPose}
 */
proto.GPSPose.fromObject = function(obj) {
  var msg = new proto.GPSPose();
  obj.lat != null && jspb.Message.setField(msg, 1, obj.lat);
  obj.lon != null && jspb.Message.setField(msg, 2, obj.lon);
  obj.bearing != null && jspb.Message.setField(msg, 3, obj.bearing);
  obj.x != null && jspb.Message.setField(msg, 4, obj.x);
  obj.y != null && jspb.Message.setField(msg, 5, obj.y);
  obj.z != null && jspb.Message.setField(msg, 6, obj.z);
  obj.qw != null && jspb.Message.setField(msg, 7, obj.qw);
  obj.qx != null && jspb.Message.setField(msg, 8, obj.qx);
  obj.qy != null && jspb.Message.setField(msg, 9, obj.qy);
  obj.qz != null && jspb.Message.setField(msg, 10, obj.qz);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GPSPose}
 */
proto.GPSPose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GPSPose;
  return proto.GPSPose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GPSPose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GPSPose}
 */
proto.GPSPose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBearing(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQw(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQx(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQy(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GPSPose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GPSPose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GPSPose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GPSPose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.GPSPose.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setLat = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearLat = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasLat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double lon = 2;
 * @return {number}
 */
proto.GPSPose.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setLon = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearLon = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasLon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double bearing = 3;
 * @return {number}
 */
proto.GPSPose.prototype.getBearing = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setBearing = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearBearing = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasBearing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double x = 4;
 * @return {number}
 */
proto.GPSPose.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setX = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearX = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double y = 5;
 * @return {number}
 */
proto.GPSPose.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setY = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearY = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double z = 6;
 * @return {number}
 */
proto.GPSPose.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearZ = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasZ = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double qw = 7;
 * @return {number}
 */
proto.GPSPose.prototype.getQw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setQw = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearQw = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasQw = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double qx = 8;
 * @return {number}
 */
proto.GPSPose.prototype.getQx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setQx = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearQx = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasQx = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double qy = 9;
 * @return {number}
 */
proto.GPSPose.prototype.getQy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setQy = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearQy = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasQy = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double qz = 10;
 * @return {number}
 */
proto.GPSPose.prototype.getQz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.setQz = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.GPSPose} returns this
 */
proto.GPSPose.prototype.clearQz = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GPSPose.prototype.hasQz = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CameraImage.prototype.toObject = function(opt_includeInstance) {
  return proto.CameraImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CameraImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CameraImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    imageUrl: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    position: (f = msg.getPosition()) && proto.Vector3.toObject(includeInstance, f),
    heading: (f = msg.getHeading()) && proto.Quaternion.toObject(includeInstance, f),
    fx: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    fy: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    cx: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    cy: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    skew: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    k1: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    k2: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    k3: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    p1: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    p2: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    channel: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CameraImage as accepted by the `fromObject` method.
 * @record
 */
proto.CameraImage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.imageUrl;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.fx;

  /** @type {?|undefined} */
  this.fy;

  /** @type {?|undefined} */
  this.cx;

  /** @type {?|undefined} */
  this.cy;

  /** @type {?|undefined} */
  this.skew;

  /** @type {?|undefined} */
  this.k1;

  /** @type {?|undefined} */
  this.k2;

  /** @type {?|undefined} */
  this.k3;

  /** @type {?|undefined} */
  this.p1;

  /** @type {?|undefined} */
  this.p2;

  /** @type {?|undefined} */
  this.channel;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.CameraImage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.CameraImage}
 */
proto.CameraImage.fromObject = function(obj) {
  var msg = new proto.CameraImage();
  obj.timestamp != null && jspb.Message.setField(msg, 1, obj.timestamp);
  obj.imageUrl != null && jspb.Message.setField(msg, 2, obj.imageUrl);
  obj.position && jspb.Message.setWrapperField(
      msg, 3, proto.Vector3.fromObject(obj.position));
  obj.heading && jspb.Message.setWrapperField(
      msg, 4, proto.Quaternion.fromObject(obj.heading));
  obj.fx != null && jspb.Message.setField(msg, 5, obj.fx);
  obj.fy != null && jspb.Message.setField(msg, 6, obj.fy);
  obj.cx != null && jspb.Message.setField(msg, 7, obj.cx);
  obj.cy != null && jspb.Message.setField(msg, 8, obj.cy);
  obj.skew != null && jspb.Message.setField(msg, 9, obj.skew);
  obj.k1 != null && jspb.Message.setField(msg, 10, obj.k1);
  obj.k2 != null && jspb.Message.setField(msg, 11, obj.k2);
  obj.k3 != null && jspb.Message.setField(msg, 12, obj.k3);
  obj.p1 != null && jspb.Message.setField(msg, 13, obj.p1);
  obj.p2 != null && jspb.Message.setField(msg, 14, obj.p2);
  obj.channel != null && jspb.Message.setField(msg, 15, obj.channel);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CameraImage}
 */
proto.CameraImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CameraImage;
  return proto.CameraImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CameraImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CameraImage}
 */
proto.CameraImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 3:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = new proto.Quaternion;
      reader.readMessage(value,proto.Quaternion.deserializeBinaryFromReader);
      msg.setHeading(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSkew(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setK1(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setK2(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setK3(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setP1(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setP2(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CameraImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CameraImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CameraImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CameraImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getHeading();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Quaternion.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional double timestamp = 1;
 * @return {number}
 */
proto.CameraImage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string image_url = 2;
 * @return {string}
 */
proto.CameraImage.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setImageUrl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearImageUrl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasImageUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vector3 position = 3;
 * @return {?proto.Vector3}
 */
proto.CameraImage.prototype.getPosition = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Vector3, 3));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.CameraImage} returns this
*/
proto.CameraImage.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Quaternion heading = 4;
 * @return {?proto.Quaternion}
 */
proto.CameraImage.prototype.getHeading = function() {
  return /** @type{?proto.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.Quaternion, 4));
};


/**
 * @param {?proto.Quaternion|undefined} value
 * @return {!proto.CameraImage} returns this
*/
proto.CameraImage.prototype.setHeading = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearHeading = function() {
  return this.setHeading(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double fx = 5;
 * @return {number}
 */
proto.CameraImage.prototype.getFx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setFx = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearFx = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasFx = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double fy = 6;
 * @return {number}
 */
proto.CameraImage.prototype.getFy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setFy = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearFy = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasFy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double cx = 7;
 * @return {number}
 */
proto.CameraImage.prototype.getCx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setCx = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearCx = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasCx = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double cy = 8;
 * @return {number}
 */
proto.CameraImage.prototype.getCy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setCy = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearCy = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasCy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double skew = 9;
 * @return {number}
 */
proto.CameraImage.prototype.getSkew = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setSkew = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearSkew = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasSkew = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double k1 = 10;
 * @return {number}
 */
proto.CameraImage.prototype.getK1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setK1 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearK1 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasK1 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double k2 = 11;
 * @return {number}
 */
proto.CameraImage.prototype.getK2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setK2 = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearK2 = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasK2 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double k3 = 12;
 * @return {number}
 */
proto.CameraImage.prototype.getK3 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setK3 = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearK3 = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasK3 = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double p1 = 13;
 * @return {number}
 */
proto.CameraImage.prototype.getP1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setP1 = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearP1 = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double p2 = 14;
 * @return {number}
 */
proto.CameraImage.prototype.getP2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setP2 = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearP2 = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string channel = 15;
 * @return {string}
 */
proto.CameraImage.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.setChannel = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CameraImage} returns this
 */
proto.CameraImage.prototype.clearChannel = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CameraImage.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RadarPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.RadarPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RadarPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.Vector3.toObject(includeInstance, f),
    direction: (f = msg.getDirection()) && proto.Vector3.toObject(includeInstance, f),
    type: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RadarPoint as accepted by the `fromObject` method.
 * @record
 */
proto.RadarPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.direction;

  /** @type {?|undefined} */
  this.type;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.RadarPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.RadarPoint}
 */
proto.RadarPoint.fromObject = function(obj) {
  var msg = new proto.RadarPoint();
  obj.position && jspb.Message.setWrapperField(
      msg, 1, proto.Vector3.fromObject(obj.position));
  obj.direction && jspb.Message.setWrapperField(
      msg, 2, proto.Vector3.fromObject(obj.direction));
  obj.type != null && jspb.Message.setField(msg, 3, obj.type);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RadarPoint}
 */
proto.RadarPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RadarPoint;
  return proto.RadarPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RadarPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RadarPoint}
 */
proto.RadarPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    case 3:
      var value = /** @type {!proto.RadarPoint.RadarType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RadarPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RadarPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RadarPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadarPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.RadarPoint.RadarType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.RadarPoint.RadarType = {
  FRONT: 1,
  REAR: 2
};

/**
 * optional Vector3 position = 1;
 * @return {?proto.Vector3}
 */
proto.RadarPoint.prototype.getPosition = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Vector3, 1));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.RadarPoint} returns this
*/
proto.RadarPoint.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RadarPoint} returns this
 */
proto.RadarPoint.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarPoint.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vector3 direction = 2;
 * @return {?proto.Vector3}
 */
proto.RadarPoint.prototype.getDirection = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Vector3, 2));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.RadarPoint} returns this
*/
proto.RadarPoint.prototype.setDirection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RadarPoint} returns this
 */
proto.RadarPoint.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarPoint.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RadarType type = 3;
 * @return {!proto.RadarPoint.RadarType}
 */
proto.RadarPoint.prototype.getType = function() {
  return /** @type {!proto.RadarPoint.RadarType} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.RadarPoint.RadarType} value
 * @return {!proto.RadarPoint} returns this
 */
proto.RadarPoint.prototype.setType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RadarPoint} returns this
 */
proto.RadarPoint.prototype.clearType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RadarPoint.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Frame.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Frame.prototype.toObject = function(opt_includeInstance) {
  return proto.Frame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Frame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Frame.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePosition: (f = msg.getDevicePosition()) && proto.Vector3.toObject(includeInstance, f),
    deviceHeading: (f = msg.getDeviceHeading()) && proto.Quaternion.toObject(includeInstance, f),
    deviceGpsPose: (f = msg.getDeviceGpsPose()) && proto.GPSPose.toObject(includeInstance, f),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.Vector4.toObject, includeInstance),
    radarPointsList: jspb.Message.toObjectList(msg.getRadarPointsList(),
    proto.RadarPoint.toObject, includeInstance),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.CameraImage.toObject, includeInstance),
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    frameSeq: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    dataFile: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Frame as accepted by the `fromObject` method.
 * @record
 */
proto.Frame.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.devicePosition;

  /** @type {?|undefined} */
  this.deviceHeading;

  /** @type {?|undefined} */
  this.deviceGpsPose;

  /** @type {?|undefined} */
  this.pointsList;

  /** @type {?|undefined} */
  this.radarPointsList;

  /** @type {?|undefined} */
  this.imagesList;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.frameSeq;

  /** @type {?|undefined} */
  this.dataFile;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Frame.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Frame}
 */
proto.Frame.fromObject = function(obj) {
  var msg = new proto.Frame();
  obj.devicePosition && jspb.Message.setWrapperField(
      msg, 1, proto.Vector3.fromObject(obj.devicePosition));
  obj.deviceHeading && jspb.Message.setWrapperField(
      msg, 2, proto.Quaternion.fromObject(obj.deviceHeading));
  obj.deviceGpsPose && jspb.Message.setWrapperField(
      msg, 3, proto.GPSPose.fromObject(obj.deviceGpsPose));
  obj.pointsList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.pointsList.map(
          proto.Vector4.fromObject));
  obj.radarPointsList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.radarPointsList.map(
          proto.RadarPoint.fromObject));
  obj.imagesList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.imagesList.map(
          proto.CameraImage.fromObject));
  obj.timestamp != null && jspb.Message.setField(msg, 7, obj.timestamp);
  obj.frameSeq != null && jspb.Message.setField(msg, 8, obj.frameSeq);
  obj.dataFile != null && jspb.Message.setField(msg, 9, obj.dataFile);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Frame}
 */
proto.Frame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Frame;
  return proto.Frame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Frame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Frame}
 */
proto.Frame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Vector3;
      reader.readMessage(value,proto.Vector3.deserializeBinaryFromReader);
      msg.setDevicePosition(value);
      break;
    case 2:
      var value = new proto.Quaternion;
      reader.readMessage(value,proto.Quaternion.deserializeBinaryFromReader);
      msg.setDeviceHeading(value);
      break;
    case 3:
      var value = new proto.GPSPose;
      reader.readMessage(value,proto.GPSPose.deserializeBinaryFromReader);
      msg.setDeviceGpsPose(value);
      break;
    case 4:
      var value = new proto.Vector4;
      reader.readMessage(value,proto.Vector4.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 5:
      var value = new proto.RadarPoint;
      reader.readMessage(value,proto.RadarPoint.deserializeBinaryFromReader);
      msg.addRadarPoints(value);
      break;
    case 6:
      var value = new proto.CameraImage;
      reader.readMessage(value,proto.CameraImage.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameSeq(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Frame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Frame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Frame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Frame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Vector3.serializeBinaryToWriter
    );
  }
  f = message.getDeviceHeading();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Quaternion.serializeBinaryToWriter
    );
  }
  f = message.getDeviceGpsPose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GPSPose.serializeBinaryToWriter
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Vector4.serializeBinaryToWriter
    );
  }
  f = message.getRadarPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.RadarPoint.serializeBinaryToWriter
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.CameraImage.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional Vector3 device_position = 1;
 * @return {?proto.Vector3}
 */
proto.Frame.prototype.getDevicePosition = function() {
  return /** @type{?proto.Vector3} */ (
    jspb.Message.getWrapperField(this, proto.Vector3, 1));
};


/**
 * @param {?proto.Vector3|undefined} value
 * @return {!proto.Frame} returns this
*/
proto.Frame.prototype.setDevicePosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearDevicePosition = function() {
  return this.setDevicePosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Frame.prototype.hasDevicePosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Quaternion device_heading = 2;
 * @return {?proto.Quaternion}
 */
proto.Frame.prototype.getDeviceHeading = function() {
  return /** @type{?proto.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.Quaternion, 2));
};


/**
 * @param {?proto.Quaternion|undefined} value
 * @return {!proto.Frame} returns this
*/
proto.Frame.prototype.setDeviceHeading = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearDeviceHeading = function() {
  return this.setDeviceHeading(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Frame.prototype.hasDeviceHeading = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GPSPose device_gps_pose = 3;
 * @return {?proto.GPSPose}
 */
proto.Frame.prototype.getDeviceGpsPose = function() {
  return /** @type{?proto.GPSPose} */ (
    jspb.Message.getWrapperField(this, proto.GPSPose, 3));
};


/**
 * @param {?proto.GPSPose|undefined} value
 * @return {!proto.Frame} returns this
*/
proto.Frame.prototype.setDeviceGpsPose = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearDeviceGpsPose = function() {
  return this.setDeviceGpsPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Frame.prototype.hasDeviceGpsPose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Vector4 points = 4;
 * @return {!Array<!proto.Vector4>}
 */
proto.Frame.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.Vector4>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vector4, 4));
};


/**
 * @param {!Array<!proto.Vector4>} value
 * @return {!proto.Frame} returns this
*/
proto.Frame.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Vector4=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vector4}
 */
proto.Frame.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Vector4, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};


/**
 * repeated RadarPoint radar_points = 5;
 * @return {!Array<!proto.RadarPoint>}
 */
proto.Frame.prototype.getRadarPointsList = function() {
  return /** @type{!Array<!proto.RadarPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RadarPoint, 5));
};


/**
 * @param {!Array<!proto.RadarPoint>} value
 * @return {!proto.Frame} returns this
*/
proto.Frame.prototype.setRadarPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.RadarPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RadarPoint}
 */
proto.Frame.prototype.addRadarPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.RadarPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearRadarPointsList = function() {
  return this.setRadarPointsList([]);
};


/**
 * repeated CameraImage images = 6;
 * @return {!Array<!proto.CameraImage>}
 */
proto.Frame.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.CameraImage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CameraImage, 6));
};


/**
 * @param {!Array<!proto.CameraImage>} value
 * @return {!proto.Frame} returns this
*/
proto.Frame.prototype.setImagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.CameraImage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CameraImage}
 */
proto.Frame.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.CameraImage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearImagesList = function() {
  return this.setImagesList([]);
};


/**
 * optional double timestamp = 7;
 * @return {number}
 */
proto.Frame.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Frame.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 frame_seq = 8;
 * @return {number}
 */
proto.Frame.prototype.getFrameSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.setFrameSeq = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearFrameSeq = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Frame.prototype.hasFrameSeq = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string data_file = 9;
 * @return {string}
 */
proto.Frame.prototype.getDataFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.setDataFile = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Frame} returns this
 */
proto.Frame.prototype.clearDataFile = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Frame.prototype.hasDataFile = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto);
