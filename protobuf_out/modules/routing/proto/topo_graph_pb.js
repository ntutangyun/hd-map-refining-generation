// source: modules/routing/proto/topo_graph.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_map_proto_map_geometry_pb = require('../../../modules/map/proto/map_geometry_pb.js');
goog.object.extend(proto, modules_map_proto_map_geometry_pb);
goog.exportSymbol('proto.apollo.routing.CurvePoint', null, global);
goog.exportSymbol('proto.apollo.routing.CurveRange', null, global);
goog.exportSymbol('proto.apollo.routing.Edge', null, global);
goog.exportSymbol('proto.apollo.routing.Edge.DirectionType', null, global);
goog.exportSymbol('proto.apollo.routing.Graph', null, global);
goog.exportSymbol('proto.apollo.routing.Node', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.CurvePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.CurvePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.CurvePoint.displayName = 'proto.apollo.routing.CurvePoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.CurveRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.CurveRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.CurveRange.displayName = 'proto.apollo.routing.CurveRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.routing.Node.repeatedFields_, null);
};
goog.inherits(proto.apollo.routing.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.Node.displayName = 'proto.apollo.routing.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.Edge.displayName = 'proto.apollo.routing.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.routing.Graph.repeatedFields_, null);
};
goog.inherits(proto.apollo.routing.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.Graph.displayName = 'proto.apollo.routing.Graph';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.CurvePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.CurvePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.CurvePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.CurvePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CurvePoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.CurvePoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.s;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.CurvePoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.CurvePoint}
 */
proto.apollo.routing.CurvePoint.fromObject = function(obj) {
  var msg = new proto.apollo.routing.CurvePoint();
  obj.s != null && jspb.Message.setField(msg, 1, obj.s);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.CurvePoint}
 */
proto.apollo.routing.CurvePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.CurvePoint;
  return proto.apollo.routing.CurvePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.CurvePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.CurvePoint}
 */
proto.apollo.routing.CurvePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.CurvePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.CurvePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.CurvePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.CurvePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double s = 1;
 * @return {number}
 */
proto.apollo.routing.CurvePoint.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.CurvePoint} returns this
 */
proto.apollo.routing.CurvePoint.prototype.setS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.CurvePoint} returns this
 */
proto.apollo.routing.CurvePoint.prototype.clearS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.CurvePoint.prototype.hasS = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.CurveRange.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.CurveRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.CurveRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.CurveRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.apollo.routing.CurvePoint.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.apollo.routing.CurvePoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CurveRange as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.CurveRange.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.start;

  /** @type {?|undefined} */
  this.end;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.CurveRange.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.CurveRange}
 */
proto.apollo.routing.CurveRange.fromObject = function(obj) {
  var msg = new proto.apollo.routing.CurveRange();
  obj.start && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.routing.CurvePoint.fromObject(obj.start));
  obj.end && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.routing.CurvePoint.fromObject(obj.end));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.CurveRange}
 */
proto.apollo.routing.CurveRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.CurveRange;
  return proto.apollo.routing.CurveRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.CurveRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.CurveRange}
 */
proto.apollo.routing.CurveRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.routing.CurvePoint;
      reader.readMessage(value,proto.apollo.routing.CurvePoint.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.apollo.routing.CurvePoint;
      reader.readMessage(value,proto.apollo.routing.CurvePoint.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.CurveRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.CurveRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.CurveRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.CurveRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.routing.CurvePoint.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.routing.CurvePoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional CurvePoint start = 1;
 * @return {?proto.apollo.routing.CurvePoint}
 */
proto.apollo.routing.CurveRange.prototype.getStart = function() {
  return /** @type{?proto.apollo.routing.CurvePoint} */ (
    jspb.Message.getWrapperField(this, proto.apollo.routing.CurvePoint, 1));
};


/**
 * @param {?proto.apollo.routing.CurvePoint|undefined} value
 * @return {!proto.apollo.routing.CurveRange} returns this
*/
proto.apollo.routing.CurveRange.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.CurveRange} returns this
 */
proto.apollo.routing.CurveRange.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.CurveRange.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CurvePoint end = 2;
 * @return {?proto.apollo.routing.CurvePoint}
 */
proto.apollo.routing.CurveRange.prototype.getEnd = function() {
  return /** @type{?proto.apollo.routing.CurvePoint} */ (
    jspb.Message.getWrapperField(this, proto.apollo.routing.CurvePoint, 2));
};


/**
 * @param {?proto.apollo.routing.CurvePoint|undefined} value
 * @return {!proto.apollo.routing.CurveRange} returns this
*/
proto.apollo.routing.CurveRange.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.CurveRange} returns this
 */
proto.apollo.routing.CurveRange.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.CurveRange.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.routing.Node.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    length: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    leftOutList: jspb.Message.toObjectList(msg.getLeftOutList(),
    proto.apollo.routing.CurveRange.toObject, includeInstance),
    rightOutList: jspb.Message.toObjectList(msg.getRightOutList(),
    proto.apollo.routing.CurveRange.toObject, includeInstance),
    cost: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    centralCurve: (f = msg.getCentralCurve()) && modules_map_proto_map_geometry_pb.Curve.toObject(includeInstance, f),
    isVirtual: jspb.Message.getBooleanFieldWithDefault(msg, 7, true),
    roadId: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Node as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.Node.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneId;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.leftOutList;

  /** @type {?|undefined} */
  this.rightOutList;

  /** @type {?|undefined} */
  this.cost;

  /** @type {?|undefined} */
  this.centralCurve;

  /** @type {?|undefined} */
  this.isVirtual;

  /** @type {?|undefined} */
  this.roadId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.Node.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.Node}
 */
proto.apollo.routing.Node.fromObject = function(obj) {
  var msg = new proto.apollo.routing.Node();
  obj.laneId != null && jspb.Message.setField(msg, 1, obj.laneId);
  obj.length != null && jspb.Message.setField(msg, 2, obj.length);
  obj.leftOutList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.leftOutList.map(
          proto.apollo.routing.CurveRange.fromObject));
  obj.rightOutList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.rightOutList.map(
          proto.apollo.routing.CurveRange.fromObject));
  obj.cost != null && jspb.Message.setField(msg, 5, obj.cost);
  obj.centralCurve && jspb.Message.setWrapperField(
      msg, 6, modules_map_proto_map_geometry_pb.Curve.fromObject(obj.centralCurve));
  obj.isVirtual != null && jspb.Message.setField(msg, 7, obj.isVirtual);
  obj.roadId != null && jspb.Message.setField(msg, 8, obj.roadId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.Node}
 */
proto.apollo.routing.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.Node;
  return proto.apollo.routing.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.Node}
 */
proto.apollo.routing.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 3:
      var value = new proto.apollo.routing.CurveRange;
      reader.readMessage(value,proto.apollo.routing.CurveRange.deserializeBinaryFromReader);
      msg.addLeftOut(value);
      break;
    case 4:
      var value = new proto.apollo.routing.CurveRange;
      reader.readMessage(value,proto.apollo.routing.CurveRange.deserializeBinaryFromReader);
      msg.addRightOut(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCost(value);
      break;
    case 6:
      var value = new modules_map_proto_map_geometry_pb.Curve;
      reader.readMessage(value,modules_map_proto_map_geometry_pb.Curve.deserializeBinaryFromReader);
      msg.setCentralCurve(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVirtual(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoadId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLeftOutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.routing.CurveRange.serializeBinaryToWriter
    );
  }
  f = message.getRightOutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.routing.CurveRange.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCentralCurve();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      modules_map_proto_map_geometry_pb.Curve.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string lane_id = 1;
 * @return {string}
 */
proto.apollo.routing.Node.prototype.getLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Node.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double length = 2;
 * @return {number}
 */
proto.apollo.routing.Node.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Node.prototype.hasLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CurveRange left_out = 3;
 * @return {!Array<!proto.apollo.routing.CurveRange>}
 */
proto.apollo.routing.Node.prototype.getLeftOutList = function() {
  return /** @type{!Array<!proto.apollo.routing.CurveRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.CurveRange, 3));
};


/**
 * @param {!Array<!proto.apollo.routing.CurveRange>} value
 * @return {!proto.apollo.routing.Node} returns this
*/
proto.apollo.routing.Node.prototype.setLeftOutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.routing.CurveRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.CurveRange}
 */
proto.apollo.routing.Node.prototype.addLeftOut = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.routing.CurveRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearLeftOutList = function() {
  return this.setLeftOutList([]);
};


/**
 * repeated CurveRange right_out = 4;
 * @return {!Array<!proto.apollo.routing.CurveRange>}
 */
proto.apollo.routing.Node.prototype.getRightOutList = function() {
  return /** @type{!Array<!proto.apollo.routing.CurveRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.CurveRange, 4));
};


/**
 * @param {!Array<!proto.apollo.routing.CurveRange>} value
 * @return {!proto.apollo.routing.Node} returns this
*/
proto.apollo.routing.Node.prototype.setRightOutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.routing.CurveRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.CurveRange}
 */
proto.apollo.routing.Node.prototype.addRightOut = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.routing.CurveRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearRightOutList = function() {
  return this.setRightOutList([]);
};


/**
 * optional double cost = 5;
 * @return {number}
 */
proto.apollo.routing.Node.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.setCost = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearCost = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Node.prototype.hasCost = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional apollo.hdmap.Curve central_curve = 6;
 * @return {?proto.apollo.hdmap.Curve}
 */
proto.apollo.routing.Node.prototype.getCentralCurve = function() {
  return /** @type{?proto.apollo.hdmap.Curve} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_geometry_pb.Curve, 6));
};


/**
 * @param {?proto.apollo.hdmap.Curve|undefined} value
 * @return {!proto.apollo.routing.Node} returns this
*/
proto.apollo.routing.Node.prototype.setCentralCurve = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearCentralCurve = function() {
  return this.setCentralCurve(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Node.prototype.hasCentralCurve = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_virtual = 7;
 * @return {boolean}
 */
proto.apollo.routing.Node.prototype.getIsVirtual = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.setIsVirtual = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearIsVirtual = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Node.prototype.hasIsVirtual = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string road_id = 8;
 * @return {string}
 */
proto.apollo.routing.Node.prototype.getRoadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.setRoadId = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Node} returns this
 */
proto.apollo.routing.Node.prototype.clearRoadId = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Node.prototype.hasRoadId = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromLaneId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    toLaneId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    cost: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    directionType: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Edge as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.Edge.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.fromLaneId;

  /** @type {?|undefined} */
  this.toLaneId;

  /** @type {?|undefined} */
  this.cost;

  /** @type {?|undefined} */
  this.directionType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.Edge.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.Edge}
 */
proto.apollo.routing.Edge.fromObject = function(obj) {
  var msg = new proto.apollo.routing.Edge();
  obj.fromLaneId != null && jspb.Message.setField(msg, 1, obj.fromLaneId);
  obj.toLaneId != null && jspb.Message.setField(msg, 2, obj.toLaneId);
  obj.cost != null && jspb.Message.setField(msg, 3, obj.cost);
  obj.directionType != null && jspb.Message.setField(msg, 4, obj.directionType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.Edge}
 */
proto.apollo.routing.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.Edge;
  return proto.apollo.routing.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.Edge}
 */
proto.apollo.routing.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromLaneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToLaneId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCost(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.routing.Edge.DirectionType} */ (reader.readEnum());
      msg.setDirectionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.routing.Edge.DirectionType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.routing.Edge.DirectionType = {
  FORWARD: 0,
  LEFT: 1,
  RIGHT: 2
};

/**
 * optional string from_lane_id = 1;
 * @return {string}
 */
proto.apollo.routing.Edge.prototype.getFromLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.setFromLaneId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.clearFromLaneId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Edge.prototype.hasFromLaneId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string to_lane_id = 2;
 * @return {string}
 */
proto.apollo.routing.Edge.prototype.getToLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.setToLaneId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.clearToLaneId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Edge.prototype.hasToLaneId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double cost = 3;
 * @return {number}
 */
proto.apollo.routing.Edge.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.setCost = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.clearCost = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Edge.prototype.hasCost = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DirectionType direction_type = 4;
 * @return {!proto.apollo.routing.Edge.DirectionType}
 */
proto.apollo.routing.Edge.prototype.getDirectionType = function() {
  return /** @type {!proto.apollo.routing.Edge.DirectionType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.routing.Edge.DirectionType} value
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.setDirectionType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Edge} returns this
 */
proto.apollo.routing.Edge.prototype.clearDirectionType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Edge.prototype.hasDirectionType = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.routing.Graph.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    hdmapVersion: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    hdmapDistrict: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    nodeList: jspb.Message.toObjectList(msg.getNodeList(),
    proto.apollo.routing.Node.toObject, includeInstance),
    edgeList: jspb.Message.toObjectList(msg.getEdgeList(),
    proto.apollo.routing.Edge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Graph as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.Graph.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.hdmapVersion;

  /** @type {?|undefined} */
  this.hdmapDistrict;

  /** @type {?|undefined} */
  this.nodeList;

  /** @type {?|undefined} */
  this.edgeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.Graph.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.Graph}
 */
proto.apollo.routing.Graph.fromObject = function(obj) {
  var msg = new proto.apollo.routing.Graph();
  obj.hdmapVersion != null && jspb.Message.setField(msg, 1, obj.hdmapVersion);
  obj.hdmapDistrict != null && jspb.Message.setField(msg, 2, obj.hdmapDistrict);
  obj.nodeList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.nodeList.map(
          proto.apollo.routing.Node.fromObject));
  obj.edgeList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.edgeList.map(
          proto.apollo.routing.Edge.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.Graph}
 */
proto.apollo.routing.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.Graph;
  return proto.apollo.routing.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.Graph}
 */
proto.apollo.routing.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHdmapVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHdmapDistrict(value);
      break;
    case 3:
      var value = new proto.apollo.routing.Node;
      reader.readMessage(value,proto.apollo.routing.Node.deserializeBinaryFromReader);
      msg.addNode(value);
      break;
    case 4:
      var value = new proto.apollo.routing.Edge;
      reader.readMessage(value,proto.apollo.routing.Edge.deserializeBinaryFromReader);
      msg.addEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.routing.Node.serializeBinaryToWriter
    );
  }
  f = message.getEdgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.routing.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * optional string hdmap_version = 1;
 * @return {string}
 */
proto.apollo.routing.Graph.prototype.getHdmapVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.Graph} returns this
 */
proto.apollo.routing.Graph.prototype.setHdmapVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Graph} returns this
 */
proto.apollo.routing.Graph.prototype.clearHdmapVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Graph.prototype.hasHdmapVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hdmap_district = 2;
 * @return {string}
 */
proto.apollo.routing.Graph.prototype.getHdmapDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.Graph} returns this
 */
proto.apollo.routing.Graph.prototype.setHdmapDistrict = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Graph} returns this
 */
proto.apollo.routing.Graph.prototype.clearHdmapDistrict = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Graph.prototype.hasHdmapDistrict = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Node node = 3;
 * @return {!Array<!proto.apollo.routing.Node>}
 */
proto.apollo.routing.Graph.prototype.getNodeList = function() {
  return /** @type{!Array<!proto.apollo.routing.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.Node, 3));
};


/**
 * @param {!Array<!proto.apollo.routing.Node>} value
 * @return {!proto.apollo.routing.Graph} returns this
*/
proto.apollo.routing.Graph.prototype.setNodeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.routing.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.Node}
 */
proto.apollo.routing.Graph.prototype.addNode = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.routing.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.Graph} returns this
 */
proto.apollo.routing.Graph.prototype.clearNodeList = function() {
  return this.setNodeList([]);
};


/**
 * repeated Edge edge = 4;
 * @return {!Array<!proto.apollo.routing.Edge>}
 */
proto.apollo.routing.Graph.prototype.getEdgeList = function() {
  return /** @type{!Array<!proto.apollo.routing.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.Edge, 4));
};


/**
 * @param {!Array<!proto.apollo.routing.Edge>} value
 * @return {!proto.apollo.routing.Graph} returns this
*/
proto.apollo.routing.Graph.prototype.setEdgeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.routing.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.Edge}
 */
proto.apollo.routing.Graph.prototype.addEdge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.routing.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.Graph} returns this
 */
proto.apollo.routing.Graph.prototype.clearEdgeList = function() {
  return this.setEdgeList([]);
};


goog.object.extend(exports, proto.apollo.routing);
