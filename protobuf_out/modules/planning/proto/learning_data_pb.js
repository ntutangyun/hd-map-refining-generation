// source: modules/planning/proto/learning_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_canbus_proto_chassis_pb = require('../../../modules/canbus/proto/chassis_pb.js');
goog.object.extend(proto, modules_canbus_proto_chassis_pb);
var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_map_proto_map_lane_pb = require('../../../modules/map/proto/map_lane_pb.js');
goog.object.extend(proto, modules_map_proto_map_lane_pb);
var modules_perception_proto_perception_obstacle_pb = require('../../../modules/perception/proto/perception_obstacle_pb.js');
goog.object.extend(proto, modules_perception_proto_perception_obstacle_pb);
var modules_prediction_proto_feature_pb = require('../../../modules/prediction/proto/feature_pb.js');
goog.object.extend(proto, modules_prediction_proto_feature_pb);
var modules_prediction_proto_prediction_obstacle_pb = require('../../../modules/prediction/proto/prediction_obstacle_pb.js');
goog.object.extend(proto, modules_prediction_proto_prediction_obstacle_pb);
var modules_perception_proto_traffic_light_detection_pb = require('../../../modules/perception/proto/traffic_light_detection_pb.js');
goog.object.extend(proto, modules_perception_proto_traffic_light_detection_pb);
var modules_routing_proto_routing_pb = require('../../../modules/routing/proto/routing_pb.js');
goog.object.extend(proto, modules_routing_proto_routing_pb);
goog.exportSymbol('proto.apollo.planning.ADCTrajectoryPoint', null, global);
goog.exportSymbol('proto.apollo.planning.ChassisFeature', null, global);
goog.exportSymbol('proto.apollo.planning.CommonPathPointFeature', null, global);
goog.exportSymbol('proto.apollo.planning.CommonTrajectoryPointFeature', null, global);
goog.exportSymbol('proto.apollo.planning.LearningData', null, global);
goog.exportSymbol('proto.apollo.planning.LearningDataFrame', null, global);
goog.exportSymbol('proto.apollo.planning.LearningOutput', null, global);
goog.exportSymbol('proto.apollo.planning.LocalizationFeature', null, global);
goog.exportSymbol('proto.apollo.planning.ObstacleFeature', null, global);
goog.exportSymbol('proto.apollo.planning.ObstacleTrajectoryFeature', null, global);
goog.exportSymbol('proto.apollo.planning.OverlapFeature', null, global);
goog.exportSymbol('proto.apollo.planning.PerceptionObstacleFeature', null, global);
goog.exportSymbol('proto.apollo.planning.PlanningLearningData', null, global);
goog.exportSymbol('proto.apollo.planning.PlanningTag', null, global);
goog.exportSymbol('proto.apollo.planning.PredictionObstacleFeature', null, global);
goog.exportSymbol('proto.apollo.planning.PredictionTrajectoryFeature', null, global);
goog.exportSymbol('proto.apollo.planning.RoutingFeature', null, global);
goog.exportSymbol('proto.apollo.planning.RoutingResponseFeature', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficLightDetectionFeature', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficLightFeature', null, global);
goog.exportSymbol('proto.apollo.planning.TrajectoryPointFeature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OverlapFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OverlapFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OverlapFeature.displayName = 'proto.apollo.planning.OverlapFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlanningTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PlanningTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlanningTag.displayName = 'proto.apollo.planning.PlanningTag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ChassisFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ChassisFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ChassisFeature.displayName = 'proto.apollo.planning.ChassisFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LocalizationFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.LocalizationFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LocalizationFeature.displayName = 'proto.apollo.planning.LocalizationFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.CommonPathPointFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.CommonPathPointFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.CommonPathPointFeature.displayName = 'proto.apollo.planning.CommonPathPointFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.CommonTrajectoryPointFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.CommonTrajectoryPointFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.CommonTrajectoryPointFeature.displayName = 'proto.apollo.planning.CommonTrajectoryPointFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrajectoryPointFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.TrajectoryPointFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrajectoryPointFeature.displayName = 'proto.apollo.planning.TrajectoryPointFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PerceptionObstacleFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.PerceptionObstacleFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.PerceptionObstacleFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PerceptionObstacleFeature.displayName = 'proto.apollo.planning.PerceptionObstacleFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObstacleTrajectoryFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ObstacleTrajectoryFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.ObstacleTrajectoryFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObstacleTrajectoryFeature.displayName = 'proto.apollo.planning.ObstacleTrajectoryFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PredictionTrajectoryFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.PredictionTrajectoryFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.PredictionTrajectoryFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PredictionTrajectoryFeature.displayName = 'proto.apollo.planning.PredictionTrajectoryFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PredictionObstacleFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.PredictionObstacleFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.PredictionObstacleFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PredictionObstacleFeature.displayName = 'proto.apollo.planning.PredictionObstacleFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ObstacleFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ObstacleFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ObstacleFeature.displayName = 'proto.apollo.planning.ObstacleFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.RoutingResponseFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.RoutingResponseFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.RoutingResponseFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.RoutingResponseFeature.displayName = 'proto.apollo.planning.RoutingResponseFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.RoutingFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.RoutingFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.RoutingFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.RoutingFeature.displayName = 'proto.apollo.planning.RoutingFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrafficLightFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.TrafficLightFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrafficLightFeature.displayName = 'proto.apollo.planning.TrafficLightFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrafficLightDetectionFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.TrafficLightDetectionFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.TrafficLightDetectionFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrafficLightDetectionFeature.displayName = 'proto.apollo.planning.TrafficLightDetectionFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ADCTrajectoryPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ADCTrajectoryPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ADCTrajectoryPoint.displayName = 'proto.apollo.planning.ADCTrajectoryPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LearningOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.LearningOutput.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.LearningOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LearningOutput.displayName = 'proto.apollo.planning.LearningOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LearningDataFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.LearningDataFrame.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.LearningDataFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LearningDataFrame.displayName = 'proto.apollo.planning.LearningDataFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LearningData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.LearningData.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.LearningData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LearningData.displayName = 'proto.apollo.planning.LearningData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlanningLearningData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PlanningLearningData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlanningLearningData.displayName = 'proto.apollo.planning.PlanningLearningData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OverlapFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OverlapFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OverlapFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OverlapFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distance: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OverlapFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OverlapFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OverlapFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.OverlapFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OverlapFeature();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.distance != null && jspb.Message.setField(msg, 2, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.OverlapFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OverlapFeature;
  return proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OverlapFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OverlapFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OverlapFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OverlapFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OverlapFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.planning.OverlapFeature.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.OverlapFeature} returns this
 */
proto.apollo.planning.OverlapFeature.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OverlapFeature} returns this
 */
proto.apollo.planning.OverlapFeature.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OverlapFeature.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance = 2;
 * @return {number}
 */
proto.apollo.planning.OverlapFeature.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OverlapFeature} returns this
 */
proto.apollo.planning.OverlapFeature.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OverlapFeature} returns this
 */
proto.apollo.planning.OverlapFeature.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OverlapFeature.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlanningTag.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlanningTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlanningTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneTurn: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    clearArea: (f = msg.getClearArea()) && proto.apollo.planning.OverlapFeature.toObject(includeInstance, f),
    crosswalk: (f = msg.getCrosswalk()) && proto.apollo.planning.OverlapFeature.toObject(includeInstance, f),
    pncJunction: (f = msg.getPncJunction()) && proto.apollo.planning.OverlapFeature.toObject(includeInstance, f),
    signal: (f = msg.getSignal()) && proto.apollo.planning.OverlapFeature.toObject(includeInstance, f),
    stopSign: (f = msg.getStopSign()) && proto.apollo.planning.OverlapFeature.toObject(includeInstance, f),
    yieldSign: (f = msg.getYieldSign()) && proto.apollo.planning.OverlapFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlanningTag as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlanningTag.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneTurn;

  /** @type {?|undefined} */
  this.clearArea;

  /** @type {?|undefined} */
  this.crosswalk;

  /** @type {?|undefined} */
  this.pncJunction;

  /** @type {?|undefined} */
  this.signal;

  /** @type {?|undefined} */
  this.stopSign;

  /** @type {?|undefined} */
  this.yieldSign;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlanningTag.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlanningTag}
 */
proto.apollo.planning.PlanningTag.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlanningTag();
  obj.laneTurn != null && jspb.Message.setField(msg, 1, obj.laneTurn);
  obj.clearArea && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.OverlapFeature.fromObject(obj.clearArea));
  obj.crosswalk && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.OverlapFeature.fromObject(obj.crosswalk));
  obj.pncJunction && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.OverlapFeature.fromObject(obj.pncJunction));
  obj.signal && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.OverlapFeature.fromObject(obj.signal));
  obj.stopSign && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.OverlapFeature.fromObject(obj.stopSign));
  obj.yieldSign && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.OverlapFeature.fromObject(obj.yieldSign));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlanningTag}
 */
proto.apollo.planning.PlanningTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlanningTag;
  return proto.apollo.planning.PlanningTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlanningTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlanningTag}
 */
proto.apollo.planning.PlanningTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.Lane.LaneTurn} */ (reader.readEnum());
      msg.setLaneTurn(value);
      break;
    case 2:
      var value = new proto.apollo.planning.OverlapFeature;
      reader.readMessage(value,proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader);
      msg.setClearArea(value);
      break;
    case 3:
      var value = new proto.apollo.planning.OverlapFeature;
      reader.readMessage(value,proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader);
      msg.setCrosswalk(value);
      break;
    case 4:
      var value = new proto.apollo.planning.OverlapFeature;
      reader.readMessage(value,proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader);
      msg.setPncJunction(value);
      break;
    case 5:
      var value = new proto.apollo.planning.OverlapFeature;
      reader.readMessage(value,proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader);
      msg.setSignal(value);
      break;
    case 6:
      var value = new proto.apollo.planning.OverlapFeature;
      reader.readMessage(value,proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader);
      msg.setStopSign(value);
      break;
    case 7:
      var value = new proto.apollo.planning.OverlapFeature;
      reader.readMessage(value,proto.apollo.planning.OverlapFeature.deserializeBinaryFromReader);
      msg.setYieldSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlanningTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlanningTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlanningTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.Lane.LaneTurn} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getClearArea();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.OverlapFeature.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalk();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.OverlapFeature.serializeBinaryToWriter
    );
  }
  f = message.getPncJunction();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.OverlapFeature.serializeBinaryToWriter
    );
  }
  f = message.getSignal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.OverlapFeature.serializeBinaryToWriter
    );
  }
  f = message.getStopSign();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.OverlapFeature.serializeBinaryToWriter
    );
  }
  f = message.getYieldSign();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.OverlapFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.hdmap.Lane.LaneTurn lane_turn = 1;
 * @return {!proto.apollo.hdmap.Lane.LaneTurn}
 */
proto.apollo.planning.PlanningTag.prototype.getLaneTurn = function() {
  return /** @type {!proto.apollo.hdmap.Lane.LaneTurn} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.hdmap.Lane.LaneTurn} value
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.setLaneTurn = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.clearLaneTurn = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningTag.prototype.hasLaneTurn = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OverlapFeature clear_area = 2;
 * @return {?proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.PlanningTag.prototype.getClearArea = function() {
  return /** @type{?proto.apollo.planning.OverlapFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OverlapFeature, 2));
};


/**
 * @param {?proto.apollo.planning.OverlapFeature|undefined} value
 * @return {!proto.apollo.planning.PlanningTag} returns this
*/
proto.apollo.planning.PlanningTag.prototype.setClearArea = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.clearClearArea = function() {
  return this.setClearArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningTag.prototype.hasClearArea = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OverlapFeature crosswalk = 3;
 * @return {?proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.PlanningTag.prototype.getCrosswalk = function() {
  return /** @type{?proto.apollo.planning.OverlapFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OverlapFeature, 3));
};


/**
 * @param {?proto.apollo.planning.OverlapFeature|undefined} value
 * @return {!proto.apollo.planning.PlanningTag} returns this
*/
proto.apollo.planning.PlanningTag.prototype.setCrosswalk = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.clearCrosswalk = function() {
  return this.setCrosswalk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningTag.prototype.hasCrosswalk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OverlapFeature pnc_junction = 4;
 * @return {?proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.PlanningTag.prototype.getPncJunction = function() {
  return /** @type{?proto.apollo.planning.OverlapFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OverlapFeature, 4));
};


/**
 * @param {?proto.apollo.planning.OverlapFeature|undefined} value
 * @return {!proto.apollo.planning.PlanningTag} returns this
*/
proto.apollo.planning.PlanningTag.prototype.setPncJunction = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.clearPncJunction = function() {
  return this.setPncJunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningTag.prototype.hasPncJunction = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OverlapFeature signal = 5;
 * @return {?proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.PlanningTag.prototype.getSignal = function() {
  return /** @type{?proto.apollo.planning.OverlapFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OverlapFeature, 5));
};


/**
 * @param {?proto.apollo.planning.OverlapFeature|undefined} value
 * @return {!proto.apollo.planning.PlanningTag} returns this
*/
proto.apollo.planning.PlanningTag.prototype.setSignal = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.clearSignal = function() {
  return this.setSignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningTag.prototype.hasSignal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OverlapFeature stop_sign = 6;
 * @return {?proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.PlanningTag.prototype.getStopSign = function() {
  return /** @type{?proto.apollo.planning.OverlapFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OverlapFeature, 6));
};


/**
 * @param {?proto.apollo.planning.OverlapFeature|undefined} value
 * @return {!proto.apollo.planning.PlanningTag} returns this
*/
proto.apollo.planning.PlanningTag.prototype.setStopSign = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.clearStopSign = function() {
  return this.setStopSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningTag.prototype.hasStopSign = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OverlapFeature yield_sign = 7;
 * @return {?proto.apollo.planning.OverlapFeature}
 */
proto.apollo.planning.PlanningTag.prototype.getYieldSign = function() {
  return /** @type{?proto.apollo.planning.OverlapFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OverlapFeature, 7));
};


/**
 * @param {?proto.apollo.planning.OverlapFeature|undefined} value
 * @return {!proto.apollo.planning.PlanningTag} returns this
*/
proto.apollo.planning.PlanningTag.prototype.setYieldSign = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningTag} returns this
 */
proto.apollo.planning.PlanningTag.prototype.clearYieldSign = function() {
  return this.setYieldSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningTag.prototype.hasYieldSign = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ChassisFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ChassisFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ChassisFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ChassisFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageTimestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    speedMps: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    throttlePercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    brakePercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    steeringPercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    gearLocation: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChassisFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ChassisFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messageTimestampSec;

  /** @type {?|undefined} */
  this.speedMps;

  /** @type {?|undefined} */
  this.throttlePercentage;

  /** @type {?|undefined} */
  this.brakePercentage;

  /** @type {?|undefined} */
  this.steeringPercentage;

  /** @type {?|undefined} */
  this.gearLocation;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ChassisFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ChassisFeature}
 */
proto.apollo.planning.ChassisFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ChassisFeature();
  obj.messageTimestampSec != null && jspb.Message.setField(msg, 1, obj.messageTimestampSec);
  obj.speedMps != null && jspb.Message.setField(msg, 2, obj.speedMps);
  obj.throttlePercentage != null && jspb.Message.setField(msg, 3, obj.throttlePercentage);
  obj.brakePercentage != null && jspb.Message.setField(msg, 4, obj.brakePercentage);
  obj.steeringPercentage != null && jspb.Message.setField(msg, 5, obj.steeringPercentage);
  obj.gearLocation != null && jspb.Message.setField(msg, 6, obj.gearLocation);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ChassisFeature}
 */
proto.apollo.planning.ChassisFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ChassisFeature;
  return proto.apollo.planning.ChassisFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ChassisFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ChassisFeature}
 */
proto.apollo.planning.ChassisFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMessageTimestampSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedMps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThrottlePercentage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBrakePercentage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSteeringPercentage(value);
      break;
    case 6:
      var value = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (reader.readEnum());
      msg.setGearLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ChassisFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ChassisFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ChassisFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ChassisFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional double message_timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.ChassisFeature.prototype.getMessageTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.setMessageTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.clearMessageTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChassisFeature.prototype.hasMessageTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float speed_mps = 2;
 * @return {number}
 */
proto.apollo.planning.ChassisFeature.prototype.getSpeedMps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.setSpeedMps = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.clearSpeedMps = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChassisFeature.prototype.hasSpeedMps = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float throttle_percentage = 3;
 * @return {number}
 */
proto.apollo.planning.ChassisFeature.prototype.getThrottlePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.setThrottlePercentage = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.clearThrottlePercentage = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChassisFeature.prototype.hasThrottlePercentage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float brake_percentage = 4;
 * @return {number}
 */
proto.apollo.planning.ChassisFeature.prototype.getBrakePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.setBrakePercentage = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.clearBrakePercentage = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChassisFeature.prototype.hasBrakePercentage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float steering_percentage = 5;
 * @return {number}
 */
proto.apollo.planning.ChassisFeature.prototype.getSteeringPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.setSteeringPercentage = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.clearSteeringPercentage = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChassisFeature.prototype.hasSteeringPercentage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional apollo.canbus.Chassis.GearPosition gear_location = 6;
 * @return {!proto.apollo.canbus.Chassis.GearPosition}
 */
proto.apollo.planning.ChassisFeature.prototype.getGearLocation = function() {
  return /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.GearPosition} value
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.setGearLocation = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChassisFeature} returns this
 */
proto.apollo.planning.ChassisFeature.prototype.clearGearLocation = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChassisFeature.prototype.hasGearLocation = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LocalizationFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LocalizationFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LocalizationFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LocalizationFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageTimestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    position: (f = msg.getPosition()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    linearVelocity: (f = msg.getLinearVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    linearAcceleration: (f = msg.getLinearAcceleration()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    angularVelocity: (f = msg.getAngularVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LocalizationFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LocalizationFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messageTimestampSec;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.linearVelocity;

  /** @type {?|undefined} */
  this.linearAcceleration;

  /** @type {?|undefined} */
  this.angularVelocity;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LocalizationFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LocalizationFeature}
 */
proto.apollo.planning.LocalizationFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LocalizationFeature();
  obj.messageTimestampSec != null && jspb.Message.setField(msg, 1, obj.messageTimestampSec);
  obj.position && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.PointENU.fromObject(obj.position));
  obj.heading != null && jspb.Message.setField(msg, 3, obj.heading);
  obj.linearVelocity && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_geometry_pb.Point3D.fromObject(obj.linearVelocity));
  obj.linearAcceleration && jspb.Message.setWrapperField(
      msg, 5, modules_common_proto_geometry_pb.Point3D.fromObject(obj.linearAcceleration));
  obj.angularVelocity && jspb.Message.setWrapperField(
      msg, 6, modules_common_proto_geometry_pb.Point3D.fromObject(obj.angularVelocity));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LocalizationFeature}
 */
proto.apollo.planning.LocalizationFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LocalizationFeature;
  return proto.apollo.planning.LocalizationFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LocalizationFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LocalizationFeature}
 */
proto.apollo.planning.LocalizationFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMessageTimestampSec(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 4:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setLinearVelocity(value);
      break;
    case 5:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setLinearAcceleration(value);
      break;
    case 6:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setAngularVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LocalizationFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LocalizationFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LocalizationFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LocalizationFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLinearVelocity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getLinearAcceleration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getAngularVelocity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional double message_timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.LocalizationFeature.prototype.getMessageTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.setMessageTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.clearMessageTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LocalizationFeature.prototype.hasMessageTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.PointENU position = 2;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.LocalizationFeature.prototype.getPosition = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 2));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
*/
proto.apollo.planning.LocalizationFeature.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LocalizationFeature.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double heading = 3;
 * @return {number}
 */
proto.apollo.planning.LocalizationFeature.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LocalizationFeature.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.common.Point3D linear_velocity = 4;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.planning.LocalizationFeature.prototype.getLinearVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 4));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
*/
proto.apollo.planning.LocalizationFeature.prototype.setLinearVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.clearLinearVelocity = function() {
  return this.setLinearVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LocalizationFeature.prototype.hasLinearVelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.common.Point3D linear_acceleration = 5;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.planning.LocalizationFeature.prototype.getLinearAcceleration = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 5));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
*/
proto.apollo.planning.LocalizationFeature.prototype.setLinearAcceleration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.clearLinearAcceleration = function() {
  return this.setLinearAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LocalizationFeature.prototype.hasLinearAcceleration = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional apollo.common.Point3D angular_velocity = 6;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.planning.LocalizationFeature.prototype.getAngularVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 6));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
*/
proto.apollo.planning.LocalizationFeature.prototype.setAngularVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LocalizationFeature} returns this
 */
proto.apollo.planning.LocalizationFeature.prototype.clearAngularVelocity = function() {
  return this.setAngularVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LocalizationFeature.prototype.hasAngularVelocity = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.CommonPathPointFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.CommonPathPointFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CommonPathPointFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    theta: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    laneId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CommonPathPointFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.CommonPathPointFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.theta;

  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.laneId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.CommonPathPointFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.CommonPathPointFeature}
 */
proto.apollo.planning.CommonPathPointFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.CommonPathPointFeature();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  obj.theta != null && jspb.Message.setField(msg, 4, obj.theta);
  obj.s != null && jspb.Message.setField(msg, 5, obj.s);
  obj.laneId != null && jspb.Message.setField(msg, 6, obj.laneId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.CommonPathPointFeature}
 */
proto.apollo.planning.CommonPathPointFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.CommonPathPointFeature;
  return proto.apollo.planning.CommonPathPointFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.CommonPathPointFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.CommonPathPointFeature}
 */
proto.apollo.planning.CommonPathPointFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.CommonPathPointFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.CommonPathPointFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CommonPathPointFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double theta = 4;
 * @return {number}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.setTheta = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.clearTheta = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.hasTheta = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double s = 5;
 * @return {number}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.setS = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.clearS = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.hasS = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string lane_id = 6;
 * @return {string}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.getLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonPathPointFeature} returns this
 */
proto.apollo.planning.CommonPathPointFeature.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonPathPointFeature.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.CommonTrajectoryPointFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.CommonTrajectoryPointFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CommonTrajectoryPointFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathPoint: (f = msg.getPathPoint()) && proto.apollo.planning.CommonPathPointFeature.toObject(includeInstance, f),
    v: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    a: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    relativeTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    gaussianInfo: (f = msg.getGaussianInfo()) && modules_common_proto_pnc_point_pb.GaussianInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CommonTrajectoryPointFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.CommonTrajectoryPointFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pathPoint;

  /** @type {?|undefined} */
  this.v;

  /** @type {?|undefined} */
  this.a;

  /** @type {?|undefined} */
  this.relativeTime;

  /** @type {?|undefined} */
  this.gaussianInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.CommonTrajectoryPointFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.CommonTrajectoryPointFeature();
  obj.pathPoint && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.CommonPathPointFeature.fromObject(obj.pathPoint));
  obj.v != null && jspb.Message.setField(msg, 2, obj.v);
  obj.a != null && jspb.Message.setField(msg, 3, obj.a);
  obj.relativeTime != null && jspb.Message.setField(msg, 4, obj.relativeTime);
  obj.gaussianInfo && jspb.Message.setWrapperField(
      msg, 5, modules_common_proto_pnc_point_pb.GaussianInfo.fromObject(obj.gaussianInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.CommonTrajectoryPointFeature;
  return proto.apollo.planning.CommonTrajectoryPointFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.CommonTrajectoryPointFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.CommonPathPointFeature;
      reader.readMessage(value,proto.apollo.planning.CommonPathPointFeature.deserializeBinaryFromReader);
      msg.setPathPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setV(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeTime(value);
      break;
    case 5:
      var value = new modules_common_proto_pnc_point_pb.GaussianInfo;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.GaussianInfo.deserializeBinaryFromReader);
      msg.setGaussianInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.CommonTrajectoryPointFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.CommonTrajectoryPointFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CommonTrajectoryPointFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.CommonPathPointFeature.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getGaussianInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_common_proto_pnc_point_pb.GaussianInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional CommonPathPointFeature path_point = 1;
 * @return {?proto.apollo.planning.CommonPathPointFeature}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.getPathPoint = function() {
  return /** @type{?proto.apollo.planning.CommonPathPointFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.CommonPathPointFeature, 1));
};


/**
 * @param {?proto.apollo.planning.CommonPathPointFeature|undefined} value
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
*/
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.setPathPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.clearPathPoint = function() {
  return this.setPathPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.hasPathPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double v = 2;
 * @return {number}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.setV = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.clearV = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.hasV = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double a = 3;
 * @return {number}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.setA = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.clearA = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.hasA = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double relative_time = 4;
 * @return {number}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.getRelativeTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.setRelativeTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.clearRelativeTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.hasRelativeTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.common.GaussianInfo gaussian_info = 5;
 * @return {?proto.apollo.common.GaussianInfo}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.getGaussianInfo = function() {
  return /** @type{?proto.apollo.common.GaussianInfo} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.GaussianInfo, 5));
};


/**
 * @param {?proto.apollo.common.GaussianInfo|undefined} value
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
*/
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.setGaussianInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.CommonTrajectoryPointFeature} returns this
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.clearGaussianInfo = function() {
  return this.setGaussianInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CommonTrajectoryPointFeature.prototype.hasGaussianInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrajectoryPointFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrajectoryPointFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrajectoryPointFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    trajectoryPoint: (f = msg.getTrajectoryPoint()) && proto.apollo.planning.CommonTrajectoryPointFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryPointFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrajectoryPointFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.trajectoryPoint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrajectoryPointFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrajectoryPointFeature}
 */
proto.apollo.planning.TrajectoryPointFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrajectoryPointFeature();
  obj.timestampSec != null && jspb.Message.setField(msg, 1, obj.timestampSec);
  obj.trajectoryPoint && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.CommonTrajectoryPointFeature.fromObject(obj.trajectoryPoint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrajectoryPointFeature}
 */
proto.apollo.planning.TrajectoryPointFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrajectoryPointFeature;
  return proto.apollo.planning.TrajectoryPointFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrajectoryPointFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrajectoryPointFeature}
 */
proto.apollo.planning.TrajectoryPointFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 2:
      var value = new proto.apollo.planning.CommonTrajectoryPointFeature;
      reader.readMessage(value,proto.apollo.planning.CommonTrajectoryPointFeature.deserializeBinaryFromReader);
      msg.setTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrajectoryPointFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrajectoryPointFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrajectoryPointFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTrajectoryPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.CommonTrajectoryPointFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional double timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrajectoryPointFeature} returns this
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPointFeature} returns this
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommonTrajectoryPointFeature trajectory_point = 2;
 * @return {?proto.apollo.planning.CommonTrajectoryPointFeature}
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.getTrajectoryPoint = function() {
  return /** @type{?proto.apollo.planning.CommonTrajectoryPointFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.CommonTrajectoryPointFeature, 2));
};


/**
 * @param {?proto.apollo.planning.CommonTrajectoryPointFeature|undefined} value
 * @return {!proto.apollo.planning.TrajectoryPointFeature} returns this
*/
proto.apollo.planning.TrajectoryPointFeature.prototype.setTrajectoryPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPointFeature} returns this
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.clearTrajectoryPoint = function() {
  return this.setTrajectoryPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPointFeature.prototype.hasTrajectoryPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.PerceptionObstacleFeature.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PerceptionObstacleFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PerceptionObstacleFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PerceptionObstacleFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    position: (f = msg.getPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    theta: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    velocity: (f = msg.getVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    acceleration: (f = msg.getAcceleration()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    polygonPointList: jspb.Message.toObjectList(msg.getPolygonPointList(),
    modules_common_proto_geometry_pb.Point3D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PerceptionObstacleFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PerceptionObstacleFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.theta;

  /** @type {?|undefined} */
  this.velocity;

  /** @type {?|undefined} */
  this.acceleration;

  /** @type {?|undefined} */
  this.polygonPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PerceptionObstacleFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature}
 */
proto.apollo.planning.PerceptionObstacleFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PerceptionObstacleFeature();
  obj.timestampSec != null && jspb.Message.setField(msg, 1, obj.timestampSec);
  obj.position && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.Point3D.fromObject(obj.position));
  obj.theta != null && jspb.Message.setField(msg, 3, obj.theta);
  obj.velocity && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_geometry_pb.Point3D.fromObject(obj.velocity));
  obj.acceleration && jspb.Message.setWrapperField(
      msg, 5, modules_common_proto_geometry_pb.Point3D.fromObject(obj.acceleration));
  obj.polygonPointList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.polygonPointList.map(
          modules_common_proto_geometry_pb.Point3D.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature}
 */
proto.apollo.planning.PerceptionObstacleFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PerceptionObstacleFeature;
  return proto.apollo.planning.PerceptionObstacleFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PerceptionObstacleFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature}
 */
proto.apollo.planning.PerceptionObstacleFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 4:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 5:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setAcceleration(value);
      break;
    case 6:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.addPolygonPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PerceptionObstacleFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PerceptionObstacleFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PerceptionObstacleFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getAcceleration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getPolygonPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional double timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.Point3D position = 2;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.getPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 2));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
*/
proto.apollo.planning.PerceptionObstacleFeature.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double theta = 3;
 * @return {number}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.setTheta = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.clearTheta = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.hasTheta = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.common.Point3D velocity = 4;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.getVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 4));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
*/
proto.apollo.planning.PerceptionObstacleFeature.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.common.Point3D acceleration = 5;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.getAcceleration = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 5));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
*/
proto.apollo.planning.PerceptionObstacleFeature.prototype.setAcceleration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.clearAcceleration = function() {
  return this.setAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated apollo.common.Point3D polygon_point = 6;
 * @return {!Array<!proto.apollo.common.Point3D>}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.getPolygonPointList = function() {
  return /** @type{!Array<!proto.apollo.common.Point3D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point3D, 6));
};


/**
 * @param {!Array<!proto.apollo.common.Point3D>} value
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
*/
proto.apollo.planning.PerceptionObstacleFeature.prototype.setPolygonPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.common.Point3D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point3D}
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.addPolygonPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.common.Point3D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.PerceptionObstacleFeature} returns this
 */
proto.apollo.planning.PerceptionObstacleFeature.prototype.clearPolygonPointList = function() {
  return this.setPolygonPointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ObstacleTrajectoryFeature.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObstacleTrajectoryFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObstacleTrajectoryFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObstacleTrajectoryFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    perceptionObstacleHistoryList: jspb.Message.toObjectList(msg.getPerceptionObstacleHistoryList(),
    proto.apollo.planning.PerceptionObstacleFeature.toObject, includeInstance),
    evaluatedTrajectoryPointList: jspb.Message.toObjectList(msg.getEvaluatedTrajectoryPointList(),
    proto.apollo.planning.TrajectoryPointFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleTrajectoryFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObstacleTrajectoryFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.perceptionObstacleHistoryList;

  /** @type {?|undefined} */
  this.evaluatedTrajectoryPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObstacleTrajectoryFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObstacleTrajectoryFeature}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObstacleTrajectoryFeature();
  obj.perceptionObstacleHistoryList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.perceptionObstacleHistoryList.map(
          proto.apollo.planning.PerceptionObstacleFeature.fromObject));
  obj.evaluatedTrajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.evaluatedTrajectoryPointList.map(
          proto.apollo.planning.TrajectoryPointFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObstacleTrajectoryFeature}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObstacleTrajectoryFeature;
  return proto.apollo.planning.ObstacleTrajectoryFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObstacleTrajectoryFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObstacleTrajectoryFeature}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.PerceptionObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.PerceptionObstacleFeature.deserializeBinaryFromReader);
      msg.addPerceptionObstacleHistory(value);
      break;
    case 2:
      var value = new proto.apollo.planning.TrajectoryPointFeature;
      reader.readMessage(value,proto.apollo.planning.TrajectoryPointFeature.deserializeBinaryFromReader);
      msg.addEvaluatedTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObstacleTrajectoryFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObstacleTrajectoryFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObstacleTrajectoryFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPerceptionObstacleHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.PerceptionObstacleFeature.serializeBinaryToWriter
    );
  }
  f = message.getEvaluatedTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.planning.TrajectoryPointFeature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PerceptionObstacleFeature perception_obstacle_history = 1;
 * @return {!Array<!proto.apollo.planning.PerceptionObstacleFeature>}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.getPerceptionObstacleHistoryList = function() {
  return /** @type{!Array<!proto.apollo.planning.PerceptionObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.PerceptionObstacleFeature, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.PerceptionObstacleFeature>} value
 * @return {!proto.apollo.planning.ObstacleTrajectoryFeature} returns this
*/
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.setPerceptionObstacleHistoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.PerceptionObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.PerceptionObstacleFeature}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.addPerceptionObstacleHistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.PerceptionObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ObstacleTrajectoryFeature} returns this
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.clearPerceptionObstacleHistoryList = function() {
  return this.setPerceptionObstacleHistoryList([]);
};


/**
 * repeated TrajectoryPointFeature evaluated_trajectory_point = 2;
 * @return {!Array<!proto.apollo.planning.TrajectoryPointFeature>}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.getEvaluatedTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.planning.TrajectoryPointFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TrajectoryPointFeature, 2));
};


/**
 * @param {!Array<!proto.apollo.planning.TrajectoryPointFeature>} value
 * @return {!proto.apollo.planning.ObstacleTrajectoryFeature} returns this
*/
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.setEvaluatedTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.planning.TrajectoryPointFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TrajectoryPointFeature}
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.addEvaluatedTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.planning.TrajectoryPointFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ObstacleTrajectoryFeature} returns this
 */
proto.apollo.planning.ObstacleTrajectoryFeature.prototype.clearEvaluatedTrajectoryPointList = function() {
  return this.setEvaluatedTrajectoryPointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.PredictionTrajectoryFeature.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PredictionTrajectoryFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PredictionTrajectoryFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PredictionTrajectoryFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    probability: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    trajectoryPointList: jspb.Message.toObjectList(msg.getTrajectoryPointList(),
    proto.apollo.planning.TrajectoryPointFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PredictionTrajectoryFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PredictionTrajectoryFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.probability;

  /** @type {?|undefined} */
  this.trajectoryPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PredictionTrajectoryFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature}
 */
proto.apollo.planning.PredictionTrajectoryFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PredictionTrajectoryFeature();
  obj.probability != null && jspb.Message.setField(msg, 1, obj.probability);
  obj.trajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.trajectoryPointList.map(
          proto.apollo.planning.TrajectoryPointFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature}
 */
proto.apollo.planning.PredictionTrajectoryFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PredictionTrajectoryFeature;
  return proto.apollo.planning.PredictionTrajectoryFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PredictionTrajectoryFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature}
 */
proto.apollo.planning.PredictionTrajectoryFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 2:
      var value = new proto.apollo.planning.TrajectoryPointFeature;
      reader.readMessage(value,proto.apollo.planning.TrajectoryPointFeature.deserializeBinaryFromReader);
      msg.addTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PredictionTrajectoryFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PredictionTrajectoryFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PredictionTrajectoryFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.planning.TrajectoryPointFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional double probability = 1;
 * @return {number}
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature} returns this
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.setProbability = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature} returns this
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.clearProbability = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TrajectoryPointFeature trajectory_point = 2;
 * @return {!Array<!proto.apollo.planning.TrajectoryPointFeature>}
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.getTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.planning.TrajectoryPointFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TrajectoryPointFeature, 2));
};


/**
 * @param {!Array<!proto.apollo.planning.TrajectoryPointFeature>} value
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature} returns this
*/
proto.apollo.planning.PredictionTrajectoryFeature.prototype.setTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.planning.TrajectoryPointFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TrajectoryPointFeature}
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.addTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.planning.TrajectoryPointFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature} returns this
 */
proto.apollo.planning.PredictionTrajectoryFeature.prototype.clearTrajectoryPointList = function() {
  return this.setTrajectoryPointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.PredictionObstacleFeature.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PredictionObstacleFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PredictionObstacleFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PredictionObstacleFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    predictedPeriod: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    intent: (f = msg.getIntent()) && modules_prediction_proto_prediction_obstacle_pb.ObstacleIntent.toObject(includeInstance, f),
    priority: (f = msg.getPriority()) && modules_prediction_proto_feature_pb.ObstaclePriority.toObject(includeInstance, f),
    isStatic: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    trajectoryList: jspb.Message.toObjectList(msg.getTrajectoryList(),
    proto.apollo.planning.PredictionTrajectoryFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PredictionObstacleFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PredictionObstacleFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.predictedPeriod;

  /** @type {?|undefined} */
  this.intent;

  /** @type {?|undefined} */
  this.priority;

  /** @type {?|undefined} */
  this.isStatic;

  /** @type {?|undefined} */
  this.trajectoryList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PredictionObstacleFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PredictionObstacleFeature}
 */
proto.apollo.planning.PredictionObstacleFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PredictionObstacleFeature();
  obj.timestampSec != null && jspb.Message.setField(msg, 1, obj.timestampSec);
  obj.predictedPeriod != null && jspb.Message.setField(msg, 2, obj.predictedPeriod);
  obj.intent && jspb.Message.setWrapperField(
      msg, 3, modules_prediction_proto_prediction_obstacle_pb.ObstacleIntent.fromObject(obj.intent));
  obj.priority && jspb.Message.setWrapperField(
      msg, 4, modules_prediction_proto_feature_pb.ObstaclePriority.fromObject(obj.priority));
  obj.isStatic != null && jspb.Message.setField(msg, 5, obj.isStatic);
  obj.trajectoryList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.trajectoryList.map(
          proto.apollo.planning.PredictionTrajectoryFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PredictionObstacleFeature}
 */
proto.apollo.planning.PredictionObstacleFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PredictionObstacleFeature;
  return proto.apollo.planning.PredictionObstacleFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PredictionObstacleFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PredictionObstacleFeature}
 */
proto.apollo.planning.PredictionObstacleFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPredictedPeriod(value);
      break;
    case 3:
      var value = new modules_prediction_proto_prediction_obstacle_pb.ObstacleIntent;
      reader.readMessage(value,modules_prediction_proto_prediction_obstacle_pb.ObstacleIntent.deserializeBinaryFromReader);
      msg.setIntent(value);
      break;
    case 4:
      var value = new modules_prediction_proto_feature_pb.ObstaclePriority;
      reader.readMessage(value,modules_prediction_proto_feature_pb.ObstaclePriority.deserializeBinaryFromReader);
      msg.setPriority(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStatic(value);
      break;
    case 6:
      var value = new proto.apollo.planning.PredictionTrajectoryFeature;
      reader.readMessage(value,proto.apollo.planning.PredictionTrajectoryFeature.deserializeBinaryFromReader);
      msg.addTrajectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PredictionObstacleFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PredictionObstacleFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PredictionObstacleFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getIntent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_prediction_proto_prediction_obstacle_pb.ObstacleIntent.serializeBinaryToWriter
    );
  }
  f = message.getPriority();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_prediction_proto_feature_pb.ObstaclePriority.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getTrajectoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.planning.PredictionTrajectoryFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional double timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double predicted_period = 2;
 * @return {number}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.getPredictedPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.setPredictedPeriod = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.clearPredictedPeriod = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.hasPredictedPeriod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.prediction.ObstacleIntent intent = 3;
 * @return {?proto.apollo.prediction.ObstacleIntent}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.getIntent = function() {
  return /** @type{?proto.apollo.prediction.ObstacleIntent} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_prediction_obstacle_pb.ObstacleIntent, 3));
};


/**
 * @param {?proto.apollo.prediction.ObstacleIntent|undefined} value
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
*/
proto.apollo.planning.PredictionObstacleFeature.prototype.setIntent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.clearIntent = function() {
  return this.setIntent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.hasIntent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.prediction.ObstaclePriority priority = 4;
 * @return {?proto.apollo.prediction.ObstaclePriority}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.getPriority = function() {
  return /** @type{?proto.apollo.prediction.ObstaclePriority} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_feature_pb.ObstaclePriority, 4));
};


/**
 * @param {?proto.apollo.prediction.ObstaclePriority|undefined} value
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
*/
proto.apollo.planning.PredictionObstacleFeature.prototype.setPriority = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.clearPriority = function() {
  return this.setPriority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_static = 5;
 * @return {boolean}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.getIsStatic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.setIsStatic = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.clearIsStatic = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.hasIsStatic = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated PredictionTrajectoryFeature trajectory = 6;
 * @return {!Array<!proto.apollo.planning.PredictionTrajectoryFeature>}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.getTrajectoryList = function() {
  return /** @type{!Array<!proto.apollo.planning.PredictionTrajectoryFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.PredictionTrajectoryFeature, 6));
};


/**
 * @param {!Array<!proto.apollo.planning.PredictionTrajectoryFeature>} value
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
*/
proto.apollo.planning.PredictionObstacleFeature.prototype.setTrajectoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.planning.PredictionTrajectoryFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.PredictionTrajectoryFeature}
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.addTrajectory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.planning.PredictionTrajectoryFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.PredictionObstacleFeature} returns this
 */
proto.apollo.planning.PredictionObstacleFeature.prototype.clearTrajectoryList = function() {
  return this.setTrajectoryList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ObstacleFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ObstacleFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ObstacleFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObstacleFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    length: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    obstacleTrajectory: (f = msg.getObstacleTrajectory()) && proto.apollo.planning.ObstacleTrajectoryFeature.toObject(includeInstance, f),
    obstaclePrediction: (f = msg.getObstaclePrediction()) && proto.apollo.planning.PredictionObstacleFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ObstacleFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.obstacleTrajectory;

  /** @type {?|undefined} */
  this.obstaclePrediction;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ObstacleFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ObstacleFeature}
 */
proto.apollo.planning.ObstacleFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ObstacleFeature();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.length != null && jspb.Message.setField(msg, 2, obj.length);
  obj.width != null && jspb.Message.setField(msg, 3, obj.width);
  obj.height != null && jspb.Message.setField(msg, 4, obj.height);
  obj.type != null && jspb.Message.setField(msg, 5, obj.type);
  obj.obstacleTrajectory && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.ObstacleTrajectoryFeature.fromObject(obj.obstacleTrajectory));
  obj.obstaclePrediction && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.PredictionObstacleFeature.fromObject(obj.obstaclePrediction));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ObstacleFeature}
 */
proto.apollo.planning.ObstacleFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ObstacleFeature;
  return proto.apollo.planning.ObstacleFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ObstacleFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ObstacleFeature}
 */
proto.apollo.planning.ObstacleFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.apollo.planning.ObstacleTrajectoryFeature;
      reader.readMessage(value,proto.apollo.planning.ObstacleTrajectoryFeature.deserializeBinaryFromReader);
      msg.setObstacleTrajectory(value);
      break;
    case 7:
      var value = new proto.apollo.planning.PredictionObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.PredictionObstacleFeature.deserializeBinaryFromReader);
      msg.setObstaclePrediction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ObstacleFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ObstacleFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ObstacleFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ObstacleFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getObstacleTrajectory();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.ObstacleTrajectoryFeature.serializeBinaryToWriter
    );
  }
  f = message.getObstaclePrediction();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.PredictionObstacleFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.planning.ObstacleFeature.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObstacleFeature.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double length = 2;
 * @return {number}
 */
proto.apollo.planning.ObstacleFeature.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.clearLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObstacleFeature.prototype.hasLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double width = 3;
 * @return {number}
 */
proto.apollo.planning.ObstacleFeature.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObstacleFeature.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double height = 4;
 * @return {number}
 */
proto.apollo.planning.ObstacleFeature.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObstacleFeature.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.perception.PerceptionObstacle.Type type = 5;
 * @return {!proto.apollo.perception.PerceptionObstacle.Type}
 */
proto.apollo.planning.ObstacleFeature.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Type} value
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.setType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.clearType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObstacleFeature.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ObstacleTrajectoryFeature obstacle_trajectory = 6;
 * @return {?proto.apollo.planning.ObstacleTrajectoryFeature}
 */
proto.apollo.planning.ObstacleFeature.prototype.getObstacleTrajectory = function() {
  return /** @type{?proto.apollo.planning.ObstacleTrajectoryFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ObstacleTrajectoryFeature, 6));
};


/**
 * @param {?proto.apollo.planning.ObstacleTrajectoryFeature|undefined} value
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
*/
proto.apollo.planning.ObstacleFeature.prototype.setObstacleTrajectory = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.clearObstacleTrajectory = function() {
  return this.setObstacleTrajectory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObstacleFeature.prototype.hasObstacleTrajectory = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PredictionObstacleFeature obstacle_prediction = 7;
 * @return {?proto.apollo.planning.PredictionObstacleFeature}
 */
proto.apollo.planning.ObstacleFeature.prototype.getObstaclePrediction = function() {
  return /** @type{?proto.apollo.planning.PredictionObstacleFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PredictionObstacleFeature, 7));
};


/**
 * @param {?proto.apollo.planning.PredictionObstacleFeature|undefined} value
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
*/
proto.apollo.planning.ObstacleFeature.prototype.setObstaclePrediction = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ObstacleFeature} returns this
 */
proto.apollo.planning.ObstacleFeature.prototype.clearObstaclePrediction = function() {
  return this.setObstaclePrediction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ObstacleFeature.prototype.hasObstaclePrediction = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.RoutingResponseFeature.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.RoutingResponseFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.RoutingResponseFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.RoutingResponseFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RoutingResponseFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    roadList: jspb.Message.toObjectList(msg.getRoadList(),
    modules_routing_proto_routing_pb.RoadSegment.toObject, includeInstance),
    measurement: (f = msg.getMeasurement()) && modules_routing_proto_routing_pb.Measurement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RoutingResponseFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.RoutingResponseFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.roadList;

  /** @type {?|undefined} */
  this.measurement;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.RoutingResponseFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.RoutingResponseFeature}
 */
proto.apollo.planning.RoutingResponseFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.RoutingResponseFeature();
  obj.roadList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.roadList.map(
          modules_routing_proto_routing_pb.RoadSegment.fromObject));
  obj.measurement && jspb.Message.setWrapperField(
      msg, 2, modules_routing_proto_routing_pb.Measurement.fromObject(obj.measurement));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.RoutingResponseFeature}
 */
proto.apollo.planning.RoutingResponseFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.RoutingResponseFeature;
  return proto.apollo.planning.RoutingResponseFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.RoutingResponseFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.RoutingResponseFeature}
 */
proto.apollo.planning.RoutingResponseFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_routing_proto_routing_pb.RoadSegment;
      reader.readMessage(value,modules_routing_proto_routing_pb.RoadSegment.deserializeBinaryFromReader);
      msg.addRoad(value);
      break;
    case 2:
      var value = new modules_routing_proto_routing_pb.Measurement;
      reader.readMessage(value,modules_routing_proto_routing_pb.Measurement.deserializeBinaryFromReader);
      msg.setMeasurement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.RoutingResponseFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.RoutingResponseFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.RoutingResponseFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RoutingResponseFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      modules_routing_proto_routing_pb.RoadSegment.serializeBinaryToWriter
    );
  }
  f = message.getMeasurement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_routing_proto_routing_pb.Measurement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated apollo.routing.RoadSegment road = 1;
 * @return {!Array<!proto.apollo.routing.RoadSegment>}
 */
proto.apollo.planning.RoutingResponseFeature.prototype.getRoadList = function() {
  return /** @type{!Array<!proto.apollo.routing.RoadSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_routing_proto_routing_pb.RoadSegment, 1));
};


/**
 * @param {!Array<!proto.apollo.routing.RoadSegment>} value
 * @return {!proto.apollo.planning.RoutingResponseFeature} returns this
*/
proto.apollo.planning.RoutingResponseFeature.prototype.setRoadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.routing.RoadSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.RoadSegment}
 */
proto.apollo.planning.RoutingResponseFeature.prototype.addRoad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.routing.RoadSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.RoutingResponseFeature} returns this
 */
proto.apollo.planning.RoutingResponseFeature.prototype.clearRoadList = function() {
  return this.setRoadList([]);
};


/**
 * optional apollo.routing.Measurement measurement = 2;
 * @return {?proto.apollo.routing.Measurement}
 */
proto.apollo.planning.RoutingResponseFeature.prototype.getMeasurement = function() {
  return /** @type{?proto.apollo.routing.Measurement} */ (
    jspb.Message.getWrapperField(this, modules_routing_proto_routing_pb.Measurement, 2));
};


/**
 * @param {?proto.apollo.routing.Measurement|undefined} value
 * @return {!proto.apollo.planning.RoutingResponseFeature} returns this
*/
proto.apollo.planning.RoutingResponseFeature.prototype.setMeasurement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.RoutingResponseFeature} returns this
 */
proto.apollo.planning.RoutingResponseFeature.prototype.clearMeasurement = function() {
  return this.setMeasurement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RoutingResponseFeature.prototype.hasMeasurement = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.RoutingFeature.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.RoutingFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.RoutingFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.RoutingFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RoutingFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    routingResponse: (f = msg.getRoutingResponse()) && proto.apollo.planning.RoutingResponseFeature.toObject(includeInstance, f),
    localRoutingLaneIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    localRouting: (f = msg.getLocalRouting()) && proto.apollo.planning.RoutingResponseFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RoutingFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.RoutingFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.routingResponse;

  /** @type {?|undefined} */
  this.localRoutingLaneIdList;

  /** @type {?|undefined} */
  this.localRouting;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.RoutingFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.RoutingFeature}
 */
proto.apollo.planning.RoutingFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.RoutingFeature();
  obj.routingResponse && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.RoutingResponseFeature.fromObject(obj.routingResponse));
  obj.localRoutingLaneIdList != null && jspb.Message.setField(msg, 2, obj.localRoutingLaneIdList);
  obj.localRouting && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.RoutingResponseFeature.fromObject(obj.localRouting));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.RoutingFeature}
 */
proto.apollo.planning.RoutingFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.RoutingFeature;
  return proto.apollo.planning.RoutingFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.RoutingFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.RoutingFeature}
 */
proto.apollo.planning.RoutingFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.RoutingResponseFeature;
      reader.readMessage(value,proto.apollo.planning.RoutingResponseFeature.deserializeBinaryFromReader);
      msg.setRoutingResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocalRoutingLaneId(value);
      break;
    case 3:
      var value = new proto.apollo.planning.RoutingResponseFeature;
      reader.readMessage(value,proto.apollo.planning.RoutingResponseFeature.deserializeBinaryFromReader);
      msg.setLocalRouting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.RoutingFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.RoutingFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.RoutingFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RoutingFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoutingResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.RoutingResponseFeature.serializeBinaryToWriter
    );
  }
  f = message.getLocalRoutingLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getLocalRouting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.RoutingResponseFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional RoutingResponseFeature routing_response = 1;
 * @return {?proto.apollo.planning.RoutingResponseFeature}
 */
proto.apollo.planning.RoutingFeature.prototype.getRoutingResponse = function() {
  return /** @type{?proto.apollo.planning.RoutingResponseFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.RoutingResponseFeature, 1));
};


/**
 * @param {?proto.apollo.planning.RoutingResponseFeature|undefined} value
 * @return {!proto.apollo.planning.RoutingFeature} returns this
*/
proto.apollo.planning.RoutingFeature.prototype.setRoutingResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.RoutingFeature} returns this
 */
proto.apollo.planning.RoutingFeature.prototype.clearRoutingResponse = function() {
  return this.setRoutingResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RoutingFeature.prototype.hasRoutingResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string local_routing_lane_id = 2;
 * @return {!Array<string>}
 */
proto.apollo.planning.RoutingFeature.prototype.getLocalRoutingLaneIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.RoutingFeature} returns this
 */
proto.apollo.planning.RoutingFeature.prototype.setLocalRoutingLaneIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.RoutingFeature} returns this
 */
proto.apollo.planning.RoutingFeature.prototype.addLocalRoutingLaneId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.RoutingFeature} returns this
 */
proto.apollo.planning.RoutingFeature.prototype.clearLocalRoutingLaneIdList = function() {
  return this.setLocalRoutingLaneIdList([]);
};


/**
 * optional RoutingResponseFeature local_routing = 3;
 * @return {?proto.apollo.planning.RoutingResponseFeature}
 */
proto.apollo.planning.RoutingFeature.prototype.getLocalRouting = function() {
  return /** @type{?proto.apollo.planning.RoutingResponseFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.RoutingResponseFeature, 3));
};


/**
 * @param {?proto.apollo.planning.RoutingResponseFeature|undefined} value
 * @return {!proto.apollo.planning.RoutingFeature} returns this
*/
proto.apollo.planning.RoutingFeature.prototype.setLocalRouting = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.RoutingFeature} returns this
 */
proto.apollo.planning.RoutingFeature.prototype.clearLocalRouting = function() {
  return this.setLocalRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RoutingFeature.prototype.hasLocalRouting = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrafficLightFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrafficLightFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrafficLightFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    trackingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    blink: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    remainingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrafficLightFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.color;

  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.confidence;

  /** @type {?|undefined} */
  this.trackingTime;

  /** @type {?|undefined} */
  this.blink;

  /** @type {?|undefined} */
  this.remainingTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrafficLightFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrafficLightFeature}
 */
proto.apollo.planning.TrafficLightFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrafficLightFeature();
  obj.color != null && jspb.Message.setField(msg, 1, obj.color);
  obj.id != null && jspb.Message.setField(msg, 2, obj.id);
  obj.confidence != null && jspb.Message.setField(msg, 3, obj.confidence);
  obj.trackingTime != null && jspb.Message.setField(msg, 4, obj.trackingTime);
  obj.blink != null && jspb.Message.setField(msg, 5, obj.blink);
  obj.remainingTime != null && jspb.Message.setField(msg, 6, obj.remainingTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrafficLightFeature}
 */
proto.apollo.planning.TrafficLightFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrafficLightFeature;
  return proto.apollo.planning.TrafficLightFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrafficLightFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrafficLightFeature}
 */
proto.apollo.planning.TrafficLightFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.TrafficLight.Color} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrackingTime(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlink(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRemainingTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrafficLightFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrafficLightFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrafficLightFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.TrafficLight.Color} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional apollo.perception.TrafficLight.Color color = 1;
 * @return {!proto.apollo.perception.TrafficLight.Color}
 */
proto.apollo.planning.TrafficLightFeature.prototype.getColor = function() {
  return /** @type {!proto.apollo.perception.TrafficLight.Color} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.TrafficLight.Color} value
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.setColor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.clearColor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightFeature.prototype.hasColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.apollo.planning.TrafficLightFeature.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightFeature.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double confidence = 3;
 * @return {number}
 */
proto.apollo.planning.TrafficLightFeature.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightFeature.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double tracking_time = 4;
 * @return {number}
 */
proto.apollo.planning.TrafficLightFeature.prototype.getTrackingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.setTrackingTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.clearTrackingTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightFeature.prototype.hasTrackingTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool blink = 5;
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightFeature.prototype.getBlink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.setBlink = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.clearBlink = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightFeature.prototype.hasBlink = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double remaining_time = 6;
 * @return {number}
 */
proto.apollo.planning.TrafficLightFeature.prototype.getRemainingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.setRemainingTime = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightFeature} returns this
 */
proto.apollo.planning.TrafficLightFeature.prototype.clearRemainingTime = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightFeature.prototype.hasRemainingTime = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.TrafficLightDetectionFeature.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrafficLightDetectionFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrafficLightDetectionFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightDetectionFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageTimestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    trafficLightList: jspb.Message.toObjectList(msg.getTrafficLightList(),
    proto.apollo.planning.TrafficLightFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightDetectionFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrafficLightDetectionFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messageTimestampSec;

  /** @type {?|undefined} */
  this.trafficLightList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrafficLightDetectionFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrafficLightDetectionFeature}
 */
proto.apollo.planning.TrafficLightDetectionFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrafficLightDetectionFeature();
  obj.messageTimestampSec != null && jspb.Message.setField(msg, 1, obj.messageTimestampSec);
  obj.trafficLightList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.trafficLightList.map(
          proto.apollo.planning.TrafficLightFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrafficLightDetectionFeature}
 */
proto.apollo.planning.TrafficLightDetectionFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrafficLightDetectionFeature;
  return proto.apollo.planning.TrafficLightDetectionFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrafficLightDetectionFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrafficLightDetectionFeature}
 */
proto.apollo.planning.TrafficLightDetectionFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMessageTimestampSec(value);
      break;
    case 2:
      var value = new proto.apollo.planning.TrafficLightFeature;
      reader.readMessage(value,proto.apollo.planning.TrafficLightFeature.deserializeBinaryFromReader);
      msg.addTrafficLight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrafficLightDetectionFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrafficLightDetectionFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightDetectionFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTrafficLightList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.planning.TrafficLightFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional double message_timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.getMessageTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrafficLightDetectionFeature} returns this
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.setMessageTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightDetectionFeature} returns this
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.clearMessageTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.hasMessageTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TrafficLightFeature traffic_light = 2;
 * @return {!Array<!proto.apollo.planning.TrafficLightFeature>}
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.getTrafficLightList = function() {
  return /** @type{!Array<!proto.apollo.planning.TrafficLightFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TrafficLightFeature, 2));
};


/**
 * @param {!Array<!proto.apollo.planning.TrafficLightFeature>} value
 * @return {!proto.apollo.planning.TrafficLightDetectionFeature} returns this
*/
proto.apollo.planning.TrafficLightDetectionFeature.prototype.setTrafficLightList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.planning.TrafficLightFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TrafficLightFeature}
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.addTrafficLight = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.planning.TrafficLightFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.TrafficLightDetectionFeature} returns this
 */
proto.apollo.planning.TrafficLightDetectionFeature.prototype.clearTrafficLightList = function() {
  return this.setTrafficLightList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ADCTrajectoryPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ADCTrajectoryPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ADCTrajectoryPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    planningTag: (f = msg.getPlanningTag()) && proto.apollo.planning.PlanningTag.toObject(includeInstance, f),
    trajectoryPoint: (f = msg.getTrajectoryPoint()) && proto.apollo.planning.CommonTrajectoryPointFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ADCTrajectoryPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ADCTrajectoryPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.planningTag;

  /** @type {?|undefined} */
  this.trajectoryPoint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ADCTrajectoryPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ADCTrajectoryPoint}
 */
proto.apollo.planning.ADCTrajectoryPoint.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ADCTrajectoryPoint();
  obj.timestampSec != null && jspb.Message.setField(msg, 1, obj.timestampSec);
  obj.planningTag && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.PlanningTag.fromObject(obj.planningTag));
  obj.trajectoryPoint && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.CommonTrajectoryPointFeature.fromObject(obj.trajectoryPoint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ADCTrajectoryPoint}
 */
proto.apollo.planning.ADCTrajectoryPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ADCTrajectoryPoint;
  return proto.apollo.planning.ADCTrajectoryPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ADCTrajectoryPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ADCTrajectoryPoint}
 */
proto.apollo.planning.ADCTrajectoryPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 2:
      var value = new proto.apollo.planning.PlanningTag;
      reader.readMessage(value,proto.apollo.planning.PlanningTag.deserializeBinaryFromReader);
      msg.setPlanningTag(value);
      break;
    case 3:
      var value = new proto.apollo.planning.CommonTrajectoryPointFeature;
      reader.readMessage(value,proto.apollo.planning.CommonTrajectoryPointFeature.deserializeBinaryFromReader);
      msg.setTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ADCTrajectoryPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ADCTrajectoryPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ADCTrajectoryPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPlanningTag();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.PlanningTag.serializeBinaryToWriter
    );
  }
  f = message.getTrajectoryPoint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.CommonTrajectoryPointFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional double timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ADCTrajectoryPoint} returns this
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectoryPoint} returns this
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlanningTag planning_tag = 2;
 * @return {?proto.apollo.planning.PlanningTag}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.getPlanningTag = function() {
  return /** @type{?proto.apollo.planning.PlanningTag} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PlanningTag, 2));
};


/**
 * @param {?proto.apollo.planning.PlanningTag|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectoryPoint} returns this
*/
proto.apollo.planning.ADCTrajectoryPoint.prototype.setPlanningTag = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectoryPoint} returns this
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.clearPlanningTag = function() {
  return this.setPlanningTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.hasPlanningTag = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommonTrajectoryPointFeature trajectory_point = 3;
 * @return {?proto.apollo.planning.CommonTrajectoryPointFeature}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.getTrajectoryPoint = function() {
  return /** @type{?proto.apollo.planning.CommonTrajectoryPointFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.CommonTrajectoryPointFeature, 3));
};


/**
 * @param {?proto.apollo.planning.CommonTrajectoryPointFeature|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectoryPoint} returns this
*/
proto.apollo.planning.ADCTrajectoryPoint.prototype.setTrajectoryPoint = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectoryPoint} returns this
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.clearTrajectoryPoint = function() {
  return this.setTrajectoryPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectoryPoint.prototype.hasTrajectoryPoint = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.LearningOutput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LearningOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LearningOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LearningOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    adcFutureTrajectoryPointList: jspb.Message.toObjectList(msg.getAdcFutureTrajectoryPointList(),
    proto.apollo.planning.TrajectoryPointFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LearningOutput as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LearningOutput.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.adcFutureTrajectoryPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LearningOutput.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LearningOutput}
 */
proto.apollo.planning.LearningOutput.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LearningOutput();
  obj.adcFutureTrajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.adcFutureTrajectoryPointList.map(
          proto.apollo.planning.TrajectoryPointFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LearningOutput}
 */
proto.apollo.planning.LearningOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LearningOutput;
  return proto.apollo.planning.LearningOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LearningOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LearningOutput}
 */
proto.apollo.planning.LearningOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.TrajectoryPointFeature;
      reader.readMessage(value,proto.apollo.planning.TrajectoryPointFeature.deserializeBinaryFromReader);
      msg.addAdcFutureTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LearningOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LearningOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LearningOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdcFutureTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.TrajectoryPointFeature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TrajectoryPointFeature adc_future_trajectory_point = 1;
 * @return {!Array<!proto.apollo.planning.TrajectoryPointFeature>}
 */
proto.apollo.planning.LearningOutput.prototype.getAdcFutureTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.planning.TrajectoryPointFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TrajectoryPointFeature, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.TrajectoryPointFeature>} value
 * @return {!proto.apollo.planning.LearningOutput} returns this
*/
proto.apollo.planning.LearningOutput.prototype.setAdcFutureTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.TrajectoryPointFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TrajectoryPointFeature}
 */
proto.apollo.planning.LearningOutput.prototype.addAdcFutureTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.TrajectoryPointFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.LearningOutput} returns this
 */
proto.apollo.planning.LearningOutput.prototype.clearAdcFutureTrajectoryPointList = function() {
  return this.setAdcFutureTrajectoryPointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.LearningDataFrame.repeatedFields_ = [7,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LearningDataFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LearningDataFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LearningDataFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningDataFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageTimestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    frameNum: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    mapName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    planningTag: (f = msg.getPlanningTag()) && proto.apollo.planning.PlanningTag.toObject(includeInstance, f),
    chassis: (f = msg.getChassis()) && proto.apollo.planning.ChassisFeature.toObject(includeInstance, f),
    localization: (f = msg.getLocalization()) && proto.apollo.planning.LocalizationFeature.toObject(includeInstance, f),
    obstacleList: jspb.Message.toObjectList(msg.getObstacleList(),
    proto.apollo.planning.ObstacleFeature.toObject, includeInstance),
    routing: (f = msg.getRouting()) && proto.apollo.planning.RoutingFeature.toObject(includeInstance, f),
    trafficLightDetection: (f = msg.getTrafficLightDetection()) && proto.apollo.planning.TrafficLightDetectionFeature.toObject(includeInstance, f),
    adcTrajectoryPointList: jspb.Message.toObjectList(msg.getAdcTrajectoryPointList(),
    proto.apollo.planning.ADCTrajectoryPoint.toObject, includeInstance),
    output: (f = msg.getOutput()) && proto.apollo.planning.LearningOutput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LearningDataFrame as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LearningDataFrame.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messageTimestampSec;

  /** @type {?|undefined} */
  this.frameNum;

  /** @type {?|undefined} */
  this.mapName;

  /** @type {?|undefined} */
  this.planningTag;

  /** @type {?|undefined} */
  this.chassis;

  /** @type {?|undefined} */
  this.localization;

  /** @type {?|undefined} */
  this.obstacleList;

  /** @type {?|undefined} */
  this.routing;

  /** @type {?|undefined} */
  this.trafficLightDetection;

  /** @type {?|undefined} */
  this.adcTrajectoryPointList;

  /** @type {?|undefined} */
  this.output;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LearningDataFrame.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LearningDataFrame}
 */
proto.apollo.planning.LearningDataFrame.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LearningDataFrame();
  obj.messageTimestampSec != null && jspb.Message.setField(msg, 1, obj.messageTimestampSec);
  obj.frameNum != null && jspb.Message.setField(msg, 2, obj.frameNum);
  obj.mapName != null && jspb.Message.setField(msg, 3, obj.mapName);
  obj.planningTag && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.PlanningTag.fromObject(obj.planningTag));
  obj.chassis && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.ChassisFeature.fromObject(obj.chassis));
  obj.localization && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.LocalizationFeature.fromObject(obj.localization));
  obj.obstacleList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.obstacleList.map(
          proto.apollo.planning.ObstacleFeature.fromObject));
  obj.routing && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.planning.RoutingFeature.fromObject(obj.routing));
  obj.trafficLightDetection && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.planning.TrafficLightDetectionFeature.fromObject(obj.trafficLightDetection));
  obj.adcTrajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.adcTrajectoryPointList.map(
          proto.apollo.planning.ADCTrajectoryPoint.fromObject));
  obj.output && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.planning.LearningOutput.fromObject(obj.output));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LearningDataFrame}
 */
proto.apollo.planning.LearningDataFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LearningDataFrame;
  return proto.apollo.planning.LearningDataFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LearningDataFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LearningDataFrame}
 */
proto.apollo.planning.LearningDataFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMessageTimestampSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrameNum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapName(value);
      break;
    case 4:
      var value = new proto.apollo.planning.PlanningTag;
      reader.readMessage(value,proto.apollo.planning.PlanningTag.deserializeBinaryFromReader);
      msg.setPlanningTag(value);
      break;
    case 5:
      var value = new proto.apollo.planning.ChassisFeature;
      reader.readMessage(value,proto.apollo.planning.ChassisFeature.deserializeBinaryFromReader);
      msg.setChassis(value);
      break;
    case 6:
      var value = new proto.apollo.planning.LocalizationFeature;
      reader.readMessage(value,proto.apollo.planning.LocalizationFeature.deserializeBinaryFromReader);
      msg.setLocalization(value);
      break;
    case 7:
      var value = new proto.apollo.planning.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.ObstacleFeature.deserializeBinaryFromReader);
      msg.addObstacle(value);
      break;
    case 8:
      var value = new proto.apollo.planning.RoutingFeature;
      reader.readMessage(value,proto.apollo.planning.RoutingFeature.deserializeBinaryFromReader);
      msg.setRouting(value);
      break;
    case 9:
      var value = new proto.apollo.planning.TrafficLightDetectionFeature;
      reader.readMessage(value,proto.apollo.planning.TrafficLightDetectionFeature.deserializeBinaryFromReader);
      msg.setTrafficLightDetection(value);
      break;
    case 10:
      var value = new proto.apollo.planning.ADCTrajectoryPoint;
      reader.readMessage(value,proto.apollo.planning.ADCTrajectoryPoint.deserializeBinaryFromReader);
      msg.addAdcTrajectoryPoint(value);
      break;
    case 11:
      var value = new proto.apollo.planning.LearningOutput;
      reader.readMessage(value,proto.apollo.planning.LearningOutput.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LearningDataFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LearningDataFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LearningDataFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningDataFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlanningTag();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.PlanningTag.serializeBinaryToWriter
    );
  }
  f = message.getChassis();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.ChassisFeature.serializeBinaryToWriter
    );
  }
  f = message.getLocalization();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.LocalizationFeature.serializeBinaryToWriter
    );
  }
  f = message.getObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.planning.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = message.getRouting();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.planning.RoutingFeature.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLightDetection();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.planning.TrafficLightDetectionFeature.serializeBinaryToWriter
    );
  }
  f = message.getAdcTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.apollo.planning.ADCTrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.planning.LearningOutput.serializeBinaryToWriter
    );
  }
};


/**
 * optional double message_timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.planning.LearningDataFrame.prototype.getMessageTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.setMessageTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearMessageTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasMessageTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 frame_num = 2;
 * @return {number}
 */
proto.apollo.planning.LearningDataFrame.prototype.getFrameNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.setFrameNum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearFrameNum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasFrameNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string map_name = 3;
 * @return {string}
 */
proto.apollo.planning.LearningDataFrame.prototype.getMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.setMapName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearMapName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasMapName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlanningTag planning_tag = 4;
 * @return {?proto.apollo.planning.PlanningTag}
 */
proto.apollo.planning.LearningDataFrame.prototype.getPlanningTag = function() {
  return /** @type{?proto.apollo.planning.PlanningTag} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PlanningTag, 4));
};


/**
 * @param {?proto.apollo.planning.PlanningTag|undefined} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setPlanningTag = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearPlanningTag = function() {
  return this.setPlanningTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasPlanningTag = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ChassisFeature chassis = 5;
 * @return {?proto.apollo.planning.ChassisFeature}
 */
proto.apollo.planning.LearningDataFrame.prototype.getChassis = function() {
  return /** @type{?proto.apollo.planning.ChassisFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ChassisFeature, 5));
};


/**
 * @param {?proto.apollo.planning.ChassisFeature|undefined} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setChassis = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearChassis = function() {
  return this.setChassis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasChassis = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LocalizationFeature localization = 6;
 * @return {?proto.apollo.planning.LocalizationFeature}
 */
proto.apollo.planning.LearningDataFrame.prototype.getLocalization = function() {
  return /** @type{?proto.apollo.planning.LocalizationFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.LocalizationFeature, 6));
};


/**
 * @param {?proto.apollo.planning.LocalizationFeature|undefined} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setLocalization = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearLocalization = function() {
  return this.setLocalization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasLocalization = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated ObstacleFeature obstacle = 7;
 * @return {!Array<!proto.apollo.planning.ObstacleFeature>}
 */
proto.apollo.planning.LearningDataFrame.prototype.getObstacleList = function() {
  return /** @type{!Array<!proto.apollo.planning.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.ObstacleFeature, 7));
};


/**
 * @param {!Array<!proto.apollo.planning.ObstacleFeature>} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setObstacleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.planning.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ObstacleFeature}
 */
proto.apollo.planning.LearningDataFrame.prototype.addObstacle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.planning.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearObstacleList = function() {
  return this.setObstacleList([]);
};


/**
 * optional RoutingFeature routing = 8;
 * @return {?proto.apollo.planning.RoutingFeature}
 */
proto.apollo.planning.LearningDataFrame.prototype.getRouting = function() {
  return /** @type{?proto.apollo.planning.RoutingFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.RoutingFeature, 8));
};


/**
 * @param {?proto.apollo.planning.RoutingFeature|undefined} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setRouting = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearRouting = function() {
  return this.setRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasRouting = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TrafficLightDetectionFeature traffic_light_detection = 9;
 * @return {?proto.apollo.planning.TrafficLightDetectionFeature}
 */
proto.apollo.planning.LearningDataFrame.prototype.getTrafficLightDetection = function() {
  return /** @type{?proto.apollo.planning.TrafficLightDetectionFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.TrafficLightDetectionFeature, 9));
};


/**
 * @param {?proto.apollo.planning.TrafficLightDetectionFeature|undefined} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setTrafficLightDetection = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearTrafficLightDetection = function() {
  return this.setTrafficLightDetection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasTrafficLightDetection = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated ADCTrajectoryPoint adc_trajectory_point = 10;
 * @return {!Array<!proto.apollo.planning.ADCTrajectoryPoint>}
 */
proto.apollo.planning.LearningDataFrame.prototype.getAdcTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.planning.ADCTrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.ADCTrajectoryPoint, 10));
};


/**
 * @param {!Array<!proto.apollo.planning.ADCTrajectoryPoint>} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setAdcTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.planning.ADCTrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ADCTrajectoryPoint}
 */
proto.apollo.planning.LearningDataFrame.prototype.addAdcTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.planning.ADCTrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearAdcTrajectoryPointList = function() {
  return this.setAdcTrajectoryPointList([]);
};


/**
 * optional LearningOutput output = 11;
 * @return {?proto.apollo.planning.LearningOutput}
 */
proto.apollo.planning.LearningDataFrame.prototype.getOutput = function() {
  return /** @type{?proto.apollo.planning.LearningOutput} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.LearningOutput, 11));
};


/**
 * @param {?proto.apollo.planning.LearningOutput|undefined} value
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
*/
proto.apollo.planning.LearningDataFrame.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.LearningDataFrame} returns this
 */
proto.apollo.planning.LearningDataFrame.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningDataFrame.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.LearningData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LearningData.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LearningData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LearningData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningData.toObject = function(includeInstance, msg) {
  var f, obj = {
    learningDataFrameList: jspb.Message.toObjectList(msg.getLearningDataFrameList(),
    proto.apollo.planning.LearningDataFrame.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LearningData as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LearningData.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.learningDataFrameList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LearningData.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LearningData}
 */
proto.apollo.planning.LearningData.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LearningData();
  obj.learningDataFrameList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.learningDataFrameList.map(
          proto.apollo.planning.LearningDataFrame.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LearningData}
 */
proto.apollo.planning.LearningData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LearningData;
  return proto.apollo.planning.LearningData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LearningData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LearningData}
 */
proto.apollo.planning.LearningData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.LearningDataFrame;
      reader.readMessage(value,proto.apollo.planning.LearningDataFrame.deserializeBinaryFromReader);
      msg.addLearningDataFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LearningData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LearningData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LearningData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLearningDataFrameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.LearningDataFrame.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LearningDataFrame learning_data_frame = 1;
 * @return {!Array<!proto.apollo.planning.LearningDataFrame>}
 */
proto.apollo.planning.LearningData.prototype.getLearningDataFrameList = function() {
  return /** @type{!Array<!proto.apollo.planning.LearningDataFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.LearningDataFrame, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.LearningDataFrame>} value
 * @return {!proto.apollo.planning.LearningData} returns this
*/
proto.apollo.planning.LearningData.prototype.setLearningDataFrameList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.LearningDataFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.LearningDataFrame}
 */
proto.apollo.planning.LearningData.prototype.addLearningDataFrame = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.LearningDataFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.LearningData} returns this
 */
proto.apollo.planning.LearningData.prototype.clearLearningDataFrameList = function() {
  return this.setLearningDataFrameList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlanningLearningData.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlanningLearningData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlanningLearningData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningLearningData.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    learningDataFrame: (f = msg.getLearningDataFrame()) && proto.apollo.planning.LearningDataFrame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlanningLearningData as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlanningLearningData.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.learningDataFrame;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlanningLearningData.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlanningLearningData}
 */
proto.apollo.planning.PlanningLearningData.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlanningLearningData();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.learningDataFrame && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.LearningDataFrame.fromObject(obj.learningDataFrame));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlanningLearningData}
 */
proto.apollo.planning.PlanningLearningData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlanningLearningData;
  return proto.apollo.planning.PlanningLearningData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlanningLearningData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlanningLearningData}
 */
proto.apollo.planning.PlanningLearningData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.apollo.planning.LearningDataFrame;
      reader.readMessage(value,proto.apollo.planning.LearningDataFrame.deserializeBinaryFromReader);
      msg.setLearningDataFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlanningLearningData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlanningLearningData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlanningLearningData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningLearningData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getLearningDataFrame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.LearningDataFrame.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.planning.PlanningLearningData.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.planning.PlanningLearningData} returns this
*/
proto.apollo.planning.PlanningLearningData.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningLearningData} returns this
 */
proto.apollo.planning.PlanningLearningData.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningLearningData.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LearningDataFrame learning_data_frame = 2;
 * @return {?proto.apollo.planning.LearningDataFrame}
 */
proto.apollo.planning.PlanningLearningData.prototype.getLearningDataFrame = function() {
  return /** @type{?proto.apollo.planning.LearningDataFrame} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.LearningDataFrame, 2));
};


/**
 * @param {?proto.apollo.planning.LearningDataFrame|undefined} value
 * @return {!proto.apollo.planning.PlanningLearningData} returns this
*/
proto.apollo.planning.PlanningLearningData.prototype.setLearningDataFrame = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningLearningData} returns this
 */
proto.apollo.planning.PlanningLearningData.prototype.clearLearningDataFrame = function() {
  return this.setLearningDataFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningLearningData.prototype.hasLearningDataFrame = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.apollo.planning);
