// source: modules/planning/proto/planning_stats.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.planning.PlanningStats', null, global);
goog.exportSymbol('proto.apollo.planning.StatsGroup', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.StatsGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.StatsGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.StatsGroup.displayName = 'proto.apollo.planning.StatsGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlanningStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PlanningStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlanningStats.displayName = 'proto.apollo.planning.PlanningStats';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.StatsGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.StatsGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.StatsGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StatsGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    max: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 10000000000.0),
    sum: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    avg: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    num: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StatsGroup as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.StatsGroup.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.max;

  /** @type {?|undefined} */
  this.min;

  /** @type {?|undefined} */
  this.sum;

  /** @type {?|undefined} */
  this.avg;

  /** @type {?|undefined} */
  this.num;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.StatsGroup.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.StatsGroup.fromObject = function(obj) {
  var msg = new proto.apollo.planning.StatsGroup();
  obj.max != null && jspb.Message.setField(msg, 1, obj.max);
  obj.min != null && jspb.Message.setField(msg, 2, obj.min);
  obj.sum != null && jspb.Message.setField(msg, 3, obj.sum);
  obj.avg != null && jspb.Message.setField(msg, 4, obj.avg);
  obj.num != null && jspb.Message.setField(msg, 5, obj.num);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.StatsGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.StatsGroup;
  return proto.apollo.planning.StatsGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.StatsGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.StatsGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvg(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.StatsGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.StatsGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.StatsGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StatsGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional double max = 1;
 * @return {number}
 */
proto.apollo.planning.StatsGroup.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.clearMax = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StatsGroup.prototype.hasMax = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double min = 2;
 * @return {number}
 */
proto.apollo.planning.StatsGroup.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 10000000000.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.clearMin = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StatsGroup.prototype.hasMin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double sum = 3;
 * @return {number}
 */
proto.apollo.planning.StatsGroup.prototype.getSum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.setSum = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.clearSum = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StatsGroup.prototype.hasSum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double avg = 4;
 * @return {number}
 */
proto.apollo.planning.StatsGroup.prototype.getAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.setAvg = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.clearAvg = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StatsGroup.prototype.hasAvg = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 num = 5;
 * @return {number}
 */
proto.apollo.planning.StatsGroup.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.setNum = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StatsGroup} returns this
 */
proto.apollo.planning.StatsGroup.prototype.clearNum = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StatsGroup.prototype.hasNum = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlanningStats.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlanningStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlanningStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalPathLength: (f = msg.getTotalPathLength()) && proto.apollo.planning.StatsGroup.toObject(includeInstance, f),
    totalPathTime: (f = msg.getTotalPathTime()) && proto.apollo.planning.StatsGroup.toObject(includeInstance, f),
    v: (f = msg.getV()) && proto.apollo.planning.StatsGroup.toObject(includeInstance, f),
    a: (f = msg.getA()) && proto.apollo.planning.StatsGroup.toObject(includeInstance, f),
    kappa: (f = msg.getKappa()) && proto.apollo.planning.StatsGroup.toObject(includeInstance, f),
    dkappa: (f = msg.getDkappa()) && proto.apollo.planning.StatsGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlanningStats as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlanningStats.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.totalPathLength;

  /** @type {?|undefined} */
  this.totalPathTime;

  /** @type {?|undefined} */
  this.v;

  /** @type {?|undefined} */
  this.a;

  /** @type {?|undefined} */
  this.kappa;

  /** @type {?|undefined} */
  this.dkappa;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlanningStats.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlanningStats}
 */
proto.apollo.planning.PlanningStats.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlanningStats();
  obj.totalPathLength && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.StatsGroup.fromObject(obj.totalPathLength));
  obj.totalPathTime && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.StatsGroup.fromObject(obj.totalPathTime));
  obj.v && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.StatsGroup.fromObject(obj.v));
  obj.a && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.StatsGroup.fromObject(obj.a));
  obj.kappa && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.StatsGroup.fromObject(obj.kappa));
  obj.dkappa && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.StatsGroup.fromObject(obj.dkappa));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlanningStats}
 */
proto.apollo.planning.PlanningStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlanningStats;
  return proto.apollo.planning.PlanningStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlanningStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlanningStats}
 */
proto.apollo.planning.PlanningStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.StatsGroup;
      reader.readMessage(value,proto.apollo.planning.StatsGroup.deserializeBinaryFromReader);
      msg.setTotalPathLength(value);
      break;
    case 2:
      var value = new proto.apollo.planning.StatsGroup;
      reader.readMessage(value,proto.apollo.planning.StatsGroup.deserializeBinaryFromReader);
      msg.setTotalPathTime(value);
      break;
    case 3:
      var value = new proto.apollo.planning.StatsGroup;
      reader.readMessage(value,proto.apollo.planning.StatsGroup.deserializeBinaryFromReader);
      msg.setV(value);
      break;
    case 4:
      var value = new proto.apollo.planning.StatsGroup;
      reader.readMessage(value,proto.apollo.planning.StatsGroup.deserializeBinaryFromReader);
      msg.setA(value);
      break;
    case 5:
      var value = new proto.apollo.planning.StatsGroup;
      reader.readMessage(value,proto.apollo.planning.StatsGroup.deserializeBinaryFromReader);
      msg.setKappa(value);
      break;
    case 6:
      var value = new proto.apollo.planning.StatsGroup;
      reader.readMessage(value,proto.apollo.planning.StatsGroup.deserializeBinaryFromReader);
      msg.setDkappa(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlanningStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlanningStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlanningStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalPathLength();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.StatsGroup.serializeBinaryToWriter
    );
  }
  f = message.getTotalPathTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.StatsGroup.serializeBinaryToWriter
    );
  }
  f = message.getV();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.StatsGroup.serializeBinaryToWriter
    );
  }
  f = message.getA();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.StatsGroup.serializeBinaryToWriter
    );
  }
  f = message.getKappa();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.StatsGroup.serializeBinaryToWriter
    );
  }
  f = message.getDkappa();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.StatsGroup.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatsGroup total_path_length = 1;
 * @return {?proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.PlanningStats.prototype.getTotalPathLength = function() {
  return /** @type{?proto.apollo.planning.StatsGroup} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StatsGroup, 1));
};


/**
 * @param {?proto.apollo.planning.StatsGroup|undefined} value
 * @return {!proto.apollo.planning.PlanningStats} returns this
*/
proto.apollo.planning.PlanningStats.prototype.setTotalPathLength = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStats} returns this
 */
proto.apollo.planning.PlanningStats.prototype.clearTotalPathLength = function() {
  return this.setTotalPathLength(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStats.prototype.hasTotalPathLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StatsGroup total_path_time = 2;
 * @return {?proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.PlanningStats.prototype.getTotalPathTime = function() {
  return /** @type{?proto.apollo.planning.StatsGroup} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StatsGroup, 2));
};


/**
 * @param {?proto.apollo.planning.StatsGroup|undefined} value
 * @return {!proto.apollo.planning.PlanningStats} returns this
*/
proto.apollo.planning.PlanningStats.prototype.setTotalPathTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStats} returns this
 */
proto.apollo.planning.PlanningStats.prototype.clearTotalPathTime = function() {
  return this.setTotalPathTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStats.prototype.hasTotalPathTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StatsGroup v = 3;
 * @return {?proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.PlanningStats.prototype.getV = function() {
  return /** @type{?proto.apollo.planning.StatsGroup} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StatsGroup, 3));
};


/**
 * @param {?proto.apollo.planning.StatsGroup|undefined} value
 * @return {!proto.apollo.planning.PlanningStats} returns this
*/
proto.apollo.planning.PlanningStats.prototype.setV = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStats} returns this
 */
proto.apollo.planning.PlanningStats.prototype.clearV = function() {
  return this.setV(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStats.prototype.hasV = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StatsGroup a = 4;
 * @return {?proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.PlanningStats.prototype.getA = function() {
  return /** @type{?proto.apollo.planning.StatsGroup} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StatsGroup, 4));
};


/**
 * @param {?proto.apollo.planning.StatsGroup|undefined} value
 * @return {!proto.apollo.planning.PlanningStats} returns this
*/
proto.apollo.planning.PlanningStats.prototype.setA = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStats} returns this
 */
proto.apollo.planning.PlanningStats.prototype.clearA = function() {
  return this.setA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStats.prototype.hasA = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StatsGroup kappa = 5;
 * @return {?proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.PlanningStats.prototype.getKappa = function() {
  return /** @type{?proto.apollo.planning.StatsGroup} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StatsGroup, 5));
};


/**
 * @param {?proto.apollo.planning.StatsGroup|undefined} value
 * @return {!proto.apollo.planning.PlanningStats} returns this
*/
proto.apollo.planning.PlanningStats.prototype.setKappa = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStats} returns this
 */
proto.apollo.planning.PlanningStats.prototype.clearKappa = function() {
  return this.setKappa(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStats.prototype.hasKappa = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StatsGroup dkappa = 6;
 * @return {?proto.apollo.planning.StatsGroup}
 */
proto.apollo.planning.PlanningStats.prototype.getDkappa = function() {
  return /** @type{?proto.apollo.planning.StatsGroup} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StatsGroup, 6));
};


/**
 * @param {?proto.apollo.planning.StatsGroup|undefined} value
 * @return {!proto.apollo.planning.PlanningStats} returns this
*/
proto.apollo.planning.PlanningStats.prototype.setDkappa = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStats} returns this
 */
proto.apollo.planning.PlanningStats.prototype.clearDkappa = function() {
  return this.setDkappa(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStats.prototype.hasDkappa = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.apollo.planning);
