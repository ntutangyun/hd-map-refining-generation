// source: modules/localization/proto/rtk_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.localization.rtk_config.Config', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.localization.rtk_config.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.localization.rtk_config.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.localization.rtk_config.Config.displayName = 'proto.apollo.localization.rtk_config.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.localization.rtk_config.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.localization.rtk_config.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.localization.rtk_config.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.localization.rtk_config.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    localizationTopic: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    localizationStatusTopic: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    imuTopic: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    gpsTopic: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    gpsStatusTopic: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    broadcastTfFrameId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    broadcastTfChildFrameId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    imuListMaxSize: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    gpsImuTimeDiffThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    mapOffsetX: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    mapOffsetY: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    mapOffsetZ: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Config as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.localization.rtk_config.Config.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.localizationTopic;

  /** @type {?|undefined} */
  this.localizationStatusTopic;

  /** @type {?|undefined} */
  this.imuTopic;

  /** @type {?|undefined} */
  this.gpsTopic;

  /** @type {?|undefined} */
  this.gpsStatusTopic;

  /** @type {?|undefined} */
  this.broadcastTfFrameId;

  /** @type {?|undefined} */
  this.broadcastTfChildFrameId;

  /** @type {?|undefined} */
  this.imuListMaxSize;

  /** @type {?|undefined} */
  this.gpsImuTimeDiffThreshold;

  /** @type {?|undefined} */
  this.mapOffsetX;

  /** @type {?|undefined} */
  this.mapOffsetY;

  /** @type {?|undefined} */
  this.mapOffsetZ;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.localization.rtk_config.Config.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.localization.rtk_config.Config}
 */
proto.apollo.localization.rtk_config.Config.fromObject = function(obj) {
  var msg = new proto.apollo.localization.rtk_config.Config();
  obj.localizationTopic != null && jspb.Message.setField(msg, 1, obj.localizationTopic);
  obj.localizationStatusTopic != null && jspb.Message.setField(msg, 11, obj.localizationStatusTopic);
  obj.imuTopic != null && jspb.Message.setField(msg, 2, obj.imuTopic);
  obj.gpsTopic != null && jspb.Message.setField(msg, 3, obj.gpsTopic);
  obj.gpsStatusTopic != null && jspb.Message.setField(msg, 12, obj.gpsStatusTopic);
  obj.broadcastTfFrameId != null && jspb.Message.setField(msg, 4, obj.broadcastTfFrameId);
  obj.broadcastTfChildFrameId != null && jspb.Message.setField(msg, 5, obj.broadcastTfChildFrameId);
  obj.imuListMaxSize != null && jspb.Message.setField(msg, 6, obj.imuListMaxSize);
  obj.gpsImuTimeDiffThreshold != null && jspb.Message.setField(msg, 7, obj.gpsImuTimeDiffThreshold);
  obj.mapOffsetX != null && jspb.Message.setField(msg, 8, obj.mapOffsetX);
  obj.mapOffsetY != null && jspb.Message.setField(msg, 9, obj.mapOffsetY);
  obj.mapOffsetZ != null && jspb.Message.setField(msg, 10, obj.mapOffsetZ);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.localization.rtk_config.Config}
 */
proto.apollo.localization.rtk_config.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.localization.rtk_config.Config;
  return proto.apollo.localization.rtk_config.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.localization.rtk_config.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.localization.rtk_config.Config}
 */
proto.apollo.localization.rtk_config.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalizationTopic(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalizationStatusTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImuTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGpsTopic(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setGpsStatusTopic(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBroadcastTfFrameId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBroadcastTfChildFrameId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImuListMaxSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGpsImuTimeDiffThreshold(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMapOffsetX(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMapOffsetY(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMapOffsetZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.localization.rtk_config.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.localization.rtk_config.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.localization.rtk_config.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.localization.rtk_config.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional string localization_topic = 1;
 * @return {string}
 */
proto.apollo.localization.rtk_config.Config.prototype.getLocalizationTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setLocalizationTopic = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearLocalizationTopic = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasLocalizationTopic = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string localization_status_topic = 11;
 * @return {string}
 */
proto.apollo.localization.rtk_config.Config.prototype.getLocalizationStatusTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setLocalizationStatusTopic = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearLocalizationStatusTopic = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasLocalizationStatusTopic = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string imu_topic = 2;
 * @return {string}
 */
proto.apollo.localization.rtk_config.Config.prototype.getImuTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setImuTopic = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearImuTopic = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasImuTopic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string gps_topic = 3;
 * @return {string}
 */
proto.apollo.localization.rtk_config.Config.prototype.getGpsTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setGpsTopic = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearGpsTopic = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasGpsTopic = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string gps_status_topic = 12;
 * @return {string}
 */
proto.apollo.localization.rtk_config.Config.prototype.getGpsStatusTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setGpsStatusTopic = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearGpsStatusTopic = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasGpsStatusTopic = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string broadcast_tf_frame_id = 4;
 * @return {string}
 */
proto.apollo.localization.rtk_config.Config.prototype.getBroadcastTfFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setBroadcastTfFrameId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearBroadcastTfFrameId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasBroadcastTfFrameId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string broadcast_tf_child_frame_id = 5;
 * @return {string}
 */
proto.apollo.localization.rtk_config.Config.prototype.getBroadcastTfChildFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setBroadcastTfChildFrameId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearBroadcastTfChildFrameId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasBroadcastTfChildFrameId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 imu_list_max_size = 6;
 * @return {number}
 */
proto.apollo.localization.rtk_config.Config.prototype.getImuListMaxSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setImuListMaxSize = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearImuListMaxSize = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasImuListMaxSize = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double gps_imu_time_diff_threshold = 7;
 * @return {number}
 */
proto.apollo.localization.rtk_config.Config.prototype.getGpsImuTimeDiffThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setGpsImuTimeDiffThreshold = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearGpsImuTimeDiffThreshold = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasGpsImuTimeDiffThreshold = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double map_offset_x = 8;
 * @return {number}
 */
proto.apollo.localization.rtk_config.Config.prototype.getMapOffsetX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setMapOffsetX = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearMapOffsetX = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasMapOffsetX = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double map_offset_y = 9;
 * @return {number}
 */
proto.apollo.localization.rtk_config.Config.prototype.getMapOffsetY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setMapOffsetY = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearMapOffsetY = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasMapOffsetY = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double map_offset_z = 10;
 * @return {number}
 */
proto.apollo.localization.rtk_config.Config.prototype.getMapOffsetZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.setMapOffsetZ = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.localization.rtk_config.Config} returns this
 */
proto.apollo.localization.rtk_config.Config.prototype.clearMapOffsetZ = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.localization.rtk_config.Config.prototype.hasMapOffsetZ = function() {
  return jspb.Message.getField(this, 10) != null;
};


goog.object.extend(exports, proto.apollo.localization.rtk_config);
