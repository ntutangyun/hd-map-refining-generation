// source: modules/planning/proto/traffic_rule_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.planning.BacksideVehicleConfig', null, global);
goog.exportSymbol('proto.apollo.planning.CrosswalkConfig', null, global);
goog.exportSymbol('proto.apollo.planning.DestinationConfig', null, global);
goog.exportSymbol('proto.apollo.planning.KeepClearConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ReferenceLineEndConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ReroutingConfig', null, global);
goog.exportSymbol('proto.apollo.planning.StopSignConfig', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficLightConfig', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficRuleConfig', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficRuleConfig.ConfigCase', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficRuleConfig.RuleId', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficRuleConfigs', null, global);
goog.exportSymbol('proto.apollo.planning.YieldSignConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.BacksideVehicleConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.BacksideVehicleConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.BacksideVehicleConfig.displayName = 'proto.apollo.planning.BacksideVehicleConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.CrosswalkConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.CrosswalkConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.CrosswalkConfig.displayName = 'proto.apollo.planning.CrosswalkConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DestinationConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DestinationConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DestinationConfig.displayName = 'proto.apollo.planning.DestinationConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.KeepClearConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.KeepClearConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.KeepClearConfig.displayName = 'proto.apollo.planning.KeepClearConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ReferenceLineEndConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ReferenceLineEndConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ReferenceLineEndConfig.displayName = 'proto.apollo.planning.ReferenceLineEndConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ReroutingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ReroutingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ReroutingConfig.displayName = 'proto.apollo.planning.ReroutingConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.StopSignConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.StopSignConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.StopSignConfig.displayName = 'proto.apollo.planning.StopSignConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrafficLightConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.TrafficLightConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrafficLightConfig.displayName = 'proto.apollo.planning.TrafficLightConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.YieldSignConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.YieldSignConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.YieldSignConfig.displayName = 'proto.apollo.planning.YieldSignConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrafficRuleConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.planning.TrafficRuleConfig.oneofGroups_);
};
goog.inherits(proto.apollo.planning.TrafficRuleConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrafficRuleConfig.displayName = 'proto.apollo.planning.TrafficRuleConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrafficRuleConfigs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.TrafficRuleConfigs.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.TrafficRuleConfigs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrafficRuleConfigs.displayName = 'proto.apollo.planning.TrafficRuleConfigs';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.BacksideVehicleConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.BacksideVehicleConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.BacksideVehicleConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.BacksideVehicleConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    backsideLaneWidth: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 4.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BacksideVehicleConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.BacksideVehicleConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.backsideLaneWidth;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.BacksideVehicleConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.BacksideVehicleConfig}
 */
proto.apollo.planning.BacksideVehicleConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.BacksideVehicleConfig();
  obj.backsideLaneWidth != null && jspb.Message.setField(msg, 1, obj.backsideLaneWidth);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.BacksideVehicleConfig}
 */
proto.apollo.planning.BacksideVehicleConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.BacksideVehicleConfig;
  return proto.apollo.planning.BacksideVehicleConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.BacksideVehicleConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.BacksideVehicleConfig}
 */
proto.apollo.planning.BacksideVehicleConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBacksideLaneWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.BacksideVehicleConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.BacksideVehicleConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.BacksideVehicleConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.BacksideVehicleConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double backside_lane_width = 1;
 * @return {number}
 */
proto.apollo.planning.BacksideVehicleConfig.prototype.getBacksideLaneWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.BacksideVehicleConfig} returns this
 */
proto.apollo.planning.BacksideVehicleConfig.prototype.setBacksideLaneWidth = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.BacksideVehicleConfig} returns this
 */
proto.apollo.planning.BacksideVehicleConfig.prototype.clearBacksideLaneWidth = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.BacksideVehicleConfig.prototype.hasBacksideLaneWidth = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.CrosswalkConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.CrosswalkConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.CrosswalkConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CrosswalkConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    maxStopDeceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 4.0),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 3.0),
    expandSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 2.0),
    stopStrictLDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 4.0),
    stopLooseLDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 5.0),
    stopTimeout: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CrosswalkConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.CrosswalkConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopDistance;

  /** @type {?|undefined} */
  this.maxStopDeceleration;

  /** @type {?|undefined} */
  this.minPassSDistance;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.expandSDistance;

  /** @type {?|undefined} */
  this.stopStrictLDistance;

  /** @type {?|undefined} */
  this.stopLooseLDistance;

  /** @type {?|undefined} */
  this.stopTimeout;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.CrosswalkConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.CrosswalkConfig}
 */
proto.apollo.planning.CrosswalkConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.CrosswalkConfig();
  obj.stopDistance != null && jspb.Message.setField(msg, 1, obj.stopDistance);
  obj.maxStopDeceleration != null && jspb.Message.setField(msg, 2, obj.maxStopDeceleration);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 3, obj.minPassSDistance);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 4, obj.maxValidStopDistance);
  obj.expandSDistance != null && jspb.Message.setField(msg, 5, obj.expandSDistance);
  obj.stopStrictLDistance != null && jspb.Message.setField(msg, 6, obj.stopStrictLDistance);
  obj.stopLooseLDistance != null && jspb.Message.setField(msg, 7, obj.stopLooseLDistance);
  obj.stopTimeout != null && jspb.Message.setField(msg, 8, obj.stopTimeout);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.CrosswalkConfig}
 */
proto.apollo.planning.CrosswalkConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.CrosswalkConfig;
  return proto.apollo.planning.CrosswalkConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.CrosswalkConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.CrosswalkConfig}
 */
proto.apollo.planning.CrosswalkConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxStopDeceleration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExpandSDistance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopStrictLDistance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopLooseLDistance(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.CrosswalkConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.CrosswalkConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.CrosswalkConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CrosswalkConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional double stop_distance = 1;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_stop_deceleration = 2;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getMaxStopDeceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setMaxStopDeceleration = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearMaxStopDeceleration = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasMaxStopDeceleration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double min_pass_s_distance = 3;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double max_valid_stop_distance = 4;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double expand_s_distance = 5;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getExpandSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setExpandSDistance = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearExpandSDistance = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasExpandSDistance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double stop_strict_l_distance = 6;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getStopStrictLDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setStopStrictLDistance = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearStopStrictLDistance = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasStopStrictLDistance = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double stop_loose_l_distance = 7;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getStopLooseLDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setStopLooseLDistance = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearStopLooseLDistance = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasStopLooseLDistance = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double stop_timeout = 8;
 * @return {number}
 */
proto.apollo.planning.CrosswalkConfig.prototype.getStopTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.setStopTimeout = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkConfig} returns this
 */
proto.apollo.planning.CrosswalkConfig.prototype.clearStopTimeout = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkConfig.prototype.hasStopTimeout = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DestinationConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DestinationConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DestinationConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DestinationConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DestinationConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DestinationConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DestinationConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DestinationConfig}
 */
proto.apollo.planning.DestinationConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DestinationConfig();
  obj.stopDistance != null && jspb.Message.setField(msg, 1, obj.stopDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DestinationConfig}
 */
proto.apollo.planning.DestinationConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DestinationConfig;
  return proto.apollo.planning.DestinationConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DestinationConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DestinationConfig}
 */
proto.apollo.planning.DestinationConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DestinationConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DestinationConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DestinationConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DestinationConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double stop_distance = 1;
 * @return {number}
 */
proto.apollo.planning.DestinationConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DestinationConfig} returns this
 */
proto.apollo.planning.DestinationConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DestinationConfig} returns this
 */
proto.apollo.planning.DestinationConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DestinationConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.KeepClearConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.KeepClearConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.KeepClearConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.KeepClearConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableKeepClearZone: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    enableJunction: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 2.0),
    alignWithTrafficSignTolerance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 4.5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeepClearConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.KeepClearConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.enableKeepClearZone;

  /** @type {?|undefined} */
  this.enableJunction;

  /** @type {?|undefined} */
  this.minPassSDistance;

  /** @type {?|undefined} */
  this.alignWithTrafficSignTolerance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.KeepClearConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.KeepClearConfig}
 */
proto.apollo.planning.KeepClearConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.KeepClearConfig();
  obj.enableKeepClearZone != null && jspb.Message.setField(msg, 1, obj.enableKeepClearZone);
  obj.enableJunction != null && jspb.Message.setField(msg, 2, obj.enableJunction);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 3, obj.minPassSDistance);
  obj.alignWithTrafficSignTolerance != null && jspb.Message.setField(msg, 4, obj.alignWithTrafficSignTolerance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.KeepClearConfig}
 */
proto.apollo.planning.KeepClearConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.KeepClearConfig;
  return proto.apollo.planning.KeepClearConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.KeepClearConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.KeepClearConfig}
 */
proto.apollo.planning.KeepClearConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableKeepClearZone(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableJunction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAlignWithTrafficSignTolerance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.KeepClearConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.KeepClearConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.KeepClearConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.KeepClearConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional bool enable_keep_clear_zone = 1;
 * @return {boolean}
 */
proto.apollo.planning.KeepClearConfig.prototype.getEnableKeepClearZone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.setEnableKeepClearZone = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.clearEnableKeepClearZone = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.KeepClearConfig.prototype.hasEnableKeepClearZone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enable_junction = 2;
 * @return {boolean}
 */
proto.apollo.planning.KeepClearConfig.prototype.getEnableJunction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.setEnableJunction = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.clearEnableJunction = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.KeepClearConfig.prototype.hasEnableJunction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double min_pass_s_distance = 3;
 * @return {number}
 */
proto.apollo.planning.KeepClearConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.KeepClearConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double align_with_traffic_sign_tolerance = 4;
 * @return {number}
 */
proto.apollo.planning.KeepClearConfig.prototype.getAlignWithTrafficSignTolerance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 4.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.setAlignWithTrafficSignTolerance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.KeepClearConfig} returns this
 */
proto.apollo.planning.KeepClearConfig.prototype.clearAlignWithTrafficSignTolerance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.KeepClearConfig.prototype.hasAlignWithTrafficSignTolerance = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ReferenceLineEndConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ReferenceLineEndConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReferenceLineEndConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.5),
    minReferenceLineRemainLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 50.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReferenceLineEndConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ReferenceLineEndConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopDistance;

  /** @type {?|undefined} */
  this.minReferenceLineRemainLength;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ReferenceLineEndConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ReferenceLineEndConfig}
 */
proto.apollo.planning.ReferenceLineEndConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ReferenceLineEndConfig();
  obj.stopDistance != null && jspb.Message.setField(msg, 1, obj.stopDistance);
  obj.minReferenceLineRemainLength != null && jspb.Message.setField(msg, 2, obj.minReferenceLineRemainLength);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ReferenceLineEndConfig}
 */
proto.apollo.planning.ReferenceLineEndConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ReferenceLineEndConfig;
  return proto.apollo.planning.ReferenceLineEndConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ReferenceLineEndConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ReferenceLineEndConfig}
 */
proto.apollo.planning.ReferenceLineEndConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinReferenceLineRemainLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ReferenceLineEndConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ReferenceLineEndConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReferenceLineEndConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double stop_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineEndConfig} returns this
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineEndConfig} returns this
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double min_reference_line_remain_length = 2;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.getMinReferenceLineRemainLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 50.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineEndConfig} returns this
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.setMinReferenceLineRemainLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineEndConfig} returns this
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.clearMinReferenceLineRemainLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineEndConfig.prototype.hasMinReferenceLineRemainLength = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ReroutingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ReroutingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ReroutingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReroutingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    cooldownTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 3.0),
    prepareReroutingTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 2.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReroutingConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ReroutingConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cooldownTime;

  /** @type {?|undefined} */
  this.prepareReroutingTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ReroutingConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ReroutingConfig}
 */
proto.apollo.planning.ReroutingConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ReroutingConfig();
  obj.cooldownTime != null && jspb.Message.setField(msg, 1, obj.cooldownTime);
  obj.prepareReroutingTime != null && jspb.Message.setField(msg, 2, obj.prepareReroutingTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ReroutingConfig}
 */
proto.apollo.planning.ReroutingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ReroutingConfig;
  return proto.apollo.planning.ReroutingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ReroutingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ReroutingConfig}
 */
proto.apollo.planning.ReroutingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCooldownTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrepareReroutingTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ReroutingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ReroutingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ReroutingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReroutingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double cooldown_time = 1;
 * @return {number}
 */
proto.apollo.planning.ReroutingConfig.prototype.getCooldownTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReroutingConfig} returns this
 */
proto.apollo.planning.ReroutingConfig.prototype.setCooldownTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReroutingConfig} returns this
 */
proto.apollo.planning.ReroutingConfig.prototype.clearCooldownTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReroutingConfig.prototype.hasCooldownTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double prepare_rerouting_time = 2;
 * @return {number}
 */
proto.apollo.planning.ReroutingConfig.prototype.getPrepareReroutingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReroutingConfig} returns this
 */
proto.apollo.planning.ReroutingConfig.prototype.setPrepareReroutingTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReroutingConfig} returns this
 */
proto.apollo.planning.ReroutingConfig.prototype.clearPrepareReroutingTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReroutingConfig.prototype.hasPrepareReroutingTime = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.StopSignConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.StopSignConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.StopSignConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StopSignConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StopSignConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.StopSignConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.enabled;

  /** @type {?|undefined} */
  this.stopDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.StopSignConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.StopSignConfig}
 */
proto.apollo.planning.StopSignConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.StopSignConfig();
  obj.enabled != null && jspb.Message.setField(msg, 1, obj.enabled);
  obj.stopDistance != null && jspb.Message.setField(msg, 2, obj.stopDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.StopSignConfig}
 */
proto.apollo.planning.StopSignConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.StopSignConfig;
  return proto.apollo.planning.StopSignConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.StopSignConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.StopSignConfig}
 */
proto.apollo.planning.StopSignConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.StopSignConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.StopSignConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.StopSignConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StopSignConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.apollo.planning.StopSignConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.StopSignConfig} returns this
 */
proto.apollo.planning.StopSignConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StopSignConfig} returns this
 */
proto.apollo.planning.StopSignConfig.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StopSignConfig.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.StopSignConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.StopSignConfig} returns this
 */
proto.apollo.planning.StopSignConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StopSignConfig} returns this
 */
proto.apollo.planning.StopSignConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StopSignConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrafficLightConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrafficLightConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrafficLightConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    maxStopDeceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 4.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrafficLightConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.enabled;

  /** @type {?|undefined} */
  this.stopDistance;

  /** @type {?|undefined} */
  this.maxStopDeceleration;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrafficLightConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrafficLightConfig}
 */
proto.apollo.planning.TrafficLightConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrafficLightConfig();
  obj.enabled != null && jspb.Message.setField(msg, 1, obj.enabled);
  obj.stopDistance != null && jspb.Message.setField(msg, 2, obj.stopDistance);
  obj.maxStopDeceleration != null && jspb.Message.setField(msg, 3, obj.maxStopDeceleration);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrafficLightConfig}
 */
proto.apollo.planning.TrafficLightConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrafficLightConfig;
  return proto.apollo.planning.TrafficLightConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrafficLightConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrafficLightConfig}
 */
proto.apollo.planning.TrafficLightConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxStopDeceleration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrafficLightConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrafficLightConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrafficLightConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.TrafficLightConfig} returns this
 */
proto.apollo.planning.TrafficLightConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightConfig} returns this
 */
proto.apollo.planning.TrafficLightConfig.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightConfig.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.TrafficLightConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrafficLightConfig} returns this
 */
proto.apollo.planning.TrafficLightConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightConfig} returns this
 */
proto.apollo.planning.TrafficLightConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_stop_deceleration = 3;
 * @return {number}
 */
proto.apollo.planning.TrafficLightConfig.prototype.getMaxStopDeceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrafficLightConfig} returns this
 */
proto.apollo.planning.TrafficLightConfig.prototype.setMaxStopDeceleration = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficLightConfig} returns this
 */
proto.apollo.planning.TrafficLightConfig.prototype.clearMaxStopDeceleration = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficLightConfig.prototype.hasMaxStopDeceleration = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.YieldSignConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.YieldSignConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.YieldSignConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.YieldSignConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    startWatchDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 2.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of YieldSignConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.YieldSignConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.enabled;

  /** @type {?|undefined} */
  this.stopDistance;

  /** @type {?|undefined} */
  this.startWatchDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.YieldSignConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.YieldSignConfig}
 */
proto.apollo.planning.YieldSignConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.YieldSignConfig();
  obj.enabled != null && jspb.Message.setField(msg, 1, obj.enabled);
  obj.stopDistance != null && jspb.Message.setField(msg, 2, obj.stopDistance);
  obj.startWatchDistance != null && jspb.Message.setField(msg, 3, obj.startWatchDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.YieldSignConfig}
 */
proto.apollo.planning.YieldSignConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.YieldSignConfig;
  return proto.apollo.planning.YieldSignConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.YieldSignConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.YieldSignConfig}
 */
proto.apollo.planning.YieldSignConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartWatchDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.YieldSignConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.YieldSignConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.YieldSignConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.YieldSignConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.apollo.planning.YieldSignConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.YieldSignConfig} returns this
 */
proto.apollo.planning.YieldSignConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.YieldSignConfig} returns this
 */
proto.apollo.planning.YieldSignConfig.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.YieldSignConfig.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.YieldSignConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.YieldSignConfig} returns this
 */
proto.apollo.planning.YieldSignConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.YieldSignConfig} returns this
 */
proto.apollo.planning.YieldSignConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.YieldSignConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double start_watch_distance = 3;
 * @return {number}
 */
proto.apollo.planning.YieldSignConfig.prototype.getStartWatchDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.YieldSignConfig} returns this
 */
proto.apollo.planning.YieldSignConfig.prototype.setStartWatchDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.YieldSignConfig} returns this
 */
proto.apollo.planning.YieldSignConfig.prototype.clearStartWatchDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.YieldSignConfig.prototype.hasStartWatchDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.TrafficRuleConfig.oneofGroups_ = [[3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.apollo.planning.TrafficRuleConfig.ConfigCase = {
  CONFIG_NOT_SET: 0,
  BACKSIDE_VEHICLE: 3,
  CROSSWALK: 4,
  DESTINATION: 5,
  KEEP_CLEAR: 6,
  REFERENCE_LINE_END: 7,
  REROUTING: 8,
  STOP_SIGN: 9,
  TRAFFIC_LIGHT: 10,
  YIELD_SIGN: 11
};

/**
 * @return {proto.apollo.planning.TrafficRuleConfig.ConfigCase}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getConfigCase = function() {
  return /** @type {proto.apollo.planning.TrafficRuleConfig.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrafficRuleConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrafficRuleConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficRuleConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruleId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    enabled: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    backsideVehicle: (f = msg.getBacksideVehicle()) && proto.apollo.planning.BacksideVehicleConfig.toObject(includeInstance, f),
    crosswalk: (f = msg.getCrosswalk()) && proto.apollo.planning.CrosswalkConfig.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && proto.apollo.planning.DestinationConfig.toObject(includeInstance, f),
    keepClear: (f = msg.getKeepClear()) && proto.apollo.planning.KeepClearConfig.toObject(includeInstance, f),
    referenceLineEnd: (f = msg.getReferenceLineEnd()) && proto.apollo.planning.ReferenceLineEndConfig.toObject(includeInstance, f),
    rerouting: (f = msg.getRerouting()) && proto.apollo.planning.ReroutingConfig.toObject(includeInstance, f),
    stopSign: (f = msg.getStopSign()) && proto.apollo.planning.StopSignConfig.toObject(includeInstance, f),
    trafficLight: (f = msg.getTrafficLight()) && proto.apollo.planning.TrafficLightConfig.toObject(includeInstance, f),
    yieldSign: (f = msg.getYieldSign()) && proto.apollo.planning.YieldSignConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficRuleConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrafficRuleConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ruleId;

  /** @type {?|undefined} */
  this.enabled;

  /** @type {?|undefined} */
  this.backsideVehicle;

  /** @type {?|undefined} */
  this.crosswalk;

  /** @type {?|undefined} */
  this.destination;

  /** @type {?|undefined} */
  this.keepClear;

  /** @type {?|undefined} */
  this.referenceLineEnd;

  /** @type {?|undefined} */
  this.rerouting;

  /** @type {?|undefined} */
  this.stopSign;

  /** @type {?|undefined} */
  this.trafficLight;

  /** @type {?|undefined} */
  this.yieldSign;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrafficRuleConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrafficRuleConfig}
 */
proto.apollo.planning.TrafficRuleConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrafficRuleConfig();
  obj.ruleId != null && jspb.Message.setField(msg, 1, obj.ruleId);
  obj.enabled != null && jspb.Message.setField(msg, 2, obj.enabled);
  obj.backsideVehicle && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.BacksideVehicleConfig.fromObject(obj.backsideVehicle));
  obj.crosswalk && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.CrosswalkConfig.fromObject(obj.crosswalk));
  obj.destination && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.DestinationConfig.fromObject(obj.destination));
  obj.keepClear && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.KeepClearConfig.fromObject(obj.keepClear));
  obj.referenceLineEnd && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.ReferenceLineEndConfig.fromObject(obj.referenceLineEnd));
  obj.rerouting && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.planning.ReroutingConfig.fromObject(obj.rerouting));
  obj.stopSign && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.planning.StopSignConfig.fromObject(obj.stopSign));
  obj.trafficLight && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.planning.TrafficLightConfig.fromObject(obj.trafficLight));
  obj.yieldSign && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.planning.YieldSignConfig.fromObject(obj.yieldSign));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrafficRuleConfig}
 */
proto.apollo.planning.TrafficRuleConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrafficRuleConfig;
  return proto.apollo.planning.TrafficRuleConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrafficRuleConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrafficRuleConfig}
 */
proto.apollo.planning.TrafficRuleConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.TrafficRuleConfig.RuleId} */ (reader.readEnum());
      msg.setRuleId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var value = new proto.apollo.planning.BacksideVehicleConfig;
      reader.readMessage(value,proto.apollo.planning.BacksideVehicleConfig.deserializeBinaryFromReader);
      msg.setBacksideVehicle(value);
      break;
    case 4:
      var value = new proto.apollo.planning.CrosswalkConfig;
      reader.readMessage(value,proto.apollo.planning.CrosswalkConfig.deserializeBinaryFromReader);
      msg.setCrosswalk(value);
      break;
    case 5:
      var value = new proto.apollo.planning.DestinationConfig;
      reader.readMessage(value,proto.apollo.planning.DestinationConfig.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 6:
      var value = new proto.apollo.planning.KeepClearConfig;
      reader.readMessage(value,proto.apollo.planning.KeepClearConfig.deserializeBinaryFromReader);
      msg.setKeepClear(value);
      break;
    case 7:
      var value = new proto.apollo.planning.ReferenceLineEndConfig;
      reader.readMessage(value,proto.apollo.planning.ReferenceLineEndConfig.deserializeBinaryFromReader);
      msg.setReferenceLineEnd(value);
      break;
    case 8:
      var value = new proto.apollo.planning.ReroutingConfig;
      reader.readMessage(value,proto.apollo.planning.ReroutingConfig.deserializeBinaryFromReader);
      msg.setRerouting(value);
      break;
    case 9:
      var value = new proto.apollo.planning.StopSignConfig;
      reader.readMessage(value,proto.apollo.planning.StopSignConfig.deserializeBinaryFromReader);
      msg.setStopSign(value);
      break;
    case 10:
      var value = new proto.apollo.planning.TrafficLightConfig;
      reader.readMessage(value,proto.apollo.planning.TrafficLightConfig.deserializeBinaryFromReader);
      msg.setTrafficLight(value);
      break;
    case 11:
      var value = new proto.apollo.planning.YieldSignConfig;
      reader.readMessage(value,proto.apollo.planning.YieldSignConfig.deserializeBinaryFromReader);
      msg.setYieldSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrafficRuleConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrafficRuleConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficRuleConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.TrafficRuleConfig.RuleId} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBacksideVehicle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.BacksideVehicleConfig.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalk();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.CrosswalkConfig.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.DestinationConfig.serializeBinaryToWriter
    );
  }
  f = message.getKeepClear();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.KeepClearConfig.serializeBinaryToWriter
    );
  }
  f = message.getReferenceLineEnd();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.ReferenceLineEndConfig.serializeBinaryToWriter
    );
  }
  f = message.getRerouting();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.planning.ReroutingConfig.serializeBinaryToWriter
    );
  }
  f = message.getStopSign();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.planning.StopSignConfig.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLight();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.planning.TrafficLightConfig.serializeBinaryToWriter
    );
  }
  f = message.getYieldSign();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.planning.YieldSignConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.TrafficRuleConfig.RuleId = {
  BACKSIDE_VEHICLE: 1,
  CROSSWALK: 2,
  DESTINATION: 3,
  KEEP_CLEAR: 4,
  REFERENCE_LINE_END: 5,
  REROUTING: 6,
  STOP_SIGN: 7,
  TRAFFIC_LIGHT: 8,
  YIELD_SIGN: 9
};

/**
 * optional RuleId rule_id = 1;
 * @return {!proto.apollo.planning.TrafficRuleConfig.RuleId}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getRuleId = function() {
  return /** @type {!proto.apollo.planning.TrafficRuleConfig.RuleId} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.TrafficRuleConfig.RuleId} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.setRuleId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearRuleId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasRuleId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BacksideVehicleConfig backside_vehicle = 3;
 * @return {?proto.apollo.planning.BacksideVehicleConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getBacksideVehicle = function() {
  return /** @type{?proto.apollo.planning.BacksideVehicleConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.BacksideVehicleConfig, 3));
};


/**
 * @param {?proto.apollo.planning.BacksideVehicleConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setBacksideVehicle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearBacksideVehicle = function() {
  return this.setBacksideVehicle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasBacksideVehicle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CrosswalkConfig crosswalk = 4;
 * @return {?proto.apollo.planning.CrosswalkConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getCrosswalk = function() {
  return /** @type{?proto.apollo.planning.CrosswalkConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.CrosswalkConfig, 4));
};


/**
 * @param {?proto.apollo.planning.CrosswalkConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setCrosswalk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearCrosswalk = function() {
  return this.setCrosswalk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasCrosswalk = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DestinationConfig destination = 5;
 * @return {?proto.apollo.planning.DestinationConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getDestination = function() {
  return /** @type{?proto.apollo.planning.DestinationConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DestinationConfig, 5));
};


/**
 * @param {?proto.apollo.planning.DestinationConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setDestination = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional KeepClearConfig keep_clear = 6;
 * @return {?proto.apollo.planning.KeepClearConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getKeepClear = function() {
  return /** @type{?proto.apollo.planning.KeepClearConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.KeepClearConfig, 6));
};


/**
 * @param {?proto.apollo.planning.KeepClearConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setKeepClear = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearKeepClear = function() {
  return this.setKeepClear(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasKeepClear = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ReferenceLineEndConfig reference_line_end = 7;
 * @return {?proto.apollo.planning.ReferenceLineEndConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getReferenceLineEnd = function() {
  return /** @type{?proto.apollo.planning.ReferenceLineEndConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ReferenceLineEndConfig, 7));
};


/**
 * @param {?proto.apollo.planning.ReferenceLineEndConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setReferenceLineEnd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearReferenceLineEnd = function() {
  return this.setReferenceLineEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasReferenceLineEnd = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ReroutingConfig rerouting = 8;
 * @return {?proto.apollo.planning.ReroutingConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getRerouting = function() {
  return /** @type{?proto.apollo.planning.ReroutingConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ReroutingConfig, 8));
};


/**
 * @param {?proto.apollo.planning.ReroutingConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setRerouting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearRerouting = function() {
  return this.setRerouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasRerouting = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional StopSignConfig stop_sign = 9;
 * @return {?proto.apollo.planning.StopSignConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getStopSign = function() {
  return /** @type{?proto.apollo.planning.StopSignConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StopSignConfig, 9));
};


/**
 * @param {?proto.apollo.planning.StopSignConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setStopSign = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearStopSign = function() {
  return this.setStopSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasStopSign = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TrafficLightConfig traffic_light = 10;
 * @return {?proto.apollo.planning.TrafficLightConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getTrafficLight = function() {
  return /** @type{?proto.apollo.planning.TrafficLightConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.TrafficLightConfig, 10));
};


/**
 * @param {?proto.apollo.planning.TrafficLightConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setTrafficLight = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearTrafficLight = function() {
  return this.setTrafficLight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasTrafficLight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional YieldSignConfig yield_sign = 11;
 * @return {?proto.apollo.planning.YieldSignConfig}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.getYieldSign = function() {
  return /** @type{?proto.apollo.planning.YieldSignConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.YieldSignConfig, 11));
};


/**
 * @param {?proto.apollo.planning.YieldSignConfig|undefined} value
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
*/
proto.apollo.planning.TrafficRuleConfig.prototype.setYieldSign = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.apollo.planning.TrafficRuleConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TrafficRuleConfig} returns this
 */
proto.apollo.planning.TrafficRuleConfig.prototype.clearYieldSign = function() {
  return this.setYieldSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrafficRuleConfig.prototype.hasYieldSign = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.TrafficRuleConfigs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrafficRuleConfigs.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrafficRuleConfigs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrafficRuleConfigs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficRuleConfigs.toObject = function(includeInstance, msg) {
  var f, obj = {
    configList: jspb.Message.toObjectList(msg.getConfigList(),
    proto.apollo.planning.TrafficRuleConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficRuleConfigs as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrafficRuleConfigs.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.configList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrafficRuleConfigs.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrafficRuleConfigs}
 */
proto.apollo.planning.TrafficRuleConfigs.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrafficRuleConfigs();
  obj.configList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.configList.map(
          proto.apollo.planning.TrafficRuleConfig.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrafficRuleConfigs}
 */
proto.apollo.planning.TrafficRuleConfigs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrafficRuleConfigs;
  return proto.apollo.planning.TrafficRuleConfigs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrafficRuleConfigs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrafficRuleConfigs}
 */
proto.apollo.planning.TrafficRuleConfigs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.TrafficRuleConfig;
      reader.readMessage(value,proto.apollo.planning.TrafficRuleConfig.deserializeBinaryFromReader);
      msg.addConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrafficRuleConfigs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrafficRuleConfigs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrafficRuleConfigs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficRuleConfigs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.TrafficRuleConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TrafficRuleConfig config = 1;
 * @return {!Array<!proto.apollo.planning.TrafficRuleConfig>}
 */
proto.apollo.planning.TrafficRuleConfigs.prototype.getConfigList = function() {
  return /** @type{!Array<!proto.apollo.planning.TrafficRuleConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TrafficRuleConfig, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.TrafficRuleConfig>} value
 * @return {!proto.apollo.planning.TrafficRuleConfigs} returns this
*/
proto.apollo.planning.TrafficRuleConfigs.prototype.setConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.TrafficRuleConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TrafficRuleConfig}
 */
proto.apollo.planning.TrafficRuleConfigs.prototype.addConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.TrafficRuleConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.TrafficRuleConfigs} returns this
 */
proto.apollo.planning.TrafficRuleConfigs.prototype.clearConfigList = function() {
  return this.setConfigList([]);
};


goog.object.extend(exports, proto.apollo.planning);
