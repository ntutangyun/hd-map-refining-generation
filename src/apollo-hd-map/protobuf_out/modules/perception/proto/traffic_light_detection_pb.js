// source: modules/perception/proto/traffic_light_detection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
goog.exportSymbol('proto.apollo.perception.TrafficLight', null, global);
goog.exportSymbol('proto.apollo.perception.TrafficLight.Color', null, global);
goog.exportSymbol('proto.apollo.perception.TrafficLightBox', null, global);
goog.exportSymbol('proto.apollo.perception.TrafficLightDebug', null, global);
goog.exportSymbol('proto.apollo.perception.TrafficLightDetection', null, global);
goog.exportSymbol('proto.apollo.perception.TrafficLightDetection.CameraID', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.TrafficLightBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.TrafficLightBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.TrafficLightBox.displayName = 'proto.apollo.perception.TrafficLightBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.TrafficLightDebug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.TrafficLightDebug.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.TrafficLightDebug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.TrafficLightDebug.displayName = 'proto.apollo.perception.TrafficLightDebug';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.TrafficLight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.TrafficLight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.TrafficLight.displayName = 'proto.apollo.perception.TrafficLight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.TrafficLightDetection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.TrafficLightDetection.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.TrafficLightDetection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.TrafficLightDetection.displayName = 'proto.apollo.perception.TrafficLightDetection';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.TrafficLightBox.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.TrafficLightBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.TrafficLightBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLightBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    width: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    color: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    selected: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    cameraName: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightBox as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.TrafficLightBox.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.color;

  /** @type {?|undefined} */
  this.selected;

  /** @type {?|undefined} */
  this.cameraName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.TrafficLightBox.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightBox.fromObject = function(obj) {
  var msg = new proto.apollo.perception.TrafficLightBox();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.width != null && jspb.Message.setField(msg, 3, obj.width);
  obj.height != null && jspb.Message.setField(msg, 4, obj.height);
  obj.color != null && jspb.Message.setField(msg, 5, obj.color);
  obj.selected != null && jspb.Message.setField(msg, 6, obj.selected);
  obj.cameraName != null && jspb.Message.setField(msg, 7, obj.cameraName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.TrafficLightBox;
  return proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.TrafficLightBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.perception.TrafficLight.Color} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelected(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.TrafficLightBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.TrafficLightBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.TrafficLight.Color} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.apollo.perception.TrafficLightBox.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.apollo.perception.TrafficLightBox.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.apollo.perception.TrafficLightBox.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 height = 4;
 * @return {number}
 */
proto.apollo.perception.TrafficLightBox.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TrafficLight.Color color = 5;
 * @return {!proto.apollo.perception.TrafficLight.Color}
 */
proto.apollo.perception.TrafficLightBox.prototype.getColor = function() {
  return /** @type {!proto.apollo.perception.TrafficLight.Color} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.apollo.perception.TrafficLight.Color} value
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.setColor = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.clearColor = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.hasColor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool selected = 6;
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.getSelected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.setSelected = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.clearSelected = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.hasSelected = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string camera_name = 7;
 * @return {string}
 */
proto.apollo.perception.TrafficLightBox.prototype.getCameraName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.setCameraName = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightBox} returns this
 */
proto.apollo.perception.TrafficLightBox.prototype.clearCameraName = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightBox.prototype.hasCameraName = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.TrafficLightDebug.repeatedFields_ = [2,10,11,12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.TrafficLightDebug.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.TrafficLightDebug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.TrafficLightDebug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLightDebug.toObject = function(includeInstance, msg) {
  var f, obj = {
    cropbox: (f = msg.getCropbox()) && proto.apollo.perception.TrafficLightBox.toObject(includeInstance, f),
    boxList: jspb.Message.toObjectList(msg.getBoxList(),
    proto.apollo.perception.TrafficLightBox.toObject, includeInstance),
    signalNum: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    validPos: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    tsDiffPos: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    tsDiffSys: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    projectError: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    distanceToStopLine: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    cameraId: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    cropRoiList: jspb.Message.toObjectList(msg.getCropRoiList(),
    proto.apollo.perception.TrafficLightBox.toObject, includeInstance),
    projectedRoiList: jspb.Message.toObjectList(msg.getProjectedRoiList(),
    proto.apollo.perception.TrafficLightBox.toObject, includeInstance),
    rectifiedRoiList: jspb.Message.toObjectList(msg.getRectifiedRoiList(),
    proto.apollo.perception.TrafficLightBox.toObject, includeInstance),
    debugRoiList: jspb.Message.toObjectList(msg.getDebugRoiList(),
    proto.apollo.perception.TrafficLightBox.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightDebug as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.TrafficLightDebug.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cropbox;

  /** @type {?|undefined} */
  this.boxList;

  /** @type {?|undefined} */
  this.signalNum;

  /** @type {?|undefined} */
  this.validPos;

  /** @type {?|undefined} */
  this.tsDiffPos;

  /** @type {?|undefined} */
  this.tsDiffSys;

  /** @type {?|undefined} */
  this.projectError;

  /** @type {?|undefined} */
  this.distanceToStopLine;

  /** @type {?|undefined} */
  this.cameraId;

  /** @type {?|undefined} */
  this.cropRoiList;

  /** @type {?|undefined} */
  this.projectedRoiList;

  /** @type {?|undefined} */
  this.rectifiedRoiList;

  /** @type {?|undefined} */
  this.debugRoiList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.TrafficLightDebug.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.TrafficLightDebug}
 */
proto.apollo.perception.TrafficLightDebug.fromObject = function(obj) {
  var msg = new proto.apollo.perception.TrafficLightDebug();
  obj.cropbox && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.TrafficLightBox.fromObject(obj.cropbox));
  obj.boxList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.boxList.map(
          proto.apollo.perception.TrafficLightBox.fromObject));
  obj.signalNum != null && jspb.Message.setField(msg, 3, obj.signalNum);
  obj.validPos != null && jspb.Message.setField(msg, 4, obj.validPos);
  obj.tsDiffPos != null && jspb.Message.setField(msg, 5, obj.tsDiffPos);
  obj.tsDiffSys != null && jspb.Message.setField(msg, 6, obj.tsDiffSys);
  obj.projectError != null && jspb.Message.setField(msg, 7, obj.projectError);
  obj.distanceToStopLine != null && jspb.Message.setField(msg, 8, obj.distanceToStopLine);
  obj.cameraId != null && jspb.Message.setField(msg, 9, obj.cameraId);
  obj.cropRoiList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.cropRoiList.map(
          proto.apollo.perception.TrafficLightBox.fromObject));
  obj.projectedRoiList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.projectedRoiList.map(
          proto.apollo.perception.TrafficLightBox.fromObject));
  obj.rectifiedRoiList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.rectifiedRoiList.map(
          proto.apollo.perception.TrafficLightBox.fromObject));
  obj.debugRoiList && jspb.Message.setRepeatedWrapperField(
      msg, 13, obj.debugRoiList.map(
          proto.apollo.perception.TrafficLightBox.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.TrafficLightDebug}
 */
proto.apollo.perception.TrafficLightDebug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.TrafficLightDebug;
  return proto.apollo.perception.TrafficLightDebug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.TrafficLightDebug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.TrafficLightDebug}
 */
proto.apollo.perception.TrafficLightDebug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.TrafficLightBox;
      reader.readMessage(value,proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader);
      msg.setCropbox(value);
      break;
    case 2:
      var value = new proto.apollo.perception.TrafficLightBox;
      reader.readMessage(value,proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader);
      msg.addBox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSignalNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValidPos(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTsDiffPos(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTsDiffSys(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProjectError(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceToStopLine(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCameraId(value);
      break;
    case 10:
      var value = new proto.apollo.perception.TrafficLightBox;
      reader.readMessage(value,proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader);
      msg.addCropRoi(value);
      break;
    case 11:
      var value = new proto.apollo.perception.TrafficLightBox;
      reader.readMessage(value,proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader);
      msg.addProjectedRoi(value);
      break;
    case 12:
      var value = new proto.apollo.perception.TrafficLightBox;
      reader.readMessage(value,proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader);
      msg.addRectifiedRoi(value);
      break;
    case 13:
      var value = new proto.apollo.perception.TrafficLightBox;
      reader.readMessage(value,proto.apollo.perception.TrafficLightBox.deserializeBinaryFromReader);
      msg.addDebugRoi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.TrafficLightDebug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.TrafficLightDebug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.TrafficLightDebug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLightDebug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCropbox();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter
    );
  }
  f = message.getBoxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCropRoiList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter
    );
  }
  f = message.getProjectedRoiList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter
    );
  }
  f = message.getRectifiedRoiList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter
    );
  }
  f = message.getDebugRoiList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.apollo.perception.TrafficLightBox.serializeBinaryToWriter
    );
  }
};


/**
 * optional TrafficLightBox cropbox = 1;
 * @return {?proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getCropbox = function() {
  return /** @type{?proto.apollo.perception.TrafficLightBox} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.TrafficLightBox, 1));
};


/**
 * @param {?proto.apollo.perception.TrafficLightBox|undefined} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
*/
proto.apollo.perception.TrafficLightDebug.prototype.setCropbox = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearCropbox = function() {
  return this.setCropbox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasCropbox = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TrafficLightBox box = 2;
 * @return {!Array<!proto.apollo.perception.TrafficLightBox>}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getBoxList = function() {
  return /** @type{!Array<!proto.apollo.perception.TrafficLightBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.TrafficLightBox, 2));
};


/**
 * @param {!Array<!proto.apollo.perception.TrafficLightBox>} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
*/
proto.apollo.perception.TrafficLightDebug.prototype.setBoxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.perception.TrafficLightBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightDebug.prototype.addBox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.perception.TrafficLightBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearBoxList = function() {
  return this.setBoxList([]);
};


/**
 * optional int32 signal_num = 3;
 * @return {number}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getSignalNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.setSignalNum = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearSignalNum = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasSignalNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 valid_pos = 4;
 * @return {number}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getValidPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.setValidPos = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearValidPos = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasValidPos = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ts_diff_pos = 5;
 * @return {number}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getTsDiffPos = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.setTsDiffPos = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearTsDiffPos = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasTsDiffPos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double ts_diff_sys = 6;
 * @return {number}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getTsDiffSys = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.setTsDiffSys = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearTsDiffSys = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasTsDiffSys = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 project_error = 7;
 * @return {number}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getProjectError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.setProjectError = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearProjectError = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasProjectError = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double distance_to_stop_line = 8;
 * @return {number}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getDistanceToStopLine = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.setDistanceToStopLine = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearDistanceToStopLine = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasDistanceToStopLine = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 camera_id = 9;
 * @return {number}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getCameraId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.setCameraId = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearCameraId = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDebug.prototype.hasCameraId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated TrafficLightBox crop_roi = 10;
 * @return {!Array<!proto.apollo.perception.TrafficLightBox>}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getCropRoiList = function() {
  return /** @type{!Array<!proto.apollo.perception.TrafficLightBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.TrafficLightBox, 10));
};


/**
 * @param {!Array<!proto.apollo.perception.TrafficLightBox>} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
*/
proto.apollo.perception.TrafficLightDebug.prototype.setCropRoiList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.perception.TrafficLightBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightDebug.prototype.addCropRoi = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.perception.TrafficLightBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearCropRoiList = function() {
  return this.setCropRoiList([]);
};


/**
 * repeated TrafficLightBox projected_roi = 11;
 * @return {!Array<!proto.apollo.perception.TrafficLightBox>}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getProjectedRoiList = function() {
  return /** @type{!Array<!proto.apollo.perception.TrafficLightBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.TrafficLightBox, 11));
};


/**
 * @param {!Array<!proto.apollo.perception.TrafficLightBox>} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
*/
proto.apollo.perception.TrafficLightDebug.prototype.setProjectedRoiList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.perception.TrafficLightBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightDebug.prototype.addProjectedRoi = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.perception.TrafficLightBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearProjectedRoiList = function() {
  return this.setProjectedRoiList([]);
};


/**
 * repeated TrafficLightBox rectified_roi = 12;
 * @return {!Array<!proto.apollo.perception.TrafficLightBox>}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getRectifiedRoiList = function() {
  return /** @type{!Array<!proto.apollo.perception.TrafficLightBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.TrafficLightBox, 12));
};


/**
 * @param {!Array<!proto.apollo.perception.TrafficLightBox>} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
*/
proto.apollo.perception.TrafficLightDebug.prototype.setRectifiedRoiList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.perception.TrafficLightBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightDebug.prototype.addRectifiedRoi = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.perception.TrafficLightBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearRectifiedRoiList = function() {
  return this.setRectifiedRoiList([]);
};


/**
 * repeated TrafficLightBox debug_roi = 13;
 * @return {!Array<!proto.apollo.perception.TrafficLightBox>}
 */
proto.apollo.perception.TrafficLightDebug.prototype.getDebugRoiList = function() {
  return /** @type{!Array<!proto.apollo.perception.TrafficLightBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.TrafficLightBox, 13));
};


/**
 * @param {!Array<!proto.apollo.perception.TrafficLightBox>} value
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
*/
proto.apollo.perception.TrafficLightDebug.prototype.setDebugRoiList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.apollo.perception.TrafficLightBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.TrafficLightBox}
 */
proto.apollo.perception.TrafficLightDebug.prototype.addDebugRoi = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.apollo.perception.TrafficLightBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.TrafficLightDebug} returns this
 */
proto.apollo.perception.TrafficLightDebug.prototype.clearDebugRoiList = function() {
  return this.setDebugRoiList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.TrafficLight.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.TrafficLight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.TrafficLight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLight.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    trackingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    blink: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    remainingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLight as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.TrafficLight.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.color;

  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.confidence;

  /** @type {?|undefined} */
  this.trackingTime;

  /** @type {?|undefined} */
  this.blink;

  /** @type {?|undefined} */
  this.remainingTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.TrafficLight.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.TrafficLight}
 */
proto.apollo.perception.TrafficLight.fromObject = function(obj) {
  var msg = new proto.apollo.perception.TrafficLight();
  obj.color != null && jspb.Message.setField(msg, 1, obj.color);
  obj.id != null && jspb.Message.setField(msg, 2, obj.id);
  obj.confidence != null && jspb.Message.setField(msg, 3, obj.confidence);
  obj.trackingTime != null && jspb.Message.setField(msg, 4, obj.trackingTime);
  obj.blink != null && jspb.Message.setField(msg, 5, obj.blink);
  obj.remainingTime != null && jspb.Message.setField(msg, 6, obj.remainingTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.TrafficLight}
 */
proto.apollo.perception.TrafficLight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.TrafficLight;
  return proto.apollo.perception.TrafficLight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.TrafficLight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.TrafficLight}
 */
proto.apollo.perception.TrafficLight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.TrafficLight.Color} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrackingTime(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlink(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRemainingTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.TrafficLight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.TrafficLight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.TrafficLight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.TrafficLight.Color} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.TrafficLight.Color = {
  UNKNOWN: 0,
  RED: 1,
  YELLOW: 2,
  GREEN: 3,
  BLACK: 4
};

/**
 * optional Color color = 1;
 * @return {!proto.apollo.perception.TrafficLight.Color}
 */
proto.apollo.perception.TrafficLight.prototype.getColor = function() {
  return /** @type {!proto.apollo.perception.TrafficLight.Color} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.TrafficLight.Color} value
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.setColor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.clearColor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLight.prototype.hasColor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.apollo.perception.TrafficLight.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLight.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double confidence = 3;
 * @return {number}
 */
proto.apollo.perception.TrafficLight.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLight.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double tracking_time = 4;
 * @return {number}
 */
proto.apollo.perception.TrafficLight.prototype.getTrackingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.setTrackingTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.clearTrackingTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLight.prototype.hasTrackingTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool blink = 5;
 * @return {boolean}
 */
proto.apollo.perception.TrafficLight.prototype.getBlink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.setBlink = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.clearBlink = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLight.prototype.hasBlink = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double remaining_time = 6;
 * @return {number}
 */
proto.apollo.perception.TrafficLight.prototype.getRemainingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.setRemainingTime = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLight} returns this
 */
proto.apollo.perception.TrafficLight.prototype.clearRemainingTime = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLight.prototype.hasRemainingTime = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.TrafficLightDetection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.TrafficLightDetection.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.TrafficLightDetection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.TrafficLightDetection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLightDetection.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    trafficLightList: jspb.Message.toObjectList(msg.getTrafficLightList(),
    proto.apollo.perception.TrafficLight.toObject, includeInstance),
    trafficLightDebug: (f = msg.getTrafficLightDebug()) && proto.apollo.perception.TrafficLightDebug.toObject(includeInstance, f),
    containLights: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    cameraId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightDetection as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.TrafficLightDetection.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.trafficLightList;

  /** @type {?|undefined} */
  this.trafficLightDebug;

  /** @type {?|undefined} */
  this.containLights;

  /** @type {?|undefined} */
  this.cameraId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.TrafficLightDetection.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.TrafficLightDetection}
 */
proto.apollo.perception.TrafficLightDetection.fromObject = function(obj) {
  var msg = new proto.apollo.perception.TrafficLightDetection();
  obj.header && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.trafficLightList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.trafficLightList.map(
          proto.apollo.perception.TrafficLight.fromObject));
  obj.trafficLightDebug && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.TrafficLightDebug.fromObject(obj.trafficLightDebug));
  obj.containLights != null && jspb.Message.setField(msg, 4, obj.containLights);
  obj.cameraId != null && jspb.Message.setField(msg, 5, obj.cameraId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.TrafficLightDetection}
 */
proto.apollo.perception.TrafficLightDetection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.TrafficLightDetection;
  return proto.apollo.perception.TrafficLightDetection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.TrafficLightDetection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.TrafficLightDetection}
 */
proto.apollo.perception.TrafficLightDetection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 1:
      var value = new proto.apollo.perception.TrafficLight;
      reader.readMessage(value,proto.apollo.perception.TrafficLight.deserializeBinaryFromReader);
      msg.addTrafficLight(value);
      break;
    case 3:
      var value = new proto.apollo.perception.TrafficLightDebug;
      reader.readMessage(value,proto.apollo.perception.TrafficLightDebug.deserializeBinaryFromReader);
      msg.setTrafficLightDebug(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContainLights(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.perception.TrafficLightDetection.CameraID} */ (reader.readEnum());
      msg.setCameraId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.TrafficLightDetection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.TrafficLightDetection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.TrafficLightDetection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.TrafficLightDetection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLightList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.TrafficLight.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLightDebug();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.TrafficLightDebug.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.TrafficLightDetection.CameraID} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.TrafficLightDetection.CameraID = {
  CAMERA_FRONT_LONG: 0,
  CAMERA_FRONT_NARROW: 1,
  CAMERA_FRONT_SHORT: 2,
  CAMERA_FRONT_WIDE: 3
};

/**
 * optional apollo.common.Header header = 2;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.perception.TrafficLightDetection.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 2));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
*/
proto.apollo.perception.TrafficLightDetection.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
 */
proto.apollo.perception.TrafficLightDetection.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDetection.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TrafficLight traffic_light = 1;
 * @return {!Array<!proto.apollo.perception.TrafficLight>}
 */
proto.apollo.perception.TrafficLightDetection.prototype.getTrafficLightList = function() {
  return /** @type{!Array<!proto.apollo.perception.TrafficLight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.TrafficLight, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.TrafficLight>} value
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
*/
proto.apollo.perception.TrafficLightDetection.prototype.setTrafficLightList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.TrafficLight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.TrafficLight}
 */
proto.apollo.perception.TrafficLightDetection.prototype.addTrafficLight = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.TrafficLight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
 */
proto.apollo.perception.TrafficLightDetection.prototype.clearTrafficLightList = function() {
  return this.setTrafficLightList([]);
};


/**
 * optional TrafficLightDebug traffic_light_debug = 3;
 * @return {?proto.apollo.perception.TrafficLightDebug}
 */
proto.apollo.perception.TrafficLightDetection.prototype.getTrafficLightDebug = function() {
  return /** @type{?proto.apollo.perception.TrafficLightDebug} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.TrafficLightDebug, 3));
};


/**
 * @param {?proto.apollo.perception.TrafficLightDebug|undefined} value
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
*/
proto.apollo.perception.TrafficLightDetection.prototype.setTrafficLightDebug = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
 */
proto.apollo.perception.TrafficLightDetection.prototype.clearTrafficLightDebug = function() {
  return this.setTrafficLightDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDetection.prototype.hasTrafficLightDebug = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool contain_lights = 4;
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDetection.prototype.getContainLights = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
 */
proto.apollo.perception.TrafficLightDetection.prototype.setContainLights = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
 */
proto.apollo.perception.TrafficLightDetection.prototype.clearContainLights = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDetection.prototype.hasContainLights = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CameraID camera_id = 5;
 * @return {!proto.apollo.perception.TrafficLightDetection.CameraID}
 */
proto.apollo.perception.TrafficLightDetection.prototype.getCameraId = function() {
  return /** @type {!proto.apollo.perception.TrafficLightDetection.CameraID} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.apollo.perception.TrafficLightDetection.CameraID} value
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
 */
proto.apollo.perception.TrafficLightDetection.prototype.setCameraId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.TrafficLightDetection} returns this
 */
proto.apollo.perception.TrafficLightDetection.prototype.clearCameraId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.TrafficLightDetection.prototype.hasCameraId = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.apollo.perception);
