// source: modules/bridge/proto/udp_bridge_remote_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.bridge.UDPBridgeReceiverRemoteInfo', null, global);
goog.exportSymbol('proto.apollo.bridge.UDPBridgeSenderRemoteInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.bridge.UDPBridgeSenderRemoteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.bridge.UDPBridgeSenderRemoteInfo.displayName = 'proto.apollo.bridge.UDPBridgeSenderRemoteInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.bridge.UDPBridgeReceiverRemoteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.displayName = 'proto.apollo.bridge.UDPBridgeReceiverRemoteInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.bridge.UDPBridgeSenderRemoteInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    remoteIp: jspb.Message.getFieldWithDefault(msg, 1, "127.0.0.1"),
    remotePort: jspb.Message.getFieldWithDefault(msg, 2, 8900),
    protoName: jspb.Message.getFieldWithDefault(msg, 3, "ProtoMsgName")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of UDPBridgeSenderRemoteInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.remoteIp;

  /** @type {?|undefined} */
  this.remotePort;

  /** @type {?|undefined} */
  this.protoName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.fromObject = function(obj) {
  var msg = new proto.apollo.bridge.UDPBridgeSenderRemoteInfo();
  obj.remoteIp != null && jspb.Message.setField(msg, 1, obj.remoteIp);
  obj.remotePort != null && jspb.Message.setField(msg, 2, obj.remotePort);
  obj.protoName != null && jspb.Message.setField(msg, 3, obj.protoName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.bridge.UDPBridgeSenderRemoteInfo;
  return proto.apollo.bridge.UDPBridgeSenderRemoteInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemotePort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtoName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.bridge.UDPBridgeSenderRemoteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string remote_ip = 1;
 * @return {string}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.getRemoteIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "127.0.0.1"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.setRemoteIp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.clearRemoteIp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.hasRemoteIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 remote_port = 2;
 * @return {number}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.getRemotePort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 8900));
};


/**
 * @param {number} value
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.setRemotePort = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.clearRemotePort = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.hasRemotePort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string proto_name = 3;
 * @return {string}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.getProtoName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "ProtoMsgName"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.setProtoName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.bridge.UDPBridgeSenderRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.clearProtoName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeSenderRemoteInfo.prototype.hasProtoName = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bindPort: jspb.Message.getFieldWithDefault(msg, 2, 8500),
    protoName: jspb.Message.getFieldWithDefault(msg, 3, "ProtoMsgName"),
    enableTimeout: jspb.Message.getBooleanFieldWithDefault(msg, 4, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of UDPBridgeReceiverRemoteInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topicName;

  /** @type {?|undefined} */
  this.bindPort;

  /** @type {?|undefined} */
  this.protoName;

  /** @type {?|undefined} */
  this.enableTimeout;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.fromObject = function(obj) {
  var msg = new proto.apollo.bridge.UDPBridgeReceiverRemoteInfo();
  obj.topicName != null && jspb.Message.setField(msg, 1, obj.topicName);
  obj.bindPort != null && jspb.Message.setField(msg, 2, obj.bindPort);
  obj.protoName != null && jspb.Message.setField(msg, 3, obj.protoName);
  obj.enableTimeout != null && jspb.Message.setField(msg, 4, obj.enableTimeout);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.bridge.UDPBridgeReceiverRemoteInfo;
  return proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopicName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBindPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtoName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string topic_name = 1;
 * @return {string}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.getTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.setTopicName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.clearTopicName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.hasTopicName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 bind_port = 2;
 * @return {number}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.getBindPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 8500));
};


/**
 * @param {number} value
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.setBindPort = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.clearBindPort = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.hasBindPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string proto_name = 3;
 * @return {string}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.getProtoName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "ProtoMsgName"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.setProtoName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.clearProtoName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.hasProtoName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool enable_timeout = 4;
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.getEnableTimeout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.setEnableTimeout = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.bridge.UDPBridgeReceiverRemoteInfo} returns this
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.clearEnableTimeout = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.bridge.UDPBridgeReceiverRemoteInfo.prototype.hasEnableTimeout = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.apollo.bridge);
