// source: modules/planning/proto/planner_open_space_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_planning_proto_math_fem_pos_deviation_smoother_config_pb = require('../../../modules/planning/proto/math/fem_pos_deviation_smoother_config_pb.js');
goog.object.extend(proto, modules_planning_proto_math_fem_pos_deviation_smoother_config_pb);
var modules_planning_proto_task_config_pb = require('../../../modules/planning/proto/task_config_pb.js');
goog.object.extend(proto, modules_planning_proto_task_config_pb);
goog.exportSymbol('proto.apollo.planning.DistanceApproachConfig', null, global);
goog.exportSymbol('proto.apollo.planning.DistanceApproachMode', null, global);
goog.exportSymbol('proto.apollo.planning.DualVariableWarmStartConfig', null, global);
goog.exportSymbol('proto.apollo.planning.DualWarmUpMode', null, global);
goog.exportSymbol('proto.apollo.planning.IpoptConfig', null, global);
goog.exportSymbol('proto.apollo.planning.IterativeAnchoringConfig', null, global);
goog.exportSymbol('proto.apollo.planning.OSQPConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PlannerOpenSpaceConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ROIConfig', null, global);
goog.exportSymbol('proto.apollo.planning.TrajectoryPartitionConfig', null, global);
goog.exportSymbol('proto.apollo.planning.WarmStartConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlannerOpenSpaceConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PlannerOpenSpaceConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlannerOpenSpaceConfig.displayName = 'proto.apollo.planning.PlannerOpenSpaceConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ROIConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ROIConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ROIConfig.displayName = 'proto.apollo.planning.ROIConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.WarmStartConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.WarmStartConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.WarmStartConfig.displayName = 'proto.apollo.planning.WarmStartConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DualVariableWarmStartConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DualVariableWarmStartConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DualVariableWarmStartConfig.displayName = 'proto.apollo.planning.DualVariableWarmStartConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DistanceApproachConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DistanceApproachConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DistanceApproachConfig.displayName = 'proto.apollo.planning.DistanceApproachConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.IpoptConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.IpoptConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.IpoptConfig.displayName = 'proto.apollo.planning.IpoptConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OSQPConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OSQPConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OSQPConfig.displayName = 'proto.apollo.planning.OSQPConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.IterativeAnchoringConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.IterativeAnchoringConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.IterativeAnchoringConfig.displayName = 'proto.apollo.planning.IterativeAnchoringConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrajectoryPartitionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.TrajectoryPartitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrajectoryPartitionConfig.displayName = 'proto.apollo.planning.TrajectoryPartitionConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlannerOpenSpaceConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlannerOpenSpaceConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlannerOpenSpaceConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    roiConfig: (f = msg.getRoiConfig()) && proto.apollo.planning.ROIConfig.toObject(includeInstance, f),
    warmStartConfig: (f = msg.getWarmStartConfig()) && proto.apollo.planning.WarmStartConfig.toObject(includeInstance, f),
    dualVariableWarmStartConfig: (f = msg.getDualVariableWarmStartConfig()) && proto.apollo.planning.DualVariableWarmStartConfig.toObject(includeInstance, f),
    distanceApproachConfig: (f = msg.getDistanceApproachConfig()) && proto.apollo.planning.DistanceApproachConfig.toObject(includeInstance, f),
    iterativeAnchoringSmootherConfig: (f = msg.getIterativeAnchoringSmootherConfig()) && proto.apollo.planning.IterativeAnchoringConfig.toObject(includeInstance, f),
    trajectoryPartitionConfig: (f = msg.getTrajectoryPartitionConfig()) && proto.apollo.planning.TrajectoryPartitionConfig.toObject(includeInstance, f),
    deltaT: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 1.0),
    isNearDestinationThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.001),
    enableCheckParallelTrajectory: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    enableLinearInterpolation: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    isNearDestinationThetaThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.05)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlannerOpenSpaceConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlannerOpenSpaceConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.roiConfig;

  /** @type {?|undefined} */
  this.warmStartConfig;

  /** @type {?|undefined} */
  this.dualVariableWarmStartConfig;

  /** @type {?|undefined} */
  this.distanceApproachConfig;

  /** @type {?|undefined} */
  this.iterativeAnchoringSmootherConfig;

  /** @type {?|undefined} */
  this.trajectoryPartitionConfig;

  /** @type {?|undefined} */
  this.deltaT;

  /** @type {?|undefined} */
  this.isNearDestinationThreshold;

  /** @type {?|undefined} */
  this.enableCheckParallelTrajectory;

  /** @type {?|undefined} */
  this.enableLinearInterpolation;

  /** @type {?|undefined} */
  this.isNearDestinationThetaThreshold;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlannerOpenSpaceConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlannerOpenSpaceConfig();
  obj.roiConfig && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.ROIConfig.fromObject(obj.roiConfig));
  obj.warmStartConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.WarmStartConfig.fromObject(obj.warmStartConfig));
  obj.dualVariableWarmStartConfig && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.DualVariableWarmStartConfig.fromObject(obj.dualVariableWarmStartConfig));
  obj.distanceApproachConfig && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.DistanceApproachConfig.fromObject(obj.distanceApproachConfig));
  obj.iterativeAnchoringSmootherConfig && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.IterativeAnchoringConfig.fromObject(obj.iterativeAnchoringSmootherConfig));
  obj.trajectoryPartitionConfig && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.TrajectoryPartitionConfig.fromObject(obj.trajectoryPartitionConfig));
  obj.deltaT != null && jspb.Message.setField(msg, 7, obj.deltaT);
  obj.isNearDestinationThreshold != null && jspb.Message.setField(msg, 8, obj.isNearDestinationThreshold);
  obj.enableCheckParallelTrajectory != null && jspb.Message.setField(msg, 9, obj.enableCheckParallelTrajectory);
  obj.enableLinearInterpolation != null && jspb.Message.setField(msg, 10, obj.enableLinearInterpolation);
  obj.isNearDestinationThetaThreshold != null && jspb.Message.setField(msg, 11, obj.isNearDestinationThetaThreshold);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlannerOpenSpaceConfig;
  return proto.apollo.planning.PlannerOpenSpaceConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlannerOpenSpaceConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.ROIConfig;
      reader.readMessage(value,proto.apollo.planning.ROIConfig.deserializeBinaryFromReader);
      msg.setRoiConfig(value);
      break;
    case 2:
      var value = new proto.apollo.planning.WarmStartConfig;
      reader.readMessage(value,proto.apollo.planning.WarmStartConfig.deserializeBinaryFromReader);
      msg.setWarmStartConfig(value);
      break;
    case 3:
      var value = new proto.apollo.planning.DualVariableWarmStartConfig;
      reader.readMessage(value,proto.apollo.planning.DualVariableWarmStartConfig.deserializeBinaryFromReader);
      msg.setDualVariableWarmStartConfig(value);
      break;
    case 4:
      var value = new proto.apollo.planning.DistanceApproachConfig;
      reader.readMessage(value,proto.apollo.planning.DistanceApproachConfig.deserializeBinaryFromReader);
      msg.setDistanceApproachConfig(value);
      break;
    case 5:
      var value = new proto.apollo.planning.IterativeAnchoringConfig;
      reader.readMessage(value,proto.apollo.planning.IterativeAnchoringConfig.deserializeBinaryFromReader);
      msg.setIterativeAnchoringSmootherConfig(value);
      break;
    case 6:
      var value = new proto.apollo.planning.TrajectoryPartitionConfig;
      reader.readMessage(value,proto.apollo.planning.TrajectoryPartitionConfig.deserializeBinaryFromReader);
      msg.setTrajectoryPartitionConfig(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDeltaT(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIsNearDestinationThreshold(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableCheckParallelTrajectory(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableLinearInterpolation(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIsNearDestinationThetaThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlannerOpenSpaceConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlannerOpenSpaceConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlannerOpenSpaceConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoiConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.ROIConfig.serializeBinaryToWriter
    );
  }
  f = message.getWarmStartConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.WarmStartConfig.serializeBinaryToWriter
    );
  }
  f = message.getDualVariableWarmStartConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.DualVariableWarmStartConfig.serializeBinaryToWriter
    );
  }
  f = message.getDistanceApproachConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.DistanceApproachConfig.serializeBinaryToWriter
    );
  }
  f = message.getIterativeAnchoringSmootherConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.IterativeAnchoringConfig.serializeBinaryToWriter
    );
  }
  f = message.getTrajectoryPartitionConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.TrajectoryPartitionConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional ROIConfig roi_config = 1;
 * @return {?proto.apollo.planning.ROIConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getRoiConfig = function() {
  return /** @type{?proto.apollo.planning.ROIConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ROIConfig, 1));
};


/**
 * @param {?proto.apollo.planning.ROIConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
*/
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setRoiConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearRoiConfig = function() {
  return this.setRoiConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasRoiConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WarmStartConfig warm_start_config = 2;
 * @return {?proto.apollo.planning.WarmStartConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getWarmStartConfig = function() {
  return /** @type{?proto.apollo.planning.WarmStartConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.WarmStartConfig, 2));
};


/**
 * @param {?proto.apollo.planning.WarmStartConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
*/
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setWarmStartConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearWarmStartConfig = function() {
  return this.setWarmStartConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasWarmStartConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
 * @return {?proto.apollo.planning.DualVariableWarmStartConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getDualVariableWarmStartConfig = function() {
  return /** @type{?proto.apollo.planning.DualVariableWarmStartConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DualVariableWarmStartConfig, 3));
};


/**
 * @param {?proto.apollo.planning.DualVariableWarmStartConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
*/
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setDualVariableWarmStartConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearDualVariableWarmStartConfig = function() {
  return this.setDualVariableWarmStartConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasDualVariableWarmStartConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DistanceApproachConfig distance_approach_config = 4;
 * @return {?proto.apollo.planning.DistanceApproachConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getDistanceApproachConfig = function() {
  return /** @type{?proto.apollo.planning.DistanceApproachConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DistanceApproachConfig, 4));
};


/**
 * @param {?proto.apollo.planning.DistanceApproachConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
*/
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setDistanceApproachConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearDistanceApproachConfig = function() {
  return this.setDistanceApproachConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasDistanceApproachConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
 * @return {?proto.apollo.planning.IterativeAnchoringConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getIterativeAnchoringSmootherConfig = function() {
  return /** @type{?proto.apollo.planning.IterativeAnchoringConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.IterativeAnchoringConfig, 5));
};


/**
 * @param {?proto.apollo.planning.IterativeAnchoringConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
*/
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setIterativeAnchoringSmootherConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearIterativeAnchoringSmootherConfig = function() {
  return this.setIterativeAnchoringSmootherConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasIterativeAnchoringSmootherConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TrajectoryPartitionConfig trajectory_partition_config = 6;
 * @return {?proto.apollo.planning.TrajectoryPartitionConfig}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getTrajectoryPartitionConfig = function() {
  return /** @type{?proto.apollo.planning.TrajectoryPartitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.TrajectoryPartitionConfig, 6));
};


/**
 * @param {?proto.apollo.planning.TrajectoryPartitionConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
*/
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setTrajectoryPartitionConfig = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearTrajectoryPartitionConfig = function() {
  return this.setTrajectoryPartitionConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasTrajectoryPartitionConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float delta_t = 7;
 * @return {number}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getDeltaT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setDeltaT = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearDeltaT = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasDeltaT = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double is_near_destination_threshold = 8;
 * @return {number}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getIsNearDestinationThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.001));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setIsNearDestinationThreshold = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearIsNearDestinationThreshold = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasIsNearDestinationThreshold = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool enable_check_parallel_trajectory = 9;
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getEnableCheckParallelTrajectory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setEnableCheckParallelTrajectory = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearEnableCheckParallelTrajectory = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasEnableCheckParallelTrajectory = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool enable_linear_interpolation = 10;
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getEnableLinearInterpolation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setEnableLinearInterpolation = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearEnableLinearInterpolation = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasEnableLinearInterpolation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double is_near_destination_theta_threshold = 11;
 * @return {number}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.getIsNearDestinationThetaThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.setIsNearDestinationThetaThreshold = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlannerOpenSpaceConfig} returns this
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.clearIsNearDestinationThetaThreshold = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerOpenSpaceConfig.prototype.hasIsNearDestinationThetaThreshold = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ROIConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ROIConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ROIConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ROIConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    roiLongitudinalRangeStart: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 10.0),
    roiLongitudinalRangeEnd: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 10.0),
    parkingStartRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 7.0),
    parkingInwards: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ROIConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ROIConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.roiLongitudinalRangeStart;

  /** @type {?|undefined} */
  this.roiLongitudinalRangeEnd;

  /** @type {?|undefined} */
  this.parkingStartRange;

  /** @type {?|undefined} */
  this.parkingInwards;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ROIConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ROIConfig}
 */
proto.apollo.planning.ROIConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ROIConfig();
  obj.roiLongitudinalRangeStart != null && jspb.Message.setField(msg, 1, obj.roiLongitudinalRangeStart);
  obj.roiLongitudinalRangeEnd != null && jspb.Message.setField(msg, 2, obj.roiLongitudinalRangeEnd);
  obj.parkingStartRange != null && jspb.Message.setField(msg, 3, obj.parkingStartRange);
  obj.parkingInwards != null && jspb.Message.setField(msg, 4, obj.parkingInwards);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ROIConfig}
 */
proto.apollo.planning.ROIConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ROIConfig;
  return proto.apollo.planning.ROIConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ROIConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ROIConfig}
 */
proto.apollo.planning.ROIConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoiLongitudinalRangeStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoiLongitudinalRangeEnd(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setParkingStartRange(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParkingInwards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ROIConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ROIConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ROIConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ROIConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional double roi_longitudinal_range_start = 1;
 * @return {number}
 */
proto.apollo.planning.ROIConfig.prototype.getRoiLongitudinalRangeStart = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.setRoiLongitudinalRangeStart = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.clearRoiLongitudinalRangeStart = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ROIConfig.prototype.hasRoiLongitudinalRangeStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double roi_longitudinal_range_end = 2;
 * @return {number}
 */
proto.apollo.planning.ROIConfig.prototype.getRoiLongitudinalRangeEnd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.setRoiLongitudinalRangeEnd = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.clearRoiLongitudinalRangeEnd = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ROIConfig.prototype.hasRoiLongitudinalRangeEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double parking_start_range = 3;
 * @return {number}
 */
proto.apollo.planning.ROIConfig.prototype.getParkingStartRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 7.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.setParkingStartRange = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.clearParkingStartRange = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ROIConfig.prototype.hasParkingStartRange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool parking_inwards = 4;
 * @return {boolean}
 */
proto.apollo.planning.ROIConfig.prototype.getParkingInwards = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.setParkingInwards = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ROIConfig} returns this
 */
proto.apollo.planning.ROIConfig.prototype.clearParkingInwards = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ROIConfig.prototype.hasParkingInwards = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.WarmStartConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.WarmStartConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.WarmStartConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.WarmStartConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    xyGridResolution: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.2),
    phiGridResolution: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.05),
    nextNodeNum: jspb.Message.getFieldWithDefault(msg, 3, 10),
    stepSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.5),
    trajForwardPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    trajBackPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    trajGearSwitchPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 10.0),
    trajSteerPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 100.0),
    trajSteerChangePenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 10.0),
    gridAStarXyResolution: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.1),
    nodeRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.5),
    sCurveConfig: (f = msg.getSCurveConfig()) && modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of WarmStartConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.WarmStartConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.xyGridResolution;

  /** @type {?|undefined} */
  this.phiGridResolution;

  /** @type {?|undefined} */
  this.nextNodeNum;

  /** @type {?|undefined} */
  this.stepSize;

  /** @type {?|undefined} */
  this.trajForwardPenalty;

  /** @type {?|undefined} */
  this.trajBackPenalty;

  /** @type {?|undefined} */
  this.trajGearSwitchPenalty;

  /** @type {?|undefined} */
  this.trajSteerPenalty;

  /** @type {?|undefined} */
  this.trajSteerChangePenalty;

  /** @type {?|undefined} */
  this.gridAStarXyResolution;

  /** @type {?|undefined} */
  this.nodeRadius;

  /** @type {?|undefined} */
  this.sCurveConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.WarmStartConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.WarmStartConfig}
 */
proto.apollo.planning.WarmStartConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.WarmStartConfig();
  obj.xyGridResolution != null && jspb.Message.setField(msg, 1, obj.xyGridResolution);
  obj.phiGridResolution != null && jspb.Message.setField(msg, 2, obj.phiGridResolution);
  obj.nextNodeNum != null && jspb.Message.setField(msg, 3, obj.nextNodeNum);
  obj.stepSize != null && jspb.Message.setField(msg, 4, obj.stepSize);
  obj.trajForwardPenalty != null && jspb.Message.setField(msg, 5, obj.trajForwardPenalty);
  obj.trajBackPenalty != null && jspb.Message.setField(msg, 6, obj.trajBackPenalty);
  obj.trajGearSwitchPenalty != null && jspb.Message.setField(msg, 7, obj.trajGearSwitchPenalty);
  obj.trajSteerPenalty != null && jspb.Message.setField(msg, 8, obj.trajSteerPenalty);
  obj.trajSteerChangePenalty != null && jspb.Message.setField(msg, 9, obj.trajSteerChangePenalty);
  obj.gridAStarXyResolution != null && jspb.Message.setField(msg, 15, obj.gridAStarXyResolution);
  obj.nodeRadius != null && jspb.Message.setField(msg, 16, obj.nodeRadius);
  obj.sCurveConfig && jspb.Message.setWrapperField(
      msg, 17, modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.fromObject(obj.sCurveConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.WarmStartConfig}
 */
proto.apollo.planning.WarmStartConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.WarmStartConfig;
  return proto.apollo.planning.WarmStartConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.WarmStartConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.WarmStartConfig}
 */
proto.apollo.planning.WarmStartConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXyGridResolution(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPhiGridResolution(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextNodeNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStepSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajForwardPenalty(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajBackPenalty(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajGearSwitchPenalty(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajSteerPenalty(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajSteerChangePenalty(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGridAStarXyResolution(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNodeRadius(value);
      break;
    case 17:
      var value = new modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.deserializeBinaryFromReader);
      msg.setSCurveConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.WarmStartConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.WarmStartConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.WarmStartConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.WarmStartConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getSCurveConfig();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional double xy_grid_resolution = 1;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getXyGridResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setXyGridResolution = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearXyGridResolution = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasXyGridResolution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double phi_grid_resolution = 2;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getPhiGridResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setPhiGridResolution = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearPhiGridResolution = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasPhiGridResolution = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 next_node_num = 3;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getNextNodeNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setNextNodeNum = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearNextNodeNum = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasNextNodeNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double step_size = 4;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getStepSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setStepSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearStepSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasStepSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double traj_forward_penalty = 5;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getTrajForwardPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setTrajForwardPenalty = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearTrajForwardPenalty = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasTrajForwardPenalty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double traj_back_penalty = 6;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getTrajBackPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setTrajBackPenalty = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearTrajBackPenalty = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasTrajBackPenalty = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double traj_gear_switch_penalty = 7;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getTrajGearSwitchPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setTrajGearSwitchPenalty = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearTrajGearSwitchPenalty = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasTrajGearSwitchPenalty = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double traj_steer_penalty = 8;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getTrajSteerPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setTrajSteerPenalty = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearTrajSteerPenalty = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasTrajSteerPenalty = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double traj_steer_change_penalty = 9;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getTrajSteerChangePenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setTrajSteerChangePenalty = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearTrajSteerChangePenalty = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasTrajSteerChangePenalty = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double grid_a_star_xy_resolution = 15;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getGridAStarXyResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setGridAStarXyResolution = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearGridAStarXyResolution = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasGridAStarXyResolution = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double node_radius = 16;
 * @return {number}
 */
proto.apollo.planning.WarmStartConfig.prototype.getNodeRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.setNodeRadius = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearNodeRadius = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasNodeRadius = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
 * @return {?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig}
 */
proto.apollo.planning.WarmStartConfig.prototype.getSCurveConfig = function() {
  return /** @type{?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig, 17));
};


/**
 * @param {?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
*/
proto.apollo.planning.WarmStartConfig.prototype.setSCurveConfig = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.WarmStartConfig} returns this
 */
proto.apollo.planning.WarmStartConfig.prototype.clearSCurveConfig = function() {
  return this.setSCurveConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.WarmStartConfig.prototype.hasSCurveConfig = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DualVariableWarmStartConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DualVariableWarmStartConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DualVariableWarmStartConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    weightD: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    ipoptConfig: (f = msg.getIpoptConfig()) && proto.apollo.planning.IpoptConfig.toObject(includeInstance, f),
    qpFormat: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    minSafetyDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    debugOsqp: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    beta: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 1.0),
    osqpConfig: (f = msg.getOsqpConfig()) && proto.apollo.planning.OSQPConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DualVariableWarmStartConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DualVariableWarmStartConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.weightD;

  /** @type {?|undefined} */
  this.ipoptConfig;

  /** @type {?|undefined} */
  this.qpFormat;

  /** @type {?|undefined} */
  this.minSafetyDistance;

  /** @type {?|undefined} */
  this.debugOsqp;

  /** @type {?|undefined} */
  this.beta;

  /** @type {?|undefined} */
  this.osqpConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DualVariableWarmStartConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig}
 */
proto.apollo.planning.DualVariableWarmStartConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DualVariableWarmStartConfig();
  obj.weightD != null && jspb.Message.setField(msg, 1, obj.weightD);
  obj.ipoptConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.IpoptConfig.fromObject(obj.ipoptConfig));
  obj.qpFormat != null && jspb.Message.setField(msg, 3, obj.qpFormat);
  obj.minSafetyDistance != null && jspb.Message.setField(msg, 4, obj.minSafetyDistance);
  obj.debugOsqp != null && jspb.Message.setField(msg, 5, obj.debugOsqp);
  obj.beta != null && jspb.Message.setField(msg, 6, obj.beta);
  obj.osqpConfig && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.OSQPConfig.fromObject(obj.osqpConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig}
 */
proto.apollo.planning.DualVariableWarmStartConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DualVariableWarmStartConfig;
  return proto.apollo.planning.DualVariableWarmStartConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DualVariableWarmStartConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig}
 */
proto.apollo.planning.DualVariableWarmStartConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightD(value);
      break;
    case 2:
      var value = new proto.apollo.planning.IpoptConfig;
      reader.readMessage(value,proto.apollo.planning.IpoptConfig.deserializeBinaryFromReader);
      msg.setIpoptConfig(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.planning.DualWarmUpMode} */ (reader.readEnum());
      msg.setQpFormat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinSafetyDistance(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugOsqp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeta(value);
      break;
    case 7:
      var value = new proto.apollo.planning.OSQPConfig;
      reader.readMessage(value,proto.apollo.planning.OSQPConfig.deserializeBinaryFromReader);
      msg.setOsqpConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DualVariableWarmStartConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DualVariableWarmStartConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DualVariableWarmStartConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getIpoptConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.IpoptConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.planning.DualWarmUpMode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getOsqpConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.OSQPConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional double weight_d = 1;
 * @return {number}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.getWeightD = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.setWeightD = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.clearWeightD = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.hasWeightD = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IpoptConfig ipopt_config = 2;
 * @return {?proto.apollo.planning.IpoptConfig}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.getIpoptConfig = function() {
  return /** @type{?proto.apollo.planning.IpoptConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.IpoptConfig, 2));
};


/**
 * @param {?proto.apollo.planning.IpoptConfig|undefined} value
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
*/
proto.apollo.planning.DualVariableWarmStartConfig.prototype.setIpoptConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.clearIpoptConfig = function() {
  return this.setIpoptConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.hasIpoptConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DualWarmUpMode qp_format = 3;
 * @return {!proto.apollo.planning.DualWarmUpMode}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.getQpFormat = function() {
  return /** @type {!proto.apollo.planning.DualWarmUpMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.planning.DualWarmUpMode} value
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.setQpFormat = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.clearQpFormat = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.hasQpFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double min_safety_distance = 4;
 * @return {number}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.getMinSafetyDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.setMinSafetyDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.clearMinSafetyDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.hasMinSafetyDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool debug_osqp = 5;
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.getDebugOsqp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.setDebugOsqp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.clearDebugOsqp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.hasDebugOsqp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double beta = 6;
 * @return {number}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.getBeta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.setBeta = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.clearBeta = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OSQPConfig osqp_config = 7;
 * @return {?proto.apollo.planning.OSQPConfig}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.getOsqpConfig = function() {
  return /** @type{?proto.apollo.planning.OSQPConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OSQPConfig, 7));
};


/**
 * @param {?proto.apollo.planning.OSQPConfig|undefined} value
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
*/
proto.apollo.planning.DualVariableWarmStartConfig.prototype.setOsqpConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DualVariableWarmStartConfig} returns this
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.clearOsqpConfig = function() {
  return this.setOsqpConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableWarmStartConfig.prototype.hasOsqpConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DistanceApproachConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DistanceApproachConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DistanceApproachConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    weightSteer: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    weightA: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    weightSteerRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    weightARate: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    weightX: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    weightY: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    weightPhi: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    weightV: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    weightSteerStitching: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    weightAStitching: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    weightFirstOrderTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    weightSecondOrderTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    minSafetyDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    maxSpeedForward: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 3.0),
    maxSpeedReverse: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 2.0),
    maxAccelerationForward: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 2.0),
    maxAccelerationReverse: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 2.0),
    minTimeSampleScaling: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.1),
    maxTimeSampleScaling: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 10.0),
    useFixTime: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    ipoptConfig: (f = msg.getIpoptConfig()) && proto.apollo.planning.IpoptConfig.toObject(includeInstance, f),
    enableConstraintCheck: (f = jspb.Message.getBooleanField(msg, 22)) == null ? undefined : f,
    enableHandDerivative: (f = jspb.Message.getBooleanField(msg, 23)) == null ? undefined : f,
    enableDerivativeCheck: (f = jspb.Message.getBooleanField(msg, 24)) == null ? undefined : f,
    enableInitialFinalCheck: jspb.Message.getBooleanFieldWithDefault(msg, 25, false),
    distanceApproachMode: (f = jspb.Message.getField(msg, 26)) == null ? undefined : f,
    enableJacobianAd: jspb.Message.getBooleanFieldWithDefault(msg, 27, false),
    enableCheckInitialState: jspb.Message.getBooleanFieldWithDefault(msg, 28, false),
    weightEndState: jspb.Message.getFloatingPointFieldWithDefault(msg, 29, 0.0),
    weightSlack: jspb.Message.getFloatingPointFieldWithDefault(msg, 30, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DistanceApproachConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DistanceApproachConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.weightSteer;

  /** @type {?|undefined} */
  this.weightA;

  /** @type {?|undefined} */
  this.weightSteerRate;

  /** @type {?|undefined} */
  this.weightARate;

  /** @type {?|undefined} */
  this.weightX;

  /** @type {?|undefined} */
  this.weightY;

  /** @type {?|undefined} */
  this.weightPhi;

  /** @type {?|undefined} */
  this.weightV;

  /** @type {?|undefined} */
  this.weightSteerStitching;

  /** @type {?|undefined} */
  this.weightAStitching;

  /** @type {?|undefined} */
  this.weightFirstOrderTime;

  /** @type {?|undefined} */
  this.weightSecondOrderTime;

  /** @type {?|undefined} */
  this.minSafetyDistance;

  /** @type {?|undefined} */
  this.maxSpeedForward;

  /** @type {?|undefined} */
  this.maxSpeedReverse;

  /** @type {?|undefined} */
  this.maxAccelerationForward;

  /** @type {?|undefined} */
  this.maxAccelerationReverse;

  /** @type {?|undefined} */
  this.minTimeSampleScaling;

  /** @type {?|undefined} */
  this.maxTimeSampleScaling;

  /** @type {?|undefined} */
  this.useFixTime;

  /** @type {?|undefined} */
  this.ipoptConfig;

  /** @type {?|undefined} */
  this.enableConstraintCheck;

  /** @type {?|undefined} */
  this.enableHandDerivative;

  /** @type {?|undefined} */
  this.enableDerivativeCheck;

  /** @type {?|undefined} */
  this.enableInitialFinalCheck;

  /** @type {?|undefined} */
  this.distanceApproachMode;

  /** @type {?|undefined} */
  this.enableJacobianAd;

  /** @type {?|undefined} */
  this.enableCheckInitialState;

  /** @type {?|undefined} */
  this.weightEndState;

  /** @type {?|undefined} */
  this.weightSlack;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DistanceApproachConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DistanceApproachConfig}
 */
proto.apollo.planning.DistanceApproachConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DistanceApproachConfig();
  obj.weightSteer != null && jspb.Message.setField(msg, 1, obj.weightSteer);
  obj.weightA != null && jspb.Message.setField(msg, 2, obj.weightA);
  obj.weightSteerRate != null && jspb.Message.setField(msg, 3, obj.weightSteerRate);
  obj.weightARate != null && jspb.Message.setField(msg, 4, obj.weightARate);
  obj.weightX != null && jspb.Message.setField(msg, 5, obj.weightX);
  obj.weightY != null && jspb.Message.setField(msg, 6, obj.weightY);
  obj.weightPhi != null && jspb.Message.setField(msg, 7, obj.weightPhi);
  obj.weightV != null && jspb.Message.setField(msg, 8, obj.weightV);
  obj.weightSteerStitching != null && jspb.Message.setField(msg, 9, obj.weightSteerStitching);
  obj.weightAStitching != null && jspb.Message.setField(msg, 10, obj.weightAStitching);
  obj.weightFirstOrderTime != null && jspb.Message.setField(msg, 11, obj.weightFirstOrderTime);
  obj.weightSecondOrderTime != null && jspb.Message.setField(msg, 12, obj.weightSecondOrderTime);
  obj.minSafetyDistance != null && jspb.Message.setField(msg, 13, obj.minSafetyDistance);
  obj.maxSpeedForward != null && jspb.Message.setField(msg, 14, obj.maxSpeedForward);
  obj.maxSpeedReverse != null && jspb.Message.setField(msg, 15, obj.maxSpeedReverse);
  obj.maxAccelerationForward != null && jspb.Message.setField(msg, 16, obj.maxAccelerationForward);
  obj.maxAccelerationReverse != null && jspb.Message.setField(msg, 17, obj.maxAccelerationReverse);
  obj.minTimeSampleScaling != null && jspb.Message.setField(msg, 18, obj.minTimeSampleScaling);
  obj.maxTimeSampleScaling != null && jspb.Message.setField(msg, 19, obj.maxTimeSampleScaling);
  obj.useFixTime != null && jspb.Message.setField(msg, 20, obj.useFixTime);
  obj.ipoptConfig && jspb.Message.setWrapperField(
      msg, 21, proto.apollo.planning.IpoptConfig.fromObject(obj.ipoptConfig));
  obj.enableConstraintCheck != null && jspb.Message.setField(msg, 22, obj.enableConstraintCheck);
  obj.enableHandDerivative != null && jspb.Message.setField(msg, 23, obj.enableHandDerivative);
  obj.enableDerivativeCheck != null && jspb.Message.setField(msg, 24, obj.enableDerivativeCheck);
  obj.enableInitialFinalCheck != null && jspb.Message.setField(msg, 25, obj.enableInitialFinalCheck);
  obj.distanceApproachMode != null && jspb.Message.setField(msg, 26, obj.distanceApproachMode);
  obj.enableJacobianAd != null && jspb.Message.setField(msg, 27, obj.enableJacobianAd);
  obj.enableCheckInitialState != null && jspb.Message.setField(msg, 28, obj.enableCheckInitialState);
  obj.weightEndState != null && jspb.Message.setField(msg, 29, obj.weightEndState);
  obj.weightSlack != null && jspb.Message.setField(msg, 30, obj.weightSlack);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DistanceApproachConfig}
 */
proto.apollo.planning.DistanceApproachConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DistanceApproachConfig;
  return proto.apollo.planning.DistanceApproachConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DistanceApproachConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DistanceApproachConfig}
 */
proto.apollo.planning.DistanceApproachConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSteer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightA(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSteerRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightARate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightPhi(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightV(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSteerStitching(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightAStitching(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightFirstOrderTime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSecondOrderTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinSafetyDistance(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSpeedForward(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSpeedReverse(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAccelerationForward(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAccelerationReverse(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinTimeSampleScaling(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxTimeSampleScaling(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseFixTime(value);
      break;
    case 21:
      var value = new proto.apollo.planning.IpoptConfig;
      reader.readMessage(value,proto.apollo.planning.IpoptConfig.deserializeBinaryFromReader);
      msg.setIpoptConfig(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableConstraintCheck(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableHandDerivative(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableDerivativeCheck(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableInitialFinalCheck(value);
      break;
    case 26:
      var value = /** @type {!proto.apollo.planning.DistanceApproachMode} */ (reader.readEnum());
      msg.setDistanceApproachMode(value);
      break;
    case 27:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableJacobianAd(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableCheckInitialState(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightEndState(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSlack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DistanceApproachConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DistanceApproachConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DistanceApproachConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getIpoptConfig();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.apollo.planning.IpoptConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
  f = /** @type {!proto.apollo.planning.DistanceApproachMode} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeEnum(
      26,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeBool(
      27,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeBool(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeDouble(
      30,
      f
    );
  }
};


/**
 * optional double weight_steer = 1;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightSteer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightSteer = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightSteer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightSteer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double weight_a = 2;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightA = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightA = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightA = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double weight_steer_rate = 3;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightSteerRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightSteerRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightSteerRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightSteerRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double weight_a_rate = 4;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightARate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightARate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightARate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightARate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double weight_x = 5;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightX = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightX = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double weight_y = 6;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightY = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightY = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double weight_phi = 7;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightPhi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightPhi = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightPhi = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightPhi = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double weight_v = 8;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightV = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightV = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightV = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double weight_steer_stitching = 9;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightSteerStitching = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightSteerStitching = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightSteerStitching = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightSteerStitching = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double weight_a_stitching = 10;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightAStitching = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightAStitching = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightAStitching = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightAStitching = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double weight_first_order_time = 11;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightFirstOrderTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightFirstOrderTime = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightFirstOrderTime = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightFirstOrderTime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double weight_second_order_time = 12;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightSecondOrderTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightSecondOrderTime = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightSecondOrderTime = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightSecondOrderTime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double min_safety_distance = 13;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getMinSafetyDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setMinSafetyDistance = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearMinSafetyDistance = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasMinSafetyDistance = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double max_speed_forward = 14;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getMaxSpeedForward = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setMaxSpeedForward = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearMaxSpeedForward = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasMaxSpeedForward = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double max_speed_reverse = 15;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getMaxSpeedReverse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setMaxSpeedReverse = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearMaxSpeedReverse = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasMaxSpeedReverse = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double max_acceleration_forward = 16;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getMaxAccelerationForward = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setMaxAccelerationForward = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearMaxAccelerationForward = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasMaxAccelerationForward = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double max_acceleration_reverse = 17;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getMaxAccelerationReverse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setMaxAccelerationReverse = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearMaxAccelerationReverse = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasMaxAccelerationReverse = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double min_time_sample_scaling = 18;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getMinTimeSampleScaling = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setMinTimeSampleScaling = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearMinTimeSampleScaling = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasMinTimeSampleScaling = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double max_time_sample_scaling = 19;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getMaxTimeSampleScaling = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setMaxTimeSampleScaling = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearMaxTimeSampleScaling = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasMaxTimeSampleScaling = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool use_fix_time = 20;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getUseFixTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setUseFixTime = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearUseFixTime = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasUseFixTime = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional IpoptConfig ipopt_config = 21;
 * @return {?proto.apollo.planning.IpoptConfig}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getIpoptConfig = function() {
  return /** @type{?proto.apollo.planning.IpoptConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.IpoptConfig, 21));
};


/**
 * @param {?proto.apollo.planning.IpoptConfig|undefined} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
*/
proto.apollo.planning.DistanceApproachConfig.prototype.setIpoptConfig = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearIpoptConfig = function() {
  return this.setIpoptConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasIpoptConfig = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool enable_constraint_check = 22;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getEnableConstraintCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setEnableConstraintCheck = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearEnableConstraintCheck = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasEnableConstraintCheck = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool enable_hand_derivative = 23;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getEnableHandDerivative = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setEnableHandDerivative = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearEnableHandDerivative = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasEnableHandDerivative = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bool enable_derivative_check = 24;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getEnableDerivativeCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setEnableDerivativeCheck = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearEnableDerivativeCheck = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasEnableDerivativeCheck = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional bool enable_initial_final_check = 25;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getEnableInitialFinalCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setEnableInitialFinalCheck = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearEnableInitialFinalCheck = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasEnableInitialFinalCheck = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional DistanceApproachMode distance_approach_mode = 26;
 * @return {!proto.apollo.planning.DistanceApproachMode}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getDistanceApproachMode = function() {
  return /** @type {!proto.apollo.planning.DistanceApproachMode} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {!proto.apollo.planning.DistanceApproachMode} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setDistanceApproachMode = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearDistanceApproachMode = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasDistanceApproachMode = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional bool enable_jacobian_ad = 27;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getEnableJacobianAd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 27, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setEnableJacobianAd = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearEnableJacobianAd = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasEnableJacobianAd = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional bool enable_check_initial_state = 28;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getEnableCheckInitialState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 28, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setEnableCheckInitialState = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearEnableCheckInitialState = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasEnableCheckInitialState = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional double weight_end_state = 29;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightEndState = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightEndState = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightEndState = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightEndState = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional double weight_slack = 30;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.getWeightSlack = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.setWeightSlack = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachConfig} returns this
 */
proto.apollo.planning.DistanceApproachConfig.prototype.clearWeightSlack = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachConfig.prototype.hasWeightSlack = function() {
  return jspb.Message.getField(this, 30) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.IpoptConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.IpoptConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.IpoptConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.IpoptConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipoptPrintLevel: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    mumpsMemPercent: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    mumpsPivtol: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    ipoptMaxIter: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    ipoptTol: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    ipoptAcceptableConstrViolTol: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    ipoptMinHessianPerturbation: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    ipoptJacobianRegularizationValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    ipoptPrintTimingStatistics: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    ipoptAlphaForY: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    ipoptRecalcY: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    ipoptMuInit: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of IpoptConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.IpoptConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ipoptPrintLevel;

  /** @type {?|undefined} */
  this.mumpsMemPercent;

  /** @type {?|undefined} */
  this.mumpsPivtol;

  /** @type {?|undefined} */
  this.ipoptMaxIter;

  /** @type {?|undefined} */
  this.ipoptTol;

  /** @type {?|undefined} */
  this.ipoptAcceptableConstrViolTol;

  /** @type {?|undefined} */
  this.ipoptMinHessianPerturbation;

  /** @type {?|undefined} */
  this.ipoptJacobianRegularizationValue;

  /** @type {?|undefined} */
  this.ipoptPrintTimingStatistics;

  /** @type {?|undefined} */
  this.ipoptAlphaForY;

  /** @type {?|undefined} */
  this.ipoptRecalcY;

  /** @type {?|undefined} */
  this.ipoptMuInit;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.IpoptConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.IpoptConfig}
 */
proto.apollo.planning.IpoptConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.IpoptConfig();
  obj.ipoptPrintLevel != null && jspb.Message.setField(msg, 1, obj.ipoptPrintLevel);
  obj.mumpsMemPercent != null && jspb.Message.setField(msg, 2, obj.mumpsMemPercent);
  obj.mumpsPivtol != null && jspb.Message.setField(msg, 3, obj.mumpsPivtol);
  obj.ipoptMaxIter != null && jspb.Message.setField(msg, 4, obj.ipoptMaxIter);
  obj.ipoptTol != null && jspb.Message.setField(msg, 5, obj.ipoptTol);
  obj.ipoptAcceptableConstrViolTol != null && jspb.Message.setField(msg, 6, obj.ipoptAcceptableConstrViolTol);
  obj.ipoptMinHessianPerturbation != null && jspb.Message.setField(msg, 7, obj.ipoptMinHessianPerturbation);
  obj.ipoptJacobianRegularizationValue != null && jspb.Message.setField(msg, 8, obj.ipoptJacobianRegularizationValue);
  obj.ipoptPrintTimingStatistics != null && jspb.Message.setField(msg, 9, obj.ipoptPrintTimingStatistics);
  obj.ipoptAlphaForY != null && jspb.Message.setField(msg, 10, obj.ipoptAlphaForY);
  obj.ipoptRecalcY != null && jspb.Message.setField(msg, 11, obj.ipoptRecalcY);
  obj.ipoptMuInit != null && jspb.Message.setField(msg, 12, obj.ipoptMuInit);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.IpoptConfig}
 */
proto.apollo.planning.IpoptConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.IpoptConfig;
  return proto.apollo.planning.IpoptConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.IpoptConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.IpoptConfig}
 */
proto.apollo.planning.IpoptConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIpoptPrintLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMumpsMemPercent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMumpsPivtol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIpoptMaxIter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptTol(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptAcceptableConstrViolTol(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptMinHessianPerturbation(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptJacobianRegularizationValue(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpoptPrintTimingStatistics(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpoptAlphaForY(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpoptRecalcY(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptMuInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.IpoptConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.IpoptConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.IpoptConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.IpoptConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
};


/**
 * optional int32 ipopt_print_level = 1;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptPrintLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptPrintLevel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptPrintLevel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptPrintLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 mumps_mem_percent = 2;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getMumpsMemPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setMumpsMemPercent = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearMumpsMemPercent = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasMumpsMemPercent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double mumps_pivtol = 3;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getMumpsPivtol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setMumpsPivtol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearMumpsPivtol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasMumpsPivtol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 ipopt_max_iter = 4;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptMaxIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptMaxIter = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptMaxIter = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptMaxIter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ipopt_tol = 5;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptTol = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptTol = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptTol = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double ipopt_acceptable_constr_viol_tol = 6;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptAcceptableConstrViolTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptAcceptableConstrViolTol = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptAcceptableConstrViolTol = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptAcceptableConstrViolTol = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double ipopt_min_hessian_perturbation = 7;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptMinHessianPerturbation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptMinHessianPerturbation = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptMinHessianPerturbation = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptMinHessianPerturbation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double ipopt_jacobian_regularization_value = 8;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptJacobianRegularizationValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptJacobianRegularizationValue = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptJacobianRegularizationValue = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptJacobianRegularizationValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string ipopt_print_timing_statistics = 9;
 * @return {string}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptPrintTimingStatistics = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptPrintTimingStatistics = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptPrintTimingStatistics = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptPrintTimingStatistics = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string ipopt_alpha_for_y = 10;
 * @return {string}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptAlphaForY = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptAlphaForY = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptAlphaForY = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptAlphaForY = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string ipopt_recalc_y = 11;
 * @return {string}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptRecalcY = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptRecalcY = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptRecalcY = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptRecalcY = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double ipopt_mu_init = 12;
 * @return {number}
 */
proto.apollo.planning.IpoptConfig.prototype.getIpoptMuInit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.setIpoptMuInit = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptConfig} returns this
 */
proto.apollo.planning.IpoptConfig.prototype.clearIpoptMuInit = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptConfig.prototype.hasIpoptMuInit = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OSQPConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OSQPConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OSQPConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OSQPConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    alpha: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    epsAbs: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.001),
    epsRel: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.001),
    maxIter: jspb.Message.getFieldWithDefault(msg, 4, 10000),
    polish: jspb.Message.getBooleanFieldWithDefault(msg, 5, true),
    osqpDebugLog: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OSQPConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OSQPConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.alpha;

  /** @type {?|undefined} */
  this.epsAbs;

  /** @type {?|undefined} */
  this.epsRel;

  /** @type {?|undefined} */
  this.maxIter;

  /** @type {?|undefined} */
  this.polish;

  /** @type {?|undefined} */
  this.osqpDebugLog;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OSQPConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OSQPConfig}
 */
proto.apollo.planning.OSQPConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OSQPConfig();
  obj.alpha != null && jspb.Message.setField(msg, 1, obj.alpha);
  obj.epsAbs != null && jspb.Message.setField(msg, 2, obj.epsAbs);
  obj.epsRel != null && jspb.Message.setField(msg, 3, obj.epsRel);
  obj.maxIter != null && jspb.Message.setField(msg, 4, obj.maxIter);
  obj.polish != null && jspb.Message.setField(msg, 5, obj.polish);
  obj.osqpDebugLog != null && jspb.Message.setField(msg, 6, obj.osqpDebugLog);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OSQPConfig}
 */
proto.apollo.planning.OSQPConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OSQPConfig;
  return proto.apollo.planning.OSQPConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OSQPConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OSQPConfig}
 */
proto.apollo.planning.OSQPConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAlpha(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEpsAbs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEpsRel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxIter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPolish(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOsqpDebugLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OSQPConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OSQPConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OSQPConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OSQPConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional double alpha = 1;
 * @return {number}
 */
proto.apollo.planning.OSQPConfig.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.setAlpha = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.clearAlpha = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double eps_abs = 2;
 * @return {number}
 */
proto.apollo.planning.OSQPConfig.prototype.getEpsAbs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.001));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.setEpsAbs = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.clearEpsAbs = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.hasEpsAbs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double eps_rel = 3;
 * @return {number}
 */
proto.apollo.planning.OSQPConfig.prototype.getEpsRel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.001));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.setEpsRel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.clearEpsRel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.hasEpsRel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 max_iter = 4;
 * @return {number}
 */
proto.apollo.planning.OSQPConfig.prototype.getMaxIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 10000));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.setMaxIter = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.clearMaxIter = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.hasMaxIter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool polish = 5;
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.getPolish = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.setPolish = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.clearPolish = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.hasPolish = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool osqp_debug_log = 6;
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.getOsqpDebugLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.setOsqpDebugLog = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OSQPConfig} returns this
 */
proto.apollo.planning.OSQPConfig.prototype.clearOsqpDebugLog = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OSQPConfig.prototype.hasOsqpDebugLog = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.IterativeAnchoringConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.IterativeAnchoringConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.IterativeAnchoringConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    interpolatedDeltaS: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.1),
    reanchoringTrailsNum: jspb.Message.getFieldWithDefault(msg, 2, 50),
    reanchoringPosStddev: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.25),
    reanchoringLengthStddev: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0),
    estimateBound: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    defaultBound: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 2.0),
    vehicleShortestDimension: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 1.04),
    femPosDeviationSmootherConfig: (f = msg.getFemPosDeviationSmootherConfig()) && modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.toObject(includeInstance, f),
    collisionDecreaseRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.9),
    maxForwardV: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 2.0),
    maxReverseV: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 2.0),
    maxForwardAcc: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 3.0),
    maxReverseAcc: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 2.0),
    maxAccJerk: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 4.0),
    deltaT: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.2),
    sCurveConfig: (f = msg.getSCurveConfig()) && modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of IterativeAnchoringConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.IterativeAnchoringConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.interpolatedDeltaS;

  /** @type {?|undefined} */
  this.reanchoringTrailsNum;

  /** @type {?|undefined} */
  this.reanchoringPosStddev;

  /** @type {?|undefined} */
  this.reanchoringLengthStddev;

  /** @type {?|undefined} */
  this.estimateBound;

  /** @type {?|undefined} */
  this.defaultBound;

  /** @type {?|undefined} */
  this.vehicleShortestDimension;

  /** @type {?|undefined} */
  this.femPosDeviationSmootherConfig;

  /** @type {?|undefined} */
  this.collisionDecreaseRatio;

  /** @type {?|undefined} */
  this.maxForwardV;

  /** @type {?|undefined} */
  this.maxReverseV;

  /** @type {?|undefined} */
  this.maxForwardAcc;

  /** @type {?|undefined} */
  this.maxReverseAcc;

  /** @type {?|undefined} */
  this.maxAccJerk;

  /** @type {?|undefined} */
  this.deltaT;

  /** @type {?|undefined} */
  this.sCurveConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.IterativeAnchoringConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig}
 */
proto.apollo.planning.IterativeAnchoringConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.IterativeAnchoringConfig();
  obj.interpolatedDeltaS != null && jspb.Message.setField(msg, 1, obj.interpolatedDeltaS);
  obj.reanchoringTrailsNum != null && jspb.Message.setField(msg, 2, obj.reanchoringTrailsNum);
  obj.reanchoringPosStddev != null && jspb.Message.setField(msg, 3, obj.reanchoringPosStddev);
  obj.reanchoringLengthStddev != null && jspb.Message.setField(msg, 4, obj.reanchoringLengthStddev);
  obj.estimateBound != null && jspb.Message.setField(msg, 5, obj.estimateBound);
  obj.defaultBound != null && jspb.Message.setField(msg, 6, obj.defaultBound);
  obj.vehicleShortestDimension != null && jspb.Message.setField(msg, 7, obj.vehicleShortestDimension);
  obj.femPosDeviationSmootherConfig && jspb.Message.setWrapperField(
      msg, 8, modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.fromObject(obj.femPosDeviationSmootherConfig));
  obj.collisionDecreaseRatio != null && jspb.Message.setField(msg, 9, obj.collisionDecreaseRatio);
  obj.maxForwardV != null && jspb.Message.setField(msg, 10, obj.maxForwardV);
  obj.maxReverseV != null && jspb.Message.setField(msg, 11, obj.maxReverseV);
  obj.maxForwardAcc != null && jspb.Message.setField(msg, 12, obj.maxForwardAcc);
  obj.maxReverseAcc != null && jspb.Message.setField(msg, 13, obj.maxReverseAcc);
  obj.maxAccJerk != null && jspb.Message.setField(msg, 14, obj.maxAccJerk);
  obj.deltaT != null && jspb.Message.setField(msg, 15, obj.deltaT);
  obj.sCurveConfig && jspb.Message.setWrapperField(
      msg, 16, modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.fromObject(obj.sCurveConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig}
 */
proto.apollo.planning.IterativeAnchoringConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.IterativeAnchoringConfig;
  return proto.apollo.planning.IterativeAnchoringConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.IterativeAnchoringConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig}
 */
proto.apollo.planning.IterativeAnchoringConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInterpolatedDeltaS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReanchoringTrailsNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReanchoringPosStddev(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReanchoringLengthStddev(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEstimateBound(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultBound(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVehicleShortestDimension(value);
      break;
    case 8:
      var value = new modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig;
      reader.readMessage(value,modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.deserializeBinaryFromReader);
      msg.setFemPosDeviationSmootherConfig(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCollisionDecreaseRatio(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxForwardV(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxReverseV(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxForwardAcc(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxReverseAcc(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAccJerk(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeltaT(value);
      break;
    case 16:
      var value = new modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.deserializeBinaryFromReader);
      msg.setSCurveConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.IterativeAnchoringConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.IterativeAnchoringConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.IterativeAnchoringConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getFemPosDeviationSmootherConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getSCurveConfig();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional double interpolated_delta_s = 1;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getInterpolatedDeltaS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setInterpolatedDeltaS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearInterpolatedDeltaS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasInterpolatedDeltaS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 reanchoring_trails_num = 2;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getReanchoringTrailsNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 50));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setReanchoringTrailsNum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearReanchoringTrailsNum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasReanchoringTrailsNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double reanchoring_pos_stddev = 3;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getReanchoringPosStddev = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.25));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setReanchoringPosStddev = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearReanchoringPosStddev = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasReanchoringPosStddev = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double reanchoring_length_stddev = 4;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getReanchoringLengthStddev = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setReanchoringLengthStddev = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearReanchoringLengthStddev = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasReanchoringLengthStddev = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool estimate_bound = 5;
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getEstimateBound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setEstimateBound = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearEstimateBound = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasEstimateBound = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double default_bound = 6;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getDefaultBound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setDefaultBound = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearDefaultBound = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasDefaultBound = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double vehicle_shortest_dimension = 7;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getVehicleShortestDimension = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 1.04));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setVehicleShortestDimension = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearVehicleShortestDimension = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasVehicleShortestDimension = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
 * @return {?proto.apollo.planning.FemPosDeviationSmootherConfig}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getFemPosDeviationSmootherConfig = function() {
  return /** @type{?proto.apollo.planning.FemPosDeviationSmootherConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig, 8));
};


/**
 * @param {?proto.apollo.planning.FemPosDeviationSmootherConfig|undefined} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
*/
proto.apollo.planning.IterativeAnchoringConfig.prototype.setFemPosDeviationSmootherConfig = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearFemPosDeviationSmootherConfig = function() {
  return this.setFemPosDeviationSmootherConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasFemPosDeviationSmootherConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double collision_decrease_ratio = 9;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getCollisionDecreaseRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.9));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setCollisionDecreaseRatio = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearCollisionDecreaseRatio = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasCollisionDecreaseRatio = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double max_forward_v = 10;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getMaxForwardV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setMaxForwardV = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearMaxForwardV = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasMaxForwardV = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double max_reverse_v = 11;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getMaxReverseV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setMaxReverseV = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearMaxReverseV = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasMaxReverseV = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double max_forward_acc = 12;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getMaxForwardAcc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setMaxForwardAcc = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearMaxForwardAcc = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasMaxForwardAcc = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double max_reverse_acc = 13;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getMaxReverseAcc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setMaxReverseAcc = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearMaxReverseAcc = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasMaxReverseAcc = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double max_acc_jerk = 14;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getMaxAccJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setMaxAccJerk = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearMaxAccJerk = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasMaxAccJerk = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double delta_t = 15;
 * @return {number}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getDeltaT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.setDeltaT = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearDeltaT = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasDeltaT = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
 * @return {?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.getSCurveConfig = function() {
  return /** @type{?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig, 16));
};


/**
 * @param {?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
*/
proto.apollo.planning.IterativeAnchoringConfig.prototype.setSCurveConfig = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.IterativeAnchoringConfig} returns this
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.clearSCurveConfig = function() {
  return this.setSCurveConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IterativeAnchoringConfig.prototype.hasSCurveConfig = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrajectoryPartitionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrajectoryPartitionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrajectoryPartitionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    interpolatedPiecesNum: jspb.Message.getFieldWithDefault(msg, 1, 50),
    initialGearCheckHorizon: jspb.Message.getFieldWithDefault(msg, 2, 3),
    headingSearchingRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.3),
    gearShiftPeriodDuration: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 2.0),
    gearShiftMaxT: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 3.0),
    gearShiftUnitT: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.02)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryPartitionConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrajectoryPartitionConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.interpolatedPiecesNum;

  /** @type {?|undefined} */
  this.initialGearCheckHorizon;

  /** @type {?|undefined} */
  this.headingSearchingRange;

  /** @type {?|undefined} */
  this.gearShiftPeriodDuration;

  /** @type {?|undefined} */
  this.gearShiftMaxT;

  /** @type {?|undefined} */
  this.gearShiftUnitT;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrajectoryPartitionConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig}
 */
proto.apollo.planning.TrajectoryPartitionConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrajectoryPartitionConfig();
  obj.interpolatedPiecesNum != null && jspb.Message.setField(msg, 1, obj.interpolatedPiecesNum);
  obj.initialGearCheckHorizon != null && jspb.Message.setField(msg, 2, obj.initialGearCheckHorizon);
  obj.headingSearchingRange != null && jspb.Message.setField(msg, 3, obj.headingSearchingRange);
  obj.gearShiftPeriodDuration != null && jspb.Message.setField(msg, 4, obj.gearShiftPeriodDuration);
  obj.gearShiftMaxT != null && jspb.Message.setField(msg, 5, obj.gearShiftMaxT);
  obj.gearShiftUnitT != null && jspb.Message.setField(msg, 6, obj.gearShiftUnitT);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig}
 */
proto.apollo.planning.TrajectoryPartitionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrajectoryPartitionConfig;
  return proto.apollo.planning.TrajectoryPartitionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrajectoryPartitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig}
 */
proto.apollo.planning.TrajectoryPartitionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInterpolatedPiecesNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInitialGearCheckHorizon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingSearchingRange(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGearShiftPeriodDuration(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGearShiftMaxT(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGearShiftUnitT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrajectoryPartitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrajectoryPartitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrajectoryPartitionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional uint64 interpolated_pieces_num = 1;
 * @return {number}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.getInterpolatedPiecesNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 50));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.setInterpolatedPiecesNum = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.clearInterpolatedPiecesNum = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.hasInterpolatedPiecesNum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 initial_gear_check_horizon = 2;
 * @return {number}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.getInitialGearCheckHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.setInitialGearCheckHorizon = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.clearInitialGearCheckHorizon = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.hasInitialGearCheckHorizon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double heading_searching_range = 3;
 * @return {number}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.getHeadingSearchingRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.setHeadingSearchingRange = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.clearHeadingSearchingRange = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.hasHeadingSearchingRange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double gear_shift_period_duration = 4;
 * @return {number}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.getGearShiftPeriodDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.setGearShiftPeriodDuration = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.clearGearShiftPeriodDuration = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.hasGearShiftPeriodDuration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double gear_shift_max_t = 5;
 * @return {number}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.getGearShiftMaxT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.setGearShiftMaxT = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.clearGearShiftMaxT = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.hasGearShiftMaxT = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double gear_shift_unit_t = 6;
 * @return {number}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.getGearShiftUnitT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.02));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.setGearShiftUnitT = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.clearGearShiftUnitT = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TrajectoryPartitionConfig.prototype.hasGearShiftUnitT = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.apollo.planning.DualWarmUpMode = {
  IPOPT: 0,
  IPOPTQP: 1,
  OSQP: 2,
  DEBUG: 3,
  SLACKQP: 4
};

/**
 * @enum {number}
 */
proto.apollo.planning.DistanceApproachMode = {
  DISTANCE_APPROACH_IPOPT: 0,
  DISTANCE_APPROACH_IPOPT_CUDA: 1,
  DISTANCE_APPROACH_IPOPT_FIXED_TS: 2,
  DISTANCE_APPROACH_IPOPT_FIXED_DUAL: 3,
  DISTANCE_APPROACH_IPOPT_RELAX_END: 4,
  DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK: 5
};

goog.object.extend(exports, proto.apollo.planning);
