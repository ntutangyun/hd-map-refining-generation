// source: modules/prediction/proto/offline_features.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_prediction_proto_feature_pb = require('../../../modules/prediction/proto/feature_pb.js');
goog.object.extend(proto, modules_prediction_proto_feature_pb);
var modules_prediction_proto_prediction_conf_pb = require('../../../modules/prediction/proto/prediction_conf_pb.js');
goog.object.extend(proto, modules_prediction_proto_prediction_conf_pb);
var modules_prediction_proto_scenario_pb = require('../../../modules/prediction/proto/scenario_pb.js');
goog.object.extend(proto, modules_prediction_proto_scenario_pb);
goog.exportSymbol('proto.apollo.prediction.DataForLearning', null, global);
goog.exportSymbol('proto.apollo.prediction.DataForTuning', null, global);
goog.exportSymbol('proto.apollo.prediction.Features', null, global);
goog.exportSymbol('proto.apollo.prediction.ListDataForLearning', null, global);
goog.exportSymbol('proto.apollo.prediction.ListDataForTuning', null, global);
goog.exportSymbol('proto.apollo.prediction.ListFrameEnv', null, global);
goog.exportSymbol('proto.apollo.prediction.ListPredictionResult', null, global);
goog.exportSymbol('proto.apollo.prediction.PredictionResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.DataForLearning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.DataForLearning.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.DataForLearning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.DataForLearning.displayName = 'proto.apollo.prediction.DataForLearning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ListDataForLearning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.ListDataForLearning.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.ListDataForLearning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ListDataForLearning.displayName = 'proto.apollo.prediction.ListDataForLearning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.PredictionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.PredictionResult.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.PredictionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.PredictionResult.displayName = 'proto.apollo.prediction.PredictionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ListPredictionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.ListPredictionResult.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.ListPredictionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ListPredictionResult.displayName = 'proto.apollo.prediction.ListPredictionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ListFrameEnv = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.ListFrameEnv.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.ListFrameEnv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ListFrameEnv.displayName = 'proto.apollo.prediction.ListFrameEnv';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.DataForTuning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.DataForTuning.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.DataForTuning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.DataForTuning.displayName = 'proto.apollo.prediction.DataForTuning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ListDataForTuning = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.ListDataForTuning.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.ListDataForTuning, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ListDataForTuning.displayName = 'proto.apollo.prediction.ListDataForTuning';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.Features = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.Features.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.Features, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.Features.displayName = 'proto.apollo.prediction.Features';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.DataForLearning.repeatedFields_ = [3,7,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.DataForLearning.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.DataForLearning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.DataForLearning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.DataForLearning.toObject = function(includeInstance, msg) {
  var f, obj = {
    category: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    featuresForLearningList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    stringFeaturesForLearningList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    labelsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    laneSequenceId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DataForLearning as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.DataForLearning.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.category;

  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.featuresForLearningList;

  /** @type {?|undefined} */
  this.stringFeaturesForLearningList;

  /** @type {?|undefined} */
  this.labelsList;

  /** @type {?|undefined} */
  this.laneSequenceId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.DataForLearning.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.DataForLearning}
 */
proto.apollo.prediction.DataForLearning.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.DataForLearning();
  obj.category != null && jspb.Message.setField(msg, 5, obj.category);
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.timestamp != null && jspb.Message.setField(msg, 2, obj.timestamp);
  obj.featuresForLearningList != null && jspb.Message.setField(msg, 3, obj.featuresForLearningList);
  obj.stringFeaturesForLearningList != null && jspb.Message.setField(msg, 7, obj.stringFeaturesForLearningList);
  obj.labelsList != null && jspb.Message.setField(msg, 4, obj.labelsList);
  obj.laneSequenceId != null && jspb.Message.setField(msg, 6, obj.laneSequenceId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.DataForLearning}
 */
proto.apollo.prediction.DataForLearning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.DataForLearning;
  return proto.apollo.prediction.DataForLearning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.DataForLearning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.DataForLearning}
 */
proto.apollo.prediction.DataForLearning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFeaturesForLearning(values[i]);
      }
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addStringFeaturesForLearning(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLabels(values[i]);
      }
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLaneSequenceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.DataForLearning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.DataForLearning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.DataForLearning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.DataForLearning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getFeaturesForLearningList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      3,
      f
    );
  }
  f = message.getStringFeaturesForLearningList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string category = 5;
 * @return {string}
 */
proto.apollo.prediction.DataForLearning.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.setCategory = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.clearCategory = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForLearning.prototype.hasCategory = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.prediction.DataForLearning.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForLearning.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double timestamp = 2;
 * @return {number}
 */
proto.apollo.prediction.DataForLearning.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForLearning.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated double features_for_learning = 3;
 * @return {!Array<number>}
 */
proto.apollo.prediction.DataForLearning.prototype.getFeaturesForLearningList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.setFeaturesForLearningList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.addFeaturesForLearning = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.clearFeaturesForLearningList = function() {
  return this.setFeaturesForLearningList([]);
};


/**
 * repeated string string_features_for_learning = 7;
 * @return {!Array<string>}
 */
proto.apollo.prediction.DataForLearning.prototype.getStringFeaturesForLearningList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.setStringFeaturesForLearningList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.addStringFeaturesForLearning = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.clearStringFeaturesForLearningList = function() {
  return this.setStringFeaturesForLearningList([]);
};


/**
 * repeated double labels = 4;
 * @return {!Array<number>}
 */
proto.apollo.prediction.DataForLearning.prototype.getLabelsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.setLabelsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.addLabels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * optional int32 lane_sequence_id = 6;
 * @return {number}
 */
proto.apollo.prediction.DataForLearning.prototype.getLaneSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.setLaneSequenceId = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForLearning} returns this
 */
proto.apollo.prediction.DataForLearning.prototype.clearLaneSequenceId = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForLearning.prototype.hasLaneSequenceId = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.ListDataForLearning.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ListDataForLearning.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ListDataForLearning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ListDataForLearning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListDataForLearning.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataForLearningList: jspb.Message.toObjectList(msg.getDataForLearningList(),
    proto.apollo.prediction.DataForLearning.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ListDataForLearning as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ListDataForLearning.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dataForLearningList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ListDataForLearning.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ListDataForLearning}
 */
proto.apollo.prediction.ListDataForLearning.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ListDataForLearning();
  obj.dataForLearningList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.dataForLearningList.map(
          proto.apollo.prediction.DataForLearning.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ListDataForLearning}
 */
proto.apollo.prediction.ListDataForLearning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ListDataForLearning;
  return proto.apollo.prediction.ListDataForLearning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ListDataForLearning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ListDataForLearning}
 */
proto.apollo.prediction.ListDataForLearning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.DataForLearning;
      reader.readMessage(value,proto.apollo.prediction.DataForLearning.deserializeBinaryFromReader);
      msg.addDataForLearning(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ListDataForLearning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ListDataForLearning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ListDataForLearning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListDataForLearning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataForLearningList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.DataForLearning.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DataForLearning data_for_learning = 1;
 * @return {!Array<!proto.apollo.prediction.DataForLearning>}
 */
proto.apollo.prediction.ListDataForLearning.prototype.getDataForLearningList = function() {
  return /** @type{!Array<!proto.apollo.prediction.DataForLearning>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.DataForLearning, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.DataForLearning>} value
 * @return {!proto.apollo.prediction.ListDataForLearning} returns this
*/
proto.apollo.prediction.ListDataForLearning.prototype.setDataForLearningList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.DataForLearning=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.DataForLearning}
 */
proto.apollo.prediction.ListDataForLearning.prototype.addDataForLearning = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.DataForLearning, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.ListDataForLearning} returns this
 */
proto.apollo.prediction.ListDataForLearning.prototype.clearDataForLearningList = function() {
  return this.setDataForLearningList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.PredictionResult.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.PredictionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.PredictionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.PredictionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.PredictionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    trajectoryList: jspb.Message.toObjectList(msg.getTrajectoryList(),
    modules_prediction_proto_feature_pb.Trajectory.toObject, includeInstance),
    obstacleConf: (f = msg.getObstacleConf()) && modules_prediction_proto_prediction_conf_pb.ObstacleConf.toObject(includeInstance, f),
    scenario: (f = msg.getScenario()) && modules_prediction_proto_scenario_pb.Scenario.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PredictionResult as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.PredictionResult.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.trajectoryList;

  /** @type {?|undefined} */
  this.obstacleConf;

  /** @type {?|undefined} */
  this.scenario;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.PredictionResult.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.PredictionResult}
 */
proto.apollo.prediction.PredictionResult.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.PredictionResult();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.timestamp != null && jspb.Message.setField(msg, 2, obj.timestamp);
  obj.trajectoryList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.trajectoryList.map(
          modules_prediction_proto_feature_pb.Trajectory.fromObject));
  obj.obstacleConf && jspb.Message.setWrapperField(
      msg, 4, modules_prediction_proto_prediction_conf_pb.ObstacleConf.fromObject(obj.obstacleConf));
  obj.scenario && jspb.Message.setWrapperField(
      msg, 5, modules_prediction_proto_scenario_pb.Scenario.fromObject(obj.scenario));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.PredictionResult}
 */
proto.apollo.prediction.PredictionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.PredictionResult;
  return proto.apollo.prediction.PredictionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.PredictionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.PredictionResult}
 */
proto.apollo.prediction.PredictionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new modules_prediction_proto_feature_pb.Trajectory;
      reader.readMessage(value,modules_prediction_proto_feature_pb.Trajectory.deserializeBinaryFromReader);
      msg.addTrajectory(value);
      break;
    case 4:
      var value = new modules_prediction_proto_prediction_conf_pb.ObstacleConf;
      reader.readMessage(value,modules_prediction_proto_prediction_conf_pb.ObstacleConf.deserializeBinaryFromReader);
      msg.setObstacleConf(value);
      break;
    case 5:
      var value = new modules_prediction_proto_scenario_pb.Scenario;
      reader.readMessage(value,modules_prediction_proto_scenario_pb.Scenario.deserializeBinaryFromReader);
      msg.setScenario(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.PredictionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.PredictionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.PredictionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.PredictionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getTrajectoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      modules_prediction_proto_feature_pb.Trajectory.serializeBinaryToWriter
    );
  }
  f = message.getObstacleConf();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_prediction_proto_prediction_conf_pb.ObstacleConf.serializeBinaryToWriter
    );
  }
  f = message.getScenario();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_prediction_proto_scenario_pb.Scenario.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.prediction.PredictionResult.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.PredictionResult} returns this
 */
proto.apollo.prediction.PredictionResult.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.PredictionResult} returns this
 */
proto.apollo.prediction.PredictionResult.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.PredictionResult.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double timestamp = 2;
 * @return {number}
 */
proto.apollo.prediction.PredictionResult.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.PredictionResult} returns this
 */
proto.apollo.prediction.PredictionResult.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.PredictionResult} returns this
 */
proto.apollo.prediction.PredictionResult.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.PredictionResult.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Trajectory trajectory = 3;
 * @return {!Array<!proto.apollo.prediction.Trajectory>}
 */
proto.apollo.prediction.PredictionResult.prototype.getTrajectoryList = function() {
  return /** @type{!Array<!proto.apollo.prediction.Trajectory>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_prediction_proto_feature_pb.Trajectory, 3));
};


/**
 * @param {!Array<!proto.apollo.prediction.Trajectory>} value
 * @return {!proto.apollo.prediction.PredictionResult} returns this
*/
proto.apollo.prediction.PredictionResult.prototype.setTrajectoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.prediction.Trajectory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.Trajectory}
 */
proto.apollo.prediction.PredictionResult.prototype.addTrajectory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.prediction.Trajectory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.PredictionResult} returns this
 */
proto.apollo.prediction.PredictionResult.prototype.clearTrajectoryList = function() {
  return this.setTrajectoryList([]);
};


/**
 * optional ObstacleConf obstacle_conf = 4;
 * @return {?proto.apollo.prediction.ObstacleConf}
 */
proto.apollo.prediction.PredictionResult.prototype.getObstacleConf = function() {
  return /** @type{?proto.apollo.prediction.ObstacleConf} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_prediction_conf_pb.ObstacleConf, 4));
};


/**
 * @param {?proto.apollo.prediction.ObstacleConf|undefined} value
 * @return {!proto.apollo.prediction.PredictionResult} returns this
*/
proto.apollo.prediction.PredictionResult.prototype.setObstacleConf = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.PredictionResult} returns this
 */
proto.apollo.prediction.PredictionResult.prototype.clearObstacleConf = function() {
  return this.setObstacleConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.PredictionResult.prototype.hasObstacleConf = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Scenario scenario = 5;
 * @return {?proto.apollo.prediction.Scenario}
 */
proto.apollo.prediction.PredictionResult.prototype.getScenario = function() {
  return /** @type{?proto.apollo.prediction.Scenario} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_scenario_pb.Scenario, 5));
};


/**
 * @param {?proto.apollo.prediction.Scenario|undefined} value
 * @return {!proto.apollo.prediction.PredictionResult} returns this
*/
proto.apollo.prediction.PredictionResult.prototype.setScenario = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.PredictionResult} returns this
 */
proto.apollo.prediction.PredictionResult.prototype.clearScenario = function() {
  return this.setScenario(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.PredictionResult.prototype.hasScenario = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.ListPredictionResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ListPredictionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ListPredictionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ListPredictionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListPredictionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    predictionResultList: jspb.Message.toObjectList(msg.getPredictionResultList(),
    proto.apollo.prediction.PredictionResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ListPredictionResult as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ListPredictionResult.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.predictionResultList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ListPredictionResult.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ListPredictionResult}
 */
proto.apollo.prediction.ListPredictionResult.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ListPredictionResult();
  obj.predictionResultList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.predictionResultList.map(
          proto.apollo.prediction.PredictionResult.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ListPredictionResult}
 */
proto.apollo.prediction.ListPredictionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ListPredictionResult;
  return proto.apollo.prediction.ListPredictionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ListPredictionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ListPredictionResult}
 */
proto.apollo.prediction.ListPredictionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.PredictionResult;
      reader.readMessage(value,proto.apollo.prediction.PredictionResult.deserializeBinaryFromReader);
      msg.addPredictionResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ListPredictionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ListPredictionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ListPredictionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListPredictionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPredictionResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.PredictionResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PredictionResult prediction_result = 1;
 * @return {!Array<!proto.apollo.prediction.PredictionResult>}
 */
proto.apollo.prediction.ListPredictionResult.prototype.getPredictionResultList = function() {
  return /** @type{!Array<!proto.apollo.prediction.PredictionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.PredictionResult, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.PredictionResult>} value
 * @return {!proto.apollo.prediction.ListPredictionResult} returns this
*/
proto.apollo.prediction.ListPredictionResult.prototype.setPredictionResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.PredictionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.PredictionResult}
 */
proto.apollo.prediction.ListPredictionResult.prototype.addPredictionResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.PredictionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.ListPredictionResult} returns this
 */
proto.apollo.prediction.ListPredictionResult.prototype.clearPredictionResultList = function() {
  return this.setPredictionResultList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.ListFrameEnv.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ListFrameEnv.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ListFrameEnv.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ListFrameEnv} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListFrameEnv.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameEnvList: jspb.Message.toObjectList(msg.getFrameEnvList(),
    modules_prediction_proto_feature_pb.FrameEnv.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ListFrameEnv as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ListFrameEnv.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.frameEnvList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ListFrameEnv.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ListFrameEnv}
 */
proto.apollo.prediction.ListFrameEnv.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ListFrameEnv();
  obj.frameEnvList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.frameEnvList.map(
          modules_prediction_proto_feature_pb.FrameEnv.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ListFrameEnv}
 */
proto.apollo.prediction.ListFrameEnv.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ListFrameEnv;
  return proto.apollo.prediction.ListFrameEnv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ListFrameEnv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ListFrameEnv}
 */
proto.apollo.prediction.ListFrameEnv.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_prediction_proto_feature_pb.FrameEnv;
      reader.readMessage(value,modules_prediction_proto_feature_pb.FrameEnv.deserializeBinaryFromReader);
      msg.addFrameEnv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ListFrameEnv.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ListFrameEnv.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ListFrameEnv} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListFrameEnv.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrameEnvList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      modules_prediction_proto_feature_pb.FrameEnv.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FrameEnv frame_env = 1;
 * @return {!Array<!proto.apollo.prediction.FrameEnv>}
 */
proto.apollo.prediction.ListFrameEnv.prototype.getFrameEnvList = function() {
  return /** @type{!Array<!proto.apollo.prediction.FrameEnv>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_prediction_proto_feature_pb.FrameEnv, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.FrameEnv>} value
 * @return {!proto.apollo.prediction.ListFrameEnv} returns this
*/
proto.apollo.prediction.ListFrameEnv.prototype.setFrameEnvList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.FrameEnv=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.FrameEnv}
 */
proto.apollo.prediction.ListFrameEnv.prototype.addFrameEnv = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.FrameEnv, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.ListFrameEnv} returns this
 */
proto.apollo.prediction.ListFrameEnv.prototype.clearFrameEnvList = function() {
  return this.setFrameEnvList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.DataForTuning.repeatedFields_ = [4,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.DataForTuning.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.DataForTuning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.DataForTuning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.DataForTuning.toObject = function(includeInstance, msg) {
  var f, obj = {
    category: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    valuesForTuningList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    realCostValueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    laneSequenceId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    adcTrajectoryPointList: jspb.Message.toObjectList(msg.getAdcTrajectoryPointList(),
    modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DataForTuning as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.DataForTuning.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.category;

  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.valuesForTuningList;

  /** @type {?|undefined} */
  this.realCostValueList;

  /** @type {?|undefined} */
  this.laneSequenceId;

  /** @type {?|undefined} */
  this.adcTrajectoryPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.DataForTuning.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.DataForTuning}
 */
proto.apollo.prediction.DataForTuning.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.DataForTuning();
  obj.category != null && jspb.Message.setField(msg, 1, obj.category);
  obj.id != null && jspb.Message.setField(msg, 2, obj.id);
  obj.timestamp != null && jspb.Message.setField(msg, 3, obj.timestamp);
  obj.valuesForTuningList != null && jspb.Message.setField(msg, 4, obj.valuesForTuningList);
  obj.realCostValueList != null && jspb.Message.setField(msg, 5, obj.realCostValueList);
  obj.laneSequenceId != null && jspb.Message.setField(msg, 6, obj.laneSequenceId);
  obj.adcTrajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.adcTrajectoryPointList.map(
          modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.DataForTuning}
 */
proto.apollo.prediction.DataForTuning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.DataForTuning;
  return proto.apollo.prediction.DataForTuning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.DataForTuning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.DataForTuning}
 */
proto.apollo.prediction.DataForTuning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValuesForTuning(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRealCostValue(values[i]);
      }
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLaneSequenceId(value);
      break;
    case 7:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.addAdcTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.DataForTuning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.DataForTuning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.DataForTuning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.DataForTuning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getValuesForTuningList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      4,
      f
    );
  }
  f = message.getRealCostValueList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAdcTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string category = 1;
 * @return {string}
 */
proto.apollo.prediction.DataForTuning.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.setCategory = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.clearCategory = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForTuning.prototype.hasCategory = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.apollo.prediction.DataForTuning.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForTuning.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double timestamp = 3;
 * @return {number}
 */
proto.apollo.prediction.DataForTuning.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForTuning.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated double values_for_tuning = 4;
 * @return {!Array<number>}
 */
proto.apollo.prediction.DataForTuning.prototype.getValuesForTuningList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.setValuesForTuningList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.addValuesForTuning = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.clearValuesForTuningList = function() {
  return this.setValuesForTuningList([]);
};


/**
 * repeated double real_cost_value = 5;
 * @return {!Array<number>}
 */
proto.apollo.prediction.DataForTuning.prototype.getRealCostValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.setRealCostValueList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.addRealCostValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.clearRealCostValueList = function() {
  return this.setRealCostValueList([]);
};


/**
 * optional int32 lane_sequence_id = 6;
 * @return {number}
 */
proto.apollo.prediction.DataForTuning.prototype.getLaneSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.setLaneSequenceId = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.clearLaneSequenceId = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.DataForTuning.prototype.hasLaneSequenceId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated apollo.common.TrajectoryPoint adc_trajectory_point = 7;
 * @return {!Array<!proto.apollo.common.TrajectoryPoint>}
 */
proto.apollo.prediction.DataForTuning.prototype.getAdcTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.common.TrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 7));
};


/**
 * @param {!Array<!proto.apollo.common.TrajectoryPoint>} value
 * @return {!proto.apollo.prediction.DataForTuning} returns this
*/
proto.apollo.prediction.DataForTuning.prototype.setAdcTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.common.TrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.prediction.DataForTuning.prototype.addAdcTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.common.TrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.DataForTuning} returns this
 */
proto.apollo.prediction.DataForTuning.prototype.clearAdcTrajectoryPointList = function() {
  return this.setAdcTrajectoryPointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.ListDataForTuning.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ListDataForTuning.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ListDataForTuning.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ListDataForTuning} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListDataForTuning.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataForTuningList: jspb.Message.toObjectList(msg.getDataForTuningList(),
    proto.apollo.prediction.DataForTuning.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ListDataForTuning as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ListDataForTuning.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dataForTuningList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ListDataForTuning.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ListDataForTuning}
 */
proto.apollo.prediction.ListDataForTuning.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ListDataForTuning();
  obj.dataForTuningList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.dataForTuningList.map(
          proto.apollo.prediction.DataForTuning.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ListDataForTuning}
 */
proto.apollo.prediction.ListDataForTuning.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ListDataForTuning;
  return proto.apollo.prediction.ListDataForTuning.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ListDataForTuning} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ListDataForTuning}
 */
proto.apollo.prediction.ListDataForTuning.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.DataForTuning;
      reader.readMessage(value,proto.apollo.prediction.DataForTuning.deserializeBinaryFromReader);
      msg.addDataForTuning(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ListDataForTuning.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ListDataForTuning.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ListDataForTuning} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ListDataForTuning.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataForTuningList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.DataForTuning.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DataForTuning data_for_tuning = 1;
 * @return {!Array<!proto.apollo.prediction.DataForTuning>}
 */
proto.apollo.prediction.ListDataForTuning.prototype.getDataForTuningList = function() {
  return /** @type{!Array<!proto.apollo.prediction.DataForTuning>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.DataForTuning, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.DataForTuning>} value
 * @return {!proto.apollo.prediction.ListDataForTuning} returns this
*/
proto.apollo.prediction.ListDataForTuning.prototype.setDataForTuningList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.DataForTuning=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.DataForTuning}
 */
proto.apollo.prediction.ListDataForTuning.prototype.addDataForTuning = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.DataForTuning, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.ListDataForTuning} returns this
 */
proto.apollo.prediction.ListDataForTuning.prototype.clearDataForTuningList = function() {
  return this.setDataForTuningList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.Features.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.Features.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.Features.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.Features} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Features.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureList: jspb.Message.toObjectList(msg.getFeatureList(),
    modules_prediction_proto_feature_pb.Feature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Features as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.Features.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.featureList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.Features.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.Features}
 */
proto.apollo.prediction.Features.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.Features();
  obj.featureList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.featureList.map(
          modules_prediction_proto_feature_pb.Feature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.Features}
 */
proto.apollo.prediction.Features.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.Features;
  return proto.apollo.prediction.Features.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.Features} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.Features}
 */
proto.apollo.prediction.Features.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_prediction_proto_feature_pb.Feature;
      reader.readMessage(value,modules_prediction_proto_feature_pb.Feature.deserializeBinaryFromReader);
      msg.addFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.Features.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.Features.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.Features} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Features.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      modules_prediction_proto_feature_pb.Feature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Feature feature = 1;
 * @return {!Array<!proto.apollo.prediction.Feature>}
 */
proto.apollo.prediction.Features.prototype.getFeatureList = function() {
  return /** @type{!Array<!proto.apollo.prediction.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_prediction_proto_feature_pb.Feature, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.Feature>} value
 * @return {!proto.apollo.prediction.Features} returns this
*/
proto.apollo.prediction.Features.prototype.setFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.Feature}
 */
proto.apollo.prediction.Features.prototype.addFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Features} returns this
 */
proto.apollo.prediction.Features.prototype.clearFeatureList = function() {
  return this.setFeatureList([]);
};


goog.object.extend(exports, proto.apollo.prediction);
