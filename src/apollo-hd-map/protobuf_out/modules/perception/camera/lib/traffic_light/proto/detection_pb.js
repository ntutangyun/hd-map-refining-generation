// source: modules/perception/camera/lib/traffic_light/proto/detection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.camera.traffic_light.detection.DetectionParam', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.traffic_light.detection.DetectionParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.traffic_light.detection.DetectionParam.displayName = 'proto.apollo.perception.camera.traffic_light.detection.DetectionParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.traffic_light.detection.DetectionParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    minCropSize: jspb.Message.getFieldWithDefault(msg, 1, 270),
    cropMethod: jspb.Message.getFieldWithDefault(msg, 2, 0),
    meanB: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 95.0),
    meanG: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 99.0),
    meanR: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 96.0),
    isBgr: jspb.Message.getBooleanFieldWithDefault(msg, 6, true),
    cropScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 2.5),
    inputBlobName: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    imParamBlobName: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    outputBlobName: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    modelName: jspb.Message.getFieldWithDefault(msg, 11, "RTNet"),
    modelType: jspb.Message.getFieldWithDefault(msg, 12, "RTNet"),
    protoFile: jspb.Message.getFieldWithDefault(msg, 13, "caffe.pt"),
    weightFile: jspb.Message.getFieldWithDefault(msg, 14, "caffe.model"),
    maxBatchSize: jspb.Message.getFieldWithDefault(msg, 15, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DetectionParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minCropSize;

  /** @type {?|undefined} */
  this.cropMethod;

  /** @type {?|undefined} */
  this.meanB;

  /** @type {?|undefined} */
  this.meanG;

  /** @type {?|undefined} */
  this.meanR;

  /** @type {?|undefined} */
  this.isBgr;

  /** @type {?|undefined} */
  this.cropScale;

  /** @type {?|undefined} */
  this.inputBlobName;

  /** @type {?|undefined} */
  this.imParamBlobName;

  /** @type {?|undefined} */
  this.outputBlobName;

  /** @type {?|undefined} */
  this.modelName;

  /** @type {?|undefined} */
  this.modelType;

  /** @type {?|undefined} */
  this.protoFile;

  /** @type {?|undefined} */
  this.weightFile;

  /** @type {?|undefined} */
  this.maxBatchSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.traffic_light.detection.DetectionParam();
  obj.minCropSize != null && jspb.Message.setField(msg, 1, obj.minCropSize);
  obj.cropMethod != null && jspb.Message.setField(msg, 2, obj.cropMethod);
  obj.meanB != null && jspb.Message.setField(msg, 3, obj.meanB);
  obj.meanG != null && jspb.Message.setField(msg, 4, obj.meanG);
  obj.meanR != null && jspb.Message.setField(msg, 5, obj.meanR);
  obj.isBgr != null && jspb.Message.setField(msg, 6, obj.isBgr);
  obj.cropScale != null && jspb.Message.setField(msg, 7, obj.cropScale);
  obj.inputBlobName != null && jspb.Message.setField(msg, 8, obj.inputBlobName);
  obj.imParamBlobName != null && jspb.Message.setField(msg, 9, obj.imParamBlobName);
  obj.outputBlobName != null && jspb.Message.setField(msg, 10, obj.outputBlobName);
  obj.modelName != null && jspb.Message.setField(msg, 11, obj.modelName);
  obj.modelType != null && jspb.Message.setField(msg, 12, obj.modelType);
  obj.protoFile != null && jspb.Message.setField(msg, 13, obj.protoFile);
  obj.weightFile != null && jspb.Message.setField(msg, 14, obj.weightFile);
  obj.maxBatchSize != null && jspb.Message.setField(msg, 15, obj.maxBatchSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.traffic_light.detection.DetectionParam;
  return proto.apollo.perception.camera.traffic_light.detection.DetectionParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinCropSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCropMethod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanB(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanG(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanR(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBgr(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCropScale(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputBlobName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setImParamBlobName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputBlobName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelType(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtoFile(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightFile(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxBatchSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.traffic_light.detection.DetectionParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * optional int32 min_crop_size = 1;
 * @return {number}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getMinCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 270));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setMinCropSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearMinCropSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasMinCropSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 crop_method = 2;
 * @return {number}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getCropMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setCropMethod = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearCropMethod = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasCropMethod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float mean_b = 3;
 * @return {number}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getMeanB = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 95.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setMeanB = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearMeanB = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasMeanB = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float mean_g = 4;
 * @return {number}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getMeanG = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 99.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setMeanG = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearMeanG = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasMeanG = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float mean_r = 5;
 * @return {number}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getMeanR = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 96.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setMeanR = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearMeanR = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasMeanR = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_bgr = 6;
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getIsBgr = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setIsBgr = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearIsBgr = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasIsBgr = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float crop_scale = 7;
 * @return {number}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getCropScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 2.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setCropScale = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearCropScale = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasCropScale = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string input_blob_name = 8;
 * @return {string}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getInputBlobName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setInputBlobName = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearInputBlobName = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasInputBlobName = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string im_param_blob_name = 9;
 * @return {string}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getImParamBlobName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setImParamBlobName = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearImParamBlobName = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasImParamBlobName = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string output_blob_name = 10;
 * @return {string}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getOutputBlobName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setOutputBlobName = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearOutputBlobName = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasOutputBlobName = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string model_name = 11;
 * @return {string}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "RTNet"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setModelName = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearModelName = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasModelName = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string model_type = 12;
 * @return {string}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getModelType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "RTNet"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setModelType = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearModelType = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasModelType = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string proto_file = 13;
 * @return {string}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getProtoFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, "caffe.pt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setProtoFile = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearProtoFile = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasProtoFile = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string weight_file = 14;
 * @return {string}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getWeightFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, "caffe.model"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setWeightFile = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearWeightFile = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasWeightFile = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 max_batch_size = 15;
 * @return {number}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.getMaxBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.setMaxBatchSize = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.traffic_light.detection.DetectionParam} returns this
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.clearMaxBatchSize = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.traffic_light.detection.DetectionParam.prototype.hasMaxBatchSize = function() {
  return jspb.Message.getField(this, 15) != null;
};


goog.object.extend(exports, proto.apollo.perception.camera.traffic_light.detection);
