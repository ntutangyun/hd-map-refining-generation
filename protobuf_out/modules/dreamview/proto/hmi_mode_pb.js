// source: modules/dreamview/proto/hmi_mode.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.dreamview.ChannelMonitorConfig', null, global);
goog.exportSymbol('proto.apollo.dreamview.CyberModule', null, global);
goog.exportSymbol('proto.apollo.dreamview.HMIMode', null, global);
goog.exportSymbol('proto.apollo.dreamview.Module', null, global);
goog.exportSymbol('proto.apollo.dreamview.ModuleMonitorConfig', null, global);
goog.exportSymbol('proto.apollo.dreamview.MonitoredComponent', null, global);
goog.exportSymbol('proto.apollo.dreamview.ProcessMonitorConfig', null, global);
goog.exportSymbol('proto.apollo.dreamview.ResourceMonitorConfig', null, global);
goog.exportSymbol('proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage', null, global);
goog.exportSymbol('proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad', null, global);
goog.exportSymbol('proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace', null, global);
goog.exportSymbol('proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ProcessMonitorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.ProcessMonitorConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.ProcessMonitorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ProcessMonitorConfig.displayName = 'proto.apollo.dreamview.ProcessMonitorConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ModuleMonitorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.ModuleMonitorConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.ModuleMonitorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ModuleMonitorConfig.displayName = 'proto.apollo.dreamview.ModuleMonitorConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ChannelMonitorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.ChannelMonitorConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.ChannelMonitorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ChannelMonitorConfig.displayName = 'proto.apollo.dreamview.ChannelMonitorConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ResourceMonitorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.ResourceMonitorConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.ResourceMonitorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ResourceMonitorConfig.displayName = 'proto.apollo.dreamview.ResourceMonitorConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.displayName = 'proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.displayName = 'proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.displayName = 'proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.displayName = 'proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.MonitoredComponent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.MonitoredComponent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.MonitoredComponent.displayName = 'proto.apollo.dreamview.MonitoredComponent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Module = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Module, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Module.displayName = 'proto.apollo.dreamview.Module';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.CyberModule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.CyberModule.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.CyberModule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.CyberModule.displayName = 'proto.apollo.dreamview.CyberModule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.HMIMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.HMIMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.HMIMode.displayName = 'proto.apollo.dreamview.HMIMode';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.ProcessMonitorConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ProcessMonitorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ProcessMonitorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ProcessMonitorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ProcessMonitorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandKeywordsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ProcessMonitorConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ProcessMonitorConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.commandKeywordsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ProcessMonitorConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ProcessMonitorConfig}
 */
proto.apollo.dreamview.ProcessMonitorConfig.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ProcessMonitorConfig();
  obj.commandKeywordsList != null && jspb.Message.setField(msg, 1, obj.commandKeywordsList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ProcessMonitorConfig}
 */
proto.apollo.dreamview.ProcessMonitorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ProcessMonitorConfig;
  return proto.apollo.dreamview.ProcessMonitorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ProcessMonitorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ProcessMonitorConfig}
 */
proto.apollo.dreamview.ProcessMonitorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCommandKeywords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ProcessMonitorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ProcessMonitorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ProcessMonitorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ProcessMonitorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandKeywordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string command_keywords = 1;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.ProcessMonitorConfig.prototype.getCommandKeywordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.ProcessMonitorConfig} returns this
 */
proto.apollo.dreamview.ProcessMonitorConfig.prototype.setCommandKeywordsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.ProcessMonitorConfig} returns this
 */
proto.apollo.dreamview.ProcessMonitorConfig.prototype.addCommandKeywords = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.ProcessMonitorConfig} returns this
 */
proto.apollo.dreamview.ProcessMonitorConfig.prototype.clearCommandKeywordsList = function() {
  return this.setCommandKeywordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.ModuleMonitorConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ModuleMonitorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ModuleMonitorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ModuleMonitorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ModuleMonitorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeNameList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ModuleMonitorConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ModuleMonitorConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.nodeNameList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ModuleMonitorConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ModuleMonitorConfig}
 */
proto.apollo.dreamview.ModuleMonitorConfig.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ModuleMonitorConfig();
  obj.nodeNameList != null && jspb.Message.setField(msg, 1, obj.nodeNameList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ModuleMonitorConfig}
 */
proto.apollo.dreamview.ModuleMonitorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ModuleMonitorConfig;
  return proto.apollo.dreamview.ModuleMonitorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ModuleMonitorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ModuleMonitorConfig}
 */
proto.apollo.dreamview.ModuleMonitorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNodeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ModuleMonitorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ModuleMonitorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ModuleMonitorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ModuleMonitorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string node_name = 1;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.ModuleMonitorConfig.prototype.getNodeNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.ModuleMonitorConfig} returns this
 */
proto.apollo.dreamview.ModuleMonitorConfig.prototype.setNodeNameList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.ModuleMonitorConfig} returns this
 */
proto.apollo.dreamview.ModuleMonitorConfig.prototype.addNodeName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.ModuleMonitorConfig} returns this
 */
proto.apollo.dreamview.ModuleMonitorConfig.prototype.clearNodeNameList = function() {
  return this.setNodeNameList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.ChannelMonitorConfig.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ChannelMonitorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ChannelMonitorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ChannelMonitorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    delayFatal: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 3.0),
    mandatoryFieldsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    minFrequencyAllowed: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    maxFrequencyAllowed: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 1000.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChannelMonitorConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ChannelMonitorConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.delayFatal;

  /** @type {?|undefined} */
  this.mandatoryFieldsList;

  /** @type {?|undefined} */
  this.minFrequencyAllowed;

  /** @type {?|undefined} */
  this.maxFrequencyAllowed;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ChannelMonitorConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig}
 */
proto.apollo.dreamview.ChannelMonitorConfig.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ChannelMonitorConfig();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.delayFatal != null && jspb.Message.setField(msg, 2, obj.delayFatal);
  obj.mandatoryFieldsList != null && jspb.Message.setField(msg, 3, obj.mandatoryFieldsList);
  obj.minFrequencyAllowed != null && jspb.Message.setField(msg, 4, obj.minFrequencyAllowed);
  obj.maxFrequencyAllowed != null && jspb.Message.setField(msg, 5, obj.maxFrequencyAllowed);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig}
 */
proto.apollo.dreamview.ChannelMonitorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ChannelMonitorConfig;
  return proto.apollo.dreamview.ChannelMonitorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ChannelMonitorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig}
 */
proto.apollo.dreamview.ChannelMonitorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDelayFatal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addMandatoryFields(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinFrequencyAllowed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxFrequencyAllowed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ChannelMonitorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ChannelMonitorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ChannelMonitorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMandatoryFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double delay_fatal = 2;
 * @return {number}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.getDelayFatal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.setDelayFatal = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.clearDelayFatal = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.hasDelayFatal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string mandatory_fields = 3;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.getMandatoryFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.setMandatoryFieldsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.addMandatoryFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.clearMandatoryFieldsList = function() {
  return this.setMandatoryFieldsList([]);
};


/**
 * optional double min_frequency_allowed = 4;
 * @return {number}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.getMinFrequencyAllowed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.setMinFrequencyAllowed = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.clearMinFrequencyAllowed = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.hasMinFrequencyAllowed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double max_frequency_allowed = 5;
 * @return {number}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.getMaxFrequencyAllowed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 1000.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.setMaxFrequencyAllowed = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ChannelMonitorConfig} returns this
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.clearMaxFrequencyAllowed = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ChannelMonitorConfig.prototype.hasMaxFrequencyAllowed = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.ResourceMonitorConfig.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ResourceMonitorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    diskSpacesList: jspb.Message.toObjectList(msg.getDiskSpacesList(),
    proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.toObject, includeInstance),
    cpuUsagesList: jspb.Message.toObjectList(msg.getCpuUsagesList(),
    proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.toObject, includeInstance),
    memoryUsagesList: jspb.Message.toObjectList(msg.getMemoryUsagesList(),
    proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.toObject, includeInstance),
    diskLoadUsagesList: jspb.Message.toObjectList(msg.getDiskLoadUsagesList(),
    proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ResourceMonitorConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ResourceMonitorConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.diskSpacesList;

  /** @type {?|undefined} */
  this.cpuUsagesList;

  /** @type {?|undefined} */
  this.memoryUsagesList;

  /** @type {?|undefined} */
  this.diskLoadUsagesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig}
 */
proto.apollo.dreamview.ResourceMonitorConfig.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig();
  obj.diskSpacesList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.diskSpacesList.map(
          proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.fromObject));
  obj.cpuUsagesList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.cpuUsagesList.map(
          proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.fromObject));
  obj.memoryUsagesList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.memoryUsagesList.map(
          proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.fromObject));
  obj.diskLoadUsagesList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.diskLoadUsagesList.map(
          proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig}
 */
proto.apollo.dreamview.ResourceMonitorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig;
  return proto.apollo.dreamview.ResourceMonitorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig}
 */
proto.apollo.dreamview.ResourceMonitorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace;
      reader.readMessage(value,proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.deserializeBinaryFromReader);
      msg.addDiskSpaces(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage;
      reader.readMessage(value,proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.deserializeBinaryFromReader);
      msg.addCpuUsages(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage;
      reader.readMessage(value,proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.deserializeBinaryFromReader);
      msg.addMemoryUsages(value);
      break;
    case 4:
      var value = new proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad;
      reader.readMessage(value,proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.deserializeBinaryFromReader);
      msg.addDiskLoadUsages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ResourceMonitorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiskSpacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.serializeBinaryToWriter
    );
  }
  f = message.getCpuUsagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.serializeBinaryToWriter
    );
  }
  f = message.getMemoryUsagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.serializeBinaryToWriter
    );
  }
  f = message.getDiskLoadUsagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    insufficientSpaceWarning: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    insufficientSpaceError: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DiskSpace as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.path;

  /** @type {?|undefined} */
  this.insufficientSpaceWarning;

  /** @type {?|undefined} */
  this.insufficientSpaceError;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace();
  obj.path != null && jspb.Message.setField(msg, 1, obj.path);
  obj.insufficientSpaceWarning != null && jspb.Message.setField(msg, 2, obj.insufficientSpaceWarning);
  obj.insufficientSpaceError != null && jspb.Message.setField(msg, 3, obj.insufficientSpaceError);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace;
  return proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInsufficientSpaceWarning(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInsufficientSpaceError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.setPath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.clearPath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 insufficient_space_warning = 2;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.getInsufficientSpaceWarning = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.setInsufficientSpaceWarning = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.clearInsufficientSpaceWarning = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.hasInsufficientSpaceWarning = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 insufficient_space_error = 3;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.getInsufficientSpaceError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.setInsufficientSpaceError = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.clearInsufficientSpaceError = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace.prototype.hasInsufficientSpaceError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    highCpuUsageWarning: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    highCpuUsageError: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    processDagPath: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CPUUsage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.highCpuUsageWarning;

  /** @type {?|undefined} */
  this.highCpuUsageError;

  /** @type {?|undefined} */
  this.processDagPath;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage();
  obj.highCpuUsageWarning != null && jspb.Message.setField(msg, 1, obj.highCpuUsageWarning);
  obj.highCpuUsageError != null && jspb.Message.setField(msg, 2, obj.highCpuUsageError);
  obj.processDagPath != null && jspb.Message.setField(msg, 3, obj.processDagPath);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage;
  return proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHighCpuUsageWarning(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHighCpuUsageError(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessDagPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional float high_cpu_usage_warning = 1;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.getHighCpuUsageWarning = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.setHighCpuUsageWarning = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.clearHighCpuUsageWarning = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.hasHighCpuUsageWarning = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float high_cpu_usage_error = 2;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.getHighCpuUsageError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.setHighCpuUsageError = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.clearHighCpuUsageError = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.hasHighCpuUsageError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string process_dag_path = 3;
 * @return {string}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.getProcessDagPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.setProcessDagPath = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.clearProcessDagPath = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage.prototype.hasProcessDagPath = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    highMemoryUsageWarning: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    highMemoryUsageError: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    processDagPath: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MemoryUsage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.highMemoryUsageWarning;

  /** @type {?|undefined} */
  this.highMemoryUsageError;

  /** @type {?|undefined} */
  this.processDagPath;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage();
  obj.highMemoryUsageWarning != null && jspb.Message.setField(msg, 1, obj.highMemoryUsageWarning);
  obj.highMemoryUsageError != null && jspb.Message.setField(msg, 2, obj.highMemoryUsageError);
  obj.processDagPath != null && jspb.Message.setField(msg, 3, obj.processDagPath);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage;
  return proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHighMemoryUsageWarning(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHighMemoryUsageError(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessDagPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 high_memory_usage_warning = 1;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.getHighMemoryUsageWarning = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.setHighMemoryUsageWarning = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.clearHighMemoryUsageWarning = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.hasHighMemoryUsageWarning = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 high_memory_usage_error = 2;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.getHighMemoryUsageError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.setHighMemoryUsageError = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.clearHighMemoryUsageError = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.hasHighMemoryUsageError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string process_dag_path = 3;
 * @return {string}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.getProcessDagPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.setProcessDagPath = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.clearProcessDagPath = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage.prototype.hasProcessDagPath = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.toObject = function(includeInstance, msg) {
  var f, obj = {
    highDiskLoadWarning: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    highDiskLoadError: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    deviceName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DiskLoad as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.highDiskLoadWarning;

  /** @type {?|undefined} */
  this.highDiskLoadError;

  /** @type {?|undefined} */
  this.deviceName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad();
  obj.highDiskLoadWarning != null && jspb.Message.setField(msg, 1, obj.highDiskLoadWarning);
  obj.highDiskLoadError != null && jspb.Message.setField(msg, 2, obj.highDiskLoadError);
  obj.deviceName != null && jspb.Message.setField(msg, 3, obj.deviceName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad;
  return proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHighDiskLoadWarning(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHighDiskLoadError(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 high_disk_load_warning = 1;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.getHighDiskLoadWarning = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.setHighDiskLoadWarning = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.clearHighDiskLoadWarning = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.hasHighDiskLoadWarning = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 high_disk_load_error = 2;
 * @return {number}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.getHighDiskLoadError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.setHighDiskLoadError = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.clearHighDiskLoadError = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.hasHighDiskLoadError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string device_name = 3;
 * @return {string}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.setDeviceName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.clearDeviceName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad.prototype.hasDeviceName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated DiskSpace disk_spaces = 1;
 * @return {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace>}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.getDiskSpacesList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace, 1));
};


/**
 * @param {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace>} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
*/
proto.apollo.dreamview.ResourceMonitorConfig.prototype.setDiskSpacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.addDiskSpaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.dreamview.ResourceMonitorConfig.DiskSpace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.clearDiskSpacesList = function() {
  return this.setDiskSpacesList([]);
};


/**
 * repeated CPUUsage cpu_usages = 2;
 * @return {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage>}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.getCpuUsagesList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage, 2));
};


/**
 * @param {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage>} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
*/
proto.apollo.dreamview.ResourceMonitorConfig.prototype.setCpuUsagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.addCpuUsages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.dreamview.ResourceMonitorConfig.CPUUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.clearCpuUsagesList = function() {
  return this.setCpuUsagesList([]);
};


/**
 * repeated MemoryUsage memory_usages = 3;
 * @return {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage>}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.getMemoryUsagesList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage, 3));
};


/**
 * @param {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage>} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
*/
proto.apollo.dreamview.ResourceMonitorConfig.prototype.setMemoryUsagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.addMemoryUsages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.dreamview.ResourceMonitorConfig.MemoryUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.clearMemoryUsagesList = function() {
  return this.setMemoryUsagesList([]);
};


/**
 * repeated DiskLoad disk_load_usages = 4;
 * @return {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad>}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.getDiskLoadUsagesList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad, 4));
};


/**
 * @param {!Array<!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad>} value
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
*/
proto.apollo.dreamview.ResourceMonitorConfig.prototype.setDiskLoadUsagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad}
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.addDiskLoadUsages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.dreamview.ResourceMonitorConfig.DiskLoad, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.ResourceMonitorConfig} returns this
 */
proto.apollo.dreamview.ResourceMonitorConfig.prototype.clearDiskLoadUsagesList = function() {
  return this.setDiskLoadUsagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.MonitoredComponent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.MonitoredComponent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.MonitoredComponent.toObject = function(includeInstance, msg) {
  var f, obj = {
    process: (f = msg.getProcess()) && proto.apollo.dreamview.ProcessMonitorConfig.toObject(includeInstance, f),
    channel: (f = msg.getChannel()) && proto.apollo.dreamview.ChannelMonitorConfig.toObject(includeInstance, f),
    resource: (f = msg.getResource()) && proto.apollo.dreamview.ResourceMonitorConfig.toObject(includeInstance, f),
    requiredForSafety: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    module: (f = msg.getModule()) && proto.apollo.dreamview.ModuleMonitorConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MonitoredComponent as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.MonitoredComponent.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.process;

  /** @type {?|undefined} */
  this.channel;

  /** @type {?|undefined} */
  this.resource;

  /** @type {?|undefined} */
  this.requiredForSafety;

  /** @type {?|undefined} */
  this.module;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.MonitoredComponent.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.MonitoredComponent}
 */
proto.apollo.dreamview.MonitoredComponent.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.MonitoredComponent();
  obj.process && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.dreamview.ProcessMonitorConfig.fromObject(obj.process));
  obj.channel && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.dreamview.ChannelMonitorConfig.fromObject(obj.channel));
  obj.resource && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.dreamview.ResourceMonitorConfig.fromObject(obj.resource));
  obj.requiredForSafety != null && jspb.Message.setField(msg, 4, obj.requiredForSafety);
  obj.module && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.dreamview.ModuleMonitorConfig.fromObject(obj.module));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.MonitoredComponent}
 */
proto.apollo.dreamview.MonitoredComponent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.MonitoredComponent;
  return proto.apollo.dreamview.MonitoredComponent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.MonitoredComponent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.MonitoredComponent}
 */
proto.apollo.dreamview.MonitoredComponent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dreamview.ProcessMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ProcessMonitorConfig.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.ChannelMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ChannelMonitorConfig.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.ResourceMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ResourceMonitorConfig.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequiredForSafety(value);
      break;
    case 5:
      var value = new proto.apollo.dreamview.ModuleMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ModuleMonitorConfig.deserializeBinaryFromReader);
      msg.setModule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.MonitoredComponent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.MonitoredComponent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.MonitoredComponent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.dreamview.ProcessMonitorConfig.serializeBinaryToWriter
    );
  }
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.dreamview.ChannelMonitorConfig.serializeBinaryToWriter
    );
  }
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.dreamview.ResourceMonitorConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getModule();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.dreamview.ModuleMonitorConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcessMonitorConfig process = 1;
 * @return {?proto.apollo.dreamview.ProcessMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getProcess = function() {
  return /** @type{?proto.apollo.dreamview.ProcessMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ProcessMonitorConfig, 1));
};


/**
 * @param {?proto.apollo.dreamview.ProcessMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelMonitorConfig channel = 2;
 * @return {?proto.apollo.dreamview.ChannelMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getChannel = function() {
  return /** @type{?proto.apollo.dreamview.ChannelMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ChannelMonitorConfig, 2));
};


/**
 * @param {?proto.apollo.dreamview.ChannelMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setChannel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearChannel = function() {
  return this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResourceMonitorConfig resource = 3;
 * @return {?proto.apollo.dreamview.ResourceMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getResource = function() {
  return /** @type{?proto.apollo.dreamview.ResourceMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ResourceMonitorConfig, 3));
};


/**
 * @param {?proto.apollo.dreamview.ResourceMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setResource = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasResource = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool required_for_safety = 4;
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getRequiredForSafety = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.setRequiredForSafety = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearRequiredForSafety = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasRequiredForSafety = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ModuleMonitorConfig module = 5;
 * @return {?proto.apollo.dreamview.ModuleMonitorConfig}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.getModule = function() {
  return /** @type{?proto.apollo.dreamview.ModuleMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ModuleMonitorConfig, 5));
};


/**
 * @param {?proto.apollo.dreamview.ModuleMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
*/
proto.apollo.dreamview.MonitoredComponent.prototype.setModule = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.MonitoredComponent} returns this
 */
proto.apollo.dreamview.MonitoredComponent.prototype.clearModule = function() {
  return this.setModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.MonitoredComponent.prototype.hasModule = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Module.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Module.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Module} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Module.toObject = function(includeInstance, msg) {
  var f, obj = {
    startCommand: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    stopCommand: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    processMonitorConfig: (f = msg.getProcessMonitorConfig()) && proto.apollo.dreamview.ProcessMonitorConfig.toObject(includeInstance, f),
    requiredForSafety: jspb.Message.getBooleanFieldWithDefault(msg, 4, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Module as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Module.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startCommand;

  /** @type {?|undefined} */
  this.stopCommand;

  /** @type {?|undefined} */
  this.processMonitorConfig;

  /** @type {?|undefined} */
  this.requiredForSafety;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Module.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Module}
 */
proto.apollo.dreamview.Module.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Module();
  obj.startCommand != null && jspb.Message.setField(msg, 1, obj.startCommand);
  obj.stopCommand != null && jspb.Message.setField(msg, 2, obj.stopCommand);
  obj.processMonitorConfig && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.dreamview.ProcessMonitorConfig.fromObject(obj.processMonitorConfig));
  obj.requiredForSafety != null && jspb.Message.setField(msg, 4, obj.requiredForSafety);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Module}
 */
proto.apollo.dreamview.Module.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Module;
  return proto.apollo.dreamview.Module.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Module} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Module}
 */
proto.apollo.dreamview.Module.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStopCommand(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.ProcessMonitorConfig;
      reader.readMessage(value,proto.apollo.dreamview.ProcessMonitorConfig.deserializeBinaryFromReader);
      msg.setProcessMonitorConfig(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequiredForSafety(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Module.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Module.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Module} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Module.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProcessMonitorConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.dreamview.ProcessMonitorConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string start_command = 1;
 * @return {string}
 */
proto.apollo.dreamview.Module.prototype.getStartCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Module} returns this
 */
proto.apollo.dreamview.Module.prototype.setStartCommand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Module} returns this
 */
proto.apollo.dreamview.Module.prototype.clearStartCommand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Module.prototype.hasStartCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string stop_command = 2;
 * @return {string}
 */
proto.apollo.dreamview.Module.prototype.getStopCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Module} returns this
 */
proto.apollo.dreamview.Module.prototype.setStopCommand = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Module} returns this
 */
proto.apollo.dreamview.Module.prototype.clearStopCommand = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Module.prototype.hasStopCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProcessMonitorConfig process_monitor_config = 3;
 * @return {?proto.apollo.dreamview.ProcessMonitorConfig}
 */
proto.apollo.dreamview.Module.prototype.getProcessMonitorConfig = function() {
  return /** @type{?proto.apollo.dreamview.ProcessMonitorConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ProcessMonitorConfig, 3));
};


/**
 * @param {?proto.apollo.dreamview.ProcessMonitorConfig|undefined} value
 * @return {!proto.apollo.dreamview.Module} returns this
*/
proto.apollo.dreamview.Module.prototype.setProcessMonitorConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Module} returns this
 */
proto.apollo.dreamview.Module.prototype.clearProcessMonitorConfig = function() {
  return this.setProcessMonitorConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Module.prototype.hasProcessMonitorConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool required_for_safety = 4;
 * @return {boolean}
 */
proto.apollo.dreamview.Module.prototype.getRequiredForSafety = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Module} returns this
 */
proto.apollo.dreamview.Module.prototype.setRequiredForSafety = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Module} returns this
 */
proto.apollo.dreamview.Module.prototype.clearRequiredForSafety = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Module.prototype.hasRequiredForSafety = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.CyberModule.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.CyberModule.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.CyberModule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.CyberModule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.CyberModule.toObject = function(includeInstance, msg) {
  var f, obj = {
    dagFilesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    requiredForSafety: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    processGroup: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CyberModule as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.CyberModule.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dagFilesList;

  /** @type {?|undefined} */
  this.requiredForSafety;

  /** @type {?|undefined} */
  this.processGroup;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.CyberModule.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.CyberModule}
 */
proto.apollo.dreamview.CyberModule.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.CyberModule();
  obj.dagFilesList != null && jspb.Message.setField(msg, 1, obj.dagFilesList);
  obj.requiredForSafety != null && jspb.Message.setField(msg, 2, obj.requiredForSafety);
  obj.processGroup != null && jspb.Message.setField(msg, 3, obj.processGroup);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.CyberModule}
 */
proto.apollo.dreamview.CyberModule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.CyberModule;
  return proto.apollo.dreamview.CyberModule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.CyberModule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.CyberModule}
 */
proto.apollo.dreamview.CyberModule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDagFiles(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequiredForSafety(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.CyberModule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.CyberModule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.CyberModule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.CyberModule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDagFilesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated string dag_files = 1;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.CyberModule.prototype.getDagFilesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.CyberModule} returns this
 */
proto.apollo.dreamview.CyberModule.prototype.setDagFilesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.CyberModule} returns this
 */
proto.apollo.dreamview.CyberModule.prototype.addDagFiles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.CyberModule} returns this
 */
proto.apollo.dreamview.CyberModule.prototype.clearDagFilesList = function() {
  return this.setDagFilesList([]);
};


/**
 * optional bool required_for_safety = 2;
 * @return {boolean}
 */
proto.apollo.dreamview.CyberModule.prototype.getRequiredForSafety = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.CyberModule} returns this
 */
proto.apollo.dreamview.CyberModule.prototype.setRequiredForSafety = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.CyberModule} returns this
 */
proto.apollo.dreamview.CyberModule.prototype.clearRequiredForSafety = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.CyberModule.prototype.hasRequiredForSafety = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string process_group = 3;
 * @return {string}
 */
proto.apollo.dreamview.CyberModule.prototype.getProcessGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.CyberModule} returns this
 */
proto.apollo.dreamview.CyberModule.prototype.setProcessGroup = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.CyberModule} returns this
 */
proto.apollo.dreamview.CyberModule.prototype.clearProcessGroup = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.CyberModule.prototype.hasProcessGroup = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.HMIMode.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.HMIMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.HMIMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.HMIMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    cyberModulesMap: (f = msg.getCyberModulesMap()) ? f.toObject(includeInstance, proto.apollo.dreamview.CyberModule.toObject) : [],
    modulesMap: (f = msg.getModulesMap()) ? f.toObject(includeInstance, proto.apollo.dreamview.Module.toObject) : [],
    monitoredComponentsMap: (f = msg.getMonitoredComponentsMap()) ? f.toObject(includeInstance, proto.apollo.dreamview.MonitoredComponent.toObject) : [],
    otherComponentsMap: (f = msg.getOtherComponentsMap()) ? f.toObject(includeInstance, proto.apollo.dreamview.ProcessMonitorConfig.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of HMIMode as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.HMIMode.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cyberModulesMap;

  /** @type {?|undefined} */
  this.modulesMap;

  /** @type {?|undefined} */
  this.monitoredComponentsMap;

  /** @type {?|undefined} */
  this.otherComponentsMap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.HMIMode.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.HMIMode}
 */
proto.apollo.dreamview.HMIMode.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.HMIMode();
  obj.cyberModulesMap && jspb.Message.setWrapperField(
      msg, 1, jspb.Map.fromObject(obj.cyberModulesMap, proto.apollo.dreamview.CyberModule, proto.apollo.dreamview.CyberModule.fromObject));
  obj.modulesMap && jspb.Message.setWrapperField(
      msg, 2, jspb.Map.fromObject(obj.modulesMap, proto.apollo.dreamview.Module, proto.apollo.dreamview.Module.fromObject));
  obj.monitoredComponentsMap && jspb.Message.setWrapperField(
      msg, 3, jspb.Map.fromObject(obj.monitoredComponentsMap, proto.apollo.dreamview.MonitoredComponent, proto.apollo.dreamview.MonitoredComponent.fromObject));
  obj.otherComponentsMap && jspb.Message.setWrapperField(
      msg, 4, jspb.Map.fromObject(obj.otherComponentsMap, proto.apollo.dreamview.ProcessMonitorConfig, proto.apollo.dreamview.ProcessMonitorConfig.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.HMIMode}
 */
proto.apollo.dreamview.HMIMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.HMIMode;
  return proto.apollo.dreamview.HMIMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.HMIMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.HMIMode}
 */
proto.apollo.dreamview.HMIMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getCyberModulesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.dreamview.CyberModule.deserializeBinaryFromReader, "", new proto.apollo.dreamview.CyberModule());
         });
      break;
    case 2:
      var value = msg.getModulesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.dreamview.Module.deserializeBinaryFromReader, "", new proto.apollo.dreamview.Module());
         });
      break;
    case 3:
      var value = msg.getMonitoredComponentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.dreamview.MonitoredComponent.deserializeBinaryFromReader, "", new proto.apollo.dreamview.MonitoredComponent());
         });
      break;
    case 4:
      var value = msg.getOtherComponentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.dreamview.ProcessMonitorConfig.deserializeBinaryFromReader, "", new proto.apollo.dreamview.ProcessMonitorConfig());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.HMIMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.HMIMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.HMIMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.HMIMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCyberModulesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.dreamview.CyberModule.serializeBinaryToWriter);
  }
  f = message.getModulesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.dreamview.Module.serializeBinaryToWriter);
  }
  f = message.getMonitoredComponentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.dreamview.MonitoredComponent.serializeBinaryToWriter);
  }
  f = message.getOtherComponentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.dreamview.ProcessMonitorConfig.serializeBinaryToWriter);
  }
};


/**
 * map<string, CyberModule> cyber_modules = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.dreamview.CyberModule>}
 */
proto.apollo.dreamview.HMIMode.prototype.getCyberModulesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.dreamview.CyberModule>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.apollo.dreamview.CyberModule));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.HMIMode} returns this
 */
proto.apollo.dreamview.HMIMode.prototype.clearCyberModulesMap = function() {
  this.getCyberModulesMap().clear();
  return this;};


/**
 * map<string, Module> modules = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.dreamview.Module>}
 */
proto.apollo.dreamview.HMIMode.prototype.getModulesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.dreamview.Module>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.apollo.dreamview.Module));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.HMIMode} returns this
 */
proto.apollo.dreamview.HMIMode.prototype.clearModulesMap = function() {
  this.getModulesMap().clear();
  return this;};


/**
 * map<string, MonitoredComponent> monitored_components = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.dreamview.MonitoredComponent>}
 */
proto.apollo.dreamview.HMIMode.prototype.getMonitoredComponentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.dreamview.MonitoredComponent>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.apollo.dreamview.MonitoredComponent));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.HMIMode} returns this
 */
proto.apollo.dreamview.HMIMode.prototype.clearMonitoredComponentsMap = function() {
  this.getMonitoredComponentsMap().clear();
  return this;};


/**
 * map<string, ProcessMonitorConfig> other_components = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.dreamview.ProcessMonitorConfig>}
 */
proto.apollo.dreamview.HMIMode.prototype.getOtherComponentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.dreamview.ProcessMonitorConfig>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.apollo.dreamview.ProcessMonitorConfig));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.HMIMode} returns this
 */
proto.apollo.dreamview.HMIMode.prototype.clearOtherComponentsMap = function() {
  this.getOtherComponentsMap().clear();
  return this;};


goog.object.extend(exports, proto.apollo.dreamview);
