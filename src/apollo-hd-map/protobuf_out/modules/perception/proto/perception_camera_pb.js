// source: modules/perception/proto/perception_camera.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_perception_proto_perception_obstacle_pb = require('../../../modules/perception/proto/perception_obstacle_pb.js');
goog.object.extend(proto, modules_perception_proto_perception_obstacle_pb);
goog.exportSymbol('proto.apollo.perception.camera.CameraCalibrator', null, global);
goog.exportSymbol('proto.apollo.perception.camera.CameraDebug', null, global);
goog.exportSymbol('proto.apollo.perception.camera.CameraErrorCode', null, global);
goog.exportSymbol('proto.apollo.perception.camera.CameraLaneLine', null, global);
goog.exportSymbol('proto.apollo.perception.camera.CameraObstacle', null, global);
goog.exportSymbol('proto.apollo.perception.camera.CameraObstacle.CameraType', null, global);
goog.exportSymbol('proto.apollo.perception.camera.EndPoints', null, global);
goog.exportSymbol('proto.apollo.perception.camera.LaneLineCubicCurve', null, global);
goog.exportSymbol('proto.apollo.perception.camera.LaneLinePositionType', null, global);
goog.exportSymbol('proto.apollo.perception.camera.LaneLineType', null, global);
goog.exportSymbol('proto.apollo.perception.camera.LaneLineUseType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.LaneLineCubicCurve = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.LaneLineCubicCurve, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.LaneLineCubicCurve.displayName = 'proto.apollo.perception.camera.LaneLineCubicCurve';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.EndPoints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.EndPoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.EndPoints.displayName = 'proto.apollo.perception.camera.EndPoints';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.CameraLaneLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.camera.CameraLaneLine.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.camera.CameraLaneLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.CameraLaneLine.displayName = 'proto.apollo.perception.camera.CameraLaneLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.CameraCalibrator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.CameraCalibrator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.CameraCalibrator.displayName = 'proto.apollo.perception.camera.CameraCalibrator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.CameraObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.camera.CameraObstacle.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.camera.CameraObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.CameraObstacle.displayName = 'proto.apollo.perception.camera.CameraObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.CameraDebug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.camera.CameraDebug.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.camera.CameraDebug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.CameraDebug.displayName = 'proto.apollo.perception.camera.CameraDebug';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.LaneLineCubicCurve.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.LaneLineCubicCurve} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.LaneLineCubicCurve.toObject = function(includeInstance, msg) {
  var f, obj = {
    longitudeMin: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    longitudeMax: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    a: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    b: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    c: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    d: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneLineCubicCurve as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.LaneLineCubicCurve.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.longitudeMin;

  /** @type {?|undefined} */
  this.longitudeMax;

  /** @type {?|undefined} */
  this.a;

  /** @type {?|undefined} */
  this.b;

  /** @type {?|undefined} */
  this.c;

  /** @type {?|undefined} */
  this.d;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.LaneLineCubicCurve.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.LaneLineCubicCurve();
  obj.longitudeMin != null && jspb.Message.setField(msg, 1, obj.longitudeMin);
  obj.longitudeMax != null && jspb.Message.setField(msg, 2, obj.longitudeMax);
  obj.a != null && jspb.Message.setField(msg, 3, obj.a);
  obj.b != null && jspb.Message.setField(msg, 4, obj.b);
  obj.c != null && jspb.Message.setField(msg, 5, obj.c);
  obj.d != null && jspb.Message.setField(msg, 6, obj.d);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.LaneLineCubicCurve;
  return proto.apollo.perception.camera.LaneLineCubicCurve.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.LaneLineCubicCurve} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitudeMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitudeMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setC(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setD(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.LaneLineCubicCurve.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.LaneLineCubicCurve} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.LaneLineCubicCurve.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional float longitude_min = 1;
 * @return {number}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.getLongitudeMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.setLongitudeMin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.clearLongitudeMin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.hasLongitudeMin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float longitude_max = 2;
 * @return {number}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.getLongitudeMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.setLongitudeMax = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.clearLongitudeMax = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.hasLongitudeMax = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float a = 3;
 * @return {number}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.setA = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.clearA = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.hasA = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float b = 4;
 * @return {number}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.setB = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.clearB = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.hasB = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float c = 5;
 * @return {number}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.getC = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.setC = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.clearC = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.hasC = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float d = 6;
 * @return {number}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.setD = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.LaneLineCubicCurve} returns this
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.clearD = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.LaneLineCubicCurve.prototype.hasD = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.EndPoints.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.EndPoints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.EndPoints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.EndPoints.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && modules_common_proto_geometry_pb.Point2D.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && modules_common_proto_geometry_pb.Point2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EndPoints as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.EndPoints.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.start;

  /** @type {?|undefined} */
  this.end;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.EndPoints.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.EndPoints}
 */
proto.apollo.perception.camera.EndPoints.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.EndPoints();
  obj.start && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_geometry_pb.Point2D.fromObject(obj.start));
  obj.end && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.Point2D.fromObject(obj.end));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.EndPoints}
 */
proto.apollo.perception.camera.EndPoints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.EndPoints;
  return proto.apollo.perception.camera.EndPoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.EndPoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.EndPoints}
 */
proto.apollo.perception.camera.EndPoints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.EndPoints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.EndPoints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.EndPoints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.EndPoints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.Point2D start = 1;
 * @return {?proto.apollo.common.Point2D}
 */
proto.apollo.perception.camera.EndPoints.prototype.getStart = function() {
  return /** @type{?proto.apollo.common.Point2D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point2D, 1));
};


/**
 * @param {?proto.apollo.common.Point2D|undefined} value
 * @return {!proto.apollo.perception.camera.EndPoints} returns this
*/
proto.apollo.perception.camera.EndPoints.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.EndPoints} returns this
 */
proto.apollo.perception.camera.EndPoints.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.EndPoints.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.Point2D end = 2;
 * @return {?proto.apollo.common.Point2D}
 */
proto.apollo.perception.camera.EndPoints.prototype.getEnd = function() {
  return /** @type{?proto.apollo.common.Point2D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point2D, 2));
};


/**
 * @param {?proto.apollo.common.Point2D|undefined} value
 * @return {!proto.apollo.perception.camera.EndPoints} returns this
*/
proto.apollo.perception.camera.EndPoints.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.EndPoints} returns this
 */
proto.apollo.perception.camera.EndPoints.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.EndPoints.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.camera.CameraLaneLine.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.CameraLaneLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.CameraLaneLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraLaneLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    posType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    curveCameraCoord: (f = msg.getCurveCameraCoord()) && proto.apollo.perception.camera.LaneLineCubicCurve.toObject(includeInstance, f),
    curveImageCoord: (f = msg.getCurveImageCoord()) && proto.apollo.perception.camera.LaneLineCubicCurve.toObject(includeInstance, f),
    curveCameraPointSetList: jspb.Message.toObjectList(msg.getCurveCameraPointSetList(),
    modules_common_proto_geometry_pb.Point3D.toObject, includeInstance),
    curveImagePointSetList: jspb.Message.toObjectList(msg.getCurveImagePointSetList(),
    modules_common_proto_geometry_pb.Point2D.toObject, includeInstance),
    imageEndPointSetList: jspb.Message.toObjectList(msg.getImageEndPointSetList(),
    proto.apollo.perception.camera.EndPoints.toObject, includeInstance),
    trackId: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    confidence: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    useType: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CameraLaneLine as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.CameraLaneLine.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.posType;

  /** @type {?|undefined} */
  this.curveCameraCoord;

  /** @type {?|undefined} */
  this.curveImageCoord;

  /** @type {?|undefined} */
  this.curveCameraPointSetList;

  /** @type {?|undefined} */
  this.curveImagePointSetList;

  /** @type {?|undefined} */
  this.imageEndPointSetList;

  /** @type {?|undefined} */
  this.trackId;

  /** @type {?|undefined} */
  this.confidence;

  /** @type {?|undefined} */
  this.useType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.CameraLaneLine.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.CameraLaneLine}
 */
proto.apollo.perception.camera.CameraLaneLine.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.CameraLaneLine();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.posType != null && jspb.Message.setField(msg, 2, obj.posType);
  obj.curveCameraCoord && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.camera.LaneLineCubicCurve.fromObject(obj.curveCameraCoord));
  obj.curveImageCoord && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.camera.LaneLineCubicCurve.fromObject(obj.curveImageCoord));
  obj.curveCameraPointSetList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.curveCameraPointSetList.map(
          modules_common_proto_geometry_pb.Point3D.fromObject));
  obj.curveImagePointSetList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.curveImagePointSetList.map(
          modules_common_proto_geometry_pb.Point2D.fromObject));
  obj.imageEndPointSetList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.imageEndPointSetList.map(
          proto.apollo.perception.camera.EndPoints.fromObject));
  obj.trackId != null && jspb.Message.setField(msg, 8, obj.trackId);
  obj.confidence != null && jspb.Message.setField(msg, 9, obj.confidence);
  obj.useType != null && jspb.Message.setField(msg, 10, obj.useType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.CameraLaneLine}
 */
proto.apollo.perception.camera.CameraLaneLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.CameraLaneLine;
  return proto.apollo.perception.camera.CameraLaneLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.CameraLaneLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.CameraLaneLine}
 */
proto.apollo.perception.camera.CameraLaneLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.camera.LaneLineType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.perception.camera.LaneLinePositionType} */ (reader.readEnum());
      msg.setPosType(value);
      break;
    case 3:
      var value = new proto.apollo.perception.camera.LaneLineCubicCurve;
      reader.readMessage(value,proto.apollo.perception.camera.LaneLineCubicCurve.deserializeBinaryFromReader);
      msg.setCurveCameraCoord(value);
      break;
    case 4:
      var value = new proto.apollo.perception.camera.LaneLineCubicCurve;
      reader.readMessage(value,proto.apollo.perception.camera.LaneLineCubicCurve.deserializeBinaryFromReader);
      msg.setCurveImageCoord(value);
      break;
    case 5:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.addCurveCameraPointSet(value);
      break;
    case 6:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.addCurveImagePointSet(value);
      break;
    case 7:
      var value = new proto.apollo.perception.camera.EndPoints;
      reader.readMessage(value,proto.apollo.perception.camera.EndPoints.deserializeBinaryFromReader);
      msg.addImageEndPointSet(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrackId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 10:
      var value = /** @type {!proto.apollo.perception.camera.LaneLineUseType} */ (reader.readEnum());
      msg.setUseType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.CameraLaneLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.CameraLaneLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraLaneLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.camera.LaneLineType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.camera.LaneLinePositionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCurveCameraCoord();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.camera.LaneLineCubicCurve.serializeBinaryToWriter
    );
  }
  f = message.getCurveImageCoord();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.camera.LaneLineCubicCurve.serializeBinaryToWriter
    );
  }
  f = message.getCurveCameraPointSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getCurveImagePointSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getImageEndPointSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.perception.camera.EndPoints.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.camera.LaneLineUseType} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional LaneLineType type = 1;
 * @return {!proto.apollo.perception.camera.LaneLineType}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.camera.LaneLineType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.camera.LaneLineType} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LaneLinePositionType pos_type = 2;
 * @return {!proto.apollo.perception.camera.LaneLinePositionType}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getPosType = function() {
  return /** @type {!proto.apollo.perception.camera.LaneLinePositionType} */ (jspb.Message.getFieldWithDefault(this, 2, -5));
};


/**
 * @param {!proto.apollo.perception.camera.LaneLinePositionType} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.setPosType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearPosType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.hasPosType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LaneLineCubicCurve curve_camera_coord = 3;
 * @return {?proto.apollo.perception.camera.LaneLineCubicCurve}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getCurveCameraCoord = function() {
  return /** @type{?proto.apollo.perception.camera.LaneLineCubicCurve} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.LaneLineCubicCurve, 3));
};


/**
 * @param {?proto.apollo.perception.camera.LaneLineCubicCurve|undefined} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
*/
proto.apollo.perception.camera.CameraLaneLine.prototype.setCurveCameraCoord = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearCurveCameraCoord = function() {
  return this.setCurveCameraCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.hasCurveCameraCoord = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LaneLineCubicCurve curve_image_coord = 4;
 * @return {?proto.apollo.perception.camera.LaneLineCubicCurve}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getCurveImageCoord = function() {
  return /** @type{?proto.apollo.perception.camera.LaneLineCubicCurve} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.LaneLineCubicCurve, 4));
};


/**
 * @param {?proto.apollo.perception.camera.LaneLineCubicCurve|undefined} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
*/
proto.apollo.perception.camera.CameraLaneLine.prototype.setCurveImageCoord = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearCurveImageCoord = function() {
  return this.setCurveImageCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.hasCurveImageCoord = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated apollo.common.Point3D curve_camera_point_set = 5;
 * @return {!Array<!proto.apollo.common.Point3D>}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getCurveCameraPointSetList = function() {
  return /** @type{!Array<!proto.apollo.common.Point3D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point3D, 5));
};


/**
 * @param {!Array<!proto.apollo.common.Point3D>} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
*/
proto.apollo.perception.camera.CameraLaneLine.prototype.setCurveCameraPointSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.common.Point3D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point3D}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.addCurveCameraPointSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.common.Point3D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearCurveCameraPointSetList = function() {
  return this.setCurveCameraPointSetList([]);
};


/**
 * repeated apollo.common.Point2D curve_image_point_set = 6;
 * @return {!Array<!proto.apollo.common.Point2D>}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getCurveImagePointSetList = function() {
  return /** @type{!Array<!proto.apollo.common.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point2D, 6));
};


/**
 * @param {!Array<!proto.apollo.common.Point2D>} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
*/
proto.apollo.perception.camera.CameraLaneLine.prototype.setCurveImagePointSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.common.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point2D}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.addCurveImagePointSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.common.Point2D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearCurveImagePointSetList = function() {
  return this.setCurveImagePointSetList([]);
};


/**
 * repeated EndPoints image_end_point_set = 7;
 * @return {!Array<!proto.apollo.perception.camera.EndPoints>}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getImageEndPointSetList = function() {
  return /** @type{!Array<!proto.apollo.perception.camera.EndPoints>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.camera.EndPoints, 7));
};


/**
 * @param {!Array<!proto.apollo.perception.camera.EndPoints>} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
*/
proto.apollo.perception.camera.CameraLaneLine.prototype.setImageEndPointSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.perception.camera.EndPoints=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.EndPoints}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.addImageEndPointSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.perception.camera.EndPoints, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearImageEndPointSetList = function() {
  return this.setImageEndPointSetList([]);
};


/**
 * optional int32 track_id = 8;
 * @return {number}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getTrackId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.setTrackId = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearTrackId = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.hasTrackId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float confidence = 9;
 * @return {number}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional LaneLineUseType use_type = 10;
 * @return {!proto.apollo.perception.camera.LaneLineUseType}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.getUseType = function() {
  return /** @type {!proto.apollo.perception.camera.LaneLineUseType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.apollo.perception.camera.LaneLineUseType} value
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.setUseType = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraLaneLine} returns this
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.clearUseType = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraLaneLine.prototype.hasUseType = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.CameraCalibrator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.CameraCalibrator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraCalibrator.toObject = function(includeInstance, msg) {
  var f, obj = {
    pitchAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    cameraHeight: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CameraCalibrator as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.CameraCalibrator.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pitchAngle;

  /** @type {?|undefined} */
  this.cameraHeight;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.CameraCalibrator.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.CameraCalibrator}
 */
proto.apollo.perception.camera.CameraCalibrator.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.CameraCalibrator();
  obj.pitchAngle != null && jspb.Message.setField(msg, 1, obj.pitchAngle);
  obj.cameraHeight != null && jspb.Message.setField(msg, 2, obj.cameraHeight);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.CameraCalibrator}
 */
proto.apollo.perception.camera.CameraCalibrator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.CameraCalibrator;
  return proto.apollo.perception.camera.CameraCalibrator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.CameraCalibrator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.CameraCalibrator}
 */
proto.apollo.perception.camera.CameraCalibrator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchAngle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCameraHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.CameraCalibrator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.CameraCalibrator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraCalibrator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float pitch_angle = 1;
 * @return {number}
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.getPitchAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.CameraCalibrator} returns this
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.setPitchAngle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraCalibrator} returns this
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.clearPitchAngle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.hasPitchAngle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float camera_height = 2;
 * @return {number}
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.getCameraHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.CameraCalibrator} returns this
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.setCameraHeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraCalibrator} returns this
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.clearCameraHeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraCalibrator.prototype.hasCameraHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.camera.CameraObstacle.repeatedFields_ = [22,25,26];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.CameraObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.CameraObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    obstacle: (f = msg.getObstacle()) && modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.toObject(includeInstance, f),
    type: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    typeProbsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 22)) == null ? undefined : f,
    upperLeft: (f = msg.getUpperLeft()) && modules_common_proto_geometry_pb.Point2D.toObject(includeInstance, f),
    lowerRight: (f = msg.getLowerRight()) && modules_common_proto_geometry_pb.Point2D.toObject(includeInstance, f),
    keyPointsList: jspb.Message.toObjectList(msg.getKeyPointsList(),
    modules_common_proto_geometry_pb.Point2D.toObject, includeInstance),
    debugMessageList: (f = jspb.Message.getRepeatedField(msg, 26)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CameraObstacle as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.CameraObstacle.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.obstacle;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.typeProbsList;

  /** @type {?|undefined} */
  this.upperLeft;

  /** @type {?|undefined} */
  this.lowerRight;

  /** @type {?|undefined} */
  this.keyPointsList;

  /** @type {?|undefined} */
  this.debugMessageList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.CameraObstacle.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.CameraObstacle}
 */
proto.apollo.perception.camera.CameraObstacle.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.CameraObstacle();
  obj.obstacle && jspb.Message.setWrapperField(
      msg, 1, modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.fromObject(obj.obstacle));
  obj.type != null && jspb.Message.setField(msg, 21, obj.type);
  obj.typeProbsList != null && jspb.Message.setField(msg, 22, obj.typeProbsList);
  obj.upperLeft && jspb.Message.setWrapperField(
      msg, 23, modules_common_proto_geometry_pb.Point2D.fromObject(obj.upperLeft));
  obj.lowerRight && jspb.Message.setWrapperField(
      msg, 24, modules_common_proto_geometry_pb.Point2D.fromObject(obj.lowerRight));
  obj.keyPointsList && jspb.Message.setRepeatedWrapperField(
      msg, 25, obj.keyPointsList.map(
          modules_common_proto_geometry_pb.Point2D.fromObject));
  obj.debugMessageList != null && jspb.Message.setField(msg, 26, obj.debugMessageList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.CameraObstacle}
 */
proto.apollo.perception.camera.CameraObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.CameraObstacle;
  return proto.apollo.perception.camera.CameraObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.CameraObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.CameraObstacle}
 */
proto.apollo.perception.camera.CameraObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_perception_proto_perception_obstacle_pb.PerceptionObstacle;
      reader.readMessage(value,modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.deserializeBinaryFromReader);
      msg.setObstacle(value);
      break;
    case 21:
      var value = /** @type {!proto.apollo.perception.camera.CameraObstacle.CameraType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 22:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTypeProbs(values[i]);
      }
      break;
    case 23:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.setUpperLeft(value);
      break;
    case 24:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.setLowerRight(value);
      break;
    case 25:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.addKeyPoints(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.addDebugMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.CameraObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.CameraObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObstacle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.camera.CameraObstacle.CameraType} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getTypeProbsList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      22,
      f
    );
  }
  f = message.getUpperLeft();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getLowerRight();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getKeyPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getDebugMessageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      26,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.camera.CameraObstacle.CameraType = {
  UNKNOWN: 0,
  UNKNOWN_MOVABLE: 1,
  UNKNOWN_UNMOVABLE: 2,
  PEDESTRIAN: 3,
  BICYCLE: 4,
  VEHICLE: 5
};

/**
 * optional apollo.perception.PerceptionObstacle obstacle = 1;
 * @return {?proto.apollo.perception.PerceptionObstacle}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.getObstacle = function() {
  return /** @type{?proto.apollo.perception.PerceptionObstacle} */ (
    jspb.Message.getWrapperField(this, modules_perception_proto_perception_obstacle_pb.PerceptionObstacle, 1));
};


/**
 * @param {?proto.apollo.perception.PerceptionObstacle|undefined} value
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
*/
proto.apollo.perception.camera.CameraObstacle.prototype.setObstacle = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.clearObstacle = function() {
  return this.setObstacle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.hasObstacle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CameraType type = 21;
 * @return {!proto.apollo.perception.camera.CameraObstacle.CameraType}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.camera.CameraObstacle.CameraType} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.apollo.perception.camera.CameraObstacle.CameraType} value
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.setType = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.clearType = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.hasType = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated float type_probs = 22;
 * @return {!Array<number>}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.getTypeProbsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 22));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.setTypeProbsList = function(value) {
  return jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.addTypeProbs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.clearTypeProbsList = function() {
  return this.setTypeProbsList([]);
};


/**
 * optional apollo.common.Point2D upper_left = 23;
 * @return {?proto.apollo.common.Point2D}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.getUpperLeft = function() {
  return /** @type{?proto.apollo.common.Point2D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point2D, 23));
};


/**
 * @param {?proto.apollo.common.Point2D|undefined} value
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
*/
proto.apollo.perception.camera.CameraObstacle.prototype.setUpperLeft = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.clearUpperLeft = function() {
  return this.setUpperLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.hasUpperLeft = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional apollo.common.Point2D lower_right = 24;
 * @return {?proto.apollo.common.Point2D}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.getLowerRight = function() {
  return /** @type{?proto.apollo.common.Point2D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point2D, 24));
};


/**
 * @param {?proto.apollo.common.Point2D|undefined} value
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
*/
proto.apollo.perception.camera.CameraObstacle.prototype.setLowerRight = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.clearLowerRight = function() {
  return this.setLowerRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.hasLowerRight = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * repeated apollo.common.Point2D key_points = 25;
 * @return {!Array<!proto.apollo.common.Point2D>}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.getKeyPointsList = function() {
  return /** @type{!Array<!proto.apollo.common.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point2D, 25));
};


/**
 * @param {!Array<!proto.apollo.common.Point2D>} value
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
*/
proto.apollo.perception.camera.CameraObstacle.prototype.setKeyPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.apollo.common.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point2D}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.addKeyPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.apollo.common.Point2D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.clearKeyPointsList = function() {
  return this.setKeyPointsList([]);
};


/**
 * repeated string debug_message = 26;
 * @return {!Array<string>}
 */
proto.apollo.perception.camera.CameraObstacle.prototype.getDebugMessageList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 26));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.setDebugMessageList = function(value) {
  return jspb.Message.setField(this, 26, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.addDebugMessage = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 26, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraObstacle} returns this
 */
proto.apollo.perception.camera.CameraObstacle.prototype.clearDebugMessageList = function() {
  return this.setDebugMessageList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.camera.CameraDebug.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.CameraDebug.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.CameraDebug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.CameraDebug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraDebug.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    sourceTopic: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    errorCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cameraCalibrator: (f = msg.getCameraCalibrator()) && proto.apollo.perception.camera.CameraCalibrator.toObject(includeInstance, f),
    cameraLanelineList: jspb.Message.toObjectList(msg.getCameraLanelineList(),
    proto.apollo.perception.camera.CameraLaneLine.toObject, includeInstance),
    cameraObstacleList: jspb.Message.toObjectList(msg.getCameraObstacleList(),
    proto.apollo.perception.camera.CameraObstacle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CameraDebug as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.CameraDebug.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.sourceTopic;

  /** @type {?|undefined} */
  this.errorCode;

  /** @type {?|undefined} */
  this.cameraCalibrator;

  /** @type {?|undefined} */
  this.cameraLanelineList;

  /** @type {?|undefined} */
  this.cameraObstacleList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.CameraDebug.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.CameraDebug}
 */
proto.apollo.perception.camera.CameraDebug.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.CameraDebug();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.sourceTopic != null && jspb.Message.setField(msg, 2, obj.sourceTopic);
  obj.errorCode != null && jspb.Message.setField(msg, 3, obj.errorCode);
  obj.cameraCalibrator && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.camera.CameraCalibrator.fromObject(obj.cameraCalibrator));
  obj.cameraLanelineList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.cameraLanelineList.map(
          proto.apollo.perception.camera.CameraLaneLine.fromObject));
  obj.cameraObstacleList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.cameraObstacleList.map(
          proto.apollo.perception.camera.CameraObstacle.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.CameraDebug}
 */
proto.apollo.perception.camera.CameraDebug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.CameraDebug;
  return proto.apollo.perception.camera.CameraDebug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.CameraDebug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.CameraDebug}
 */
proto.apollo.perception.camera.CameraDebug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceTopic(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.perception.camera.CameraErrorCode} */ (reader.readEnum());
      msg.setErrorCode(value);
      break;
    case 4:
      var value = new proto.apollo.perception.camera.CameraCalibrator;
      reader.readMessage(value,proto.apollo.perception.camera.CameraCalibrator.deserializeBinaryFromReader);
      msg.setCameraCalibrator(value);
      break;
    case 5:
      var value = new proto.apollo.perception.camera.CameraLaneLine;
      reader.readMessage(value,proto.apollo.perception.camera.CameraLaneLine.deserializeBinaryFromReader);
      msg.addCameraLaneline(value);
      break;
    case 6:
      var value = new proto.apollo.perception.camera.CameraObstacle;
      reader.readMessage(value,proto.apollo.perception.camera.CameraObstacle.deserializeBinaryFromReader);
      msg.addCameraObstacle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.CameraDebug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.CameraDebug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.CameraDebug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.CameraDebug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.camera.CameraErrorCode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCameraCalibrator();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.camera.CameraCalibrator.serializeBinaryToWriter
    );
  }
  f = message.getCameraLanelineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.perception.camera.CameraLaneLine.serializeBinaryToWriter
    );
  }
  f = message.getCameraObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.perception.camera.CameraObstacle.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.perception.camera.CameraDebug.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
*/
proto.apollo.perception.camera.CameraDebug.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraDebug.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string source_topic = 2;
 * @return {string}
 */
proto.apollo.perception.camera.CameraDebug.prototype.getSourceTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.setSourceTopic = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.clearSourceTopic = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraDebug.prototype.hasSourceTopic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CameraErrorCode error_code = 3;
 * @return {!proto.apollo.perception.camera.CameraErrorCode}
 */
proto.apollo.perception.camera.CameraDebug.prototype.getErrorCode = function() {
  return /** @type {!proto.apollo.perception.camera.CameraErrorCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.perception.camera.CameraErrorCode} value
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.setErrorCode = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.clearErrorCode = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraDebug.prototype.hasErrorCode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CameraCalibrator camera_calibrator = 4;
 * @return {?proto.apollo.perception.camera.CameraCalibrator}
 */
proto.apollo.perception.camera.CameraDebug.prototype.getCameraCalibrator = function() {
  return /** @type{?proto.apollo.perception.camera.CameraCalibrator} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.CameraCalibrator, 4));
};


/**
 * @param {?proto.apollo.perception.camera.CameraCalibrator|undefined} value
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
*/
proto.apollo.perception.camera.CameraDebug.prototype.setCameraCalibrator = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.clearCameraCalibrator = function() {
  return this.setCameraCalibrator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.CameraDebug.prototype.hasCameraCalibrator = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CameraLaneLine camera_laneline = 5;
 * @return {!Array<!proto.apollo.perception.camera.CameraLaneLine>}
 */
proto.apollo.perception.camera.CameraDebug.prototype.getCameraLanelineList = function() {
  return /** @type{!Array<!proto.apollo.perception.camera.CameraLaneLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.camera.CameraLaneLine, 5));
};


/**
 * @param {!Array<!proto.apollo.perception.camera.CameraLaneLine>} value
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
*/
proto.apollo.perception.camera.CameraDebug.prototype.setCameraLanelineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.perception.camera.CameraLaneLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.CameraLaneLine}
 */
proto.apollo.perception.camera.CameraDebug.prototype.addCameraLaneline = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.perception.camera.CameraLaneLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.clearCameraLanelineList = function() {
  return this.setCameraLanelineList([]);
};


/**
 * repeated CameraObstacle camera_obstacle = 6;
 * @return {!Array<!proto.apollo.perception.camera.CameraObstacle>}
 */
proto.apollo.perception.camera.CameraDebug.prototype.getCameraObstacleList = function() {
  return /** @type{!Array<!proto.apollo.perception.camera.CameraObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.camera.CameraObstacle, 6));
};


/**
 * @param {!Array<!proto.apollo.perception.camera.CameraObstacle>} value
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
*/
proto.apollo.perception.camera.CameraDebug.prototype.setCameraObstacleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.perception.camera.CameraObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.CameraObstacle}
 */
proto.apollo.perception.camera.CameraDebug.prototype.addCameraObstacle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.perception.camera.CameraObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.CameraDebug} returns this
 */
proto.apollo.perception.camera.CameraDebug.prototype.clearCameraObstacleList = function() {
  return this.setCameraObstacleList([]);
};


/**
 * @enum {number}
 */
proto.apollo.perception.camera.CameraErrorCode = {
  ERROR_NONE: 0,
  ERROR_UNKNOWN: 1
};

/**
 * @enum {number}
 */
proto.apollo.perception.camera.LaneLineType = {
  WHITE_DASHED: 0,
  WHITE_SOLID: 1,
  YELLOW_DASHED: 2,
  YELLOW_SOLID: 3
};

/**
 * @enum {number}
 */
proto.apollo.perception.camera.LaneLinePositionType = {
  BOLLARD_LEFT: -5,
  FOURTH_LEFT: -4,
  THIRD_LEFT: -3,
  ADJACENT_LEFT: -2,
  EGO_LEFT: -1,
  EGO_RIGHT: 1,
  ADJACENT_RIGHT: 2,
  THIRD_RIGHT: 3,
  FOURTH_RIGHT: 4,
  BOLLARD_RIGHT: 5,
  OTHER: 6,
  UNKNOWN: 7
};

/**
 * @enum {number}
 */
proto.apollo.perception.camera.LaneLineUseType = {
  REAL: 0,
  VIRTUAL: 1
};

goog.object.extend(exports, proto.apollo.perception.camera);
