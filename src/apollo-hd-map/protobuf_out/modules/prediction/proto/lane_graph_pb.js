// source: modules/prediction/proto/lane_graph.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_map_proto_map_lane_pb = require('../../../modules/map/proto/map_lane_pb.js');
goog.object.extend(proto, modules_map_proto_map_lane_pb);
goog.exportSymbol('proto.apollo.prediction.LaneGraph', null, global);
goog.exportSymbol('proto.apollo.prediction.LaneObstacle', null, global);
goog.exportSymbol('proto.apollo.prediction.LanePoint', null, global);
goog.exportSymbol('proto.apollo.prediction.LanePoint.ScenarioType', null, global);
goog.exportSymbol('proto.apollo.prediction.LaneSegment', null, global);
goog.exportSymbol('proto.apollo.prediction.LaneSequence', null, global);
goog.exportSymbol('proto.apollo.prediction.LaneSequence.BehaviorType', null, global);
goog.exportSymbol('proto.apollo.prediction.LaneSequence.Features', null, global);
goog.exportSymbol('proto.apollo.prediction.NearbyObstacle', null, global);
goog.exportSymbol('proto.apollo.prediction.StopSign', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.LanePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.LanePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.LanePoint.displayName = 'proto.apollo.prediction.LanePoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.LaneSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.LaneSegment.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.LaneSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.LaneSegment.displayName = 'proto.apollo.prediction.LaneSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.NearbyObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.NearbyObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.NearbyObstacle.displayName = 'proto.apollo.prediction.NearbyObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.StopSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.StopSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.StopSign.displayName = 'proto.apollo.prediction.StopSign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.LaneSequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.LaneSequence.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.LaneSequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.LaneSequence.displayName = 'proto.apollo.prediction.LaneSequence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.LaneSequence.Features = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.LaneSequence.Features.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.LaneSequence.Features, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.LaneSequence.Features.displayName = 'proto.apollo.prediction.LaneSequence.Features';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.LaneGraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.LaneGraph.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.LaneGraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.LaneGraph.displayName = 'proto.apollo.prediction.LaneGraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.LaneObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.LaneObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.LaneObstacle.displayName = 'proto.apollo.prediction.LaneObstacle';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.LanePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.LanePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.LanePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LanePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    heading: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    relativeS: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    relativeL: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    angleDiff: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    kappa: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    scenarioType: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    speedLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LanePoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.LanePoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.relativeS;

  /** @type {?|undefined} */
  this.relativeL;

  /** @type {?|undefined} */
  this.angleDiff;

  /** @type {?|undefined} */
  this.kappa;

  /** @type {?|undefined} */
  this.scenarioType;

  /** @type {?|undefined} */
  this.speedLimit;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.LanePoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.LanePoint}
 */
proto.apollo.prediction.LanePoint.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.LanePoint();
  obj.position && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_geometry_pb.Point3D.fromObject(obj.position));
  obj.heading != null && jspb.Message.setField(msg, 2, obj.heading);
  obj.width != null && jspb.Message.setField(msg, 3, obj.width);
  obj.relativeS != null && jspb.Message.setField(msg, 4, obj.relativeS);
  obj.relativeL != null && jspb.Message.setField(msg, 5, obj.relativeL);
  obj.angleDiff != null && jspb.Message.setField(msg, 6, obj.angleDiff);
  obj.kappa != null && jspb.Message.setField(msg, 7, obj.kappa);
  obj.scenarioType != null && jspb.Message.setField(msg, 8, obj.scenarioType);
  obj.speedLimit != null && jspb.Message.setField(msg, 9, obj.speedLimit);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.LanePoint}
 */
proto.apollo.prediction.LanePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.LanePoint;
  return proto.apollo.prediction.LanePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.LanePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.LanePoint}
 */
proto.apollo.prediction.LanePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeS(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeL(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAngleDiff(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappa(value);
      break;
    case 8:
      var value = /** @type {!proto.apollo.prediction.LanePoint.ScenarioType} */ (reader.readEnum());
      msg.setScenarioType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.LanePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.LanePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.LanePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LanePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {!proto.apollo.prediction.LanePoint.ScenarioType} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.prediction.LanePoint.ScenarioType = {
  URBAN_ROAD: 0,
  JUNCTION: 1,
  HIGHWAY: 2
};

/**
 * optional apollo.common.Point3D position = 1;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.LanePoint.prototype.getPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 1));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
*/
proto.apollo.prediction.LanePoint.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double heading = 2;
 * @return {number}
 */
proto.apollo.prediction.LanePoint.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double width = 3;
 * @return {number}
 */
proto.apollo.prediction.LanePoint.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double relative_s = 4;
 * @return {number}
 */
proto.apollo.prediction.LanePoint.prototype.getRelativeS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setRelativeS = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearRelativeS = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasRelativeS = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double relative_l = 5;
 * @return {number}
 */
proto.apollo.prediction.LanePoint.prototype.getRelativeL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setRelativeL = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearRelativeL = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasRelativeL = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double angle_diff = 6;
 * @return {number}
 */
proto.apollo.prediction.LanePoint.prototype.getAngleDiff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setAngleDiff = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearAngleDiff = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasAngleDiff = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double kappa = 7;
 * @return {number}
 */
proto.apollo.prediction.LanePoint.prototype.getKappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setKappa = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearKappa = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasKappa = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ScenarioType scenario_type = 8;
 * @return {!proto.apollo.prediction.LanePoint.ScenarioType}
 */
proto.apollo.prediction.LanePoint.prototype.getScenarioType = function() {
  return /** @type {!proto.apollo.prediction.LanePoint.ScenarioType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.apollo.prediction.LanePoint.ScenarioType} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setScenarioType = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearScenarioType = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasScenarioType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double speed_limit = 9;
 * @return {number}
 */
proto.apollo.prediction.LanePoint.prototype.getSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.setSpeedLimit = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LanePoint} returns this
 */
proto.apollo.prediction.LanePoint.prototype.clearSpeedLimit = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LanePoint.prototype.hasSpeedLimit = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.LaneSegment.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.LaneSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.LaneSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.LaneSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    startS: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    laneTurnType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lanePointList: jspb.Message.toObjectList(msg.getLanePointList(),
    proto.apollo.prediction.LanePoint.toObject, includeInstance),
    adcS: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    adcLanePointIdx: jspb.Message.getFieldWithDefault(msg, 8, 0),
    totalLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneSegment as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.LaneSegment.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneId;

  /** @type {?|undefined} */
  this.startS;

  /** @type {?|undefined} */
  this.endS;

  /** @type {?|undefined} */
  this.laneTurnType;

  /** @type {?|undefined} */
  this.lanePointList;

  /** @type {?|undefined} */
  this.adcS;

  /** @type {?|undefined} */
  this.adcLanePointIdx;

  /** @type {?|undefined} */
  this.totalLength;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.LaneSegment.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.LaneSegment}
 */
proto.apollo.prediction.LaneSegment.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.LaneSegment();
  obj.laneId != null && jspb.Message.setField(msg, 1, obj.laneId);
  obj.startS != null && jspb.Message.setField(msg, 2, obj.startS);
  obj.endS != null && jspb.Message.setField(msg, 3, obj.endS);
  obj.laneTurnType != null && jspb.Message.setField(msg, 4, obj.laneTurnType);
  obj.lanePointList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.lanePointList.map(
          proto.apollo.prediction.LanePoint.fromObject));
  obj.adcS != null && jspb.Message.setField(msg, 7, obj.adcS);
  obj.adcLanePointIdx != null && jspb.Message.setField(msg, 8, obj.adcLanePointIdx);
  obj.totalLength != null && jspb.Message.setField(msg, 6, obj.totalLength);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.LaneSegment}
 */
proto.apollo.prediction.LaneSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.LaneSegment;
  return proto.apollo.prediction.LaneSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.LaneSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.LaneSegment}
 */
proto.apollo.prediction.LaneSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLaneTurnType(value);
      break;
    case 5:
      var value = new proto.apollo.prediction.LanePoint;
      reader.readMessage(value,proto.apollo.prediction.LanePoint.deserializeBinaryFromReader);
      msg.addLanePoint(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdcS(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdcLanePointIdx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.LaneSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.LaneSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.LaneSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLanePointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.prediction.LanePoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional string lane_id = 1;
 * @return {string}
 */
proto.apollo.prediction.LaneSegment.prototype.getLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSegment.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double start_s = 2;
 * @return {number}
 */
proto.apollo.prediction.LaneSegment.prototype.getStartS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.setStartS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearStartS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSegment.prototype.hasStartS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double end_s = 3;
 * @return {number}
 */
proto.apollo.prediction.LaneSegment.prototype.getEndS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.setEndS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearEndS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSegment.prototype.hasEndS = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 lane_turn_type = 4;
 * @return {number}
 */
proto.apollo.prediction.LaneSegment.prototype.getLaneTurnType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.setLaneTurnType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearLaneTurnType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSegment.prototype.hasLaneTurnType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated LanePoint lane_point = 5;
 * @return {!Array<!proto.apollo.prediction.LanePoint>}
 */
proto.apollo.prediction.LaneSegment.prototype.getLanePointList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LanePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LanePoint, 5));
};


/**
 * @param {!Array<!proto.apollo.prediction.LanePoint>} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
*/
proto.apollo.prediction.LaneSegment.prototype.setLanePointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.prediction.LanePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LanePoint}
 */
proto.apollo.prediction.LaneSegment.prototype.addLanePoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.prediction.LanePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearLanePointList = function() {
  return this.setLanePointList([]);
};


/**
 * optional double adc_s = 7;
 * @return {number}
 */
proto.apollo.prediction.LaneSegment.prototype.getAdcS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.setAdcS = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearAdcS = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSegment.prototype.hasAdcS = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 adc_lane_point_idx = 8;
 * @return {number}
 */
proto.apollo.prediction.LaneSegment.prototype.getAdcLanePointIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.setAdcLanePointIdx = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearAdcLanePointIdx = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSegment.prototype.hasAdcLanePointIdx = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double total_length = 6;
 * @return {number}
 */
proto.apollo.prediction.LaneSegment.prototype.getTotalLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.setTotalLength = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSegment} returns this
 */
proto.apollo.prediction.LaneSegment.prototype.clearTotalLength = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSegment.prototype.hasTotalLength = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.NearbyObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.NearbyObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.NearbyObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.NearbyObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    l: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NearbyObstacle as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.NearbyObstacle.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.l;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.NearbyObstacle.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.NearbyObstacle}
 */
proto.apollo.prediction.NearbyObstacle.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.NearbyObstacle();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.s != null && jspb.Message.setField(msg, 2, obj.s);
  obj.l != null && jspb.Message.setField(msg, 3, obj.l);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.NearbyObstacle}
 */
proto.apollo.prediction.NearbyObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.NearbyObstacle;
  return proto.apollo.prediction.NearbyObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.NearbyObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.NearbyObstacle}
 */
proto.apollo.prediction.NearbyObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.NearbyObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.NearbyObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.NearbyObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.NearbyObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.prediction.NearbyObstacle.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.NearbyObstacle} returns this
 */
proto.apollo.prediction.NearbyObstacle.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.NearbyObstacle} returns this
 */
proto.apollo.prediction.NearbyObstacle.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.NearbyObstacle.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double s = 2;
 * @return {number}
 */
proto.apollo.prediction.NearbyObstacle.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.NearbyObstacle} returns this
 */
proto.apollo.prediction.NearbyObstacle.prototype.setS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.NearbyObstacle} returns this
 */
proto.apollo.prediction.NearbyObstacle.prototype.clearS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.NearbyObstacle.prototype.hasS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double l = 3;
 * @return {number}
 */
proto.apollo.prediction.NearbyObstacle.prototype.getL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.NearbyObstacle} returns this
 */
proto.apollo.prediction.NearbyObstacle.prototype.setL = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.NearbyObstacle} returns this
 */
proto.apollo.prediction.NearbyObstacle.prototype.clearL = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.NearbyObstacle.prototype.hasL = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.StopSign.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.StopSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.StopSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.StopSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopSignId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    laneId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    laneS: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    laneSequenceS: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StopSign as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.StopSign.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopSignId;

  /** @type {?|undefined} */
  this.laneId;

  /** @type {?|undefined} */
  this.laneS;

  /** @type {?|undefined} */
  this.laneSequenceS;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.StopSign.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.StopSign}
 */
proto.apollo.prediction.StopSign.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.StopSign();
  obj.stopSignId != null && jspb.Message.setField(msg, 1, obj.stopSignId);
  obj.laneId != null && jspb.Message.setField(msg, 2, obj.laneId);
  obj.laneS != null && jspb.Message.setField(msg, 3, obj.laneS);
  obj.laneSequenceS != null && jspb.Message.setField(msg, 4, obj.laneSequenceS);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.StopSign}
 */
proto.apollo.prediction.StopSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.StopSign;
  return proto.apollo.prediction.StopSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.StopSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.StopSign}
 */
proto.apollo.prediction.StopSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStopSignId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneSequenceS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.StopSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.StopSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.StopSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.StopSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string stop_sign_id = 1;
 * @return {string}
 */
proto.apollo.prediction.StopSign.prototype.getStopSignId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.setStopSignId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.clearStopSignId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.StopSign.prototype.hasStopSignId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string lane_id = 2;
 * @return {string}
 */
proto.apollo.prediction.StopSign.prototype.getLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.StopSign.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double lane_s = 3;
 * @return {number}
 */
proto.apollo.prediction.StopSign.prototype.getLaneS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.setLaneS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.clearLaneS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.StopSign.prototype.hasLaneS = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double lane_sequence_s = 4;
 * @return {number}
 */
proto.apollo.prediction.StopSign.prototype.getLaneSequenceS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.setLaneSequenceS = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.StopSign} returns this
 */
proto.apollo.prediction.StopSign.prototype.clearLaneSequenceS = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.StopSign.prototype.hasLaneSequenceS = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.LaneSequence.repeatedFields_ = [2,8,3,11,12,13,14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.LaneSequence.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.LaneSequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.LaneSequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneSequence.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneSequenceId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    laneSegmentList: jspb.Message.toObjectList(msg.getLaneSegmentList(),
    proto.apollo.prediction.LaneSegment.toObject, includeInstance),
    adcLaneSegmentIdx: jspb.Message.getFieldWithDefault(msg, 23, 0),
    pathPointList: jspb.Message.toObjectList(msg.getPathPointList(),
    modules_common_proto_pnc_point_pb.PathPoint.toObject, includeInstance),
    laneType: (f = jspb.Message.getField(msg, 22)) == null ? undefined : f,
    laneS: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    laneL: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    vehicleOnLane: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    nearbyObstacleList: jspb.Message.toObjectList(msg.getNearbyObstacleList(),
    proto.apollo.prediction.NearbyObstacle.toObject, includeInstance),
    stopSign: (f = msg.getStopSign()) && proto.apollo.prediction.StopSign.toObject(includeInstance, f),
    rightOfWay: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    features: (f = msg.getFeatures()) && proto.apollo.prediction.LaneSequence.Features.toObject(includeInstance, f),
    label: jspb.Message.getFieldWithDefault(msg, 5, 0),
    probability: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    acceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    timeToLaneCenter: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    timeToLaneEdge: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    behaviorType: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    currLanePointList: jspb.Message.toObjectList(msg.getCurrLanePointList(),
    proto.apollo.prediction.LanePoint.toObject, includeInstance),
    leftNeighborPointList: jspb.Message.toObjectList(msg.getLeftNeighborPointList(),
    proto.apollo.prediction.LanePoint.toObject, includeInstance),
    rightNeighborPointList: jspb.Message.toObjectList(msg.getRightNeighborPointList(),
    proto.apollo.prediction.LanePoint.toObject, includeInstance),
    leftNearbyObstacleList: jspb.Message.toObjectList(msg.getLeftNearbyObstacleList(),
    proto.apollo.prediction.NearbyObstacle.toObject, includeInstance),
    rightNearbyObstacleList: jspb.Message.toObjectList(msg.getRightNearbyObstacleList(),
    proto.apollo.prediction.NearbyObstacle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneSequence as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.LaneSequence.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneSequenceId;

  /** @type {?|undefined} */
  this.laneSegmentList;

  /** @type {?|undefined} */
  this.adcLaneSegmentIdx;

  /** @type {?|undefined} */
  this.pathPointList;

  /** @type {?|undefined} */
  this.laneType;

  /** @type {?|undefined} */
  this.laneS;

  /** @type {?|undefined} */
  this.laneL;

  /** @type {?|undefined} */
  this.vehicleOnLane;

  /** @type {?|undefined} */
  this.nearbyObstacleList;

  /** @type {?|undefined} */
  this.stopSign;

  /** @type {?|undefined} */
  this.rightOfWay;

  /** @type {?|undefined} */
  this.features;

  /** @type {?|undefined} */
  this.label;

  /** @type {?|undefined} */
  this.probability;

  /** @type {?|undefined} */
  this.acceleration;

  /** @type {?|undefined} */
  this.timeToLaneCenter;

  /** @type {?|undefined} */
  this.timeToLaneEdge;

  /** @type {?|undefined} */
  this.behaviorType;

  /** @type {?|undefined} */
  this.currLanePointList;

  /** @type {?|undefined} */
  this.leftNeighborPointList;

  /** @type {?|undefined} */
  this.rightNeighborPointList;

  /** @type {?|undefined} */
  this.leftNearbyObstacleList;

  /** @type {?|undefined} */
  this.rightNearbyObstacleList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.LaneSequence.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.LaneSequence}
 */
proto.apollo.prediction.LaneSequence.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.LaneSequence();
  obj.laneSequenceId != null && jspb.Message.setField(msg, 1, obj.laneSequenceId);
  obj.laneSegmentList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.laneSegmentList.map(
          proto.apollo.prediction.LaneSegment.fromObject));
  obj.adcLaneSegmentIdx != null && jspb.Message.setField(msg, 23, obj.adcLaneSegmentIdx);
  obj.pathPointList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.pathPointList.map(
          modules_common_proto_pnc_point_pb.PathPoint.fromObject));
  obj.laneType != null && jspb.Message.setField(msg, 22, obj.laneType);
  obj.laneS != null && jspb.Message.setField(msg, 17, obj.laneS);
  obj.laneL != null && jspb.Message.setField(msg, 18, obj.laneL);
  obj.vehicleOnLane != null && jspb.Message.setField(msg, 10, obj.vehicleOnLane);
  obj.nearbyObstacleList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.nearbyObstacleList.map(
          proto.apollo.prediction.NearbyObstacle.fromObject));
  obj.stopSign && jspb.Message.setWrapperField(
      msg, 20, proto.apollo.prediction.StopSign.fromObject(obj.stopSign));
  obj.rightOfWay != null && jspb.Message.setField(msg, 21, obj.rightOfWay);
  obj.features && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.prediction.LaneSequence.Features.fromObject(obj.features));
  obj.label != null && jspb.Message.setField(msg, 5, obj.label);
  obj.probability != null && jspb.Message.setField(msg, 6, obj.probability);
  obj.acceleration != null && jspb.Message.setField(msg, 7, obj.acceleration);
  obj.timeToLaneCenter != null && jspb.Message.setField(msg, 16, obj.timeToLaneCenter);
  obj.timeToLaneEdge != null && jspb.Message.setField(msg, 19, obj.timeToLaneEdge);
  obj.behaviorType != null && jspb.Message.setField(msg, 9, obj.behaviorType);
  obj.currLanePointList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.currLanePointList.map(
          proto.apollo.prediction.LanePoint.fromObject));
  obj.leftNeighborPointList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.leftNeighborPointList.map(
          proto.apollo.prediction.LanePoint.fromObject));
  obj.rightNeighborPointList && jspb.Message.setRepeatedWrapperField(
      msg, 13, obj.rightNeighborPointList.map(
          proto.apollo.prediction.LanePoint.fromObject));
  obj.leftNearbyObstacleList && jspb.Message.setRepeatedWrapperField(
      msg, 14, obj.leftNearbyObstacleList.map(
          proto.apollo.prediction.NearbyObstacle.fromObject));
  obj.rightNearbyObstacleList && jspb.Message.setRepeatedWrapperField(
      msg, 15, obj.rightNearbyObstacleList.map(
          proto.apollo.prediction.NearbyObstacle.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.LaneSequence}
 */
proto.apollo.prediction.LaneSequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.LaneSequence;
  return proto.apollo.prediction.LaneSequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.LaneSequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.LaneSequence}
 */
proto.apollo.prediction.LaneSequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLaneSequenceId(value);
      break;
    case 2:
      var value = new proto.apollo.prediction.LaneSegment;
      reader.readMessage(value,proto.apollo.prediction.LaneSegment.deserializeBinaryFromReader);
      msg.addLaneSegment(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdcLaneSegmentIdx(value);
      break;
    case 8:
      var value = new modules_common_proto_pnc_point_pb.PathPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.PathPoint.deserializeBinaryFromReader);
      msg.addPathPoint(value);
      break;
    case 22:
      var value = /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (reader.readEnum());
      msg.setLaneType(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneS(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneL(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVehicleOnLane(value);
      break;
    case 3:
      var value = new proto.apollo.prediction.NearbyObstacle;
      reader.readMessage(value,proto.apollo.prediction.NearbyObstacle.deserializeBinaryFromReader);
      msg.addNearbyObstacle(value);
      break;
    case 20:
      var value = new proto.apollo.prediction.StopSign;
      reader.readMessage(value,proto.apollo.prediction.StopSign.deserializeBinaryFromReader);
      msg.setStopSign(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRightOfWay(value);
      break;
    case 4:
      var value = new proto.apollo.prediction.LaneSequence.Features;
      reader.readMessage(value,proto.apollo.prediction.LaneSequence.Features.deserializeBinaryFromReader);
      msg.setFeatures(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcceleration(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeToLaneCenter(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeToLaneEdge(value);
      break;
    case 9:
      var value = /** @type {!proto.apollo.prediction.LaneSequence.BehaviorType} */ (reader.readEnum());
      msg.setBehaviorType(value);
      break;
    case 11:
      var value = new proto.apollo.prediction.LanePoint;
      reader.readMessage(value,proto.apollo.prediction.LanePoint.deserializeBinaryFromReader);
      msg.addCurrLanePoint(value);
      break;
    case 12:
      var value = new proto.apollo.prediction.LanePoint;
      reader.readMessage(value,proto.apollo.prediction.LanePoint.deserializeBinaryFromReader);
      msg.addLeftNeighborPoint(value);
      break;
    case 13:
      var value = new proto.apollo.prediction.LanePoint;
      reader.readMessage(value,proto.apollo.prediction.LanePoint.deserializeBinaryFromReader);
      msg.addRightNeighborPoint(value);
      break;
    case 14:
      var value = new proto.apollo.prediction.NearbyObstacle;
      reader.readMessage(value,proto.apollo.prediction.NearbyObstacle.deserializeBinaryFromReader);
      msg.addLeftNearbyObstacle(value);
      break;
    case 15:
      var value = new proto.apollo.prediction.NearbyObstacle;
      reader.readMessage(value,proto.apollo.prediction.NearbyObstacle.deserializeBinaryFromReader);
      msg.addRightNearbyObstacle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.LaneSequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.LaneSequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.LaneSequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneSequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLaneSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.prediction.LaneSegment.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getPathPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      modules_common_proto_pnc_point_pb.PathPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getNearbyObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.prediction.NearbyObstacle.serializeBinaryToWriter
    );
  }
  f = message.getStopSign();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.apollo.prediction.StopSign.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getFeatures();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.prediction.LaneSequence.Features.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {!proto.apollo.prediction.LaneSequence.BehaviorType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getCurrLanePointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.prediction.LanePoint.serializeBinaryToWriter
    );
  }
  f = message.getLeftNeighborPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.apollo.prediction.LanePoint.serializeBinaryToWriter
    );
  }
  f = message.getRightNeighborPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.apollo.prediction.LanePoint.serializeBinaryToWriter
    );
  }
  f = message.getLeftNearbyObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.apollo.prediction.NearbyObstacle.serializeBinaryToWriter
    );
  }
  f = message.getRightNearbyObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.apollo.prediction.NearbyObstacle.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.prediction.LaneSequence.BehaviorType = {
  NOT_GOTO_LANE: 1,
  CONSTANT_SPEED: 2,
  SMALL_ACCELERATION: 3,
  LARGE_ACCELERATION: 4,
  SMALL_DECELERATION: 5,
  LARGE_DECELERATION: 6
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.LaneSequence.Features.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.LaneSequence.Features.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.LaneSequence.Features.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.LaneSequence.Features} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneSequence.Features.toObject = function(includeInstance, msg) {
  var f, obj = {
    mlpFeaturesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Features as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.LaneSequence.Features.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.mlpFeaturesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.LaneSequence.Features.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.LaneSequence.Features}
 */
proto.apollo.prediction.LaneSequence.Features.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.LaneSequence.Features();
  obj.mlpFeaturesList != null && jspb.Message.setField(msg, 1, obj.mlpFeaturesList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.LaneSequence.Features}
 */
proto.apollo.prediction.LaneSequence.Features.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.LaneSequence.Features;
  return proto.apollo.prediction.LaneSequence.Features.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.LaneSequence.Features} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.LaneSequence.Features}
 */
proto.apollo.prediction.LaneSequence.Features.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMlpFeatures(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.LaneSequence.Features.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.LaneSequence.Features.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.LaneSequence.Features} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneSequence.Features.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMlpFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double mlp_features = 1;
 * @return {!Array<number>}
 */
proto.apollo.prediction.LaneSequence.Features.prototype.getMlpFeaturesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.LaneSequence.Features} returns this
 */
proto.apollo.prediction.LaneSequence.Features.prototype.setMlpFeaturesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LaneSequence.Features} returns this
 */
proto.apollo.prediction.LaneSequence.Features.prototype.addMlpFeatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence.Features} returns this
 */
proto.apollo.prediction.LaneSequence.Features.prototype.clearMlpFeaturesList = function() {
  return this.setMlpFeaturesList([]);
};


/**
 * optional int32 lane_sequence_id = 1;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getLaneSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setLaneSequenceId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLaneSequenceId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasLaneSequenceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LaneSegment lane_segment = 2;
 * @return {!Array<!proto.apollo.prediction.LaneSegment>}
 */
proto.apollo.prediction.LaneSequence.prototype.getLaneSegmentList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LaneSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LaneSegment, 2));
};


/**
 * @param {!Array<!proto.apollo.prediction.LaneSegment>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setLaneSegmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.prediction.LaneSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LaneSegment}
 */
proto.apollo.prediction.LaneSequence.prototype.addLaneSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.prediction.LaneSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLaneSegmentList = function() {
  return this.setLaneSegmentList([]);
};


/**
 * optional int32 adc_lane_segment_idx = 23;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getAdcLaneSegmentIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setAdcLaneSegmentIdx = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearAdcLaneSegmentIdx = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasAdcLaneSegmentIdx = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * repeated apollo.common.PathPoint path_point = 8;
 * @return {!Array<!proto.apollo.common.PathPoint>}
 */
proto.apollo.prediction.LaneSequence.prototype.getPathPointList = function() {
  return /** @type{!Array<!proto.apollo.common.PathPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.PathPoint, 8));
};


/**
 * @param {!Array<!proto.apollo.common.PathPoint>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setPathPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.common.PathPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.PathPoint}
 */
proto.apollo.prediction.LaneSequence.prototype.addPathPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.common.PathPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearPathPointList = function() {
  return this.setPathPointList([]);
};


/**
 * optional apollo.hdmap.Lane.LaneType lane_type = 22;
 * @return {!proto.apollo.hdmap.Lane.LaneType}
 */
proto.apollo.prediction.LaneSequence.prototype.getLaneType = function() {
  return /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (jspb.Message.getFieldWithDefault(this, 22, 1));
};


/**
 * @param {!proto.apollo.hdmap.Lane.LaneType} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setLaneType = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLaneType = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasLaneType = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional double lane_s = 17;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getLaneS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setLaneS = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLaneS = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasLaneS = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double lane_l = 18;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getLaneL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setLaneL = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLaneL = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasLaneL = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool vehicle_on_lane = 10;
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.getVehicleOnLane = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setVehicleOnLane = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearVehicleOnLane = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasVehicleOnLane = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated NearbyObstacle nearby_obstacle = 3;
 * @return {!Array<!proto.apollo.prediction.NearbyObstacle>}
 */
proto.apollo.prediction.LaneSequence.prototype.getNearbyObstacleList = function() {
  return /** @type{!Array<!proto.apollo.prediction.NearbyObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.NearbyObstacle, 3));
};


/**
 * @param {!Array<!proto.apollo.prediction.NearbyObstacle>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setNearbyObstacleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.prediction.NearbyObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.NearbyObstacle}
 */
proto.apollo.prediction.LaneSequence.prototype.addNearbyObstacle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.prediction.NearbyObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearNearbyObstacleList = function() {
  return this.setNearbyObstacleList([]);
};


/**
 * optional StopSign stop_sign = 20;
 * @return {?proto.apollo.prediction.StopSign}
 */
proto.apollo.prediction.LaneSequence.prototype.getStopSign = function() {
  return /** @type{?proto.apollo.prediction.StopSign} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.StopSign, 20));
};


/**
 * @param {?proto.apollo.prediction.StopSign|undefined} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setStopSign = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearStopSign = function() {
  return this.setStopSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasStopSign = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int32 right_of_way = 21;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getRightOfWay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setRightOfWay = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearRightOfWay = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasRightOfWay = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Features features = 4;
 * @return {?proto.apollo.prediction.LaneSequence.Features}
 */
proto.apollo.prediction.LaneSequence.prototype.getFeatures = function() {
  return /** @type{?proto.apollo.prediction.LaneSequence.Features} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.LaneSequence.Features, 4));
};


/**
 * @param {?proto.apollo.prediction.LaneSequence.Features|undefined} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setFeatures = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearFeatures = function() {
  return this.setFeatures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasFeatures = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 label = 5;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double probability = 6;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setProbability = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearProbability = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double acceleration = 7;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setAcceleration = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearAcceleration = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double time_to_lane_center = 16;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getTimeToLaneCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setTimeToLaneCenter = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearTimeToLaneCenter = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasTimeToLaneCenter = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double time_to_lane_edge = 19;
 * @return {number}
 */
proto.apollo.prediction.LaneSequence.prototype.getTimeToLaneEdge = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setTimeToLaneEdge = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearTimeToLaneEdge = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasTimeToLaneEdge = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional BehaviorType behavior_type = 9;
 * @return {!proto.apollo.prediction.LaneSequence.BehaviorType}
 */
proto.apollo.prediction.LaneSequence.prototype.getBehaviorType = function() {
  return /** @type {!proto.apollo.prediction.LaneSequence.BehaviorType} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/**
 * @param {!proto.apollo.prediction.LaneSequence.BehaviorType} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.setBehaviorType = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearBehaviorType = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneSequence.prototype.hasBehaviorType = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated LanePoint curr_lane_point = 11;
 * @return {!Array<!proto.apollo.prediction.LanePoint>}
 */
proto.apollo.prediction.LaneSequence.prototype.getCurrLanePointList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LanePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LanePoint, 11));
};


/**
 * @param {!Array<!proto.apollo.prediction.LanePoint>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setCurrLanePointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.prediction.LanePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LanePoint}
 */
proto.apollo.prediction.LaneSequence.prototype.addCurrLanePoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.prediction.LanePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearCurrLanePointList = function() {
  return this.setCurrLanePointList([]);
};


/**
 * repeated LanePoint left_neighbor_point = 12;
 * @return {!Array<!proto.apollo.prediction.LanePoint>}
 */
proto.apollo.prediction.LaneSequence.prototype.getLeftNeighborPointList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LanePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LanePoint, 12));
};


/**
 * @param {!Array<!proto.apollo.prediction.LanePoint>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setLeftNeighborPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.prediction.LanePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LanePoint}
 */
proto.apollo.prediction.LaneSequence.prototype.addLeftNeighborPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.prediction.LanePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLeftNeighborPointList = function() {
  return this.setLeftNeighborPointList([]);
};


/**
 * repeated LanePoint right_neighbor_point = 13;
 * @return {!Array<!proto.apollo.prediction.LanePoint>}
 */
proto.apollo.prediction.LaneSequence.prototype.getRightNeighborPointList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LanePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LanePoint, 13));
};


/**
 * @param {!Array<!proto.apollo.prediction.LanePoint>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setRightNeighborPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.apollo.prediction.LanePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LanePoint}
 */
proto.apollo.prediction.LaneSequence.prototype.addRightNeighborPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.apollo.prediction.LanePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearRightNeighborPointList = function() {
  return this.setRightNeighborPointList([]);
};


/**
 * repeated NearbyObstacle left_nearby_obstacle = 14;
 * @return {!Array<!proto.apollo.prediction.NearbyObstacle>}
 */
proto.apollo.prediction.LaneSequence.prototype.getLeftNearbyObstacleList = function() {
  return /** @type{!Array<!proto.apollo.prediction.NearbyObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.NearbyObstacle, 14));
};


/**
 * @param {!Array<!proto.apollo.prediction.NearbyObstacle>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setLeftNearbyObstacleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.apollo.prediction.NearbyObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.NearbyObstacle}
 */
proto.apollo.prediction.LaneSequence.prototype.addLeftNearbyObstacle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.apollo.prediction.NearbyObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearLeftNearbyObstacleList = function() {
  return this.setLeftNearbyObstacleList([]);
};


/**
 * repeated NearbyObstacle right_nearby_obstacle = 15;
 * @return {!Array<!proto.apollo.prediction.NearbyObstacle>}
 */
proto.apollo.prediction.LaneSequence.prototype.getRightNearbyObstacleList = function() {
  return /** @type{!Array<!proto.apollo.prediction.NearbyObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.NearbyObstacle, 15));
};


/**
 * @param {!Array<!proto.apollo.prediction.NearbyObstacle>} value
 * @return {!proto.apollo.prediction.LaneSequence} returns this
*/
proto.apollo.prediction.LaneSequence.prototype.setRightNearbyObstacleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.apollo.prediction.NearbyObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.NearbyObstacle}
 */
proto.apollo.prediction.LaneSequence.prototype.addRightNearbyObstacle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.apollo.prediction.NearbyObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneSequence} returns this
 */
proto.apollo.prediction.LaneSequence.prototype.clearRightNearbyObstacleList = function() {
  return this.setRightNearbyObstacleList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.LaneGraph.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.LaneGraph.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.LaneGraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.LaneGraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneGraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneSequenceList: jspb.Message.toObjectList(msg.getLaneSequenceList(),
    proto.apollo.prediction.LaneSequence.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneGraph as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.LaneGraph.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneSequenceList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.LaneGraph.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.LaneGraph}
 */
proto.apollo.prediction.LaneGraph.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.LaneGraph();
  obj.laneSequenceList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.laneSequenceList.map(
          proto.apollo.prediction.LaneSequence.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.LaneGraph}
 */
proto.apollo.prediction.LaneGraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.LaneGraph;
  return proto.apollo.prediction.LaneGraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.LaneGraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.LaneGraph}
 */
proto.apollo.prediction.LaneGraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.LaneSequence;
      reader.readMessage(value,proto.apollo.prediction.LaneSequence.deserializeBinaryFromReader);
      msg.addLaneSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.LaneGraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.LaneGraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.LaneGraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneGraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaneSequenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.LaneSequence.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LaneSequence lane_sequence = 1;
 * @return {!Array<!proto.apollo.prediction.LaneSequence>}
 */
proto.apollo.prediction.LaneGraph.prototype.getLaneSequenceList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LaneSequence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LaneSequence, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.LaneSequence>} value
 * @return {!proto.apollo.prediction.LaneGraph} returns this
*/
proto.apollo.prediction.LaneGraph.prototype.setLaneSequenceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.LaneSequence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LaneSequence}
 */
proto.apollo.prediction.LaneGraph.prototype.addLaneSequence = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.LaneSequence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.LaneGraph} returns this
 */
proto.apollo.prediction.LaneGraph.prototype.clearLaneSequenceList = function() {
  return this.setLaneSequenceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.LaneObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.LaneObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.LaneObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    obstacleId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    laneId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    laneS: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    laneL: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneObstacle as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.LaneObstacle.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.obstacleId;

  /** @type {?|undefined} */
  this.laneId;

  /** @type {?|undefined} */
  this.laneS;

  /** @type {?|undefined} */
  this.laneL;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.LaneObstacle.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.LaneObstacle}
 */
proto.apollo.prediction.LaneObstacle.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.LaneObstacle();
  obj.obstacleId != null && jspb.Message.setField(msg, 1, obj.obstacleId);
  obj.laneId != null && jspb.Message.setField(msg, 2, obj.laneId);
  obj.laneS != null && jspb.Message.setField(msg, 3, obj.laneS);
  obj.laneL != null && jspb.Message.setField(msg, 4, obj.laneL);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.LaneObstacle}
 */
proto.apollo.prediction.LaneObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.LaneObstacle;
  return proto.apollo.prediction.LaneObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.LaneObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.LaneObstacle}
 */
proto.apollo.prediction.LaneObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setObstacleId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.LaneObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.LaneObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.LaneObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 obstacle_id = 1;
 * @return {number}
 */
proto.apollo.prediction.LaneObstacle.prototype.getObstacleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.setObstacleId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.clearObstacleId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneObstacle.prototype.hasObstacleId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string lane_id = 2;
 * @return {string}
 */
proto.apollo.prediction.LaneObstacle.prototype.getLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneObstacle.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double lane_s = 3;
 * @return {number}
 */
proto.apollo.prediction.LaneObstacle.prototype.getLaneS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.setLaneS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.clearLaneS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneObstacle.prototype.hasLaneS = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double lane_l = 4;
 * @return {number}
 */
proto.apollo.prediction.LaneObstacle.prototype.getLaneL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.setLaneL = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneObstacle} returns this
 */
proto.apollo.prediction.LaneObstacle.prototype.clearLaneL = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneObstacle.prototype.hasLaneL = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.apollo.prediction);
