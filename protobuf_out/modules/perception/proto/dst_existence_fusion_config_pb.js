// source: modules/perception/proto/dst_existence_fusion_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.CameraValidDist', null, global);
goog.exportSymbol('proto.apollo.perception.DstExistenceFusionConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.CameraValidDist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.CameraValidDist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.CameraValidDist.displayName = 'proto.apollo.perception.CameraValidDist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.DstExistenceFusionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.DstExistenceFusionConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.DstExistenceFusionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.DstExistenceFusionConfig.displayName = 'proto.apollo.perception.DstExistenceFusionConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.CameraValidDist.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.CameraValidDist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.CameraValidDist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.CameraValidDist.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validDist: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CameraValidDist as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.CameraValidDist.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cameraName;

  /** @type {?|undefined} */
  this.validDist;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.CameraValidDist.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.CameraValidDist}
 */
proto.apollo.perception.CameraValidDist.fromObject = function(obj) {
  var msg = new proto.apollo.perception.CameraValidDist();
  obj.cameraName != null && jspb.Message.setField(msg, 1, obj.cameraName);
  obj.validDist != null && jspb.Message.setField(msg, 2, obj.validDist);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.CameraValidDist}
 */
proto.apollo.perception.CameraValidDist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.CameraValidDist;
  return proto.apollo.perception.CameraValidDist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.CameraValidDist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.CameraValidDist}
 */
proto.apollo.perception.CameraValidDist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValidDist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.CameraValidDist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.CameraValidDist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.CameraValidDist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.CameraValidDist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string camera_name = 1;
 * @return {string}
 */
proto.apollo.perception.CameraValidDist.prototype.getCameraName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.CameraValidDist} returns this
 */
proto.apollo.perception.CameraValidDist.prototype.setCameraName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.CameraValidDist} returns this
 */
proto.apollo.perception.CameraValidDist.prototype.clearCameraName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.CameraValidDist.prototype.hasCameraName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double valid_dist = 2;
 * @return {number}
 */
proto.apollo.perception.CameraValidDist.prototype.getValidDist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.CameraValidDist} returns this
 */
proto.apollo.perception.CameraValidDist.prototype.setValidDist = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.CameraValidDist} returns this
 */
proto.apollo.perception.CameraValidDist.prototype.clearValidDist = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.CameraValidDist.prototype.hasValidDist = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.DstExistenceFusionConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.DstExistenceFusionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.DstExistenceFusionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.DstExistenceFusionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackObjectMaxMatchDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 4.0),
    cameraValidDistList: jspb.Message.toObjectList(msg.getCameraValidDistList(),
    proto.apollo.perception.CameraValidDist.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DstExistenceFusionConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.DstExistenceFusionConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.trackObjectMaxMatchDistance;

  /** @type {?|undefined} */
  this.cameraValidDistList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.DstExistenceFusionConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.DstExistenceFusionConfig}
 */
proto.apollo.perception.DstExistenceFusionConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.DstExistenceFusionConfig();
  obj.trackObjectMaxMatchDistance != null && jspb.Message.setField(msg, 1, obj.trackObjectMaxMatchDistance);
  obj.cameraValidDistList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.cameraValidDistList.map(
          proto.apollo.perception.CameraValidDist.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.DstExistenceFusionConfig}
 */
proto.apollo.perception.DstExistenceFusionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.DstExistenceFusionConfig;
  return proto.apollo.perception.DstExistenceFusionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.DstExistenceFusionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.DstExistenceFusionConfig}
 */
proto.apollo.perception.DstExistenceFusionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrackObjectMaxMatchDistance(value);
      break;
    case 2:
      var value = new proto.apollo.perception.CameraValidDist;
      reader.readMessage(value,proto.apollo.perception.CameraValidDist.deserializeBinaryFromReader);
      msg.addCameraValidDist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.DstExistenceFusionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.DstExistenceFusionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.DstExistenceFusionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCameraValidDistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.perception.CameraValidDist.serializeBinaryToWriter
    );
  }
};


/**
 * optional double track_object_max_match_distance = 1;
 * @return {number}
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.getTrackObjectMaxMatchDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.DstExistenceFusionConfig} returns this
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.setTrackObjectMaxMatchDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.DstExistenceFusionConfig} returns this
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.clearTrackObjectMaxMatchDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.hasTrackObjectMaxMatchDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated CameraValidDist camera_valid_dist = 2;
 * @return {!Array<!proto.apollo.perception.CameraValidDist>}
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.getCameraValidDistList = function() {
  return /** @type{!Array<!proto.apollo.perception.CameraValidDist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.CameraValidDist, 2));
};


/**
 * @param {!Array<!proto.apollo.perception.CameraValidDist>} value
 * @return {!proto.apollo.perception.DstExistenceFusionConfig} returns this
*/
proto.apollo.perception.DstExistenceFusionConfig.prototype.setCameraValidDistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.perception.CameraValidDist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.CameraValidDist}
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.addCameraValidDist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.perception.CameraValidDist, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.DstExistenceFusionConfig} returns this
 */
proto.apollo.perception.DstExistenceFusionConfig.prototype.clearCameraValidDistList = function() {
  return this.setCameraValidDistList([]);
};


goog.object.extend(exports, proto.apollo.perception);
