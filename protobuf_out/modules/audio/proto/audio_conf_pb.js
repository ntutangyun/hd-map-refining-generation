// source: modules/audio/proto/audio_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.audio.AudioConf', null, global);
goog.exportSymbol('proto.apollo.audio.TopicConf', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.audio.TopicConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.audio.TopicConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.audio.TopicConf.displayName = 'proto.apollo.audio.TopicConf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.audio.AudioConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.audio.AudioConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.audio.AudioConf.displayName = 'proto.apollo.audio.AudioConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.audio.TopicConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.audio.TopicConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.audio.TopicConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.audio.TopicConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioDataTopicName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    audioDetectionTopicName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    localizationTopicName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    audioEventTopicName: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    perceptionTopicName: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TopicConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.audio.TopicConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.audioDataTopicName;

  /** @type {?|undefined} */
  this.audioDetectionTopicName;

  /** @type {?|undefined} */
  this.localizationTopicName;

  /** @type {?|undefined} */
  this.audioEventTopicName;

  /** @type {?|undefined} */
  this.perceptionTopicName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.audio.TopicConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.audio.TopicConf}
 */
proto.apollo.audio.TopicConf.fromObject = function(obj) {
  var msg = new proto.apollo.audio.TopicConf();
  obj.audioDataTopicName != null && jspb.Message.setField(msg, 1, obj.audioDataTopicName);
  obj.audioDetectionTopicName != null && jspb.Message.setField(msg, 2, obj.audioDetectionTopicName);
  obj.localizationTopicName != null && jspb.Message.setField(msg, 3, obj.localizationTopicName);
  obj.audioEventTopicName != null && jspb.Message.setField(msg, 4, obj.audioEventTopicName);
  obj.perceptionTopicName != null && jspb.Message.setField(msg, 5, obj.perceptionTopicName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.audio.TopicConf}
 */
proto.apollo.audio.TopicConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.audio.TopicConf;
  return proto.apollo.audio.TopicConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.audio.TopicConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.audio.TopicConf}
 */
proto.apollo.audio.TopicConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudioDataTopicName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudioDetectionTopicName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalizationTopicName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAudioEventTopicName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPerceptionTopicName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.audio.TopicConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.audio.TopicConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.audio.TopicConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.audio.TopicConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string audio_data_topic_name = 1;
 * @return {string}
 */
proto.apollo.audio.TopicConf.prototype.getAudioDataTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.setAudioDataTopicName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.clearAudioDataTopicName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.audio.TopicConf.prototype.hasAudioDataTopicName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string audio_detection_topic_name = 2;
 * @return {string}
 */
proto.apollo.audio.TopicConf.prototype.getAudioDetectionTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.setAudioDetectionTopicName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.clearAudioDetectionTopicName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.audio.TopicConf.prototype.hasAudioDetectionTopicName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string localization_topic_name = 3;
 * @return {string}
 */
proto.apollo.audio.TopicConf.prototype.getLocalizationTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.setLocalizationTopicName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.clearLocalizationTopicName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.audio.TopicConf.prototype.hasLocalizationTopicName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string audio_event_topic_name = 4;
 * @return {string}
 */
proto.apollo.audio.TopicConf.prototype.getAudioEventTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.setAudioEventTopicName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.clearAudioEventTopicName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.audio.TopicConf.prototype.hasAudioEventTopicName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string perception_topic_name = 5;
 * @return {string}
 */
proto.apollo.audio.TopicConf.prototype.getPerceptionTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.setPerceptionTopicName = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.audio.TopicConf} returns this
 */
proto.apollo.audio.TopicConf.prototype.clearPerceptionTopicName = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.audio.TopicConf.prototype.hasPerceptionTopicName = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.audio.AudioConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.audio.AudioConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.audio.AudioConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.audio.AudioConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicConf: (f = msg.getTopicConf()) && proto.apollo.audio.TopicConf.toObject(includeInstance, f),
    respeakerExtrinsicsPath: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AudioConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.audio.AudioConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topicConf;

  /** @type {?|undefined} */
  this.respeakerExtrinsicsPath;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.audio.AudioConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.audio.AudioConf}
 */
proto.apollo.audio.AudioConf.fromObject = function(obj) {
  var msg = new proto.apollo.audio.AudioConf();
  obj.topicConf && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.audio.TopicConf.fromObject(obj.topicConf));
  obj.respeakerExtrinsicsPath != null && jspb.Message.setField(msg, 2, obj.respeakerExtrinsicsPath);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.audio.AudioConf}
 */
proto.apollo.audio.AudioConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.audio.AudioConf;
  return proto.apollo.audio.AudioConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.audio.AudioConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.audio.AudioConf}
 */
proto.apollo.audio.AudioConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.audio.TopicConf;
      reader.readMessage(value,proto.apollo.audio.TopicConf.deserializeBinaryFromReader);
      msg.setTopicConf(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRespeakerExtrinsicsPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.audio.AudioConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.audio.AudioConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.audio.AudioConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.audio.AudioConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicConf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.audio.TopicConf.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TopicConf topic_conf = 1;
 * @return {?proto.apollo.audio.TopicConf}
 */
proto.apollo.audio.AudioConf.prototype.getTopicConf = function() {
  return /** @type{?proto.apollo.audio.TopicConf} */ (
    jspb.Message.getWrapperField(this, proto.apollo.audio.TopicConf, 1));
};


/**
 * @param {?proto.apollo.audio.TopicConf|undefined} value
 * @return {!proto.apollo.audio.AudioConf} returns this
*/
proto.apollo.audio.AudioConf.prototype.setTopicConf = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.audio.AudioConf} returns this
 */
proto.apollo.audio.AudioConf.prototype.clearTopicConf = function() {
  return this.setTopicConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.audio.AudioConf.prototype.hasTopicConf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string respeaker_extrinsics_path = 2;
 * @return {string}
 */
proto.apollo.audio.AudioConf.prototype.getRespeakerExtrinsicsPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.audio.AudioConf} returns this
 */
proto.apollo.audio.AudioConf.prototype.setRespeakerExtrinsicsPath = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.audio.AudioConf} returns this
 */
proto.apollo.audio.AudioConf.prototype.clearRespeakerExtrinsicsPath = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.audio.AudioConf.prototype.hasRespeakerExtrinsicsPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.apollo.audio);
