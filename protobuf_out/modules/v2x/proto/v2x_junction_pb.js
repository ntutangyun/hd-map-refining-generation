// source: modules/v2x/proto/v2x_junction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
goog.exportSymbol('proto.apollo.v2x.Id', null, global);
goog.exportSymbol('proto.apollo.v2x.Junction', null, global);
goog.exportSymbol('proto.apollo.v2x.Junction.EdgeType', null, global);
goog.exportSymbol('proto.apollo.v2x.Junction.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Id = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.Id, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Id.displayName = 'proto.apollo.v2x.Id';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Junction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.Junction.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.Junction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Junction.displayName = 'proto.apollo.v2x.Junction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Id.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Id.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Id} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Id.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Id as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Id.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Id.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Id}
 */
proto.apollo.v2x.Id.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Id();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Id}
 */
proto.apollo.v2x.Id.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Id;
  return proto.apollo.v2x.Id.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Id} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Id}
 */
proto.apollo.v2x.Id.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Id.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Id.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Id} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Id.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.v2x.Id.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.apollo.v2x.Id.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Id.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.v2x.Id} returns this
 */
proto.apollo.v2x.Id.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Id} returns this
 */
proto.apollo.v2x.Id.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Id.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.Junction.repeatedFields_ = [3,4,6,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Junction.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Junction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Junction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Junction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.apollo.v2x.Id.toObject(includeInstance, f),
    polygon: (f = msg.getPolygon()) && modules_common_proto_geometry_pb.Polygon.toObject(includeInstance, f),
    crosswalkIdList: jspb.Message.toObjectList(msg.getCrosswalkIdList(),
    proto.apollo.v2x.Id.toObject, includeInstance),
    overlapIdList: jspb.Message.toObjectList(msg.getOverlapIdList(),
    proto.apollo.v2x.Id.toObject, includeInstance),
    numRoadSegments: jspb.Message.getFieldWithDefault(msg, 5, 4),
    laneIdList: jspb.Message.toObjectList(msg.getLaneIdList(),
    proto.apollo.v2x.Id.toObject, includeInstance),
    type: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    edgeTypeList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Junction as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Junction.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.polygon;

  /** @type {?|undefined} */
  this.crosswalkIdList;

  /** @type {?|undefined} */
  this.overlapIdList;

  /** @type {?|undefined} */
  this.numRoadSegments;

  /** @type {?|undefined} */
  this.laneIdList;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.edgeTypeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Junction.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Junction}
 */
proto.apollo.v2x.Junction.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Junction();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.v2x.Id.fromObject(obj.id));
  obj.polygon && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.Polygon.fromObject(obj.polygon));
  obj.crosswalkIdList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.crosswalkIdList.map(
          proto.apollo.v2x.Id.fromObject));
  obj.overlapIdList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.overlapIdList.map(
          proto.apollo.v2x.Id.fromObject));
  obj.numRoadSegments != null && jspb.Message.setField(msg, 5, obj.numRoadSegments);
  obj.laneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.laneIdList.map(
          proto.apollo.v2x.Id.fromObject));
  obj.type != null && jspb.Message.setField(msg, 7, obj.type);
  obj.edgeTypeList != null && jspb.Message.setField(msg, 8, obj.edgeTypeList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Junction}
 */
proto.apollo.v2x.Junction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Junction;
  return proto.apollo.v2x.Junction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Junction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Junction}
 */
proto.apollo.v2x.Junction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.v2x.Id;
      reader.readMessage(value,proto.apollo.v2x.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.Polygon;
      reader.readMessage(value,modules_common_proto_geometry_pb.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    case 3:
      var value = new proto.apollo.v2x.Id;
      reader.readMessage(value,proto.apollo.v2x.Id.deserializeBinaryFromReader);
      msg.addCrosswalkId(value);
      break;
    case 4:
      var value = new proto.apollo.v2x.Id;
      reader.readMessage(value,proto.apollo.v2x.Id.deserializeBinaryFromReader);
      msg.addOverlapId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumRoadSegments(value);
      break;
    case 6:
      var value = new proto.apollo.v2x.Id;
      reader.readMessage(value,proto.apollo.v2x.Id.deserializeBinaryFromReader);
      msg.addLaneId(value);
      break;
    case 7:
      var value = /** @type {!proto.apollo.v2x.Junction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 8:
      var values = /** @type {!Array<!proto.apollo.v2x.Junction.EdgeType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEdgeType(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Junction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Junction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Junction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Junction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.v2x.Id.serializeBinaryToWriter
    );
  }
  f = message.getPolygon();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalkIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.v2x.Id.serializeBinaryToWriter
    );
  }
  f = message.getOverlapIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.v2x.Id.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.v2x.Id.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.v2x.Junction.Type} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getEdgeTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.v2x.Junction.Type = {
  UNKNOWN: 0,
  IN_ROAD: 1,
  CROSS_ROAD: 2
};

/**
 * @enum {number}
 */
proto.apollo.v2x.Junction.EdgeType = {
  PHYSICAL: 0,
  VIRTUAL: 1
};

/**
 * optional Id id = 1;
 * @return {?proto.apollo.v2x.Id}
 */
proto.apollo.v2x.Junction.prototype.getId = function() {
  return /** @type{?proto.apollo.v2x.Id} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Id, 1));
};


/**
 * @param {?proto.apollo.v2x.Id|undefined} value
 * @return {!proto.apollo.v2x.Junction} returns this
*/
proto.apollo.v2x.Junction.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Junction.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.Polygon polygon = 2;
 * @return {?proto.apollo.common.Polygon}
 */
proto.apollo.v2x.Junction.prototype.getPolygon = function() {
  return /** @type{?proto.apollo.common.Polygon} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Polygon, 2));
};


/**
 * @param {?proto.apollo.common.Polygon|undefined} value
 * @return {!proto.apollo.v2x.Junction} returns this
*/
proto.apollo.v2x.Junction.prototype.setPolygon = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearPolygon = function() {
  return this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Junction.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Id crosswalk_id = 3;
 * @return {!Array<!proto.apollo.v2x.Id>}
 */
proto.apollo.v2x.Junction.prototype.getCrosswalkIdList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Id, 3));
};


/**
 * @param {!Array<!proto.apollo.v2x.Id>} value
 * @return {!proto.apollo.v2x.Junction} returns this
*/
proto.apollo.v2x.Junction.prototype.setCrosswalkIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.v2x.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Id}
 */
proto.apollo.v2x.Junction.prototype.addCrosswalkId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.v2x.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearCrosswalkIdList = function() {
  return this.setCrosswalkIdList([]);
};


/**
 * repeated Id overlap_id = 4;
 * @return {!Array<!proto.apollo.v2x.Id>}
 */
proto.apollo.v2x.Junction.prototype.getOverlapIdList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Id, 4));
};


/**
 * @param {!Array<!proto.apollo.v2x.Id>} value
 * @return {!proto.apollo.v2x.Junction} returns this
*/
proto.apollo.v2x.Junction.prototype.setOverlapIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.v2x.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Id}
 */
proto.apollo.v2x.Junction.prototype.addOverlapId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.v2x.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearOverlapIdList = function() {
  return this.setOverlapIdList([]);
};


/**
 * optional int32 num_road_segments = 5;
 * @return {number}
 */
proto.apollo.v2x.Junction.prototype.getNumRoadSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.setNumRoadSegments = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearNumRoadSegments = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Junction.prototype.hasNumRoadSegments = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Id lane_id = 6;
 * @return {!Array<!proto.apollo.v2x.Id>}
 */
proto.apollo.v2x.Junction.prototype.getLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Id, 6));
};


/**
 * @param {!Array<!proto.apollo.v2x.Id>} value
 * @return {!proto.apollo.v2x.Junction} returns this
*/
proto.apollo.v2x.Junction.prototype.setLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.v2x.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Id}
 */
proto.apollo.v2x.Junction.prototype.addLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.v2x.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearLaneIdList = function() {
  return this.setLaneIdList([]);
};


/**
 * optional Type type = 7;
 * @return {!proto.apollo.v2x.Junction.Type}
 */
proto.apollo.v2x.Junction.prototype.getType = function() {
  return /** @type {!proto.apollo.v2x.Junction.Type} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.apollo.v2x.Junction.Type} value
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.setType = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearType = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Junction.prototype.hasType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated EdgeType edge_type = 8;
 * @return {!Array<!proto.apollo.v2x.Junction.EdgeType>}
 */
proto.apollo.v2x.Junction.prototype.getEdgeTypeList = function() {
  return /** @type {!Array<!proto.apollo.v2x.Junction.EdgeType>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<!proto.apollo.v2x.Junction.EdgeType>} value
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.setEdgeTypeList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!proto.apollo.v2x.Junction.EdgeType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.addEdgeType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Junction} returns this
 */
proto.apollo.v2x.Junction.prototype.clearEdgeTypeList = function() {
  return this.setEdgeTypeList([]);
};


goog.object.extend(exports, proto.apollo.v2x);
