// source: modules/planning/proto/auto_tuning_model_input.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.planning.autotuning.PathPointwiseFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.SpeedPointwiseFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.TrajectoryFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.TrajectoryPointwiseFeature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.PathPointwiseFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.autotuning.PathPointwiseFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.autotuning.PathPointwiseFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.PathPointwiseFeature.displayName = 'proto.apollo.planning.autotuning.PathPointwiseFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.displayName = 'proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.displayName = 'proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.autotuning.SpeedPointwiseFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.autotuning.SpeedPointwiseFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.SpeedPointwiseFeature.displayName = 'proto.apollo.planning.autotuning.SpeedPointwiseFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.displayName = 'proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.TrajectoryPointwiseFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.displayName = 'proto.apollo.planning.autotuning.TrajectoryPointwiseFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.TrajectoryFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.autotuning.TrajectoryFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.autotuning.TrajectoryFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.TrajectoryFeature.displayName = 'proto.apollo.planning.autotuning.TrajectoryFeature';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.PathPointwiseFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    l: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    dl: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    ddl: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    kappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    obstacleInfoList: jspb.Message.toObjectList(msg.getObstacleInfoList(),
    proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.toObject, includeInstance),
    leftBoundFeature: (f = msg.getLeftBoundFeature()) && proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.toObject(includeInstance, f),
    rightBoundFeature: (f = msg.getRightBoundFeature()) && proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathPointwiseFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.l;

  /** @type {?|undefined} */
  this.dl;

  /** @type {?|undefined} */
  this.ddl;

  /** @type {?|undefined} */
  this.kappa;

  /** @type {?|undefined} */
  this.obstacleInfoList;

  /** @type {?|undefined} */
  this.leftBoundFeature;

  /** @type {?|undefined} */
  this.rightBoundFeature;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.PathPointwiseFeature();
  obj.l != null && jspb.Message.setField(msg, 1, obj.l);
  obj.dl != null && jspb.Message.setField(msg, 2, obj.dl);
  obj.ddl != null && jspb.Message.setField(msg, 3, obj.ddl);
  obj.kappa != null && jspb.Message.setField(msg, 4, obj.kappa);
  obj.obstacleInfoList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.obstacleInfoList.map(
          proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.fromObject));
  obj.leftBoundFeature && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.fromObject(obj.leftBoundFeature));
  obj.rightBoundFeature && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.fromObject(obj.rightBoundFeature));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.PathPointwiseFeature;
  return proto.apollo.planning.autotuning.PathPointwiseFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setL(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDdl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappa(value);
      break;
    case 5:
      var value = new proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addObstacleInfo(value);
      break;
    case 6:
      var value = new proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.deserializeBinaryFromReader);
      msg.setLeftBoundFeature(value);
      break;
    case 7:
      var value = new proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.deserializeBinaryFromReader);
      msg.setRightBoundFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.PathPointwiseFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getObstacleInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = message.getLeftBoundFeature();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.serializeBinaryToWriter
    );
  }
  f = message.getRightBoundFeature();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    lateralDistance: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lateralDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature();
  obj.lateralDistance != null && jspb.Message.setField(msg, 1, obj.lateralDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature;
  return proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double lateral_distance = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.prototype.getLateralDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.prototype.setLateralDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.prototype.clearLateralDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.prototype.hasLateralDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    boundDistance: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    crossableLevel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BoundRelatedFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.boundDistance;

  /** @type {?|undefined} */
  this.crossableLevel;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature();
  obj.boundDistance != null && jspb.Message.setField(msg, 1, obj.boundDistance);
  obj.crossableLevel != null && jspb.Message.setField(msg, 2, obj.crossableLevel);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature;
  return proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBoundDistance(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel} */ (reader.readEnum());
      msg.setCrossableLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel = {
  CROSS_FREE: 0,
  CROSS_ABLE: 1,
  CROSS_FORBIDDEN: 2
};

/**
 * optional double bound_distance = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.getBoundDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.setBoundDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.clearBoundDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.hasBoundDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CrossableLevel crossable_level = 2;
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.getCrossableLevel = function() {
  return /** @type {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.setCrossableLevel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.clearCrossableLevel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.prototype.hasCrossableLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double l = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.getL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.setL = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.clearL = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.hasL = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double dl = 2;
 * @return {number}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.getDl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.setDl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.clearDl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.hasDl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double ddl = 3;
 * @return {number}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.getDdl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.setDdl = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.clearDdl = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.hasDdl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double kappa = 4;
 * @return {number}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.getKappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.setKappa = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.clearKappa = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.hasKappa = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated ObstacleFeature obstacle_info = 5;
 * @return {!Array<!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.getObstacleInfoList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature, 5));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.setObstacleInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.addObstacleInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.clearObstacleInfoList = function() {
  return this.setObstacleInfoList([]);
};


/**
 * optional BoundRelatedFeature left_bound_feature = 6;
 * @return {?proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.getLeftBoundFeature = function() {
  return /** @type{?proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature, 6));
};


/**
 * @param {?proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature|undefined} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.setLeftBoundFeature = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.clearLeftBoundFeature = function() {
  return this.setLeftBoundFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.hasLeftBoundFeature = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BoundRelatedFeature right_bound_feature = 7;
 * @return {?proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.getRightBoundFeature = function() {
  return /** @type{?proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature, 7));
};


/**
 * @param {?proto.apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature|undefined} value
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.setRightBoundFeature = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.clearRightBoundFeature = function() {
  return this.setRightBoundFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointwiseFeature.prototype.hasRightBoundFeature = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.repeatedFields_ = [7,8,9,10,12,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.SpeedPointwiseFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    t: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    v: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    speedLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    acc: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    jerk: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    followObsFeatureList: jspb.Message.toObjectList(msg.getFollowObsFeatureList(),
    proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject, includeInstance),
    overtakeObsFeatureList: jspb.Message.toObjectList(msg.getOvertakeObsFeatureList(),
    proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject, includeInstance),
    nudgeObsFeatureList: jspb.Message.toObjectList(msg.getNudgeObsFeatureList(),
    proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject, includeInstance),
    stopObsFeatureList: jspb.Message.toObjectList(msg.getStopObsFeatureList(),
    proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject, includeInstance),
    collisionTimes: jspb.Message.getFieldWithDefault(msg, 11, 0),
    virtualObsFeatureList: jspb.Message.toObjectList(msg.getVirtualObsFeatureList(),
    proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject, includeInstance),
    lateralAcc: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    pathCurvatureAbs: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    sidepassFrontObsFeatureList: jspb.Message.toObjectList(msg.getSidepassFrontObsFeatureList(),
    proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject, includeInstance),
    sidepassRearObsFeatureList: jspb.Message.toObjectList(msg.getSidepassRearObsFeatureList(),
    proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpeedPointwiseFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.t;

  /** @type {?|undefined} */
  this.v;

  /** @type {?|undefined} */
  this.speedLimit;

  /** @type {?|undefined} */
  this.acc;

  /** @type {?|undefined} */
  this.jerk;

  /** @type {?|undefined} */
  this.followObsFeatureList;

  /** @type {?|undefined} */
  this.overtakeObsFeatureList;

  /** @type {?|undefined} */
  this.nudgeObsFeatureList;

  /** @type {?|undefined} */
  this.stopObsFeatureList;

  /** @type {?|undefined} */
  this.collisionTimes;

  /** @type {?|undefined} */
  this.virtualObsFeatureList;

  /** @type {?|undefined} */
  this.lateralAcc;

  /** @type {?|undefined} */
  this.pathCurvatureAbs;

  /** @type {?|undefined} */
  this.sidepassFrontObsFeatureList;

  /** @type {?|undefined} */
  this.sidepassRearObsFeatureList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.SpeedPointwiseFeature();
  obj.s != null && jspb.Message.setField(msg, 1, obj.s);
  obj.t != null && jspb.Message.setField(msg, 2, obj.t);
  obj.v != null && jspb.Message.setField(msg, 3, obj.v);
  obj.speedLimit != null && jspb.Message.setField(msg, 4, obj.speedLimit);
  obj.acc != null && jspb.Message.setField(msg, 5, obj.acc);
  obj.jerk != null && jspb.Message.setField(msg, 6, obj.jerk);
  obj.followObsFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.followObsFeatureList.map(
          proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject));
  obj.overtakeObsFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.overtakeObsFeatureList.map(
          proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject));
  obj.nudgeObsFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 9, obj.nudgeObsFeatureList.map(
          proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject));
  obj.stopObsFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.stopObsFeatureList.map(
          proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject));
  obj.collisionTimes != null && jspb.Message.setField(msg, 11, obj.collisionTimes);
  obj.virtualObsFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.virtualObsFeatureList.map(
          proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject));
  obj.lateralAcc != null && jspb.Message.setField(msg, 13, obj.lateralAcc);
  obj.pathCurvatureAbs != null && jspb.Message.setField(msg, 14, obj.pathCurvatureAbs);
  obj.sidepassFrontObsFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 15, obj.sidepassFrontObsFeatureList.map(
          proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject));
  obj.sidepassRearObsFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 16, obj.sidepassRearObsFeatureList.map(
          proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.SpeedPointwiseFeature;
  return proto.apollo.planning.autotuning.SpeedPointwiseFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setT(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setV(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcc(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerk(value);
      break;
    case 7:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addFollowObsFeature(value);
      break;
    case 8:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addOvertakeObsFeature(value);
      break;
    case 9:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addNudgeObsFeature(value);
      break;
    case 10:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addStopObsFeature(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCollisionTimes(value);
      break;
    case 12:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addVirtualObsFeature(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralAcc(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPathCurvatureAbs(value);
      break;
    case 15:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addSidepassFrontObsFeature(value);
      break;
    case 16:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader);
      msg.addSidepassRearObsFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.SpeedPointwiseFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getFollowObsFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = message.getOvertakeObsFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = message.getNudgeObsFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = message.getStopObsFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getVirtualObsFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getSidepassFrontObsFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
  f = message.getSidepassRearObsFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    longitudinalDistance: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    obstacleSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    lateralDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 10.0),
    probability: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    relativeV: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.longitudinalDistance;

  /** @type {?|undefined} */
  this.obstacleSpeed;

  /** @type {?|undefined} */
  this.lateralDistance;

  /** @type {?|undefined} */
  this.probability;

  /** @type {?|undefined} */
  this.relativeV;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature();
  obj.longitudinalDistance != null && jspb.Message.setField(msg, 1, obj.longitudinalDistance);
  obj.obstacleSpeed != null && jspb.Message.setField(msg, 2, obj.obstacleSpeed);
  obj.lateralDistance != null && jspb.Message.setField(msg, 3, obj.lateralDistance);
  obj.probability != null && jspb.Message.setField(msg, 4, obj.probability);
  obj.relativeV != null && jspb.Message.setField(msg, 5, obj.relativeV);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature;
  return proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudinalDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setObstacleSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double longitudinal_distance = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.getLongitudinalDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.setLongitudinalDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.clearLongitudinalDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.hasLongitudinalDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double obstacle_speed = 2;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.getObstacleSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.setObstacleSpeed = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.clearObstacleSpeed = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.hasObstacleSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double lateral_distance = 3;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.getLateralDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.setLateralDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.clearLateralDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.hasLateralDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double probability = 4;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.setProbability = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.clearProbability = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double relative_v = 5;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.getRelativeV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.setRelativeV = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.clearRelativeV = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.prototype.hasRelativeV = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double s = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double t = 2;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setT = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearT = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasT = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double v = 3;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setV = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearV = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasV = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double speed_limit = 4;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setSpeedLimit = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearSpeedLimit = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasSpeedLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double acc = 5;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getAcc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setAcc = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearAcc = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasAcc = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double jerk = 6;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setJerk = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearJerk = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasJerk = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated ObstacleFeature follow_obs_feature = 7;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getFollowObsFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, 7));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setFollowObsFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.addFollowObsFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearFollowObsFeatureList = function() {
  return this.setFollowObsFeatureList([]);
};


/**
 * repeated ObstacleFeature overtake_obs_feature = 8;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getOvertakeObsFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, 8));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setOvertakeObsFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.addOvertakeObsFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearOvertakeObsFeatureList = function() {
  return this.setOvertakeObsFeatureList([]);
};


/**
 * repeated ObstacleFeature nudge_obs_feature = 9;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getNudgeObsFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, 9));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setNudgeObsFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.addNudgeObsFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearNudgeObsFeatureList = function() {
  return this.setNudgeObsFeatureList([]);
};


/**
 * repeated ObstacleFeature stop_obs_feature = 10;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getStopObsFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, 10));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setStopObsFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.addStopObsFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearStopObsFeatureList = function() {
  return this.setStopObsFeatureList([]);
};


/**
 * optional int32 collision_times = 11;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getCollisionTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setCollisionTimes = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearCollisionTimes = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasCollisionTimes = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated ObstacleFeature virtual_obs_feature = 12;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getVirtualObsFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, 12));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setVirtualObsFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.addVirtualObsFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearVirtualObsFeatureList = function() {
  return this.setVirtualObsFeatureList([]);
};


/**
 * optional double lateral_acc = 13;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getLateralAcc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setLateralAcc = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearLateralAcc = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasLateralAcc = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double path_curvature_abs = 14;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getPathCurvatureAbs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setPathCurvatureAbs = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearPathCurvatureAbs = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.hasPathCurvatureAbs = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated ObstacleFeature sidepass_front_obs_feature = 15;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getSidepassFrontObsFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, 15));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setSidepassFrontObsFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.addSidepassFrontObsFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearSidepassFrontObsFeatureList = function() {
  return this.setSidepassFrontObsFeatureList([]);
};


/**
 * repeated ObstacleFeature sidepass_rear_obs_feature = 16;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.getSidepassRearObsFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, 16));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.setSidepassRearObsFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature}
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.addSidepassRearObsFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointwiseFeature.prototype.clearSidepassRearObsFeatureList = function() {
  return this.setSidepassRearObsFeatureList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathInputFeature: (f = msg.getPathInputFeature()) && proto.apollo.planning.autotuning.PathPointwiseFeature.toObject(includeInstance, f),
    speedInputFeature: (f = msg.getSpeedInputFeature()) && proto.apollo.planning.autotuning.SpeedPointwiseFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryPointwiseFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pathInputFeature;

  /** @type {?|undefined} */
  this.speedInputFeature;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.TrajectoryPointwiseFeature();
  obj.pathInputFeature && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.autotuning.PathPointwiseFeature.fromObject(obj.pathInputFeature));
  obj.speedInputFeature && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.autotuning.SpeedPointwiseFeature.fromObject(obj.speedInputFeature));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.TrajectoryPointwiseFeature;
  return proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.autotuning.PathPointwiseFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.PathPointwiseFeature.deserializeBinaryFromReader);
      msg.setPathInputFeature(value);
      break;
    case 2:
      var value = new proto.apollo.planning.autotuning.SpeedPointwiseFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointwiseFeature.deserializeBinaryFromReader);
      msg.setSpeedInputFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathInputFeature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.autotuning.PathPointwiseFeature.serializeBinaryToWriter
    );
  }
  f = message.getSpeedInputFeature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.autotuning.SpeedPointwiseFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional PathPointwiseFeature path_input_feature = 1;
 * @return {?proto.apollo.planning.autotuning.PathPointwiseFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.getPathInputFeature = function() {
  return /** @type{?proto.apollo.planning.autotuning.PathPointwiseFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.autotuning.PathPointwiseFeature, 1));
};


/**
 * @param {?proto.apollo.planning.autotuning.PathPointwiseFeature|undefined} value
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.setPathInputFeature = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.clearPathInputFeature = function() {
  return this.setPathInputFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.hasPathInputFeature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SpeedPointwiseFeature speed_input_feature = 2;
 * @return {?proto.apollo.planning.autotuning.SpeedPointwiseFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.getSpeedInputFeature = function() {
  return /** @type{?proto.apollo.planning.autotuning.SpeedPointwiseFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.autotuning.SpeedPointwiseFeature, 2));
};


/**
 * @param {?proto.apollo.planning.autotuning.SpeedPointwiseFeature|undefined} value
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature} returns this
*/
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.setSpeedInputFeature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature} returns this
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.clearSpeedInputFeature = function() {
  return this.setSpeedInputFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.prototype.hasSpeedInputFeature = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.autotuning.TrajectoryFeature.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.TrajectoryFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.TrajectoryFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.TrajectoryFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointFeatureList: jspb.Message.toObjectList(msg.getPointFeatureList(),
    proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.TrajectoryFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pointFeatureList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.TrajectoryFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.TrajectoryFeature}
 */
proto.apollo.planning.autotuning.TrajectoryFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.TrajectoryFeature();
  obj.pointFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.pointFeatureList.map(
          proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.TrajectoryFeature}
 */
proto.apollo.planning.autotuning.TrajectoryFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.TrajectoryFeature;
  return proto.apollo.planning.autotuning.TrajectoryFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.TrajectoryFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.TrajectoryFeature}
 */
proto.apollo.planning.autotuning.TrajectoryFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.autotuning.TrajectoryPointwiseFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.deserializeBinaryFromReader);
      msg.addPointFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.TrajectoryFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.TrajectoryFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.TrajectoryFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.autotuning.TrajectoryPointwiseFeature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TrajectoryPointwiseFeature point_feature = 1;
 * @return {!Array<!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature>}
 */
proto.apollo.planning.autotuning.TrajectoryFeature.prototype.getPointFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.TrajectoryPointwiseFeature, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature>} value
 * @return {!proto.apollo.planning.autotuning.TrajectoryFeature} returns this
*/
proto.apollo.planning.autotuning.TrajectoryFeature.prototype.setPointFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointwiseFeature}
 */
proto.apollo.planning.autotuning.TrajectoryFeature.prototype.addPointFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.autotuning.TrajectoryPointwiseFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.TrajectoryFeature} returns this
 */
proto.apollo.planning.autotuning.TrajectoryFeature.prototype.clearPointFeatureList = function() {
  return this.setPointFeatureList([]);
};


goog.object.extend(exports, proto.apollo.planning.autotuning);
