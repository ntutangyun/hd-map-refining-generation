// source: modules/perception/camera/app/proto/perception.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.camera.app.CalibrationServiceParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.DebugParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.DetectorParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.FeatureParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.LanePerceptionParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.ObjectTemplateParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.PerceptionParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.PluginParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.PostprocessorParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.TrackerParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.TrafficLightParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.app.TransformerParam', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.PluginParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.PluginParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.PluginParam.displayName = 'proto.apollo.perception.camera.app.PluginParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.DetectorParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.DetectorParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.DetectorParam.displayName = 'proto.apollo.perception.camera.app.DetectorParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.TrackerParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.TrackerParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.TrackerParam.displayName = 'proto.apollo.perception.camera.app.TrackerParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.TransformerParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.TransformerParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.TransformerParam.displayName = 'proto.apollo.perception.camera.app.TransformerParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.PostprocessorParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.PostprocessorParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.PostprocessorParam.displayName = 'proto.apollo.perception.camera.app.PostprocessorParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.FeatureParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.FeatureParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.FeatureParam.displayName = 'proto.apollo.perception.camera.app.FeatureParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.DebugParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.DebugParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.DebugParam.displayName = 'proto.apollo.perception.camera.app.DebugParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.LanePerceptionParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.LanePerceptionParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.LanePerceptionParam.displayName = 'proto.apollo.perception.camera.app.LanePerceptionParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.CalibrationServiceParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.CalibrationServiceParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.CalibrationServiceParam.displayName = 'proto.apollo.perception.camera.app.CalibrationServiceParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.ObjectTemplateParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.app.ObjectTemplateParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.ObjectTemplateParam.displayName = 'proto.apollo.perception.camera.app.ObjectTemplateParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.PerceptionParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.camera.app.PerceptionParam.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.camera.app.PerceptionParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.PerceptionParam.displayName = 'proto.apollo.perception.camera.app.PerceptionParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.app.TrafficLightParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.camera.app.TrafficLightParam.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.camera.app.TrafficLightParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.app.TrafficLightParam.displayName = 'proto.apollo.perception.camera.app.TrafficLightParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.PluginParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.PluginParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.PluginParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rootDir: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    configFile: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PluginParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.PluginParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.rootDir;

  /** @type {?|undefined} */
  this.configFile;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.PluginParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.PluginParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.PluginParam();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.rootDir != null && jspb.Message.setField(msg, 2, obj.rootDir);
  obj.configFile != null && jspb.Message.setField(msg, 3, obj.configFile);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.PluginParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.PluginParam;
  return proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.PluginParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootDir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfigFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.PluginParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.PluginParam} returns this
 */
proto.apollo.perception.camera.app.PluginParam.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PluginParam} returns this
 */
proto.apollo.perception.camera.app.PluginParam.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string root_dir = 2;
 * @return {string}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.getRootDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.PluginParam} returns this
 */
proto.apollo.perception.camera.app.PluginParam.prototype.setRootDir = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PluginParam} returns this
 */
proto.apollo.perception.camera.app.PluginParam.prototype.clearRootDir = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.hasRootDir = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string config_file = 3;
 * @return {string}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.getConfigFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.PluginParam} returns this
 */
proto.apollo.perception.camera.app.PluginParam.prototype.setConfigFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PluginParam} returns this
 */
proto.apollo.perception.camera.app.PluginParam.prototype.clearConfigFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PluginParam.prototype.hasConfigFile = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.DetectorParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.DetectorParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.DetectorParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginParam: (f = msg.getPluginParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f),
    cameraName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DetectorParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.DetectorParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pluginParam;

  /** @type {?|undefined} */
  this.cameraName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.DetectorParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.DetectorParam}
 */
proto.apollo.perception.camera.app.DetectorParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.DetectorParam();
  obj.pluginParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.pluginParam));
  obj.cameraName != null && jspb.Message.setField(msg, 2, obj.cameraName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.DetectorParam}
 */
proto.apollo.perception.camera.app.DetectorParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.DetectorParam;
  return proto.apollo.perception.camera.app.DetectorParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.DetectorParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.DetectorParam}
 */
proto.apollo.perception.camera.app.DetectorParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setPluginParam(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.DetectorParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.DetectorParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.DetectorParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PluginParam plugin_param = 1;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.getPluginParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.DetectorParam} returns this
*/
proto.apollo.perception.camera.app.DetectorParam.prototype.setPluginParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DetectorParam} returns this
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.clearPluginParam = function() {
  return this.setPluginParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.hasPluginParam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string camera_name = 2;
 * @return {string}
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.getCameraName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DetectorParam} returns this
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.setCameraName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DetectorParam} returns this
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.clearCameraName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DetectorParam.prototype.hasCameraName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.TrackerParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.TrackerParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.TrackerParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.TrackerParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginParam: (f = msg.getPluginParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrackerParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.TrackerParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pluginParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.TrackerParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.TrackerParam}
 */
proto.apollo.perception.camera.app.TrackerParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.TrackerParam();
  obj.pluginParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.pluginParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.TrackerParam}
 */
proto.apollo.perception.camera.app.TrackerParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.TrackerParam;
  return proto.apollo.perception.camera.app.TrackerParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.TrackerParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.TrackerParam}
 */
proto.apollo.perception.camera.app.TrackerParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setPluginParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.TrackerParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.TrackerParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.TrackerParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.TrackerParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginParam plugin_param = 1;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.TrackerParam.prototype.getPluginParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.TrackerParam} returns this
*/
proto.apollo.perception.camera.app.TrackerParam.prototype.setPluginParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.TrackerParam} returns this
 */
proto.apollo.perception.camera.app.TrackerParam.prototype.clearPluginParam = function() {
  return this.setPluginParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.TrackerParam.prototype.hasPluginParam = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.TransformerParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.TransformerParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.TransformerParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.TransformerParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginParam: (f = msg.getPluginParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TransformerParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.TransformerParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pluginParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.TransformerParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.TransformerParam}
 */
proto.apollo.perception.camera.app.TransformerParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.TransformerParam();
  obj.pluginParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.pluginParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.TransformerParam}
 */
proto.apollo.perception.camera.app.TransformerParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.TransformerParam;
  return proto.apollo.perception.camera.app.TransformerParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.TransformerParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.TransformerParam}
 */
proto.apollo.perception.camera.app.TransformerParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setPluginParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.TransformerParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.TransformerParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.TransformerParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.TransformerParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginParam plugin_param = 1;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.TransformerParam.prototype.getPluginParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.TransformerParam} returns this
*/
proto.apollo.perception.camera.app.TransformerParam.prototype.setPluginParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.TransformerParam} returns this
 */
proto.apollo.perception.camera.app.TransformerParam.prototype.clearPluginParam = function() {
  return this.setPluginParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.TransformerParam.prototype.hasPluginParam = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.PostprocessorParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.PostprocessorParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.PostprocessorParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.PostprocessorParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginParam: (f = msg.getPluginParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PostprocessorParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.PostprocessorParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pluginParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.PostprocessorParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.PostprocessorParam}
 */
proto.apollo.perception.camera.app.PostprocessorParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.PostprocessorParam();
  obj.pluginParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.pluginParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.PostprocessorParam}
 */
proto.apollo.perception.camera.app.PostprocessorParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.PostprocessorParam;
  return proto.apollo.perception.camera.app.PostprocessorParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.PostprocessorParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.PostprocessorParam}
 */
proto.apollo.perception.camera.app.PostprocessorParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setPluginParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.PostprocessorParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.PostprocessorParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.PostprocessorParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.PostprocessorParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginParam plugin_param = 1;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.PostprocessorParam.prototype.getPluginParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PostprocessorParam} returns this
*/
proto.apollo.perception.camera.app.PostprocessorParam.prototype.setPluginParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PostprocessorParam} returns this
 */
proto.apollo.perception.camera.app.PostprocessorParam.prototype.clearPluginParam = function() {
  return this.setPluginParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PostprocessorParam.prototype.hasPluginParam = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.FeatureParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.FeatureParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.FeatureParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.FeatureParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginParam: (f = msg.getPluginParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FeatureParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.FeatureParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pluginParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.FeatureParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.FeatureParam}
 */
proto.apollo.perception.camera.app.FeatureParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.FeatureParam();
  obj.pluginParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.pluginParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.FeatureParam}
 */
proto.apollo.perception.camera.app.FeatureParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.FeatureParam;
  return proto.apollo.perception.camera.app.FeatureParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.FeatureParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.FeatureParam}
 */
proto.apollo.perception.camera.app.FeatureParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setPluginParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.FeatureParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.FeatureParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.FeatureParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.FeatureParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginParam plugin_param = 1;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.FeatureParam.prototype.getPluginParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.FeatureParam} returns this
*/
proto.apollo.perception.camera.app.FeatureParam.prototype.setPluginParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.FeatureParam} returns this
 */
proto.apollo.perception.camera.app.FeatureParam.prototype.clearPluginParam = function() {
  return this.setPluginParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.FeatureParam.prototype.hasPluginParam = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.DebugParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.DebugParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.DebugParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectionOutDir: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    trackedDetectionOutDir: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    trackOutFile: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    detectFeatureDir: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    laneOutDir: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    camera2worldOutFile: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    calibrationOutDir: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DebugParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.DebugParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.detectionOutDir;

  /** @type {?|undefined} */
  this.trackedDetectionOutDir;

  /** @type {?|undefined} */
  this.trackOutFile;

  /** @type {?|undefined} */
  this.detectFeatureDir;

  /** @type {?|undefined} */
  this.laneOutDir;

  /** @type {?|undefined} */
  this.camera2worldOutFile;

  /** @type {?|undefined} */
  this.calibrationOutDir;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.DebugParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.DebugParam}
 */
proto.apollo.perception.camera.app.DebugParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.DebugParam();
  obj.detectionOutDir != null && jspb.Message.setField(msg, 1, obj.detectionOutDir);
  obj.trackedDetectionOutDir != null && jspb.Message.setField(msg, 2, obj.trackedDetectionOutDir);
  obj.trackOutFile != null && jspb.Message.setField(msg, 3, obj.trackOutFile);
  obj.detectFeatureDir != null && jspb.Message.setField(msg, 4, obj.detectFeatureDir);
  obj.laneOutDir != null && jspb.Message.setField(msg, 5, obj.laneOutDir);
  obj.camera2worldOutFile != null && jspb.Message.setField(msg, 6, obj.camera2worldOutFile);
  obj.calibrationOutDir != null && jspb.Message.setField(msg, 7, obj.calibrationOutDir);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.DebugParam}
 */
proto.apollo.perception.camera.app.DebugParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.DebugParam;
  return proto.apollo.perception.camera.app.DebugParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.DebugParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.DebugParam}
 */
proto.apollo.perception.camera.app.DebugParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectionOutDir(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackedDetectionOutDir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackOutFile(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectFeatureDir(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneOutDir(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCamera2worldOutFile(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibrationOutDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.DebugParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.DebugParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.DebugParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string detection_out_dir = 1;
 * @return {string}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.getDetectionOutDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.setDetectionOutDir = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.clearDetectionOutDir = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.hasDetectionOutDir = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tracked_detection_out_dir = 2;
 * @return {string}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.getTrackedDetectionOutDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.setTrackedDetectionOutDir = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.clearTrackedDetectionOutDir = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.hasTrackedDetectionOutDir = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string track_out_file = 3;
 * @return {string}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.getTrackOutFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.setTrackOutFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.clearTrackOutFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.hasTrackOutFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string detect_feature_dir = 4;
 * @return {string}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.getDetectFeatureDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.setDetectFeatureDir = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.clearDetectFeatureDir = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.hasDetectFeatureDir = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string lane_out_dir = 5;
 * @return {string}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.getLaneOutDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.setLaneOutDir = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.clearLaneOutDir = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.hasLaneOutDir = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string camera2world_out_file = 6;
 * @return {string}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.getCamera2worldOutFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.setCamera2worldOutFile = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.clearCamera2worldOutFile = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.hasCamera2worldOutFile = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string calibration_out_dir = 7;
 * @return {string}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.getCalibrationOutDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.setCalibrationOutDir = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.DebugParam} returns this
 */
proto.apollo.perception.camera.app.DebugParam.prototype.clearCalibrationOutDir = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.DebugParam.prototype.hasCalibrationOutDir = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.LanePerceptionParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.LanePerceptionParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.LanePerceptionParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneDetectorParam: (f = msg.getLaneDetectorParam()) && proto.apollo.perception.camera.app.DetectorParam.toObject(includeInstance, f),
    lanePostprocessorParam: (f = msg.getLanePostprocessorParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f),
    laneTrackerParam: (f = msg.getLaneTrackerParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f),
    gpuId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LanePerceptionParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.LanePerceptionParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneDetectorParam;

  /** @type {?|undefined} */
  this.lanePostprocessorParam;

  /** @type {?|undefined} */
  this.laneTrackerParam;

  /** @type {?|undefined} */
  this.gpuId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.LanePerceptionParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.LanePerceptionParam();
  obj.laneDetectorParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.app.DetectorParam.fromObject(obj.laneDetectorParam));
  obj.lanePostprocessorParam && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.lanePostprocessorParam));
  obj.laneTrackerParam && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.laneTrackerParam));
  obj.gpuId != null && jspb.Message.setField(msg, 4, obj.gpuId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.LanePerceptionParam;
  return proto.apollo.perception.camera.app.LanePerceptionParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.LanePerceptionParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.DetectorParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.DetectorParam.deserializeBinaryFromReader);
      msg.setLaneDetectorParam(value);
      break;
    case 2:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setLanePostprocessorParam(value);
      break;
    case 3:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setLaneTrackerParam(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGpuId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.LanePerceptionParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.LanePerceptionParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.LanePerceptionParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaneDetectorParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.app.DetectorParam.serializeBinaryToWriter
    );
  }
  f = message.getLanePostprocessorParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
  f = message.getLaneTrackerParam();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional DetectorParam lane_detector_param = 1;
 * @return {?proto.apollo.perception.camera.app.DetectorParam}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.getLaneDetectorParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.DetectorParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.DetectorParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.app.DetectorParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
*/
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.setLaneDetectorParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.clearLaneDetectorParam = function() {
  return this.setLaneDetectorParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.hasLaneDetectorParam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PluginParam lane_postprocessor_param = 2;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.getLanePostprocessorParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 2));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
*/
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.setLanePostprocessorParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.clearLanePostprocessorParam = function() {
  return this.setLanePostprocessorParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.hasLanePostprocessorParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PluginParam lane_tracker_param = 3;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.getLaneTrackerParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 3));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
*/
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.setLaneTrackerParam = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.clearLaneTrackerParam = function() {
  return this.setLaneTrackerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.hasLaneTrackerParam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 gpu_id = 4;
 * @return {number}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.getGpuId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.setGpuId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam} returns this
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.clearGpuId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.LanePerceptionParam.prototype.hasGpuId = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.CalibrationServiceParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.CalibrationServiceParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    calibratorMethod: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    pluginParam: (f = msg.getPluginParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CalibrationServiceParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.calibratorMethod;

  /** @type {?|undefined} */
  this.pluginParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.CalibrationServiceParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.CalibrationServiceParam}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.CalibrationServiceParam();
  obj.calibratorMethod != null && jspb.Message.setField(msg, 2, obj.calibratorMethod);
  obj.pluginParam && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.pluginParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.CalibrationServiceParam}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.CalibrationServiceParam;
  return proto.apollo.perception.camera.app.CalibrationServiceParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.CalibrationServiceParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.CalibrationServiceParam}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibratorMethod(value);
      break;
    case 3:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setPluginParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.CalibrationServiceParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.CalibrationServiceParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPluginParam();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional string calibrator_method = 2;
 * @return {string}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.getCalibratorMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.CalibrationServiceParam} returns this
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.setCalibratorMethod = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.CalibrationServiceParam} returns this
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.clearCalibratorMethod = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.hasCalibratorMethod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PluginParam plugin_param = 3;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.getPluginParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 3));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.CalibrationServiceParam} returns this
*/
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.setPluginParam = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.CalibrationServiceParam} returns this
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.clearPluginParam = function() {
  return this.setPluginParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.CalibrationServiceParam.prototype.hasPluginParam = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.ObjectTemplateParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.ObjectTemplateParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginParam: (f = msg.getPluginParam()) && proto.apollo.perception.camera.app.PluginParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectTemplateParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pluginParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.ObjectTemplateParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.ObjectTemplateParam}
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.ObjectTemplateParam();
  obj.pluginParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.app.PluginParam.fromObject(obj.pluginParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.ObjectTemplateParam}
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.ObjectTemplateParam;
  return proto.apollo.perception.camera.app.ObjectTemplateParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.ObjectTemplateParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.ObjectTemplateParam}
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.PluginParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PluginParam.deserializeBinaryFromReader);
      msg.setPluginParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.ObjectTemplateParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.ObjectTemplateParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.app.PluginParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginParam plugin_param = 1;
 * @return {?proto.apollo.perception.camera.app.PluginParam}
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.prototype.getPluginParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PluginParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PluginParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.app.PluginParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.ObjectTemplateParam} returns this
*/
proto.apollo.perception.camera.app.ObjectTemplateParam.prototype.setPluginParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.ObjectTemplateParam} returns this
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.prototype.clearPluginParam = function() {
  return this.setPluginParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.ObjectTemplateParam.prototype.hasPluginParam = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.camera.app.PerceptionParam.repeatedFields_ = [1,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.PerceptionParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.PerceptionParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.PerceptionParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectorParamList: jspb.Message.toObjectList(msg.getDetectorParamList(),
    proto.apollo.perception.camera.app.DetectorParam.toObject, includeInstance),
    trackerParam: (f = msg.getTrackerParam()) && proto.apollo.perception.camera.app.TrackerParam.toObject(includeInstance, f),
    transformerParam: (f = msg.getTransformerParam()) && proto.apollo.perception.camera.app.TransformerParam.toObject(includeInstance, f),
    postprocessorParam: (f = msg.getPostprocessorParam()) && proto.apollo.perception.camera.app.PostprocessorParam.toObject(includeInstance, f),
    gpuId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    cameraIntrinsics: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    featureParam: (f = msg.getFeatureParam()) && proto.apollo.perception.camera.app.FeatureParam.toObject(includeInstance, f),
    laneParamList: jspb.Message.toObjectList(msg.getLaneParamList(),
    proto.apollo.perception.camera.app.LanePerceptionParam.toObject, includeInstance),
    calibrationServiceParam: (f = msg.getCalibrationServiceParam()) && proto.apollo.perception.camera.app.CalibrationServiceParam.toObject(includeInstance, f),
    debugParam: (f = msg.getDebugParam()) && proto.apollo.perception.camera.app.DebugParam.toObject(includeInstance, f),
    objectTemplateParam: (f = msg.getObjectTemplateParam()) && proto.apollo.perception.camera.app.ObjectTemplateParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PerceptionParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.PerceptionParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.detectorParamList;

  /** @type {?|undefined} */
  this.trackerParam;

  /** @type {?|undefined} */
  this.transformerParam;

  /** @type {?|undefined} */
  this.postprocessorParam;

  /** @type {?|undefined} */
  this.gpuId;

  /** @type {?|undefined} */
  this.cameraIntrinsics;

  /** @type {?|undefined} */
  this.featureParam;

  /** @type {?|undefined} */
  this.laneParamList;

  /** @type {?|undefined} */
  this.calibrationServiceParam;

  /** @type {?|undefined} */
  this.debugParam;

  /** @type {?|undefined} */
  this.objectTemplateParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.PerceptionParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.PerceptionParam();
  obj.detectorParamList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.detectorParamList.map(
          proto.apollo.perception.camera.app.DetectorParam.fromObject));
  obj.trackerParam && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.camera.app.TrackerParam.fromObject(obj.trackerParam));
  obj.transformerParam && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.camera.app.TransformerParam.fromObject(obj.transformerParam));
  obj.postprocessorParam && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.camera.app.PostprocessorParam.fromObject(obj.postprocessorParam));
  obj.gpuId != null && jspb.Message.setField(msg, 5, obj.gpuId);
  obj.cameraIntrinsics != null && jspb.Message.setField(msg, 6, obj.cameraIntrinsics);
  obj.featureParam && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.perception.camera.app.FeatureParam.fromObject(obj.featureParam));
  obj.laneParamList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.laneParamList.map(
          proto.apollo.perception.camera.app.LanePerceptionParam.fromObject));
  obj.calibrationServiceParam && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.perception.camera.app.CalibrationServiceParam.fromObject(obj.calibrationServiceParam));
  obj.debugParam && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.perception.camera.app.DebugParam.fromObject(obj.debugParam));
  obj.objectTemplateParam && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.perception.camera.app.ObjectTemplateParam.fromObject(obj.objectTemplateParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.PerceptionParam;
  return proto.apollo.perception.camera.app.PerceptionParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.PerceptionParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.DetectorParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.DetectorParam.deserializeBinaryFromReader);
      msg.addDetectorParam(value);
      break;
    case 2:
      var value = new proto.apollo.perception.camera.app.TrackerParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.TrackerParam.deserializeBinaryFromReader);
      msg.setTrackerParam(value);
      break;
    case 3:
      var value = new proto.apollo.perception.camera.app.TransformerParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.TransformerParam.deserializeBinaryFromReader);
      msg.setTransformerParam(value);
      break;
    case 4:
      var value = new proto.apollo.perception.camera.app.PostprocessorParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.PostprocessorParam.deserializeBinaryFromReader);
      msg.setPostprocessorParam(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGpuId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraIntrinsics(value);
      break;
    case 7:
      var value = new proto.apollo.perception.camera.app.FeatureParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.FeatureParam.deserializeBinaryFromReader);
      msg.setFeatureParam(value);
      break;
    case 8:
      var value = new proto.apollo.perception.camera.app.LanePerceptionParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.LanePerceptionParam.deserializeBinaryFromReader);
      msg.addLaneParam(value);
      break;
    case 9:
      var value = new proto.apollo.perception.camera.app.CalibrationServiceParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.CalibrationServiceParam.deserializeBinaryFromReader);
      msg.setCalibrationServiceParam(value);
      break;
    case 10:
      var value = new proto.apollo.perception.camera.app.DebugParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.DebugParam.deserializeBinaryFromReader);
      msg.setDebugParam(value);
      break;
    case 11:
      var value = new proto.apollo.perception.camera.app.ObjectTemplateParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.ObjectTemplateParam.deserializeBinaryFromReader);
      msg.setObjectTemplateParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.PerceptionParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.PerceptionParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.PerceptionParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectorParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.camera.app.DetectorParam.serializeBinaryToWriter
    );
  }
  f = message.getTrackerParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.camera.app.TrackerParam.serializeBinaryToWriter
    );
  }
  f = message.getTransformerParam();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.camera.app.TransformerParam.serializeBinaryToWriter
    );
  }
  f = message.getPostprocessorParam();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.camera.app.PostprocessorParam.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFeatureParam();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.perception.camera.app.FeatureParam.serializeBinaryToWriter
    );
  }
  f = message.getLaneParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.perception.camera.app.LanePerceptionParam.serializeBinaryToWriter
    );
  }
  f = message.getCalibrationServiceParam();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.perception.camera.app.CalibrationServiceParam.serializeBinaryToWriter
    );
  }
  f = message.getDebugParam();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.perception.camera.app.DebugParam.serializeBinaryToWriter
    );
  }
  f = message.getObjectTemplateParam();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.perception.camera.app.ObjectTemplateParam.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DetectorParam detector_param = 1;
 * @return {!Array<!proto.apollo.perception.camera.app.DetectorParam>}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getDetectorParamList = function() {
  return /** @type{!Array<!proto.apollo.perception.camera.app.DetectorParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.camera.app.DetectorParam, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.camera.app.DetectorParam>} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setDetectorParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.camera.app.DetectorParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.app.DetectorParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.addDetectorParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.camera.app.DetectorParam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearDetectorParamList = function() {
  return this.setDetectorParamList([]);
};


/**
 * optional TrackerParam tracker_param = 2;
 * @return {?proto.apollo.perception.camera.app.TrackerParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getTrackerParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.TrackerParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.TrackerParam, 2));
};


/**
 * @param {?proto.apollo.perception.camera.app.TrackerParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setTrackerParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearTrackerParam = function() {
  return this.setTrackerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasTrackerParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransformerParam transformer_param = 3;
 * @return {?proto.apollo.perception.camera.app.TransformerParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getTransformerParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.TransformerParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.TransformerParam, 3));
};


/**
 * @param {?proto.apollo.perception.camera.app.TransformerParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setTransformerParam = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearTransformerParam = function() {
  return this.setTransformerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasTransformerParam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PostprocessorParam postprocessor_param = 4;
 * @return {?proto.apollo.perception.camera.app.PostprocessorParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getPostprocessorParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.PostprocessorParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.PostprocessorParam, 4));
};


/**
 * @param {?proto.apollo.perception.camera.app.PostprocessorParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setPostprocessorParam = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearPostprocessorParam = function() {
  return this.setPostprocessorParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasPostprocessorParam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 gpu_id = 5;
 * @return {number}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getGpuId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.setGpuId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearGpuId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasGpuId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string camera_intrinsics = 6;
 * @return {string}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getCameraIntrinsics = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.setCameraIntrinsics = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearCameraIntrinsics = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasCameraIntrinsics = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FeatureParam feature_param = 7;
 * @return {?proto.apollo.perception.camera.app.FeatureParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getFeatureParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.FeatureParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.FeatureParam, 7));
};


/**
 * @param {?proto.apollo.perception.camera.app.FeatureParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setFeatureParam = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearFeatureParam = function() {
  return this.setFeatureParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasFeatureParam = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated LanePerceptionParam lane_param = 8;
 * @return {!Array<!proto.apollo.perception.camera.app.LanePerceptionParam>}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getLaneParamList = function() {
  return /** @type{!Array<!proto.apollo.perception.camera.app.LanePerceptionParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.camera.app.LanePerceptionParam, 8));
};


/**
 * @param {!Array<!proto.apollo.perception.camera.app.LanePerceptionParam>} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setLaneParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.perception.camera.app.LanePerceptionParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.app.LanePerceptionParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.addLaneParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.perception.camera.app.LanePerceptionParam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearLaneParamList = function() {
  return this.setLaneParamList([]);
};


/**
 * optional CalibrationServiceParam calibration_service_param = 9;
 * @return {?proto.apollo.perception.camera.app.CalibrationServiceParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getCalibrationServiceParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.CalibrationServiceParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.CalibrationServiceParam, 9));
};


/**
 * @param {?proto.apollo.perception.camera.app.CalibrationServiceParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setCalibrationServiceParam = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearCalibrationServiceParam = function() {
  return this.setCalibrationServiceParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasCalibrationServiceParam = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DebugParam debug_param = 10;
 * @return {?proto.apollo.perception.camera.app.DebugParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getDebugParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.DebugParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.DebugParam, 10));
};


/**
 * @param {?proto.apollo.perception.camera.app.DebugParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setDebugParam = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearDebugParam = function() {
  return this.setDebugParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasDebugParam = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ObjectTemplateParam object_template_param = 11;
 * @return {?proto.apollo.perception.camera.app.ObjectTemplateParam}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.getObjectTemplateParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.ObjectTemplateParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.ObjectTemplateParam, 11));
};


/**
 * @param {?proto.apollo.perception.camera.app.ObjectTemplateParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
*/
proto.apollo.perception.camera.app.PerceptionParam.prototype.setObjectTemplateParam = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.PerceptionParam} returns this
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.clearObjectTemplateParam = function() {
  return this.setObjectTemplateParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.PerceptionParam.prototype.hasObjectTemplateParam = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.camera.app.TrafficLightParam.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.app.TrafficLightParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.app.TrafficLightParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.TrafficLightParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectorParamList: jspb.Message.toObjectList(msg.getDetectorParamList(),
    proto.apollo.perception.camera.app.DetectorParam.toObject, includeInstance),
    trackerParam: (f = msg.getTrackerParam()) && proto.apollo.perception.camera.app.TrackerParam.toObject(includeInstance, f),
    gpuId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.app.TrafficLightParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.detectorParamList;

  /** @type {?|undefined} */
  this.trackerParam;

  /** @type {?|undefined} */
  this.gpuId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.app.TrafficLightParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam}
 */
proto.apollo.perception.camera.app.TrafficLightParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.app.TrafficLightParam();
  obj.detectorParamList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.detectorParamList.map(
          proto.apollo.perception.camera.app.DetectorParam.fromObject));
  obj.trackerParam && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.camera.app.TrackerParam.fromObject(obj.trackerParam));
  obj.gpuId != null && jspb.Message.setField(msg, 3, obj.gpuId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam}
 */
proto.apollo.perception.camera.app.TrafficLightParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.app.TrafficLightParam;
  return proto.apollo.perception.camera.app.TrafficLightParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.app.TrafficLightParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam}
 */
proto.apollo.perception.camera.app.TrafficLightParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.app.DetectorParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.DetectorParam.deserializeBinaryFromReader);
      msg.addDetectorParam(value);
      break;
    case 2:
      var value = new proto.apollo.perception.camera.app.TrackerParam;
      reader.readMessage(value,proto.apollo.perception.camera.app.TrackerParam.deserializeBinaryFromReader);
      msg.setTrackerParam(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGpuId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.app.TrafficLightParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.app.TrafficLightParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.app.TrafficLightParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectorParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.camera.app.DetectorParam.serializeBinaryToWriter
    );
  }
  f = message.getTrackerParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.camera.app.TrackerParam.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated DetectorParam detector_param = 1;
 * @return {!Array<!proto.apollo.perception.camera.app.DetectorParam>}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.getDetectorParamList = function() {
  return /** @type{!Array<!proto.apollo.perception.camera.app.DetectorParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.camera.app.DetectorParam, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.camera.app.DetectorParam>} value
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam} returns this
*/
proto.apollo.perception.camera.app.TrafficLightParam.prototype.setDetectorParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.camera.app.DetectorParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.camera.app.DetectorParam}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.addDetectorParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.camera.app.DetectorParam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam} returns this
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.clearDetectorParamList = function() {
  return this.setDetectorParamList([]);
};


/**
 * optional TrackerParam tracker_param = 2;
 * @return {?proto.apollo.perception.camera.app.TrackerParam}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.getTrackerParam = function() {
  return /** @type{?proto.apollo.perception.camera.app.TrackerParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.app.TrackerParam, 2));
};


/**
 * @param {?proto.apollo.perception.camera.app.TrackerParam|undefined} value
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam} returns this
*/
proto.apollo.perception.camera.app.TrafficLightParam.prototype.setTrackerParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam} returns this
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.clearTrackerParam = function() {
  return this.setTrackerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.hasTrackerParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 gpu_id = 3;
 * @return {number}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.getGpuId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam} returns this
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.setGpuId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.app.TrafficLightParam} returns this
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.clearGpuId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.app.TrafficLightParam.prototype.hasGpuId = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.apollo.perception.camera.app);
