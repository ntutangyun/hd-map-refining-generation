// source: modules/prediction/proto/feature.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_map_proto_map_lane_pb = require('../../../modules/map/proto/map_lane_pb.js');
goog.object.extend(proto, modules_map_proto_map_lane_pb);
var modules_perception_proto_perception_obstacle_pb = require('../../../modules/perception/proto/perception_obstacle_pb.js');
goog.object.extend(proto, modules_perception_proto_perception_obstacle_pb);
var modules_prediction_proto_lane_graph_pb = require('../../../modules/prediction/proto/lane_graph_pb.js');
goog.object.extend(proto, modules_prediction_proto_lane_graph_pb);
var modules_prediction_proto_prediction_point_pb = require('../../../modules/prediction/proto/prediction_point_pb.js');
goog.object.extend(proto, modules_prediction_proto_prediction_point_pb);
goog.exportSymbol('proto.apollo.prediction.Feature', null, global);
goog.exportSymbol('proto.apollo.prediction.FrameEnv', null, global);
goog.exportSymbol('proto.apollo.prediction.JunctionExit', null, global);
goog.exportSymbol('proto.apollo.prediction.JunctionFeature', null, global);
goog.exportSymbol('proto.apollo.prediction.Lane', null, global);
goog.exportSymbol('proto.apollo.prediction.LaneFeature', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstacleHistory', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstacleInteractiveTag', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstaclePriority', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstaclePriority.Priority', null, global);
goog.exportSymbol('proto.apollo.prediction.Trajectory', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.Lane = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.Lane.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.Lane, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.Lane.displayName = 'proto.apollo.prediction.Lane';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.LaneFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.LaneFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.LaneFeature.displayName = 'proto.apollo.prediction.LaneFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.JunctionExit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.JunctionExit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.JunctionExit.displayName = 'proto.apollo.prediction.JunctionExit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.JunctionFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.JunctionFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.JunctionFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.JunctionFeature.displayName = 'proto.apollo.prediction.JunctionFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ObstaclePriority = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.ObstaclePriority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ObstaclePriority.displayName = 'proto.apollo.prediction.ObstaclePriority';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ObstacleInteractiveTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.ObstacleInteractiveTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ObstacleInteractiveTag.displayName = 'proto.apollo.prediction.ObstacleInteractiveTag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.Trajectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.Trajectory.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.Trajectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.Trajectory.displayName = 'proto.apollo.prediction.Trajectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.Feature.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.Feature.displayName = 'proto.apollo.prediction.Feature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ObstacleHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.ObstacleHistory.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.ObstacleHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ObstacleHistory.displayName = 'proto.apollo.prediction.ObstacleHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.FrameEnv = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.FrameEnv.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.FrameEnv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.FrameEnv.displayName = 'proto.apollo.prediction.FrameEnv';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.Lane.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.Lane.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.Lane.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.Lane} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Lane.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentLaneFeatureList: jspb.Message.toObjectList(msg.getCurrentLaneFeatureList(),
    proto.apollo.prediction.LaneFeature.toObject, includeInstance),
    laneFeature: (f = msg.getLaneFeature()) && proto.apollo.prediction.LaneFeature.toObject(includeInstance, f),
    nearbyLaneFeatureList: jspb.Message.toObjectList(msg.getNearbyLaneFeatureList(),
    proto.apollo.prediction.LaneFeature.toObject, includeInstance),
    laneGraph: (f = msg.getLaneGraph()) && modules_prediction_proto_lane_graph_pb.LaneGraph.toObject(includeInstance, f),
    laneGraphOrdered: (f = msg.getLaneGraphOrdered()) && modules_prediction_proto_lane_graph_pb.LaneGraph.toObject(includeInstance, f),
    labelUpdateTimeDelta: (f = jspb.Message.getOptionalFloatingPointField(msg, 26)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Lane as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.Lane.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.currentLaneFeatureList;

  /** @type {?|undefined} */
  this.laneFeature;

  /** @type {?|undefined} */
  this.nearbyLaneFeatureList;

  /** @type {?|undefined} */
  this.laneGraph;

  /** @type {?|undefined} */
  this.laneGraphOrdered;

  /** @type {?|undefined} */
  this.labelUpdateTimeDelta;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.Lane.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.Lane}
 */
proto.apollo.prediction.Lane.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.Lane();
  obj.currentLaneFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.currentLaneFeatureList.map(
          proto.apollo.prediction.LaneFeature.fromObject));
  obj.laneFeature && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.prediction.LaneFeature.fromObject(obj.laneFeature));
  obj.nearbyLaneFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.nearbyLaneFeatureList.map(
          proto.apollo.prediction.LaneFeature.fromObject));
  obj.laneGraph && jspb.Message.setWrapperField(
      msg, 4, modules_prediction_proto_lane_graph_pb.LaneGraph.fromObject(obj.laneGraph));
  obj.laneGraphOrdered && jspb.Message.setWrapperField(
      msg, 5, modules_prediction_proto_lane_graph_pb.LaneGraph.fromObject(obj.laneGraphOrdered));
  obj.labelUpdateTimeDelta != null && jspb.Message.setField(msg, 26, obj.labelUpdateTimeDelta);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.Lane}
 */
proto.apollo.prediction.Lane.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.Lane;
  return proto.apollo.prediction.Lane.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.Lane} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.Lane}
 */
proto.apollo.prediction.Lane.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.LaneFeature;
      reader.readMessage(value,proto.apollo.prediction.LaneFeature.deserializeBinaryFromReader);
      msg.addCurrentLaneFeature(value);
      break;
    case 2:
      var value = new proto.apollo.prediction.LaneFeature;
      reader.readMessage(value,proto.apollo.prediction.LaneFeature.deserializeBinaryFromReader);
      msg.setLaneFeature(value);
      break;
    case 3:
      var value = new proto.apollo.prediction.LaneFeature;
      reader.readMessage(value,proto.apollo.prediction.LaneFeature.deserializeBinaryFromReader);
      msg.addNearbyLaneFeature(value);
      break;
    case 4:
      var value = new modules_prediction_proto_lane_graph_pb.LaneGraph;
      reader.readMessage(value,modules_prediction_proto_lane_graph_pb.LaneGraph.deserializeBinaryFromReader);
      msg.setLaneGraph(value);
      break;
    case 5:
      var value = new modules_prediction_proto_lane_graph_pb.LaneGraph;
      reader.readMessage(value,modules_prediction_proto_lane_graph_pb.LaneGraph.deserializeBinaryFromReader);
      msg.setLaneGraphOrdered(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLabelUpdateTimeDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.Lane.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.Lane.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.Lane} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Lane.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentLaneFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.LaneFeature.serializeBinaryToWriter
    );
  }
  f = message.getLaneFeature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.prediction.LaneFeature.serializeBinaryToWriter
    );
  }
  f = message.getNearbyLaneFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.prediction.LaneFeature.serializeBinaryToWriter
    );
  }
  f = message.getLaneGraph();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_prediction_proto_lane_graph_pb.LaneGraph.serializeBinaryToWriter
    );
  }
  f = message.getLaneGraphOrdered();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_prediction_proto_lane_graph_pb.LaneGraph.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeDouble(
      26,
      f
    );
  }
};


/**
 * repeated LaneFeature current_lane_feature = 1;
 * @return {!Array<!proto.apollo.prediction.LaneFeature>}
 */
proto.apollo.prediction.Lane.prototype.getCurrentLaneFeatureList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LaneFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LaneFeature, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.LaneFeature>} value
 * @return {!proto.apollo.prediction.Lane} returns this
*/
proto.apollo.prediction.Lane.prototype.setCurrentLaneFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.LaneFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LaneFeature}
 */
proto.apollo.prediction.Lane.prototype.addCurrentLaneFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.LaneFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Lane} returns this
 */
proto.apollo.prediction.Lane.prototype.clearCurrentLaneFeatureList = function() {
  return this.setCurrentLaneFeatureList([]);
};


/**
 * optional LaneFeature lane_feature = 2;
 * @return {?proto.apollo.prediction.LaneFeature}
 */
proto.apollo.prediction.Lane.prototype.getLaneFeature = function() {
  return /** @type{?proto.apollo.prediction.LaneFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.LaneFeature, 2));
};


/**
 * @param {?proto.apollo.prediction.LaneFeature|undefined} value
 * @return {!proto.apollo.prediction.Lane} returns this
*/
proto.apollo.prediction.Lane.prototype.setLaneFeature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Lane} returns this
 */
proto.apollo.prediction.Lane.prototype.clearLaneFeature = function() {
  return this.setLaneFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Lane.prototype.hasLaneFeature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated LaneFeature nearby_lane_feature = 3;
 * @return {!Array<!proto.apollo.prediction.LaneFeature>}
 */
proto.apollo.prediction.Lane.prototype.getNearbyLaneFeatureList = function() {
  return /** @type{!Array<!proto.apollo.prediction.LaneFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.LaneFeature, 3));
};


/**
 * @param {!Array<!proto.apollo.prediction.LaneFeature>} value
 * @return {!proto.apollo.prediction.Lane} returns this
*/
proto.apollo.prediction.Lane.prototype.setNearbyLaneFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.prediction.LaneFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.LaneFeature}
 */
proto.apollo.prediction.Lane.prototype.addNearbyLaneFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.prediction.LaneFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Lane} returns this
 */
proto.apollo.prediction.Lane.prototype.clearNearbyLaneFeatureList = function() {
  return this.setNearbyLaneFeatureList([]);
};


/**
 * optional LaneGraph lane_graph = 4;
 * @return {?proto.apollo.prediction.LaneGraph}
 */
proto.apollo.prediction.Lane.prototype.getLaneGraph = function() {
  return /** @type{?proto.apollo.prediction.LaneGraph} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_lane_graph_pb.LaneGraph, 4));
};


/**
 * @param {?proto.apollo.prediction.LaneGraph|undefined} value
 * @return {!proto.apollo.prediction.Lane} returns this
*/
proto.apollo.prediction.Lane.prototype.setLaneGraph = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Lane} returns this
 */
proto.apollo.prediction.Lane.prototype.clearLaneGraph = function() {
  return this.setLaneGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Lane.prototype.hasLaneGraph = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LaneGraph lane_graph_ordered = 5;
 * @return {?proto.apollo.prediction.LaneGraph}
 */
proto.apollo.prediction.Lane.prototype.getLaneGraphOrdered = function() {
  return /** @type{?proto.apollo.prediction.LaneGraph} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_lane_graph_pb.LaneGraph, 5));
};


/**
 * @param {?proto.apollo.prediction.LaneGraph|undefined} value
 * @return {!proto.apollo.prediction.Lane} returns this
*/
proto.apollo.prediction.Lane.prototype.setLaneGraphOrdered = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Lane} returns this
 */
proto.apollo.prediction.Lane.prototype.clearLaneGraphOrdered = function() {
  return this.setLaneGraphOrdered(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Lane.prototype.hasLaneGraphOrdered = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double label_update_time_delta = 26;
 * @return {number}
 */
proto.apollo.prediction.Lane.prototype.getLabelUpdateTimeDelta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Lane} returns this
 */
proto.apollo.prediction.Lane.prototype.setLabelUpdateTimeDelta = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Lane} returns this
 */
proto.apollo.prediction.Lane.prototype.clearLabelUpdateTimeDelta = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Lane.prototype.hasLabelUpdateTimeDelta = function() {
  return jspb.Message.getField(this, 26) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.LaneFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.LaneFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.LaneFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    laneTurnType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    laneS: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    laneL: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    angleDiff: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    distToLeftBoundary: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    distToRightBoundary: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    laneHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    laneType: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.LaneFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneId;

  /** @type {?|undefined} */
  this.laneTurnType;

  /** @type {?|undefined} */
  this.laneS;

  /** @type {?|undefined} */
  this.laneL;

  /** @type {?|undefined} */
  this.angleDiff;

  /** @type {?|undefined} */
  this.distToLeftBoundary;

  /** @type {?|undefined} */
  this.distToRightBoundary;

  /** @type {?|undefined} */
  this.laneHeading;

  /** @type {?|undefined} */
  this.laneType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.LaneFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.LaneFeature}
 */
proto.apollo.prediction.LaneFeature.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.LaneFeature();
  obj.laneId != null && jspb.Message.setField(msg, 1, obj.laneId);
  obj.laneTurnType != null && jspb.Message.setField(msg, 2, obj.laneTurnType);
  obj.laneS != null && jspb.Message.setField(msg, 3, obj.laneS);
  obj.laneL != null && jspb.Message.setField(msg, 4, obj.laneL);
  obj.angleDiff != null && jspb.Message.setField(msg, 5, obj.angleDiff);
  obj.distToLeftBoundary != null && jspb.Message.setField(msg, 6, obj.distToLeftBoundary);
  obj.distToRightBoundary != null && jspb.Message.setField(msg, 7, obj.distToRightBoundary);
  obj.laneHeading != null && jspb.Message.setField(msg, 8, obj.laneHeading);
  obj.laneType != null && jspb.Message.setField(msg, 9, obj.laneType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.LaneFeature}
 */
proto.apollo.prediction.LaneFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.LaneFeature;
  return proto.apollo.prediction.LaneFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.LaneFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.LaneFeature}
 */
proto.apollo.prediction.LaneFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLaneTurnType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneL(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAngleDiff(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistToLeftBoundary(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistToRightBoundary(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLaneHeading(value);
      break;
    case 9:
      var value = /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (reader.readEnum());
      msg.setLaneType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.LaneFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.LaneFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.LaneFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.LaneFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional string lane_id = 1;
 * @return {string}
 */
proto.apollo.prediction.LaneFeature.prototype.getLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 lane_turn_type = 2;
 * @return {number}
 */
proto.apollo.prediction.LaneFeature.prototype.getLaneTurnType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setLaneTurnType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearLaneTurnType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasLaneTurnType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double lane_s = 3;
 * @return {number}
 */
proto.apollo.prediction.LaneFeature.prototype.getLaneS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setLaneS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearLaneS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasLaneS = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double lane_l = 4;
 * @return {number}
 */
proto.apollo.prediction.LaneFeature.prototype.getLaneL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setLaneL = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearLaneL = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasLaneL = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double angle_diff = 5;
 * @return {number}
 */
proto.apollo.prediction.LaneFeature.prototype.getAngleDiff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setAngleDiff = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearAngleDiff = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasAngleDiff = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double dist_to_left_boundary = 6;
 * @return {number}
 */
proto.apollo.prediction.LaneFeature.prototype.getDistToLeftBoundary = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setDistToLeftBoundary = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearDistToLeftBoundary = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasDistToLeftBoundary = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double dist_to_right_boundary = 7;
 * @return {number}
 */
proto.apollo.prediction.LaneFeature.prototype.getDistToRightBoundary = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setDistToRightBoundary = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearDistToRightBoundary = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasDistToRightBoundary = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double lane_heading = 8;
 * @return {number}
 */
proto.apollo.prediction.LaneFeature.prototype.getLaneHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setLaneHeading = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearLaneHeading = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasLaneHeading = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional apollo.hdmap.Lane.LaneType lane_type = 9;
 * @return {!proto.apollo.hdmap.Lane.LaneType}
 */
proto.apollo.prediction.LaneFeature.prototype.getLaneType = function() {
  return /** @type {!proto.apollo.hdmap.Lane.LaneType} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/**
 * @param {!proto.apollo.hdmap.Lane.LaneType} value
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.setLaneType = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.LaneFeature} returns this
 */
proto.apollo.prediction.LaneFeature.prototype.clearLaneType = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.LaneFeature.prototype.hasLaneType = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.JunctionExit.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.JunctionExit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.JunctionExit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.JunctionExit.toObject = function(includeInstance, msg) {
  var f, obj = {
    exitLaneId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    exitPosition: (f = msg.getExitPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    exitHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    exitWidth: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of JunctionExit as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.JunctionExit.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.exitLaneId;

  /** @type {?|undefined} */
  this.exitPosition;

  /** @type {?|undefined} */
  this.exitHeading;

  /** @type {?|undefined} */
  this.exitWidth;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.JunctionExit.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.JunctionExit}
 */
proto.apollo.prediction.JunctionExit.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.JunctionExit();
  obj.exitLaneId != null && jspb.Message.setField(msg, 1, obj.exitLaneId);
  obj.exitPosition && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.Point3D.fromObject(obj.exitPosition));
  obj.exitHeading != null && jspb.Message.setField(msg, 3, obj.exitHeading);
  obj.exitWidth != null && jspb.Message.setField(msg, 4, obj.exitWidth);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.JunctionExit}
 */
proto.apollo.prediction.JunctionExit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.JunctionExit;
  return proto.apollo.prediction.JunctionExit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.JunctionExit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.JunctionExit}
 */
proto.apollo.prediction.JunctionExit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExitLaneId(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setExitPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExitHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExitWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.JunctionExit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.JunctionExit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.JunctionExit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.JunctionExit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExitPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string exit_lane_id = 1;
 * @return {string}
 */
proto.apollo.prediction.JunctionExit.prototype.getExitLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.JunctionExit} returns this
 */
proto.apollo.prediction.JunctionExit.prototype.setExitLaneId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.JunctionExit} returns this
 */
proto.apollo.prediction.JunctionExit.prototype.clearExitLaneId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.JunctionExit.prototype.hasExitLaneId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.Point3D exit_position = 2;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.JunctionExit.prototype.getExitPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 2));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.JunctionExit} returns this
*/
proto.apollo.prediction.JunctionExit.prototype.setExitPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.JunctionExit} returns this
 */
proto.apollo.prediction.JunctionExit.prototype.clearExitPosition = function() {
  return this.setExitPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.JunctionExit.prototype.hasExitPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double exit_heading = 3;
 * @return {number}
 */
proto.apollo.prediction.JunctionExit.prototype.getExitHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.JunctionExit} returns this
 */
proto.apollo.prediction.JunctionExit.prototype.setExitHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.JunctionExit} returns this
 */
proto.apollo.prediction.JunctionExit.prototype.clearExitHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.JunctionExit.prototype.hasExitHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double exit_width = 4;
 * @return {number}
 */
proto.apollo.prediction.JunctionExit.prototype.getExitWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.JunctionExit} returns this
 */
proto.apollo.prediction.JunctionExit.prototype.setExitWidth = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.JunctionExit} returns this
 */
proto.apollo.prediction.JunctionExit.prototype.clearExitWidth = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.JunctionExit.prototype.hasExitWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.JunctionFeature.repeatedFields_ = [4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.JunctionFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.JunctionFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.JunctionFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.JunctionFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    junctionId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    junctionRange: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    enterLane: (f = msg.getEnterLane()) && proto.apollo.prediction.LaneFeature.toObject(includeInstance, f),
    junctionExitList: jspb.Message.toObjectList(msg.getJunctionExitList(),
    proto.apollo.prediction.JunctionExit.toObject, includeInstance),
    junctionMlpFeatureList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    junctionMlpLabelList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    junctionMlpProbabilityList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    startLaneIdList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of JunctionFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.JunctionFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.junctionId;

  /** @type {?|undefined} */
  this.junctionRange;

  /** @type {?|undefined} */
  this.enterLane;

  /** @type {?|undefined} */
  this.junctionExitList;

  /** @type {?|undefined} */
  this.junctionMlpFeatureList;

  /** @type {?|undefined} */
  this.junctionMlpLabelList;

  /** @type {?|undefined} */
  this.junctionMlpProbabilityList;

  /** @type {?|undefined} */
  this.startLaneIdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.JunctionFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.JunctionFeature}
 */
proto.apollo.prediction.JunctionFeature.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.JunctionFeature();
  obj.junctionId != null && jspb.Message.setField(msg, 1, obj.junctionId);
  obj.junctionRange != null && jspb.Message.setField(msg, 2, obj.junctionRange);
  obj.enterLane && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.prediction.LaneFeature.fromObject(obj.enterLane));
  obj.junctionExitList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.junctionExitList.map(
          proto.apollo.prediction.JunctionExit.fromObject));
  obj.junctionMlpFeatureList != null && jspb.Message.setField(msg, 5, obj.junctionMlpFeatureList);
  obj.junctionMlpLabelList != null && jspb.Message.setField(msg, 6, obj.junctionMlpLabelList);
  obj.junctionMlpProbabilityList != null && jspb.Message.setField(msg, 7, obj.junctionMlpProbabilityList);
  obj.startLaneIdList != null && jspb.Message.setField(msg, 8, obj.startLaneIdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.JunctionFeature}
 */
proto.apollo.prediction.JunctionFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.JunctionFeature;
  return proto.apollo.prediction.JunctionFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.JunctionFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.JunctionFeature}
 */
proto.apollo.prediction.JunctionFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJunctionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJunctionRange(value);
      break;
    case 3:
      var value = new proto.apollo.prediction.LaneFeature;
      reader.readMessage(value,proto.apollo.prediction.LaneFeature.deserializeBinaryFromReader);
      msg.setEnterLane(value);
      break;
    case 4:
      var value = new proto.apollo.prediction.JunctionExit;
      reader.readMessage(value,proto.apollo.prediction.JunctionExit.deserializeBinaryFromReader);
      msg.addJunctionExit(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJunctionMlpFeature(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJunctionMlpLabel(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addJunctionMlpProbability(values[i]);
      }
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addStartLaneId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.JunctionFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.JunctionFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.JunctionFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.JunctionFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getEnterLane();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.prediction.LaneFeature.serializeBinaryToWriter
    );
  }
  f = message.getJunctionExitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.prediction.JunctionExit.serializeBinaryToWriter
    );
  }
  f = message.getJunctionMlpFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      5,
      f
    );
  }
  f = message.getJunctionMlpLabelList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      6,
      f
    );
  }
  f = message.getJunctionMlpProbabilityList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      7,
      f
    );
  }
  f = message.getStartLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string junction_id = 1;
 * @return {string}
 */
proto.apollo.prediction.JunctionFeature.prototype.getJunctionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.setJunctionId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearJunctionId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.JunctionFeature.prototype.hasJunctionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double junction_range = 2;
 * @return {number}
 */
proto.apollo.prediction.JunctionFeature.prototype.getJunctionRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.setJunctionRange = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearJunctionRange = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.JunctionFeature.prototype.hasJunctionRange = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LaneFeature enter_lane = 3;
 * @return {?proto.apollo.prediction.LaneFeature}
 */
proto.apollo.prediction.JunctionFeature.prototype.getEnterLane = function() {
  return /** @type{?proto.apollo.prediction.LaneFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.LaneFeature, 3));
};


/**
 * @param {?proto.apollo.prediction.LaneFeature|undefined} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
*/
proto.apollo.prediction.JunctionFeature.prototype.setEnterLane = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearEnterLane = function() {
  return this.setEnterLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.JunctionFeature.prototype.hasEnterLane = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated JunctionExit junction_exit = 4;
 * @return {!Array<!proto.apollo.prediction.JunctionExit>}
 */
proto.apollo.prediction.JunctionFeature.prototype.getJunctionExitList = function() {
  return /** @type{!Array<!proto.apollo.prediction.JunctionExit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.JunctionExit, 4));
};


/**
 * @param {!Array<!proto.apollo.prediction.JunctionExit>} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
*/
proto.apollo.prediction.JunctionFeature.prototype.setJunctionExitList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.prediction.JunctionExit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.JunctionExit}
 */
proto.apollo.prediction.JunctionFeature.prototype.addJunctionExit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.prediction.JunctionExit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearJunctionExitList = function() {
  return this.setJunctionExitList([]);
};


/**
 * repeated double junction_mlp_feature = 5;
 * @return {!Array<number>}
 */
proto.apollo.prediction.JunctionFeature.prototype.getJunctionMlpFeatureList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.setJunctionMlpFeatureList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.addJunctionMlpFeature = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearJunctionMlpFeatureList = function() {
  return this.setJunctionMlpFeatureList([]);
};


/**
 * repeated int32 junction_mlp_label = 6;
 * @return {!Array<number>}
 */
proto.apollo.prediction.JunctionFeature.prototype.getJunctionMlpLabelList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.setJunctionMlpLabelList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.addJunctionMlpLabel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearJunctionMlpLabelList = function() {
  return this.setJunctionMlpLabelList([]);
};


/**
 * repeated double junction_mlp_probability = 7;
 * @return {!Array<number>}
 */
proto.apollo.prediction.JunctionFeature.prototype.getJunctionMlpProbabilityList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.setJunctionMlpProbabilityList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.addJunctionMlpProbability = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearJunctionMlpProbabilityList = function() {
  return this.setJunctionMlpProbabilityList([]);
};


/**
 * repeated string start_lane_id = 8;
 * @return {!Array<string>}
 */
proto.apollo.prediction.JunctionFeature.prototype.getStartLaneIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.setStartLaneIdList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.addStartLaneId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.JunctionFeature} returns this
 */
proto.apollo.prediction.JunctionFeature.prototype.clearStartLaneIdList = function() {
  return this.setStartLaneIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ObstaclePriority.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ObstaclePriority.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ObstaclePriority} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstaclePriority.toObject = function(includeInstance, msg) {
  var f, obj = {
    priority: jspb.Message.getFieldWithDefault(msg, 25, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstaclePriority as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ObstaclePriority.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.priority;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ObstaclePriority.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ObstaclePriority}
 */
proto.apollo.prediction.ObstaclePriority.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ObstaclePriority();
  obj.priority != null && jspb.Message.setField(msg, 25, obj.priority);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ObstaclePriority}
 */
proto.apollo.prediction.ObstaclePriority.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ObstaclePriority;
  return proto.apollo.prediction.ObstaclePriority.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ObstaclePriority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ObstaclePriority}
 */
proto.apollo.prediction.ObstaclePriority.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 25:
      var value = /** @type {!proto.apollo.prediction.ObstaclePriority.Priority} */ (reader.readEnum());
      msg.setPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ObstaclePriority.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ObstaclePriority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ObstaclePriority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstaclePriority.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.prediction.ObstaclePriority.Priority} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeEnum(
      25,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.prediction.ObstaclePriority.Priority = {
  CAUTION: 1,
  NORMAL: 2,
  IGNORE: 3
};

/**
 * optional Priority priority = 25;
 * @return {!proto.apollo.prediction.ObstaclePriority.Priority}
 */
proto.apollo.prediction.ObstaclePriority.prototype.getPriority = function() {
  return /** @type {!proto.apollo.prediction.ObstaclePriority.Priority} */ (jspb.Message.getFieldWithDefault(this, 25, 2));
};


/**
 * @param {!proto.apollo.prediction.ObstaclePriority.Priority} value
 * @return {!proto.apollo.prediction.ObstaclePriority} returns this
 */
proto.apollo.prediction.ObstaclePriority.prototype.setPriority = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstaclePriority} returns this
 */
proto.apollo.prediction.ObstaclePriority.prototype.clearPriority = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstaclePriority.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 25) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ObstacleInteractiveTag.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ObstacleInteractiveTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ObstacleInteractiveTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstacleInteractiveTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactiveTag: jspb.Message.getFieldWithDefault(msg, 37, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleInteractiveTag as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ObstacleInteractiveTag.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.interactiveTag;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ObstacleInteractiveTag.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ObstacleInteractiveTag}
 */
proto.apollo.prediction.ObstacleInteractiveTag.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ObstacleInteractiveTag();
  obj.interactiveTag != null && jspb.Message.setField(msg, 37, obj.interactiveTag);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ObstacleInteractiveTag}
 */
proto.apollo.prediction.ObstacleInteractiveTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ObstacleInteractiveTag;
  return proto.apollo.prediction.ObstacleInteractiveTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ObstacleInteractiveTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ObstacleInteractiveTag}
 */
proto.apollo.prediction.ObstacleInteractiveTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 37:
      var value = /** @type {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} */ (reader.readEnum());
      msg.setInteractiveTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ObstacleInteractiveTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ObstacleInteractiveTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ObstacleInteractiveTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstacleInteractiveTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeEnum(
      37,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag = {
  INTERACTION: 1,
  NONINTERACTION: 2
};

/**
 * optional InteractiveTag interactive_tag = 37;
 * @return {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag}
 */
proto.apollo.prediction.ObstacleInteractiveTag.prototype.getInteractiveTag = function() {
  return /** @type {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} */ (jspb.Message.getFieldWithDefault(this, 37, 2));
};


/**
 * @param {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} value
 * @return {!proto.apollo.prediction.ObstacleInteractiveTag} returns this
 */
proto.apollo.prediction.ObstacleInteractiveTag.prototype.setInteractiveTag = function(value) {
  return jspb.Message.setField(this, 37, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleInteractiveTag} returns this
 */
proto.apollo.prediction.ObstacleInteractiveTag.prototype.clearInteractiveTag = function() {
  return jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleInteractiveTag.prototype.hasInteractiveTag = function() {
  return jspb.Message.getField(this, 37) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.Trajectory.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.Trajectory.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.Trajectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.Trajectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Trajectory.toObject = function(includeInstance, msg) {
  var f, obj = {
    probability: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    trajectoryPointList: jspb.Message.toObjectList(msg.getTrajectoryPointList(),
    modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Trajectory as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.Trajectory.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.probability;

  /** @type {?|undefined} */
  this.trajectoryPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.Trajectory.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.Trajectory}
 */
proto.apollo.prediction.Trajectory.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.Trajectory();
  obj.probability != null && jspb.Message.setField(msg, 1, obj.probability);
  obj.trajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.trajectoryPointList.map(
          modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.Trajectory}
 */
proto.apollo.prediction.Trajectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.Trajectory;
  return proto.apollo.prediction.Trajectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.Trajectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.Trajectory}
 */
proto.apollo.prediction.Trajectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 2:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.addTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.Trajectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.Trajectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.Trajectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Trajectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional double probability = 1;
 * @return {number}
 */
proto.apollo.prediction.Trajectory.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Trajectory} returns this
 */
proto.apollo.prediction.Trajectory.prototype.setProbability = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Trajectory} returns this
 */
proto.apollo.prediction.Trajectory.prototype.clearProbability = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Trajectory.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated apollo.common.TrajectoryPoint trajectory_point = 2;
 * @return {!Array<!proto.apollo.common.TrajectoryPoint>}
 */
proto.apollo.prediction.Trajectory.prototype.getTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.common.TrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.common.TrajectoryPoint>} value
 * @return {!proto.apollo.prediction.Trajectory} returns this
*/
proto.apollo.prediction.Trajectory.prototype.setTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.common.TrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.prediction.Trajectory.prototype.addTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.common.TrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Trajectory} returns this
 */
proto.apollo.prediction.Trajectory.prototype.clearTrajectoryPointList = function() {
  return this.setTrajectoryPointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.Feature.repeatedFields_ = [30,31,32,33,34,35,36];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.Feature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    polygonPointList: jspb.Message.toObjectList(msg.getPolygonPointList(),
    modules_common_proto_geometry_pb.Point3D.toObject, includeInstance),
    position: (f = msg.getPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    frontPosition: (f = msg.getFrontPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    rawVelocity: (f = msg.getRawVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    acceleration: (f = msg.getAcceleration()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    velocityHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    acc: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    theta: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    length: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    height: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    trackingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    lane: (f = msg.getLane()) && proto.apollo.prediction.Lane.toObject(includeInstance, f),
    junctionFeature: (f = msg.getJunctionFeature()) && proto.apollo.prediction.JunctionFeature.toObject(includeInstance, f),
    tPosition: (f = msg.getTPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    tVelocity: (f = msg.getTVelocity()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    tVelocityHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    tSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    tAcceleration: (f = msg.getTAcceleration()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    tAcc: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    isStill: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    type: (f = jspb.Message.getField(msg, 23)) == null ? undefined : f,
    labelUpdateTimeDelta: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    priority: (f = msg.getPriority()) && proto.apollo.prediction.ObstaclePriority.toObject(includeInstance, f),
    interactiveTag: (f = msg.getInteractiveTag()) && proto.apollo.prediction.ObstacleInteractiveTag.toObject(includeInstance, f),
    isNearJunction: jspb.Message.getBooleanFieldWithDefault(msg, 29, false),
    futureTrajectoryPointsList: jspb.Message.toObjectList(msg.getFutureTrajectoryPointsList(),
    modules_prediction_proto_prediction_point_pb.PredictionTrajectoryPoint.toObject, includeInstance),
    shortTermPredictedTrajectoryPointsList: jspb.Message.toObjectList(msg.getShortTermPredictedTrajectoryPointsList(),
    modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject, includeInstance),
    predictedTrajectoryList: jspb.Message.toObjectList(msg.getPredictedTrajectoryList(),
    proto.apollo.prediction.Trajectory.toObject, includeInstance),
    adcTrajectoryPointList: jspb.Message.toObjectList(msg.getAdcTrajectoryPointList(),
    modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject, includeInstance),
    adcTimestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 38)) == null ? undefined : f,
    adcLocalization: (f = msg.getAdcLocalization()) && modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.toObject(includeInstance, f),
    surroundingLaneIdList: (f = jspb.Message.getRepeatedField(msg, 35)) == null ? undefined : f,
    withinLaneIdList: (f = jspb.Message.getRepeatedField(msg, 36)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Feature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.Feature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.polygonPointList;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.frontPosition;

  /** @type {?|undefined} */
  this.velocity;

  /** @type {?|undefined} */
  this.rawVelocity;

  /** @type {?|undefined} */
  this.acceleration;

  /** @type {?|undefined} */
  this.velocityHeading;

  /** @type {?|undefined} */
  this.speed;

  /** @type {?|undefined} */
  this.acc;

  /** @type {?|undefined} */
  this.theta;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.trackingTime;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.lane;

  /** @type {?|undefined} */
  this.junctionFeature;

  /** @type {?|undefined} */
  this.tPosition;

  /** @type {?|undefined} */
  this.tVelocity;

  /** @type {?|undefined} */
  this.tVelocityHeading;

  /** @type {?|undefined} */
  this.tSpeed;

  /** @type {?|undefined} */
  this.tAcceleration;

  /** @type {?|undefined} */
  this.tAcc;

  /** @type {?|undefined} */
  this.isStill;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.labelUpdateTimeDelta;

  /** @type {?|undefined} */
  this.priority;

  /** @type {?|undefined} */
  this.interactiveTag;

  /** @type {?|undefined} */
  this.isNearJunction;

  /** @type {?|undefined} */
  this.futureTrajectoryPointsList;

  /** @type {?|undefined} */
  this.shortTermPredictedTrajectoryPointsList;

  /** @type {?|undefined} */
  this.predictedTrajectoryList;

  /** @type {?|undefined} */
  this.adcTrajectoryPointList;

  /** @type {?|undefined} */
  this.adcTimestamp;

  /** @type {?|undefined} */
  this.adcLocalization;

  /** @type {?|undefined} */
  this.surroundingLaneIdList;

  /** @type {?|undefined} */
  this.withinLaneIdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.Feature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.Feature}
 */
proto.apollo.prediction.Feature.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.Feature();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.polygonPointList && jspb.Message.setRepeatedWrapperField(
      msg, 30, obj.polygonPointList.map(
          modules_common_proto_geometry_pb.Point3D.fromObject));
  obj.position && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.Point3D.fromObject(obj.position));
  obj.frontPosition && jspb.Message.setWrapperField(
      msg, 27, modules_common_proto_geometry_pb.Point3D.fromObject(obj.frontPosition));
  obj.velocity && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_geometry_pb.Point3D.fromObject(obj.velocity));
  obj.rawVelocity && jspb.Message.setWrapperField(
      msg, 28, modules_common_proto_geometry_pb.Point3D.fromObject(obj.rawVelocity));
  obj.acceleration && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_geometry_pb.Point3D.fromObject(obj.acceleration));
  obj.velocityHeading != null && jspb.Message.setField(msg, 5, obj.velocityHeading);
  obj.speed != null && jspb.Message.setField(msg, 6, obj.speed);
  obj.acc != null && jspb.Message.setField(msg, 7, obj.acc);
  obj.theta != null && jspb.Message.setField(msg, 8, obj.theta);
  obj.length != null && jspb.Message.setField(msg, 9, obj.length);
  obj.width != null && jspb.Message.setField(msg, 10, obj.width);
  obj.height != null && jspb.Message.setField(msg, 11, obj.height);
  obj.trackingTime != null && jspb.Message.setField(msg, 12, obj.trackingTime);
  obj.timestamp != null && jspb.Message.setField(msg, 13, obj.timestamp);
  obj.lane && jspb.Message.setWrapperField(
      msg, 14, proto.apollo.prediction.Lane.fromObject(obj.lane));
  obj.junctionFeature && jspb.Message.setWrapperField(
      msg, 26, proto.apollo.prediction.JunctionFeature.fromObject(obj.junctionFeature));
  obj.tPosition && jspb.Message.setWrapperField(
      msg, 16, modules_common_proto_geometry_pb.Point3D.fromObject(obj.tPosition));
  obj.tVelocity && jspb.Message.setWrapperField(
      msg, 17, modules_common_proto_geometry_pb.Point3D.fromObject(obj.tVelocity));
  obj.tVelocityHeading != null && jspb.Message.setField(msg, 18, obj.tVelocityHeading);
  obj.tSpeed != null && jspb.Message.setField(msg, 19, obj.tSpeed);
  obj.tAcceleration && jspb.Message.setWrapperField(
      msg, 20, modules_common_proto_geometry_pb.Point3D.fromObject(obj.tAcceleration));
  obj.tAcc != null && jspb.Message.setField(msg, 21, obj.tAcc);
  obj.isStill != null && jspb.Message.setField(msg, 22, obj.isStill);
  obj.type != null && jspb.Message.setField(msg, 23, obj.type);
  obj.labelUpdateTimeDelta != null && jspb.Message.setField(msg, 24, obj.labelUpdateTimeDelta);
  obj.priority && jspb.Message.setWrapperField(
      msg, 25, proto.apollo.prediction.ObstaclePriority.fromObject(obj.priority));
  obj.interactiveTag && jspb.Message.setWrapperField(
      msg, 37, proto.apollo.prediction.ObstacleInteractiveTag.fromObject(obj.interactiveTag));
  obj.isNearJunction != null && jspb.Message.setField(msg, 29, obj.isNearJunction);
  obj.futureTrajectoryPointsList && jspb.Message.setRepeatedWrapperField(
      msg, 31, obj.futureTrajectoryPointsList.map(
          modules_prediction_proto_prediction_point_pb.PredictionTrajectoryPoint.fromObject));
  obj.shortTermPredictedTrajectoryPointsList && jspb.Message.setRepeatedWrapperField(
      msg, 32, obj.shortTermPredictedTrajectoryPointsList.map(
          modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject));
  obj.predictedTrajectoryList && jspb.Message.setRepeatedWrapperField(
      msg, 33, obj.predictedTrajectoryList.map(
          proto.apollo.prediction.Trajectory.fromObject));
  obj.adcTrajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 34, obj.adcTrajectoryPointList.map(
          modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject));
  obj.adcTimestamp != null && jspb.Message.setField(msg, 38, obj.adcTimestamp);
  obj.adcLocalization && jspb.Message.setWrapperField(
      msg, 39, modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.fromObject(obj.adcLocalization));
  obj.surroundingLaneIdList != null && jspb.Message.setField(msg, 35, obj.surroundingLaneIdList);
  obj.withinLaneIdList != null && jspb.Message.setField(msg, 36, obj.withinLaneIdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.Feature}
 */
proto.apollo.prediction.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.Feature;
  return proto.apollo.prediction.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.Feature}
 */
proto.apollo.prediction.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 30:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.addPolygonPoint(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 27:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setFrontPosition(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 28:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setRawVelocity(value);
      break;
    case 4:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setAcceleration(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVelocityHeading(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcc(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrackingTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 14:
      var value = new proto.apollo.prediction.Lane;
      reader.readMessage(value,proto.apollo.prediction.Lane.deserializeBinaryFromReader);
      msg.setLane(value);
      break;
    case 26:
      var value = new proto.apollo.prediction.JunctionFeature;
      reader.readMessage(value,proto.apollo.prediction.JunctionFeature.deserializeBinaryFromReader);
      msg.setJunctionFeature(value);
      break;
    case 16:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setTPosition(value);
      break;
    case 17:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setTVelocity(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTVelocityHeading(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTSpeed(value);
      break;
    case 20:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setTAcceleration(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTAcc(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStill(value);
      break;
    case 23:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLabelUpdateTimeDelta(value);
      break;
    case 25:
      var value = new proto.apollo.prediction.ObstaclePriority;
      reader.readMessage(value,proto.apollo.prediction.ObstaclePriority.deserializeBinaryFromReader);
      msg.setPriority(value);
      break;
    case 37:
      var value = new proto.apollo.prediction.ObstacleInteractiveTag;
      reader.readMessage(value,proto.apollo.prediction.ObstacleInteractiveTag.deserializeBinaryFromReader);
      msg.setInteractiveTag(value);
      break;
    case 29:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNearJunction(value);
      break;
    case 31:
      var value = new modules_prediction_proto_prediction_point_pb.PredictionTrajectoryPoint;
      reader.readMessage(value,modules_prediction_proto_prediction_point_pb.PredictionTrajectoryPoint.deserializeBinaryFromReader);
      msg.addFutureTrajectoryPoints(value);
      break;
    case 32:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.addShortTermPredictedTrajectoryPoints(value);
      break;
    case 33:
      var value = new proto.apollo.prediction.Trajectory;
      reader.readMessage(value,proto.apollo.prediction.Trajectory.deserializeBinaryFromReader);
      msg.addPredictedTrajectory(value);
      break;
    case 34:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.addAdcTrajectoryPoint(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdcTimestamp(value);
      break;
    case 39:
      var value = new modules_perception_proto_perception_obstacle_pb.PerceptionObstacle;
      reader.readMessage(value,modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.deserializeBinaryFromReader);
      msg.setAdcLocalization(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.addSurroundingLaneId(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.addWithinLaneId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPolygonPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getFrontPosition();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getRawVelocity();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getAcceleration();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getLane();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.apollo.prediction.Lane.serializeBinaryToWriter
    );
  }
  f = message.getJunctionFeature();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.apollo.prediction.JunctionFeature.serializeBinaryToWriter
    );
  }
  f = message.getTPosition();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = message.getTVelocity();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getTAcceleration();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeEnum(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = message.getPriority();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.apollo.prediction.ObstaclePriority.serializeBinaryToWriter
    );
  }
  f = message.getInteractiveTag();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.apollo.prediction.ObstacleInteractiveTag.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeBool(
      29,
      f
    );
  }
  f = message.getFutureTrajectoryPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      31,
      f,
      modules_prediction_proto_prediction_point_pb.PredictionTrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = message.getShortTermPredictedTrajectoryPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      32,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = message.getPredictedTrajectoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      33,
      f,
      proto.apollo.prediction.Trajectory.serializeBinaryToWriter
    );
  }
  f = message.getAdcTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      34,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeDouble(
      38,
      f
    );
  }
  f = message.getAdcLocalization();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.serializeBinaryToWriter
    );
  }
  f = message.getSurroundingLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      35,
      f
    );
  }
  f = message.getWithinLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      36,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated apollo.common.Point3D polygon_point = 30;
 * @return {!Array<!proto.apollo.common.Point3D>}
 */
proto.apollo.prediction.Feature.prototype.getPolygonPointList = function() {
  return /** @type{!Array<!proto.apollo.common.Point3D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point3D, 30));
};


/**
 * @param {!Array<!proto.apollo.common.Point3D>} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setPolygonPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.apollo.common.Point3D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.addPolygonPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.apollo.common.Point3D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearPolygonPointList = function() {
  return this.setPolygonPointList([]);
};


/**
 * optional apollo.common.Point3D position = 2;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 2));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.Point3D front_position = 27;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getFrontPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 27));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setFrontPosition = function(value) {
  return jspb.Message.setWrapperField(this, 27, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearFrontPosition = function() {
  return this.setFrontPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasFrontPosition = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional apollo.common.Point3D velocity = 3;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 3));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.common.Point3D raw_velocity = 28;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getRawVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 28));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setRawVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearRawVelocity = function() {
  return this.setRawVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasRawVelocity = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional apollo.common.Point3D acceleration = 4;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getAcceleration = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 4));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setAcceleration = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearAcceleration = function() {
  return this.setAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double velocity_heading = 5;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getVelocityHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setVelocityHeading = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearVelocityHeading = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasVelocityHeading = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double speed = 6;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double acc = 7;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getAcc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setAcc = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearAcc = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasAcc = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double theta = 8;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setTheta = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTheta = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTheta = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double length = 9;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearLength = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasLength = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double width = 10;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double height = 11;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double tracking_time = 12;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getTrackingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setTrackingTime = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTrackingTime = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTrackingTime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double timestamp = 13;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Lane lane = 14;
 * @return {?proto.apollo.prediction.Lane}
 */
proto.apollo.prediction.Feature.prototype.getLane = function() {
  return /** @type{?proto.apollo.prediction.Lane} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.Lane, 14));
};


/**
 * @param {?proto.apollo.prediction.Lane|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setLane = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearLane = function() {
  return this.setLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasLane = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional JunctionFeature junction_feature = 26;
 * @return {?proto.apollo.prediction.JunctionFeature}
 */
proto.apollo.prediction.Feature.prototype.getJunctionFeature = function() {
  return /** @type{?proto.apollo.prediction.JunctionFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.JunctionFeature, 26));
};


/**
 * @param {?proto.apollo.prediction.JunctionFeature|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setJunctionFeature = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearJunctionFeature = function() {
  return this.setJunctionFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasJunctionFeature = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional apollo.common.Point3D t_position = 16;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getTPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 16));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setTPosition = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTPosition = function() {
  return this.setTPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTPosition = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional apollo.common.Point3D t_velocity = 17;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getTVelocity = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 17));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setTVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTVelocity = function() {
  return this.setTVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTVelocity = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double t_velocity_heading = 18;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getTVelocityHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setTVelocityHeading = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTVelocityHeading = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTVelocityHeading = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double t_speed = 19;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getTSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setTSpeed = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTSpeed = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTSpeed = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional apollo.common.Point3D t_acceleration = 20;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.prediction.Feature.prototype.getTAcceleration = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 20));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setTAcceleration = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTAcceleration = function() {
  return this.setTAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTAcceleration = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double t_acc = 21;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getTAcc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setTAcc = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearTAcc = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasTAcc = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool is_still = 22;
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.getIsStill = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setIsStill = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearIsStill = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasIsStill = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional apollo.perception.PerceptionObstacle.Type type = 23;
 * @return {!proto.apollo.perception.PerceptionObstacle.Type}
 */
proto.apollo.prediction.Feature.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Type} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setType = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearType = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasType = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double label_update_time_delta = 24;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getLabelUpdateTimeDelta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setLabelUpdateTimeDelta = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearLabelUpdateTimeDelta = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasLabelUpdateTimeDelta = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional ObstaclePriority priority = 25;
 * @return {?proto.apollo.prediction.ObstaclePriority}
 */
proto.apollo.prediction.Feature.prototype.getPriority = function() {
  return /** @type{?proto.apollo.prediction.ObstaclePriority} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.ObstaclePriority, 25));
};


/**
 * @param {?proto.apollo.prediction.ObstaclePriority|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setPriority = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearPriority = function() {
  return this.setPriority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional ObstacleInteractiveTag interactive_tag = 37;
 * @return {?proto.apollo.prediction.ObstacleInteractiveTag}
 */
proto.apollo.prediction.Feature.prototype.getInteractiveTag = function() {
  return /** @type{?proto.apollo.prediction.ObstacleInteractiveTag} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.ObstacleInteractiveTag, 37));
};


/**
 * @param {?proto.apollo.prediction.ObstacleInteractiveTag|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setInteractiveTag = function(value) {
  return jspb.Message.setWrapperField(this, 37, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearInteractiveTag = function() {
  return this.setInteractiveTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasInteractiveTag = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional bool is_near_junction = 29;
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.getIsNearJunction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 29, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setIsNearJunction = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearIsNearJunction = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasIsNearJunction = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * repeated PredictionTrajectoryPoint future_trajectory_points = 31;
 * @return {!Array<!proto.apollo.prediction.PredictionTrajectoryPoint>}
 */
proto.apollo.prediction.Feature.prototype.getFutureTrajectoryPointsList = function() {
  return /** @type{!Array<!proto.apollo.prediction.PredictionTrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_prediction_proto_prediction_point_pb.PredictionTrajectoryPoint, 31));
};


/**
 * @param {!Array<!proto.apollo.prediction.PredictionTrajectoryPoint>} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setFutureTrajectoryPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 31, value);
};


/**
 * @param {!proto.apollo.prediction.PredictionTrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.PredictionTrajectoryPoint}
 */
proto.apollo.prediction.Feature.prototype.addFutureTrajectoryPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 31, opt_value, proto.apollo.prediction.PredictionTrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearFutureTrajectoryPointsList = function() {
  return this.setFutureTrajectoryPointsList([]);
};


/**
 * repeated apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
 * @return {!Array<!proto.apollo.common.TrajectoryPoint>}
 */
proto.apollo.prediction.Feature.prototype.getShortTermPredictedTrajectoryPointsList = function() {
  return /** @type{!Array<!proto.apollo.common.TrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 32));
};


/**
 * @param {!Array<!proto.apollo.common.TrajectoryPoint>} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setShortTermPredictedTrajectoryPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.apollo.common.TrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.prediction.Feature.prototype.addShortTermPredictedTrajectoryPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.apollo.common.TrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearShortTermPredictedTrajectoryPointsList = function() {
  return this.setShortTermPredictedTrajectoryPointsList([]);
};


/**
 * repeated Trajectory predicted_trajectory = 33;
 * @return {!Array<!proto.apollo.prediction.Trajectory>}
 */
proto.apollo.prediction.Feature.prototype.getPredictedTrajectoryList = function() {
  return /** @type{!Array<!proto.apollo.prediction.Trajectory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.Trajectory, 33));
};


/**
 * @param {!Array<!proto.apollo.prediction.Trajectory>} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setPredictedTrajectoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.apollo.prediction.Trajectory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.Trajectory}
 */
proto.apollo.prediction.Feature.prototype.addPredictedTrajectory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.apollo.prediction.Trajectory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearPredictedTrajectoryList = function() {
  return this.setPredictedTrajectoryList([]);
};


/**
 * repeated apollo.common.TrajectoryPoint adc_trajectory_point = 34;
 * @return {!Array<!proto.apollo.common.TrajectoryPoint>}
 */
proto.apollo.prediction.Feature.prototype.getAdcTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.common.TrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 34));
};


/**
 * @param {!Array<!proto.apollo.common.TrajectoryPoint>} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setAdcTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 34, value);
};


/**
 * @param {!proto.apollo.common.TrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.prediction.Feature.prototype.addAdcTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 34, opt_value, proto.apollo.common.TrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearAdcTrajectoryPointList = function() {
  return this.setAdcTrajectoryPointList([]);
};


/**
 * optional double adc_timestamp = 38;
 * @return {number}
 */
proto.apollo.prediction.Feature.prototype.getAdcTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 38, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setAdcTimestamp = function(value) {
  return jspb.Message.setField(this, 38, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearAdcTimestamp = function() {
  return jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasAdcTimestamp = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional apollo.perception.PerceptionObstacle adc_localization = 39;
 * @return {?proto.apollo.perception.PerceptionObstacle}
 */
proto.apollo.prediction.Feature.prototype.getAdcLocalization = function() {
  return /** @type{?proto.apollo.perception.PerceptionObstacle} */ (
    jspb.Message.getWrapperField(this, modules_perception_proto_perception_obstacle_pb.PerceptionObstacle, 39));
};


/**
 * @param {?proto.apollo.perception.PerceptionObstacle|undefined} value
 * @return {!proto.apollo.prediction.Feature} returns this
*/
proto.apollo.prediction.Feature.prototype.setAdcLocalization = function(value) {
  return jspb.Message.setWrapperField(this, 39, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearAdcLocalization = function() {
  return this.setAdcLocalization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.Feature.prototype.hasAdcLocalization = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * repeated string surrounding_lane_id = 35;
 * @return {!Array<string>}
 */
proto.apollo.prediction.Feature.prototype.getSurroundingLaneIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 35));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setSurroundingLaneIdList = function(value) {
  return jspb.Message.setField(this, 35, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.addSurroundingLaneId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 35, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearSurroundingLaneIdList = function() {
  return this.setSurroundingLaneIdList([]);
};


/**
 * repeated string within_lane_id = 36;
 * @return {!Array<string>}
 */
proto.apollo.prediction.Feature.prototype.getWithinLaneIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 36));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.setWithinLaneIdList = function(value) {
  return jspb.Message.setField(this, 36, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.addWithinLaneId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 36, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.Feature} returns this
 */
proto.apollo.prediction.Feature.prototype.clearWithinLaneIdList = function() {
  return this.setWithinLaneIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.ObstacleHistory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ObstacleHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ObstacleHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ObstacleHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstacleHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureList: jspb.Message.toObjectList(msg.getFeatureList(),
    proto.apollo.prediction.Feature.toObject, includeInstance),
    isTrainable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleHistory as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ObstacleHistory.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.featureList;

  /** @type {?|undefined} */
  this.isTrainable;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ObstacleHistory.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ObstacleHistory}
 */
proto.apollo.prediction.ObstacleHistory.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ObstacleHistory();
  obj.featureList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.featureList.map(
          proto.apollo.prediction.Feature.fromObject));
  obj.isTrainable != null && jspb.Message.setField(msg, 2, obj.isTrainable);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ObstacleHistory}
 */
proto.apollo.prediction.ObstacleHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ObstacleHistory;
  return proto.apollo.prediction.ObstacleHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ObstacleHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ObstacleHistory}
 */
proto.apollo.prediction.ObstacleHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.Feature;
      reader.readMessage(value,proto.apollo.prediction.Feature.deserializeBinaryFromReader);
      msg.addFeature(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTrainable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ObstacleHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ObstacleHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ObstacleHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstacleHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.prediction.Feature.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated Feature feature = 1;
 * @return {!Array<!proto.apollo.prediction.Feature>}
 */
proto.apollo.prediction.ObstacleHistory.prototype.getFeatureList = function() {
  return /** @type{!Array<!proto.apollo.prediction.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.Feature, 1));
};


/**
 * @param {!Array<!proto.apollo.prediction.Feature>} value
 * @return {!proto.apollo.prediction.ObstacleHistory} returns this
*/
proto.apollo.prediction.ObstacleHistory.prototype.setFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.prediction.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.Feature}
 */
proto.apollo.prediction.ObstacleHistory.prototype.addFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.prediction.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.ObstacleHistory} returns this
 */
proto.apollo.prediction.ObstacleHistory.prototype.clearFeatureList = function() {
  return this.setFeatureList([]);
};


/**
 * optional bool is_trainable = 2;
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleHistory.prototype.getIsTrainable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.prediction.ObstacleHistory} returns this
 */
proto.apollo.prediction.ObstacleHistory.prototype.setIsTrainable = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleHistory} returns this
 */
proto.apollo.prediction.ObstacleHistory.prototype.clearIsTrainable = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleHistory.prototype.hasIsTrainable = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.FrameEnv.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.FrameEnv.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.FrameEnv.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.FrameEnv} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.FrameEnv.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    egoHistory: (f = msg.getEgoHistory()) && proto.apollo.prediction.ObstacleHistory.toObject(includeInstance, f),
    obstaclesHistoryList: jspb.Message.toObjectList(msg.getObstaclesHistoryList(),
    proto.apollo.prediction.ObstacleHistory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FrameEnv as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.FrameEnv.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.egoHistory;

  /** @type {?|undefined} */
  this.obstaclesHistoryList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.FrameEnv.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.FrameEnv}
 */
proto.apollo.prediction.FrameEnv.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.FrameEnv();
  obj.timestamp != null && jspb.Message.setField(msg, 1, obj.timestamp);
  obj.egoHistory && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.prediction.ObstacleHistory.fromObject(obj.egoHistory));
  obj.obstaclesHistoryList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.obstaclesHistoryList.map(
          proto.apollo.prediction.ObstacleHistory.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.FrameEnv}
 */
proto.apollo.prediction.FrameEnv.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.FrameEnv;
  return proto.apollo.prediction.FrameEnv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.FrameEnv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.FrameEnv}
 */
proto.apollo.prediction.FrameEnv.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.apollo.prediction.ObstacleHistory;
      reader.readMessage(value,proto.apollo.prediction.ObstacleHistory.deserializeBinaryFromReader);
      msg.setEgoHistory(value);
      break;
    case 3:
      var value = new proto.apollo.prediction.ObstacleHistory;
      reader.readMessage(value,proto.apollo.prediction.ObstacleHistory.deserializeBinaryFromReader);
      msg.addObstaclesHistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.FrameEnv.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.FrameEnv.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.FrameEnv} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.FrameEnv.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getEgoHistory();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.prediction.ObstacleHistory.serializeBinaryToWriter
    );
  }
  f = message.getObstaclesHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.prediction.ObstacleHistory.serializeBinaryToWriter
    );
  }
};


/**
 * optional double timestamp = 1;
 * @return {number}
 */
proto.apollo.prediction.FrameEnv.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.prediction.FrameEnv} returns this
 */
proto.apollo.prediction.FrameEnv.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.FrameEnv} returns this
 */
proto.apollo.prediction.FrameEnv.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.FrameEnv.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObstacleHistory ego_history = 2;
 * @return {?proto.apollo.prediction.ObstacleHistory}
 */
proto.apollo.prediction.FrameEnv.prototype.getEgoHistory = function() {
  return /** @type{?proto.apollo.prediction.ObstacleHistory} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.ObstacleHistory, 2));
};


/**
 * @param {?proto.apollo.prediction.ObstacleHistory|undefined} value
 * @return {!proto.apollo.prediction.FrameEnv} returns this
*/
proto.apollo.prediction.FrameEnv.prototype.setEgoHistory = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.FrameEnv} returns this
 */
proto.apollo.prediction.FrameEnv.prototype.clearEgoHistory = function() {
  return this.setEgoHistory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.FrameEnv.prototype.hasEgoHistory = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ObstacleHistory obstacles_history = 3;
 * @return {!Array<!proto.apollo.prediction.ObstacleHistory>}
 */
proto.apollo.prediction.FrameEnv.prototype.getObstaclesHistoryList = function() {
  return /** @type{!Array<!proto.apollo.prediction.ObstacleHistory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.ObstacleHistory, 3));
};


/**
 * @param {!Array<!proto.apollo.prediction.ObstacleHistory>} value
 * @return {!proto.apollo.prediction.FrameEnv} returns this
*/
proto.apollo.prediction.FrameEnv.prototype.setObstaclesHistoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.prediction.ObstacleHistory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.ObstacleHistory}
 */
proto.apollo.prediction.FrameEnv.prototype.addObstaclesHistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.prediction.ObstacleHistory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.FrameEnv} returns this
 */
proto.apollo.prediction.FrameEnv.prototype.clearObstaclesHistoryList = function() {
  return this.setObstaclesHistoryList([]);
};


goog.object.extend(exports, proto.apollo.prediction);
