// source: cyber/proto/record.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.cyber.proto.Channel', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ChannelCache', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ChunkBody', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ChunkBodyCache', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ChunkHeader', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ChunkHeaderCache', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.CompressType', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.Header', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.Index', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.SectionType', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.SingleIndex', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.SingleIndex.CacheCase', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.SingleMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.SingleIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.cyber.proto.SingleIndex.oneofGroups_);
};
goog.inherits(proto.apollo.cyber.proto.SingleIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.SingleIndex.displayName = 'proto.apollo.cyber.proto.SingleIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ChunkHeaderCache = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ChunkHeaderCache, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ChunkHeaderCache.displayName = 'proto.apollo.cyber.proto.ChunkHeaderCache';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ChunkBodyCache = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ChunkBodyCache, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ChunkBodyCache.displayName = 'proto.apollo.cyber.proto.ChunkBodyCache';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ChannelCache = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ChannelCache, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ChannelCache.displayName = 'proto.apollo.cyber.proto.ChannelCache';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.SingleMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.SingleMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.SingleMessage.displayName = 'proto.apollo.cyber.proto.SingleMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.Header.displayName = 'proto.apollo.cyber.proto.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.Channel.displayName = 'proto.apollo.cyber.proto.Channel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ChunkHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ChunkHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ChunkHeader.displayName = 'proto.apollo.cyber.proto.ChunkHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ChunkBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.cyber.proto.ChunkBody.repeatedFields_, null);
};
goog.inherits(proto.apollo.cyber.proto.ChunkBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ChunkBody.displayName = 'proto.apollo.cyber.proto.ChunkBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.cyber.proto.Index.repeatedFields_, null);
};
goog.inherits(proto.apollo.cyber.proto.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.Index.displayName = 'proto.apollo.cyber.proto.Index';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.cyber.proto.SingleIndex.oneofGroups_ = [[101,102,103]];

/**
 * @enum {number}
 */
proto.apollo.cyber.proto.SingleIndex.CacheCase = {
  CACHE_NOT_SET: 0,
  CHANNEL_CACHE: 101,
  CHUNK_HEADER_CACHE: 102,
  CHUNK_BODY_CACHE: 103
};

/**
 * @return {proto.apollo.cyber.proto.SingleIndex.CacheCase}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.getCacheCase = function() {
  return /** @type {proto.apollo.cyber.proto.SingleIndex.CacheCase} */(jspb.Message.computeOneofCase(this, proto.apollo.cyber.proto.SingleIndex.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.SingleIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.SingleIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SingleIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    position: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    channelCache: (f = msg.getChannelCache()) && proto.apollo.cyber.proto.ChannelCache.toObject(includeInstance, f),
    chunkHeaderCache: (f = msg.getChunkHeaderCache()) && proto.apollo.cyber.proto.ChunkHeaderCache.toObject(includeInstance, f),
    chunkBodyCache: (f = msg.getChunkBodyCache()) && proto.apollo.cyber.proto.ChunkBodyCache.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SingleIndex as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.SingleIndex.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.channelCache;

  /** @type {?|undefined} */
  this.chunkHeaderCache;

  /** @type {?|undefined} */
  this.chunkBodyCache;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.SingleIndex.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.SingleIndex}
 */
proto.apollo.cyber.proto.SingleIndex.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.SingleIndex();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.position != null && jspb.Message.setField(msg, 2, obj.position);
  obj.channelCache && jspb.Message.setWrapperField(
      msg, 101, proto.apollo.cyber.proto.ChannelCache.fromObject(obj.channelCache));
  obj.chunkHeaderCache && jspb.Message.setWrapperField(
      msg, 102, proto.apollo.cyber.proto.ChunkHeaderCache.fromObject(obj.chunkHeaderCache));
  obj.chunkBodyCache && jspb.Message.setWrapperField(
      msg, 103, proto.apollo.cyber.proto.ChunkBodyCache.fromObject(obj.chunkBodyCache));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.SingleIndex}
 */
proto.apollo.cyber.proto.SingleIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.SingleIndex;
  return proto.apollo.cyber.proto.SingleIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.SingleIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.SingleIndex}
 */
proto.apollo.cyber.proto.SingleIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.cyber.proto.SectionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPosition(value);
      break;
    case 101:
      var value = new proto.apollo.cyber.proto.ChannelCache;
      reader.readMessage(value,proto.apollo.cyber.proto.ChannelCache.deserializeBinaryFromReader);
      msg.setChannelCache(value);
      break;
    case 102:
      var value = new proto.apollo.cyber.proto.ChunkHeaderCache;
      reader.readMessage(value,proto.apollo.cyber.proto.ChunkHeaderCache.deserializeBinaryFromReader);
      msg.setChunkHeaderCache(value);
      break;
    case 103:
      var value = new proto.apollo.cyber.proto.ChunkBodyCache;
      reader.readMessage(value,proto.apollo.cyber.proto.ChunkBodyCache.deserializeBinaryFromReader);
      msg.setChunkBodyCache(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.SingleIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.SingleIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SingleIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.cyber.proto.SectionType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getChannelCache();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.apollo.cyber.proto.ChannelCache.serializeBinaryToWriter
    );
  }
  f = message.getChunkHeaderCache();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.apollo.cyber.proto.ChunkHeaderCache.serializeBinaryToWriter
    );
  }
  f = message.getChunkBodyCache();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.apollo.cyber.proto.ChunkBodyCache.serializeBinaryToWriter
    );
  }
};


/**
 * optional SectionType type = 1;
 * @return {!proto.apollo.cyber.proto.SectionType}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.getType = function() {
  return /** @type {!proto.apollo.cyber.proto.SectionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.cyber.proto.SectionType} value
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
 */
proto.apollo.cyber.proto.SingleIndex.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
 */
proto.apollo.cyber.proto.SingleIndex.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 position = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
 */
proto.apollo.cyber.proto.SingleIndex.prototype.setPosition = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
 */
proto.apollo.cyber.proto.SingleIndex.prototype.clearPosition = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChannelCache channel_cache = 101;
 * @return {?proto.apollo.cyber.proto.ChannelCache}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.getChannelCache = function() {
  return /** @type{?proto.apollo.cyber.proto.ChannelCache} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.ChannelCache, 101));
};


/**
 * @param {?proto.apollo.cyber.proto.ChannelCache|undefined} value
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
*/
proto.apollo.cyber.proto.SingleIndex.prototype.setChannelCache = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.apollo.cyber.proto.SingleIndex.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
 */
proto.apollo.cyber.proto.SingleIndex.prototype.clearChannelCache = function() {
  return this.setChannelCache(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.hasChannelCache = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional ChunkHeaderCache chunk_header_cache = 102;
 * @return {?proto.apollo.cyber.proto.ChunkHeaderCache}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.getChunkHeaderCache = function() {
  return /** @type{?proto.apollo.cyber.proto.ChunkHeaderCache} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.ChunkHeaderCache, 102));
};


/**
 * @param {?proto.apollo.cyber.proto.ChunkHeaderCache|undefined} value
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
*/
proto.apollo.cyber.proto.SingleIndex.prototype.setChunkHeaderCache = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.apollo.cyber.proto.SingleIndex.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
 */
proto.apollo.cyber.proto.SingleIndex.prototype.clearChunkHeaderCache = function() {
  return this.setChunkHeaderCache(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.hasChunkHeaderCache = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional ChunkBodyCache chunk_body_cache = 103;
 * @return {?proto.apollo.cyber.proto.ChunkBodyCache}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.getChunkBodyCache = function() {
  return /** @type{?proto.apollo.cyber.proto.ChunkBodyCache} */ (
    jspb.Message.getWrapperField(this, proto.apollo.cyber.proto.ChunkBodyCache, 103));
};


/**
 * @param {?proto.apollo.cyber.proto.ChunkBodyCache|undefined} value
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
*/
proto.apollo.cyber.proto.SingleIndex.prototype.setChunkBodyCache = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.apollo.cyber.proto.SingleIndex.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleIndex} returns this
 */
proto.apollo.cyber.proto.SingleIndex.prototype.clearChunkBodyCache = function() {
  return this.setChunkBodyCache(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleIndex.prototype.hasChunkBodyCache = function() {
  return jspb.Message.getField(this, 103) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ChunkHeaderCache.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ChunkHeaderCache} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkHeaderCache.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageNumber: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    beginTime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    endTime: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    rawSize: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChunkHeaderCache as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ChunkHeaderCache.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messageNumber;

  /** @type {?|undefined} */
  this.beginTime;

  /** @type {?|undefined} */
  this.endTime;

  /** @type {?|undefined} */
  this.rawSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ChunkHeaderCache.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ChunkHeaderCache();
  obj.messageNumber != null && jspb.Message.setField(msg, 1, obj.messageNumber);
  obj.beginTime != null && jspb.Message.setField(msg, 2, obj.beginTime);
  obj.endTime != null && jspb.Message.setField(msg, 3, obj.endTime);
  obj.rawSize != null && jspb.Message.setField(msg, 4, obj.rawSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ChunkHeaderCache;
  return proto.apollo.cyber.proto.ChunkHeaderCache.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ChunkHeaderCache} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBeginTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRawSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ChunkHeaderCache.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ChunkHeaderCache} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkHeaderCache.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 message_number = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.getMessageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.setMessageNumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.clearMessageNumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.hasMessageNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 begin_time = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.setBeginTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.clearBeginTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.hasBeginTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 end_time = 3;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.setEndTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.clearEndTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 raw_size = 4;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.getRawSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.setRawSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeaderCache} returns this
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.clearRawSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeaderCache.prototype.hasRawSize = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ChunkBodyCache.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ChunkBodyCache.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ChunkBodyCache} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkBodyCache.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageNumber: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChunkBodyCache as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ChunkBodyCache.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messageNumber;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ChunkBodyCache.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ChunkBodyCache}
 */
proto.apollo.cyber.proto.ChunkBodyCache.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ChunkBodyCache();
  obj.messageNumber != null && jspb.Message.setField(msg, 1, obj.messageNumber);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ChunkBodyCache}
 */
proto.apollo.cyber.proto.ChunkBodyCache.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ChunkBodyCache;
  return proto.apollo.cyber.proto.ChunkBodyCache.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ChunkBodyCache} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ChunkBodyCache}
 */
proto.apollo.cyber.proto.ChunkBodyCache.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChunkBodyCache.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ChunkBodyCache.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ChunkBodyCache} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkBodyCache.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 message_number = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkBodyCache.prototype.getMessageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkBodyCache} returns this
 */
proto.apollo.cyber.proto.ChunkBodyCache.prototype.setMessageNumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkBodyCache} returns this
 */
proto.apollo.cyber.proto.ChunkBodyCache.prototype.clearMessageNumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkBodyCache.prototype.hasMessageNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ChannelCache.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ChannelCache} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChannelCache.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageNumber: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    messageType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    protoDesc: msg.getProtoDesc_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChannelCache as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ChannelCache.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messageNumber;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.messageType;

  /** @type {?|undefined} */
  this.protoDesc;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ChannelCache.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ChannelCache}
 */
proto.apollo.cyber.proto.ChannelCache.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ChannelCache();
  obj.messageNumber != null && jspb.Message.setField(msg, 1, obj.messageNumber);
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.messageType != null && jspb.Message.setField(msg, 3, obj.messageType);
  obj.protoDesc != null && jspb.Message.setField(msg, 4, obj.protoDesc);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ChannelCache}
 */
proto.apollo.cyber.proto.ChannelCache.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ChannelCache;
  return proto.apollo.cyber.proto.ChannelCache.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ChannelCache} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ChannelCache}
 */
proto.apollo.cyber.proto.ChannelCache.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtoDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ChannelCache.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ChannelCache} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChannelCache.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 message_number = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.getMessageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.setMessageNumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.clearMessageNumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.hasMessageNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string message_type = 3;
 * @return {string}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.setMessageType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.clearMessageType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.hasMessageType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes proto_desc = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.getProtoDesc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes proto_desc = 4;
 * This is a type-conversion wrapper around `getProtoDesc()`
 * @return {string}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.getProtoDesc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtoDesc()));
};


/**
 * optional bytes proto_desc = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtoDesc()`
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.getProtoDesc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtoDesc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.setProtoDesc = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChannelCache} returns this
 */
proto.apollo.cyber.proto.ChannelCache.prototype.clearProtoDesc = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChannelCache.prototype.hasProtoDesc = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.SingleMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.SingleMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SingleMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    time: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SingleMessage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.SingleMessage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.channelName;

  /** @type {?|undefined} */
  this.time;

  /** @type {?|undefined} */
  this.content;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.SingleMessage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.SingleMessage}
 */
proto.apollo.cyber.proto.SingleMessage.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.SingleMessage();
  obj.channelName != null && jspb.Message.setField(msg, 1, obj.channelName);
  obj.time != null && jspb.Message.setField(msg, 2, obj.time);
  obj.content != null && jspb.Message.setField(msg, 3, obj.content);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.SingleMessage}
 */
proto.apollo.cyber.proto.SingleMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.SingleMessage;
  return proto.apollo.cyber.proto.SingleMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.SingleMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.SingleMessage}
 */
proto.apollo.cyber.proto.SingleMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.SingleMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.SingleMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SingleMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string channel_name = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.SingleMessage} returns this
 */
proto.apollo.cyber.proto.SingleMessage.prototype.setChannelName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleMessage} returns this
 */
proto.apollo.cyber.proto.SingleMessage.prototype.clearChannelName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.hasChannelName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.SingleMessage} returns this
 */
proto.apollo.cyber.proto.SingleMessage.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleMessage} returns this
 */
proto.apollo.cyber.proto.SingleMessage.prototype.clearTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.cyber.proto.SingleMessage} returns this
 */
proto.apollo.cyber.proto.SingleMessage.prototype.setContent = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SingleMessage} returns this
 */
proto.apollo.cyber.proto.SingleMessage.prototype.clearContent = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SingleMessage.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    majorVersion: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    minorVersion: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    compress: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    chunkInterval: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    segmentInterval: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    indexPosition: jspb.Message.getFieldWithDefault(msg, 6, 0),
    chunkNumber: jspb.Message.getFieldWithDefault(msg, 7, 0),
    channelNumber: jspb.Message.getFieldWithDefault(msg, 8, 0),
    beginTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
    messageNumber: jspb.Message.getFieldWithDefault(msg, 11, 0),
    size: jspb.Message.getFieldWithDefault(msg, 12, 0),
    isComplete: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    chunkRawSize: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    segmentRawSize: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Header as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.Header.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.majorVersion;

  /** @type {?|undefined} */
  this.minorVersion;

  /** @type {?|undefined} */
  this.compress;

  /** @type {?|undefined} */
  this.chunkInterval;

  /** @type {?|undefined} */
  this.segmentInterval;

  /** @type {?|undefined} */
  this.indexPosition;

  /** @type {?|undefined} */
  this.chunkNumber;

  /** @type {?|undefined} */
  this.channelNumber;

  /** @type {?|undefined} */
  this.beginTime;

  /** @type {?|undefined} */
  this.endTime;

  /** @type {?|undefined} */
  this.messageNumber;

  /** @type {?|undefined} */
  this.size;

  /** @type {?|undefined} */
  this.isComplete;

  /** @type {?|undefined} */
  this.chunkRawSize;

  /** @type {?|undefined} */
  this.segmentRawSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.Header.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.Header}
 */
proto.apollo.cyber.proto.Header.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.Header();
  obj.majorVersion != null && jspb.Message.setField(msg, 1, obj.majorVersion);
  obj.minorVersion != null && jspb.Message.setField(msg, 2, obj.minorVersion);
  obj.compress != null && jspb.Message.setField(msg, 3, obj.compress);
  obj.chunkInterval != null && jspb.Message.setField(msg, 4, obj.chunkInterval);
  obj.segmentInterval != null && jspb.Message.setField(msg, 5, obj.segmentInterval);
  obj.indexPosition != null && jspb.Message.setField(msg, 6, obj.indexPosition);
  obj.chunkNumber != null && jspb.Message.setField(msg, 7, obj.chunkNumber);
  obj.channelNumber != null && jspb.Message.setField(msg, 8, obj.channelNumber);
  obj.beginTime != null && jspb.Message.setField(msg, 9, obj.beginTime);
  obj.endTime != null && jspb.Message.setField(msg, 10, obj.endTime);
  obj.messageNumber != null && jspb.Message.setField(msg, 11, obj.messageNumber);
  obj.size != null && jspb.Message.setField(msg, 12, obj.size);
  obj.isComplete != null && jspb.Message.setField(msg, 13, obj.isComplete);
  obj.chunkRawSize != null && jspb.Message.setField(msg, 14, obj.chunkRawSize);
  obj.segmentRawSize != null && jspb.Message.setField(msg, 15, obj.segmentRawSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.Header}
 */
proto.apollo.cyber.proto.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.Header;
  return proto.apollo.cyber.proto.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.Header}
 */
proto.apollo.cyber.proto.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajorVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinorVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.cyber.proto.CompressType} */ (reader.readEnum());
      msg.setCompress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChunkInterval(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSegmentInterval(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndexPosition(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChunkNumber(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChannelNumber(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBeginTime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageNumber(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsComplete(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChunkRawSize(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSegmentRawSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.cyber.proto.CompressType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint64(
      15,
      f
    );
  }
};


/**
 * optional uint32 major_version = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getMajorVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setMajorVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearMajorVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasMajorVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 minor_version = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getMinorVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setMinorVersion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearMinorVersion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasMinorVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CompressType compress = 3;
 * @return {!proto.apollo.cyber.proto.CompressType}
 */
proto.apollo.cyber.proto.Header.prototype.getCompress = function() {
  return /** @type {!proto.apollo.cyber.proto.CompressType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.cyber.proto.CompressType} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setCompress = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearCompress = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasCompress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 chunk_interval = 4;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getChunkInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setChunkInterval = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearChunkInterval = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasChunkInterval = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 segment_interval = 5;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getSegmentInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setSegmentInterval = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearSegmentInterval = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasSegmentInterval = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 index_position = 6;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getIndexPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setIndexPosition = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearIndexPosition = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasIndexPosition = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 chunk_number = 7;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getChunkNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setChunkNumber = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearChunkNumber = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasChunkNumber = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 channel_number = 8;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getChannelNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setChannelNumber = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearChannelNumber = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasChannelNumber = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 begin_time = 9;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setBeginTime = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearBeginTime = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasBeginTime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 end_time = 10;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setEndTime = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearEndTime = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 message_number = 11;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getMessageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setMessageNumber = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearMessageNumber = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasMessageNumber = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint64 size = 12;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setSize = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearSize = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasSize = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool is_complete = 13;
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.getIsComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setIsComplete = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearIsComplete = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasIsComplete = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint64 chunk_raw_size = 14;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getChunkRawSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setChunkRawSize = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearChunkRawSize = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasChunkRawSize = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint64 segment_raw_size = 15;
 * @return {number}
 */
proto.apollo.cyber.proto.Header.prototype.getSegmentRawSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.setSegmentRawSize = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Header} returns this
 */
proto.apollo.cyber.proto.Header.prototype.clearSegmentRawSize = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Header.prototype.hasSegmentRawSize = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    messageType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    protoDesc: msg.getProtoDesc_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Channel as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.Channel.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.messageType;

  /** @type {?|undefined} */
  this.protoDesc;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.Channel.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.Channel}
 */
proto.apollo.cyber.proto.Channel.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.Channel();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.messageType != null && jspb.Message.setField(msg, 2, obj.messageType);
  obj.protoDesc != null && jspb.Message.setField(msg, 3, obj.protoDesc);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.Channel}
 */
proto.apollo.cyber.proto.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.Channel;
  return proto.apollo.cyber.proto.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.Channel}
 */
proto.apollo.cyber.proto.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtoDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.Channel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.Channel} returns this
 */
proto.apollo.cyber.proto.Channel.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Channel} returns this
 */
proto.apollo.cyber.proto.Channel.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Channel.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message_type = 2;
 * @return {string}
 */
proto.apollo.cyber.proto.Channel.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.Channel} returns this
 */
proto.apollo.cyber.proto.Channel.prototype.setMessageType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Channel} returns this
 */
proto.apollo.cyber.proto.Channel.prototype.clearMessageType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Channel.prototype.hasMessageType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes proto_desc = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.cyber.proto.Channel.prototype.getProtoDesc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proto_desc = 3;
 * This is a type-conversion wrapper around `getProtoDesc()`
 * @return {string}
 */
proto.apollo.cyber.proto.Channel.prototype.getProtoDesc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtoDesc()));
};


/**
 * optional bytes proto_desc = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtoDesc()`
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.Channel.prototype.getProtoDesc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtoDesc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.cyber.proto.Channel} returns this
 */
proto.apollo.cyber.proto.Channel.prototype.setProtoDesc = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.Channel} returns this
 */
proto.apollo.cyber.proto.Channel.prototype.clearProtoDesc = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.Channel.prototype.hasProtoDesc = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ChunkHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ChunkHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    beginTime: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    endTime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    messageNumber: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    rawSize: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChunkHeader as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ChunkHeader.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.beginTime;

  /** @type {?|undefined} */
  this.endTime;

  /** @type {?|undefined} */
  this.messageNumber;

  /** @type {?|undefined} */
  this.rawSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ChunkHeader.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ChunkHeader}
 */
proto.apollo.cyber.proto.ChunkHeader.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ChunkHeader();
  obj.beginTime != null && jspb.Message.setField(msg, 1, obj.beginTime);
  obj.endTime != null && jspb.Message.setField(msg, 2, obj.endTime);
  obj.messageNumber != null && jspb.Message.setField(msg, 3, obj.messageNumber);
  obj.rawSize != null && jspb.Message.setField(msg, 4, obj.rawSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ChunkHeader}
 */
proto.apollo.cyber.proto.ChunkHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ChunkHeader;
  return proto.apollo.cyber.proto.ChunkHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ChunkHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ChunkHeader}
 */
proto.apollo.cyber.proto.ChunkHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBeginTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRawSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ChunkHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ChunkHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 begin_time = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.setBeginTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.clearBeginTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.hasBeginTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 end_time = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.setEndTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.clearEndTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 message_number = 3;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.getMessageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.setMessageNumber = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.clearMessageNumber = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.hasMessageNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 raw_size = 4;
 * @return {number}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.getRawSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.setRawSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChunkHeader} returns this
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.clearRawSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChunkHeader.prototype.hasRawSize = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.cyber.proto.ChunkBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ChunkBody.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ChunkBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ChunkBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.apollo.cyber.proto.SingleMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChunkBody as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ChunkBody.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.messagesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ChunkBody.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ChunkBody}
 */
proto.apollo.cyber.proto.ChunkBody.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ChunkBody();
  obj.messagesList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.messagesList.map(
          proto.apollo.cyber.proto.SingleMessage.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ChunkBody}
 */
proto.apollo.cyber.proto.ChunkBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ChunkBody;
  return proto.apollo.cyber.proto.ChunkBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ChunkBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ChunkBody}
 */
proto.apollo.cyber.proto.ChunkBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.cyber.proto.SingleMessage;
      reader.readMessage(value,proto.apollo.cyber.proto.SingleMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChunkBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ChunkBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ChunkBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChunkBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.cyber.proto.SingleMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SingleMessage messages = 1;
 * @return {!Array<!proto.apollo.cyber.proto.SingleMessage>}
 */
proto.apollo.cyber.proto.ChunkBody.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.apollo.cyber.proto.SingleMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.cyber.proto.SingleMessage, 1));
};


/**
 * @param {!Array<!proto.apollo.cyber.proto.SingleMessage>} value
 * @return {!proto.apollo.cyber.proto.ChunkBody} returns this
*/
proto.apollo.cyber.proto.ChunkBody.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.cyber.proto.SingleMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.cyber.proto.SingleMessage}
 */
proto.apollo.cyber.proto.ChunkBody.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.cyber.proto.SingleMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.cyber.proto.ChunkBody} returns this
 */
proto.apollo.cyber.proto.ChunkBody.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.cyber.proto.Index.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.apollo.cyber.proto.SingleIndex.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Index as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.Index.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.indexesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.Index.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.Index}
 */
proto.apollo.cyber.proto.Index.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.Index();
  obj.indexesList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.indexesList.map(
          proto.apollo.cyber.proto.SingleIndex.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.Index}
 */
proto.apollo.cyber.proto.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.Index;
  return proto.apollo.cyber.proto.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.Index}
 */
proto.apollo.cyber.proto.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.cyber.proto.SingleIndex;
      reader.readMessage(value,proto.apollo.cyber.proto.SingleIndex.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.cyber.proto.SingleIndex.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SingleIndex indexes = 1;
 * @return {!Array<!proto.apollo.cyber.proto.SingleIndex>}
 */
proto.apollo.cyber.proto.Index.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.apollo.cyber.proto.SingleIndex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.cyber.proto.SingleIndex, 1));
};


/**
 * @param {!Array<!proto.apollo.cyber.proto.SingleIndex>} value
 * @return {!proto.apollo.cyber.proto.Index} returns this
*/
proto.apollo.cyber.proto.Index.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.cyber.proto.SingleIndex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.cyber.proto.SingleIndex}
 */
proto.apollo.cyber.proto.Index.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.cyber.proto.SingleIndex, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.cyber.proto.Index} returns this
 */
proto.apollo.cyber.proto.Index.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};


/**
 * @enum {number}
 */
proto.apollo.cyber.proto.SectionType = {
  SECTION_HEADER: 0,
  SECTION_CHUNK_HEADER: 1,
  SECTION_CHUNK_BODY: 2,
  SECTION_INDEX: 3,
  SECTION_CHANNEL: 4
};

/**
 * @enum {number}
 */
proto.apollo.cyber.proto.CompressType = {
  COMPRESS_NONE: 0,
  COMPRESS_BZ2: 1,
  COMPRESS_LZ4: 2
};

goog.object.extend(exports, proto.apollo.cyber.proto);
