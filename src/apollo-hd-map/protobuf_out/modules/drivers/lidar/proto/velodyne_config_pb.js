// source: modules/drivers/lidar/proto/velodyne_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_drivers_lidar_proto_velodyne_pb = require('../../../../modules/drivers/lidar/proto/velodyne_pb.js');
goog.object.extend(proto, modules_drivers_lidar_proto_velodyne_pb);
goog.exportSymbol('proto.apollo.drivers.velodyne.CompensatorConfig', null, global);
goog.exportSymbol('proto.apollo.drivers.velodyne.Config', null, global);
goog.exportSymbol('proto.apollo.drivers.velodyne.FusionConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.velodyne.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.velodyne.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.velodyne.Config.displayName = 'proto.apollo.drivers.velodyne.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.velodyne.FusionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.drivers.velodyne.FusionConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.drivers.velodyne.FusionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.velodyne.FusionConfig.displayName = 'proto.apollo.drivers.velodyne.FusionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.velodyne.CompensatorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.velodyne.CompensatorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.velodyne.CompensatorConfig.displayName = 'proto.apollo.drivers.velodyne.CompensatorConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.velodyne.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.velodyne.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.velodyne.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    scanChannel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rpm: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 600.0),
    model: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    mode: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    pcap: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    prefixAngle: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    firingDataPort: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    positioningDataPort: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    useSensorSync: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    maxRange: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    minRange: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    maxAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    minAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    viewDirection: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    viewWidth: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    calibrationOnline: (f = jspb.Message.getBooleanField(msg, 16)) == null ? undefined : f,
    calibrationFile: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
    organized: (f = jspb.Message.getBooleanField(msg, 18)) == null ? undefined : f,
    convertChannelName: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    npackets: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    useGpsTime: (f = jspb.Message.getBooleanField(msg, 23)) == null ? undefined : f,
    usePollSync: (f = jspb.Message.getBooleanField(msg, 24)) == null ? undefined : f,
    isMainFrame: (f = jspb.Message.getBooleanField(msg, 25)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Config as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.velodyne.Config.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.scanChannel;

  /** @type {?|undefined} */
  this.rpm;

  /** @type {?|undefined} */
  this.model;

  /** @type {?|undefined} */
  this.mode;

  /** @type {?|undefined} */
  this.pcap;

  /** @type {?|undefined} */
  this.prefixAngle;

  /** @type {?|undefined} */
  this.firingDataPort;

  /** @type {?|undefined} */
  this.positioningDataPort;

  /** @type {?|undefined} */
  this.useSensorSync;

  /** @type {?|undefined} */
  this.maxRange;

  /** @type {?|undefined} */
  this.minRange;

  /** @type {?|undefined} */
  this.maxAngle;

  /** @type {?|undefined} */
  this.minAngle;

  /** @type {?|undefined} */
  this.viewDirection;

  /** @type {?|undefined} */
  this.viewWidth;

  /** @type {?|undefined} */
  this.calibrationOnline;

  /** @type {?|undefined} */
  this.calibrationFile;

  /** @type {?|undefined} */
  this.organized;

  /** @type {?|undefined} */
  this.convertChannelName;

  /** @type {?|undefined} */
  this.npackets;

  /** @type {?|undefined} */
  this.useGpsTime;

  /** @type {?|undefined} */
  this.usePollSync;

  /** @type {?|undefined} */
  this.isMainFrame;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.velodyne.Config.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.velodyne.Config}
 */
proto.apollo.drivers.velodyne.Config.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.velodyne.Config();
  obj.frameId != null && jspb.Message.setField(msg, 1, obj.frameId);
  obj.scanChannel != null && jspb.Message.setField(msg, 2, obj.scanChannel);
  obj.rpm != null && jspb.Message.setField(msg, 3, obj.rpm);
  obj.model != null && jspb.Message.setField(msg, 4, obj.model);
  obj.mode != null && jspb.Message.setField(msg, 21, obj.mode);
  obj.pcap != null && jspb.Message.setField(msg, 5, obj.pcap);
  obj.prefixAngle != null && jspb.Message.setField(msg, 6, obj.prefixAngle);
  obj.firingDataPort != null && jspb.Message.setField(msg, 7, obj.firingDataPort);
  obj.positioningDataPort != null && jspb.Message.setField(msg, 8, obj.positioningDataPort);
  obj.useSensorSync != null && jspb.Message.setField(msg, 9, obj.useSensorSync);
  obj.maxRange != null && jspb.Message.setField(msg, 10, obj.maxRange);
  obj.minRange != null && jspb.Message.setField(msg, 11, obj.minRange);
  obj.maxAngle != null && jspb.Message.setField(msg, 12, obj.maxAngle);
  obj.minAngle != null && jspb.Message.setField(msg, 13, obj.minAngle);
  obj.viewDirection != null && jspb.Message.setField(msg, 14, obj.viewDirection);
  obj.viewWidth != null && jspb.Message.setField(msg, 15, obj.viewWidth);
  obj.calibrationOnline != null && jspb.Message.setField(msg, 16, obj.calibrationOnline);
  obj.calibrationFile != null && jspb.Message.setField(msg, 17, obj.calibrationFile);
  obj.organized != null && jspb.Message.setField(msg, 18, obj.organized);
  obj.convertChannelName != null && jspb.Message.setField(msg, 19, obj.convertChannelName);
  obj.npackets != null && jspb.Message.setField(msg, 20, obj.npackets);
  obj.useGpsTime != null && jspb.Message.setField(msg, 23, obj.useGpsTime);
  obj.usePollSync != null && jspb.Message.setField(msg, 24, obj.usePollSync);
  obj.isMainFrame != null && jspb.Message.setField(msg, 25, obj.isMainFrame);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.velodyne.Config}
 */
proto.apollo.drivers.velodyne.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.velodyne.Config;
  return proto.apollo.drivers.velodyne.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.velodyne.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.velodyne.Config}
 */
proto.apollo.drivers.velodyne.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScanChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRpm(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.drivers.velodyne.Model} */ (reader.readEnum());
      msg.setModel(value);
      break;
    case 21:
      var value = /** @type {!proto.apollo.drivers.velodyne.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcap(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrefixAngle(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFiringDataPort(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPositioningDataPort(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseSensorSync(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxRange(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinRange(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAngle(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinAngle(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setViewDirection(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setViewWidth(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCalibrationOnline(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibrationFile(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOrganized(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setConvertChannelName(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNpackets(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseGpsTime(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsePollSync(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMainFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.velodyne.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.velodyne.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.velodyne.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.velodyne.Model} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.velodyne.Mode} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
};


/**
 * optional string frame_id = 1;
 * @return {string}
 */
proto.apollo.drivers.velodyne.Config.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string scan_channel = 2;
 * @return {string}
 */
proto.apollo.drivers.velodyne.Config.prototype.getScanChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setScanChannel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearScanChannel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasScanChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double rpm = 3;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getRpm = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 600.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setRpm = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearRpm = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasRpm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Model model = 4;
 * @return {!proto.apollo.drivers.velodyne.Model}
 */
proto.apollo.drivers.velodyne.Config.prototype.getModel = function() {
  return /** @type {!proto.apollo.drivers.velodyne.Model} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.drivers.velodyne.Model} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setModel = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearModel = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasModel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Mode mode = 21;
 * @return {!proto.apollo.drivers.velodyne.Mode}
 */
proto.apollo.drivers.velodyne.Config.prototype.getMode = function() {
  return /** @type {!proto.apollo.drivers.velodyne.Mode} */ (jspb.Message.getFieldWithDefault(this, 21, 1));
};


/**
 * @param {!proto.apollo.drivers.velodyne.Mode} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearMode = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasMode = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string pcap = 5;
 * @return {string}
 */
proto.apollo.drivers.velodyne.Config.prototype.getPcap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setPcap = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearPcap = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasPcap = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 prefix_angle = 6;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getPrefixAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setPrefixAngle = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearPrefixAngle = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasPrefixAngle = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 firing_data_port = 7;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getFiringDataPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setFiringDataPort = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearFiringDataPort = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasFiringDataPort = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 positioning_data_port = 8;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getPositioningDataPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setPositioningDataPort = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearPositioningDataPort = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasPositioningDataPort = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool use_sensor_sync = 9;
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.getUseSensorSync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setUseSensorSync = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearUseSensorSync = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasUseSensorSync = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double max_range = 10;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getMaxRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setMaxRange = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearMaxRange = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasMaxRange = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double min_range = 11;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getMinRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setMinRange = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearMinRange = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasMinRange = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double max_angle = 12;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getMaxAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setMaxAngle = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearMaxAngle = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasMaxAngle = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double min_angle = 13;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getMinAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setMinAngle = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearMinAngle = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasMinAngle = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double view_direction = 14;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getViewDirection = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setViewDirection = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearViewDirection = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasViewDirection = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double view_width = 15;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getViewWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setViewWidth = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearViewWidth = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasViewWidth = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool calibration_online = 16;
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.getCalibrationOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setCalibrationOnline = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearCalibrationOnline = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasCalibrationOnline = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string calibration_file = 17;
 * @return {string}
 */
proto.apollo.drivers.velodyne.Config.prototype.getCalibrationFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setCalibrationFile = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearCalibrationFile = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasCalibrationFile = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool organized = 18;
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.getOrganized = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setOrganized = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearOrganized = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasOrganized = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string convert_channel_name = 19;
 * @return {string}
 */
proto.apollo.drivers.velodyne.Config.prototype.getConvertChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setConvertChannelName = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearConvertChannelName = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasConvertChannelName = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional int32 npackets = 20;
 * @return {number}
 */
proto.apollo.drivers.velodyne.Config.prototype.getNpackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setNpackets = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearNpackets = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasNpackets = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bool use_gps_time = 23;
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.getUseGpsTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setUseGpsTime = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearUseGpsTime = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasUseGpsTime = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bool use_poll_sync = 24;
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.getUsePollSync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setUsePollSync = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearUsePollSync = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasUsePollSync = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional bool is_main_frame = 25;
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.getIsMainFrame = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.setIsMainFrame = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.Config} returns this
 */
proto.apollo.drivers.velodyne.Config.prototype.clearIsMainFrame = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.Config.prototype.hasIsMainFrame = function() {
  return jspb.Message.getField(this, 25) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.drivers.velodyne.FusionConfig.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.velodyne.FusionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.velodyne.FusionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.FusionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxIntervalMs: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    dropExpiredData: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    fusionChannel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    inputChannelList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    waitTimeS: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FusionConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.velodyne.FusionConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxIntervalMs;

  /** @type {?|undefined} */
  this.dropExpiredData;

  /** @type {?|undefined} */
  this.fusionChannel;

  /** @type {?|undefined} */
  this.inputChannelList;

  /** @type {?|undefined} */
  this.waitTimeS;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.velodyne.FusionConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig}
 */
proto.apollo.drivers.velodyne.FusionConfig.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.velodyne.FusionConfig();
  obj.maxIntervalMs != null && jspb.Message.setField(msg, 1, obj.maxIntervalMs);
  obj.dropExpiredData != null && jspb.Message.setField(msg, 2, obj.dropExpiredData);
  obj.fusionChannel != null && jspb.Message.setField(msg, 3, obj.fusionChannel);
  obj.inputChannelList != null && jspb.Message.setField(msg, 4, obj.inputChannelList);
  obj.waitTimeS != null && jspb.Message.setField(msg, 5, obj.waitTimeS);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig}
 */
proto.apollo.drivers.velodyne.FusionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.velodyne.FusionConfig;
  return proto.apollo.drivers.velodyne.FusionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.velodyne.FusionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig}
 */
proto.apollo.drivers.velodyne.FusionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxIntervalMs(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDropExpiredData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFusionChannel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addInputChannel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWaitTimeS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.velodyne.FusionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.velodyne.FusionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.FusionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputChannelList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional uint32 max_interval_ms = 1;
 * @return {number}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.getMaxIntervalMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.setMaxIntervalMs = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.clearMaxIntervalMs = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.hasMaxIntervalMs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool drop_expired_data = 2;
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.getDropExpiredData = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.setDropExpiredData = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.clearDropExpiredData = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.hasDropExpiredData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string fusion_channel = 3;
 * @return {string}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.getFusionChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.setFusionChannel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.clearFusionChannel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.hasFusionChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string input_channel = 4;
 * @return {!Array<string>}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.getInputChannelList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.setInputChannelList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.addInputChannel = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.clearInputChannelList = function() {
  return this.setInputChannelList([]);
};


/**
 * optional float wait_time_s = 5;
 * @return {number}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.getWaitTimeS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.setWaitTimeS = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.FusionConfig} returns this
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.clearWaitTimeS = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.FusionConfig.prototype.hasWaitTimeS = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.velodyne.CompensatorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.velodyne.CompensatorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.CompensatorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputChannel: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    transformQueryTimeout: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.02),
    worldFrameId: jspb.Message.getFieldWithDefault(msg, 3, "world"),
    targetFrameId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    pointCloudSize: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CompensatorConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.velodyne.CompensatorConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.outputChannel;

  /** @type {?|undefined} */
  this.transformQueryTimeout;

  /** @type {?|undefined} */
  this.worldFrameId;

  /** @type {?|undefined} */
  this.targetFrameId;

  /** @type {?|undefined} */
  this.pointCloudSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.velodyne.CompensatorConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.velodyne.CompensatorConfig();
  obj.outputChannel != null && jspb.Message.setField(msg, 1, obj.outputChannel);
  obj.transformQueryTimeout != null && jspb.Message.setField(msg, 2, obj.transformQueryTimeout);
  obj.worldFrameId != null && jspb.Message.setField(msg, 3, obj.worldFrameId);
  obj.targetFrameId != null && jspb.Message.setField(msg, 4, obj.targetFrameId);
  obj.pointCloudSize != null && jspb.Message.setField(msg, 5, obj.pointCloudSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.velodyne.CompensatorConfig;
  return proto.apollo.drivers.velodyne.CompensatorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.velodyne.CompensatorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputChannel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTransformQueryTimeout(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorldFrameId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetFrameId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPointCloudSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.velodyne.CompensatorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.velodyne.CompensatorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.velodyne.CompensatorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string output_channel = 1;
 * @return {string}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.getOutputChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.setOutputChannel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.clearOutputChannel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.hasOutputChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float transform_query_timeout = 2;
 * @return {number}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.getTransformQueryTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.02));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.setTransformQueryTimeout = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.clearTransformQueryTimeout = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.hasTransformQueryTimeout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string world_frame_id = 3;
 * @return {string}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.getWorldFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "world"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.setWorldFrameId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.clearWorldFrameId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.hasWorldFrameId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string target_frame_id = 4;
 * @return {string}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.getTargetFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.setTargetFrameId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.clearTargetFrameId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.hasTargetFrameId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 point_cloud_size = 5;
 * @return {number}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.getPointCloudSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.setPointCloudSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.velodyne.CompensatorConfig} returns this
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.clearPointCloudSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.velodyne.CompensatorConfig.prototype.hasPointCloudSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.apollo.drivers.velodyne);
