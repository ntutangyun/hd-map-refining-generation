// source: modules/perception/lidar/lib/detector/cnn_segmentation/proto/cnnseg_param.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.lidar.CNNSegParam', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.FeatureParam', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.NetworkParam', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.CNNSegParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.CNNSegParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.CNNSegParam.displayName = 'proto.apollo.perception.lidar.CNNSegParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.NetworkParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.NetworkParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.NetworkParam.displayName = 'proto.apollo.perception.lidar.NetworkParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.FeatureParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.FeatureParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.FeatureParam.displayName = 'proto.apollo.perception.lidar.FeatureParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.CNNSegParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.CNNSegParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.CNNSegParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelType: jspb.Message.getFieldWithDefault(msg, 1, "CaffeNet"),
    networkParam: (f = msg.getNetworkParam()) && proto.apollo.perception.lidar.NetworkParam.toObject(includeInstance, f),
    featureParam: (f = msg.getFeatureParam()) && proto.apollo.perception.lidar.FeatureParam.toObject(includeInstance, f),
    doClassification: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    doHeading: jspb.Message.getBooleanFieldWithDefault(msg, 5, true),
    gpuId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    groundDetector: jspb.Message.getFieldWithDefault(msg, 7, "SpatioTemporalGroundDetector"),
    roiFilter: jspb.Message.getFieldWithDefault(msg, 8, "HdmapROIFilter"),
    removeGroundPoints: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    objectnessThresh: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.5),
    confidenceThresh: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.1),
    heightThresh: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.5),
    minPtsNum: jspb.Message.getFieldWithDefault(msg, 13, 3),
    confidenceRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 60.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CNNSegParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.CNNSegParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.modelType;

  /** @type {?|undefined} */
  this.networkParam;

  /** @type {?|undefined} */
  this.featureParam;

  /** @type {?|undefined} */
  this.doClassification;

  /** @type {?|undefined} */
  this.doHeading;

  /** @type {?|undefined} */
  this.gpuId;

  /** @type {?|undefined} */
  this.groundDetector;

  /** @type {?|undefined} */
  this.roiFilter;

  /** @type {?|undefined} */
  this.removeGroundPoints;

  /** @type {?|undefined} */
  this.objectnessThresh;

  /** @type {?|undefined} */
  this.confidenceThresh;

  /** @type {?|undefined} */
  this.heightThresh;

  /** @type {?|undefined} */
  this.minPtsNum;

  /** @type {?|undefined} */
  this.confidenceRange;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.CNNSegParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.CNNSegParam}
 */
proto.apollo.perception.lidar.CNNSegParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.CNNSegParam();
  obj.modelType != null && jspb.Message.setField(msg, 1, obj.modelType);
  obj.networkParam && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.lidar.NetworkParam.fromObject(obj.networkParam));
  obj.featureParam && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.lidar.FeatureParam.fromObject(obj.featureParam));
  obj.doClassification != null && jspb.Message.setField(msg, 4, obj.doClassification);
  obj.doHeading != null && jspb.Message.setField(msg, 5, obj.doHeading);
  obj.gpuId != null && jspb.Message.setField(msg, 6, obj.gpuId);
  obj.groundDetector != null && jspb.Message.setField(msg, 7, obj.groundDetector);
  obj.roiFilter != null && jspb.Message.setField(msg, 8, obj.roiFilter);
  obj.removeGroundPoints != null && jspb.Message.setField(msg, 9, obj.removeGroundPoints);
  obj.objectnessThresh != null && jspb.Message.setField(msg, 10, obj.objectnessThresh);
  obj.confidenceThresh != null && jspb.Message.setField(msg, 11, obj.confidenceThresh);
  obj.heightThresh != null && jspb.Message.setField(msg, 12, obj.heightThresh);
  obj.minPtsNum != null && jspb.Message.setField(msg, 13, obj.minPtsNum);
  obj.confidenceRange != null && jspb.Message.setField(msg, 14, obj.confidenceRange);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.CNNSegParam}
 */
proto.apollo.perception.lidar.CNNSegParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.CNNSegParam;
  return proto.apollo.perception.lidar.CNNSegParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.CNNSegParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.CNNSegParam}
 */
proto.apollo.perception.lidar.CNNSegParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelType(value);
      break;
    case 2:
      var value = new proto.apollo.perception.lidar.NetworkParam;
      reader.readMessage(value,proto.apollo.perception.lidar.NetworkParam.deserializeBinaryFromReader);
      msg.setNetworkParam(value);
      break;
    case 3:
      var value = new proto.apollo.perception.lidar.FeatureParam;
      reader.readMessage(value,proto.apollo.perception.lidar.FeatureParam.deserializeBinaryFromReader);
      msg.setFeatureParam(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoClassification(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoHeading(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGpuId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroundDetector(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoiFilter(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveGroundPoints(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setObjectnessThresh(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidenceThresh(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeightThresh(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinPtsNum(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidenceRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.CNNSegParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.CNNSegParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.CNNSegParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetworkParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.lidar.NetworkParam.serializeBinaryToWriter
    );
  }
  f = message.getFeatureParam();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.lidar.FeatureParam.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
};


/**
 * optional string model_type = 1;
 * @return {string}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getModelType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "CaffeNet"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setModelType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearModelType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasModelType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NetworkParam network_param = 2;
 * @return {?proto.apollo.perception.lidar.NetworkParam}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getNetworkParam = function() {
  return /** @type{?proto.apollo.perception.lidar.NetworkParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.lidar.NetworkParam, 2));
};


/**
 * @param {?proto.apollo.perception.lidar.NetworkParam|undefined} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
*/
proto.apollo.perception.lidar.CNNSegParam.prototype.setNetworkParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearNetworkParam = function() {
  return this.setNetworkParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasNetworkParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FeatureParam feature_param = 3;
 * @return {?proto.apollo.perception.lidar.FeatureParam}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getFeatureParam = function() {
  return /** @type{?proto.apollo.perception.lidar.FeatureParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.lidar.FeatureParam, 3));
};


/**
 * @param {?proto.apollo.perception.lidar.FeatureParam|undefined} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
*/
proto.apollo.perception.lidar.CNNSegParam.prototype.setFeatureParam = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearFeatureParam = function() {
  return this.setFeatureParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasFeatureParam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool do_classification = 4;
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getDoClassification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setDoClassification = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearDoClassification = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasDoClassification = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool do_heading = 5;
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getDoHeading = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setDoHeading = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearDoHeading = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasDoHeading = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 gpu_id = 6;
 * @return {number}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getGpuId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setGpuId = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearGpuId = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasGpuId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string ground_detector = 7;
 * @return {string}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getGroundDetector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "SpatioTemporalGroundDetector"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setGroundDetector = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearGroundDetector = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasGroundDetector = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string roi_filter = 8;
 * @return {string}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getRoiFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "HdmapROIFilter"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setRoiFilter = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearRoiFilter = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasRoiFilter = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool remove_ground_points = 9;
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getRemoveGroundPoints = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setRemoveGroundPoints = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearRemoveGroundPoints = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasRemoveGroundPoints = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float objectness_thresh = 10;
 * @return {number}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getObjectnessThresh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setObjectnessThresh = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearObjectnessThresh = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasObjectnessThresh = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float confidence_thresh = 11;
 * @return {number}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getConfidenceThresh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setConfidenceThresh = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearConfidenceThresh = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasConfidenceThresh = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float height_thresh = 12;
 * @return {number}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getHeightThresh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setHeightThresh = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearHeightThresh = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasHeightThresh = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 min_pts_num = 13;
 * @return {number}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getMinPtsNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setMinPtsNum = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearMinPtsNum = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasMinPtsNum = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float confidence_range = 14;
 * @return {number}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.getConfidenceRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 60.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.setConfidenceRange = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.CNNSegParam} returns this
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.clearConfidenceRange = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.CNNSegParam.prototype.hasConfidenceRange = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.NetworkParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.NetworkParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.NetworkParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    instancePtBlob: jspb.Message.getFieldWithDefault(msg, 1, "instance_pt"),
    categoryPtBlob: jspb.Message.getFieldWithDefault(msg, 2, "category_score"),
    confidencePtBlob: jspb.Message.getFieldWithDefault(msg, 3, "confidence_score"),
    heightPtBlob: jspb.Message.getFieldWithDefault(msg, 4, "height_pt"),
    classPtBlob: jspb.Message.getFieldWithDefault(msg, 5, "class_score"),
    headingPtBlob: jspb.Message.getFieldWithDefault(msg, 6, "heading_pt"),
    featureBlob: jspb.Message.getFieldWithDefault(msg, 7, "data")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NetworkParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.NetworkParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.instancePtBlob;

  /** @type {?|undefined} */
  this.categoryPtBlob;

  /** @type {?|undefined} */
  this.confidencePtBlob;

  /** @type {?|undefined} */
  this.heightPtBlob;

  /** @type {?|undefined} */
  this.classPtBlob;

  /** @type {?|undefined} */
  this.headingPtBlob;

  /** @type {?|undefined} */
  this.featureBlob;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.NetworkParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.NetworkParam}
 */
proto.apollo.perception.lidar.NetworkParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.NetworkParam();
  obj.instancePtBlob != null && jspb.Message.setField(msg, 1, obj.instancePtBlob);
  obj.categoryPtBlob != null && jspb.Message.setField(msg, 2, obj.categoryPtBlob);
  obj.confidencePtBlob != null && jspb.Message.setField(msg, 3, obj.confidencePtBlob);
  obj.heightPtBlob != null && jspb.Message.setField(msg, 4, obj.heightPtBlob);
  obj.classPtBlob != null && jspb.Message.setField(msg, 5, obj.classPtBlob);
  obj.headingPtBlob != null && jspb.Message.setField(msg, 6, obj.headingPtBlob);
  obj.featureBlob != null && jspb.Message.setField(msg, 7, obj.featureBlob);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.NetworkParam}
 */
proto.apollo.perception.lidar.NetworkParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.NetworkParam;
  return proto.apollo.perception.lidar.NetworkParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.NetworkParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.NetworkParam}
 */
proto.apollo.perception.lidar.NetworkParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstancePtBlob(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryPtBlob(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfidencePtBlob(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeightPtBlob(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassPtBlob(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadingPtBlob(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.NetworkParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.NetworkParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.NetworkParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string instance_pt_blob = 1;
 * @return {string}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.getInstancePtBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "instance_pt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.setInstancePtBlob = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.clearInstancePtBlob = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.hasInstancePtBlob = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string category_pt_blob = 2;
 * @return {string}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.getCategoryPtBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "category_score"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.setCategoryPtBlob = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.clearCategoryPtBlob = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.hasCategoryPtBlob = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string confidence_pt_blob = 3;
 * @return {string}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.getConfidencePtBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "confidence_score"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.setConfidencePtBlob = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.clearConfidencePtBlob = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.hasConfidencePtBlob = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string height_pt_blob = 4;
 * @return {string}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.getHeightPtBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "height_pt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.setHeightPtBlob = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.clearHeightPtBlob = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.hasHeightPtBlob = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string class_pt_blob = 5;
 * @return {string}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.getClassPtBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "class_score"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.setClassPtBlob = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.clearClassPtBlob = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.hasClassPtBlob = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string heading_pt_blob = 6;
 * @return {string}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.getHeadingPtBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "heading_pt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.setHeadingPtBlob = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.clearHeadingPtBlob = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.hasHeadingPtBlob = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string feature_blob = 7;
 * @return {string}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.getFeatureBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "data"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.setFeatureBlob = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NetworkParam} returns this
 */
proto.apollo.perception.lidar.NetworkParam.prototype.clearFeatureBlob = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NetworkParam.prototype.hasFeatureBlob = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.FeatureParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.FeatureParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.FeatureParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointCloudRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 60.0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 512),
    height: jspb.Message.getFieldWithDefault(msg, 3, 512),
    minHeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, -5.0),
    maxHeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 5.0),
    useIntensityFeature: jspb.Message.getBooleanFieldWithDefault(msg, 6, true),
    useConstantFeature: jspb.Message.getBooleanFieldWithDefault(msg, 7, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FeatureParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.FeatureParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pointCloudRange;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.minHeight;

  /** @type {?|undefined} */
  this.maxHeight;

  /** @type {?|undefined} */
  this.useIntensityFeature;

  /** @type {?|undefined} */
  this.useConstantFeature;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.FeatureParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.FeatureParam}
 */
proto.apollo.perception.lidar.FeatureParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.FeatureParam();
  obj.pointCloudRange != null && jspb.Message.setField(msg, 1, obj.pointCloudRange);
  obj.width != null && jspb.Message.setField(msg, 2, obj.width);
  obj.height != null && jspb.Message.setField(msg, 3, obj.height);
  obj.minHeight != null && jspb.Message.setField(msg, 4, obj.minHeight);
  obj.maxHeight != null && jspb.Message.setField(msg, 5, obj.maxHeight);
  obj.useIntensityFeature != null && jspb.Message.setField(msg, 6, obj.useIntensityFeature);
  obj.useConstantFeature != null && jspb.Message.setField(msg, 7, obj.useConstantFeature);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.FeatureParam}
 */
proto.apollo.perception.lidar.FeatureParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.FeatureParam;
  return proto.apollo.perception.lidar.FeatureParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.FeatureParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.FeatureParam}
 */
proto.apollo.perception.lidar.FeatureParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPointCloudRange(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxHeight(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseIntensityFeature(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseConstantFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.FeatureParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.FeatureParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.FeatureParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional float point_cloud_range = 1;
 * @return {number}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.getPointCloudRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 60.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.setPointCloudRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.clearPointCloudRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.hasPointCloudRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 width = 2;
 * @return {number}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 512));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 512));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float min_height = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.getMinHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, -5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.setMinHeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.clearMinHeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.hasMinHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float max_height = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.getMaxHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.setMaxHeight = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.clearMaxHeight = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.hasMaxHeight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool use_intensity_feature = 6;
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.getUseIntensityFeature = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.setUseIntensityFeature = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.clearUseIntensityFeature = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.hasUseIntensityFeature = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool use_constant_feature = 7;
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.getUseConstantFeature = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.setUseConstantFeature = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.FeatureParam} returns this
 */
proto.apollo.perception.lidar.FeatureParam.prototype.clearUseConstantFeature = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.FeatureParam.prototype.hasUseConstantFeature = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.apollo.perception.lidar);
