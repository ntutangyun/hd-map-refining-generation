// source: modules/perception/proto/rt.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.inference.AccuracyParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.AnchorBox', null, global);
goog.exportSymbol('proto.apollo.perception.inference.AnnotatedDataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.AnnotatedDatum', null, global);
goog.exportSymbol('proto.apollo.perception.inference.AnnotatedDatum.AnnotationType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.Annotation', null, global);
goog.exportSymbol('proto.apollo.perception.inference.AnnotationGroup', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ArgMaxParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.BBox3D', null, global);
goog.exportSymbol('proto.apollo.perception.inference.BBoxRegParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.BatchNormParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.BatchSampler', null, global);
goog.exportSymbol('proto.apollo.perception.inference.BiasParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.BlobProto', null, global);
goog.exportSymbol('proto.apollo.perception.inference.BlobShape', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ConcatParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ContrastiveLossParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ConvolutionParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ConvolutionParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.CropParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DFMBPSROIAlignParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DataParameter.DB', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DatasetParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DatasetParameter.DatasetType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.Datum', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DetectionEvaluateParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DetectionOutputParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DetectionOutputSSDParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DimensionStatistics', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DistortionParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DropoutParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.DummyDataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ELUParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.EltwiseParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.EltwiseParameter.EltwiseOp', null, global);
goog.exportSymbol('proto.apollo.perception.inference.EmbedParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.EmitConstraint', null, global);
goog.exportSymbol('proto.apollo.perception.inference.EmitConstraint.EmitType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ExpParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ExpansionParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.FillerParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.FillerParameter.VarianceNorm', null, global);
goog.exportSymbol('proto.apollo.perception.inference.FlattenParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.GenAnchorParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.HDF5DataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.HDF5OutputParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.HingeLossParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.HingeLossParameter.Norm', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ImageDataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.InfogainLossParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.InnerProductParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.InputParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LRNParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LRNParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LRNParameter.NormRegion', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LabelMap', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LabelMapItem', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LayerParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LogParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LossParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.LossParameter.NormalizationMode', null, global);
goog.exportSymbol('proto.apollo.perception.inference.MVNParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.MemoryDataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.MultiBoxLossParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.MultiBoxLossParameter.ConfLossType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.MultiBoxLossParameter.LocLossType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.MultiBoxLossParameter.MatchType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.MultiBoxLossParameter.MiningType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NMSSSDParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NetParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NetState', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NetStateRule', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NoiseParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NonMaximumSuppressionParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NormalizeParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.NormalizedBBox', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PReLUParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PaddingParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ParamSpec', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ParamSpec.DimCheckMode', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ParameterParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PermuteParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.Phase', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PoolingParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PoolingParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PoolingParameter.PoolMethod', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PoolingParameter.RoundMode', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PowerParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PriorBoxParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PriorBoxParameter.CodeType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.PythonParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ROIPoolingParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ReLUParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ReLUParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.RecurrentParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ReductionParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ReductionParameter.ReductionOp', null, global);
goog.exportSymbol('proto.apollo.perception.inference.RegionOutputParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.RegionParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.RegionProposalParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ReorgParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.RepeatedList', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ReshapeParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ResizeParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ResizeParameter.Interp_mode', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ResizeParameter.Pad_mode', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ResizeParameter.Resize_mode', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SPPParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SPPParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SPPParameter.PoolMethod', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SaltPepperParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SampleConstraint', null, global);
goog.exportSymbol('proto.apollo.perception.inference.Sampler', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SaveOutputParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ScaleParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SigmoidParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SigmoidParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SliceParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SoftmaxParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.SoftmaxParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.TanHParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.TanHParameter.Engine', null, global);
goog.exportSymbol('proto.apollo.perception.inference.ThresholdParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.TileParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.TransformationParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.V0LayerParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.V0LayerParameter.PoolMethod', null, global);
goog.exportSymbol('proto.apollo.perception.inference.V1LayerParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.V1LayerParameter.DimCheckMode', null, global);
goog.exportSymbol('proto.apollo.perception.inference.V1LayerParameter.LayerType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.VideoDataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.VideoDataParameter.VideoType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.WindowDataParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.YoloAnchorsParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.YoloDumpParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.YoloLossParameter', null, global);
goog.exportSymbol('proto.apollo.perception.inference.YoloLossParameter.RegLossType', null, global);
goog.exportSymbol('proto.apollo.perception.inference.YoloTargetParameter', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.BlobShape = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.BlobShape.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.BlobShape, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.BlobShape.displayName = 'proto.apollo.perception.inference.BlobShape';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.BlobProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.BlobProto.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.BlobProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.BlobProto.displayName = 'proto.apollo.perception.inference.BlobProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.Datum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.Datum.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.Datum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.Datum.displayName = 'proto.apollo.perception.inference.Datum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.LabelMapItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.LabelMapItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.LabelMapItem.displayName = 'proto.apollo.perception.inference.LabelMapItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.LabelMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.LabelMap.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.LabelMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.LabelMap.displayName = 'proto.apollo.perception.inference.LabelMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.Sampler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.Sampler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.Sampler.displayName = 'proto.apollo.perception.inference.Sampler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.SampleConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.SampleConstraint.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.SampleConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.SampleConstraint.displayName = 'proto.apollo.perception.inference.SampleConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.BatchSampler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.BatchSampler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.BatchSampler.displayName = 'proto.apollo.perception.inference.BatchSampler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.EmitConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.EmitConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.EmitConstraint.displayName = 'proto.apollo.perception.inference.EmitConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NormalizedBBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.NormalizedBBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NormalizedBBox.displayName = 'proto.apollo.perception.inference.NormalizedBBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.BBox3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.BBox3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.BBox3D.displayName = 'proto.apollo.perception.inference.BBox3D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.Annotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.Annotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.Annotation.displayName = 'proto.apollo.perception.inference.Annotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.AnnotationGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.AnnotationGroup.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.AnnotationGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.AnnotationGroup.displayName = 'proto.apollo.perception.inference.AnnotationGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.AnnotatedDatum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.AnnotatedDatum.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.AnnotatedDatum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.AnnotatedDatum.displayName = 'proto.apollo.perception.inference.AnnotatedDatum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.FillerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.FillerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.FillerParameter.displayName = 'proto.apollo.perception.inference.FillerParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NetParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.NetParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.NetParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NetParameter.displayName = 'proto.apollo.perception.inference.NetParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NetState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.NetState.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.NetState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NetState.displayName = 'proto.apollo.perception.inference.NetState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NetStateRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.NetStateRule.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.NetStateRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NetStateRule.displayName = 'proto.apollo.perception.inference.NetStateRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ParamSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ParamSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ParamSpec.displayName = 'proto.apollo.perception.inference.ParamSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.LayerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.apollo.perception.inference.LayerParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.LayerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.LayerParameter.displayName = 'proto.apollo.perception.inference.LayerParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.TransformationParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.TransformationParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.TransformationParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.TransformationParameter.displayName = 'proto.apollo.perception.inference.TransformationParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ResizeParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.ResizeParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.ResizeParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ResizeParameter.displayName = 'proto.apollo.perception.inference.ResizeParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.SaltPepperParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.SaltPepperParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.SaltPepperParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.SaltPepperParameter.displayName = 'proto.apollo.perception.inference.SaltPepperParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NoiseParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.NoiseParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NoiseParameter.displayName = 'proto.apollo.perception.inference.NoiseParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DistortionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.DistortionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DistortionParameter.displayName = 'proto.apollo.perception.inference.DistortionParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ExpansionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ExpansionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ExpansionParameter.displayName = 'proto.apollo.perception.inference.ExpansionParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.LossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.LossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.LossParameter.displayName = 'proto.apollo.perception.inference.LossParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.AccuracyParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.AccuracyParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.AccuracyParameter.displayName = 'proto.apollo.perception.inference.AccuracyParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.AnnotatedDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.AnnotatedDataParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.AnnotatedDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.AnnotatedDataParameter.displayName = 'proto.apollo.perception.inference.AnnotatedDataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ArgMaxParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ArgMaxParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ArgMaxParameter.displayName = 'proto.apollo.perception.inference.ArgMaxParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ConcatParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ConcatParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ConcatParameter.displayName = 'proto.apollo.perception.inference.ConcatParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.BatchNormParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.BatchNormParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.BatchNormParameter.displayName = 'proto.apollo.perception.inference.BatchNormParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.BiasParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.BiasParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.BiasParameter.displayName = 'proto.apollo.perception.inference.BiasParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ContrastiveLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ContrastiveLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ContrastiveLossParameter.displayName = 'proto.apollo.perception.inference.ContrastiveLossParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ConvolutionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.ConvolutionParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.ConvolutionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ConvolutionParameter.displayName = 'proto.apollo.perception.inference.ConvolutionParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.CropParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.CropParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.CropParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.CropParameter.displayName = 'proto.apollo.perception.inference.CropParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.DataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DataParameter.displayName = 'proto.apollo.perception.inference.DataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DetectionEvaluateParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.DetectionEvaluateParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DetectionEvaluateParameter.displayName = 'proto.apollo.perception.inference.DetectionEvaluateParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.NonMaximumSuppressionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NonMaximumSuppressionParameter.displayName = 'proto.apollo.perception.inference.NonMaximumSuppressionParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.SaveOutputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.SaveOutputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.SaveOutputParameter.displayName = 'proto.apollo.perception.inference.SaveOutputParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DetectionOutputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.DetectionOutputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DetectionOutputParameter.displayName = 'proto.apollo.perception.inference.DetectionOutputParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.RegionOutputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.RegionOutputParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.RegionOutputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.RegionOutputParameter.displayName = 'proto.apollo.perception.inference.RegionOutputParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DropoutParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.DropoutParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DropoutParameter.displayName = 'proto.apollo.perception.inference.DropoutParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DummyDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.DummyDataParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.DummyDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DummyDataParameter.displayName = 'proto.apollo.perception.inference.DummyDataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.EltwiseParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.EltwiseParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.EltwiseParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.EltwiseParameter.displayName = 'proto.apollo.perception.inference.EltwiseParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ELUParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ELUParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ELUParameter.displayName = 'proto.apollo.perception.inference.ELUParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.EmbedParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.EmbedParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.EmbedParameter.displayName = 'proto.apollo.perception.inference.EmbedParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ExpParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ExpParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ExpParameter.displayName = 'proto.apollo.perception.inference.ExpParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.FlattenParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.FlattenParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.FlattenParameter.displayName = 'proto.apollo.perception.inference.FlattenParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.HDF5DataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.HDF5DataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.HDF5DataParameter.displayName = 'proto.apollo.perception.inference.HDF5DataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.HDF5OutputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.HDF5OutputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.HDF5OutputParameter.displayName = 'proto.apollo.perception.inference.HDF5OutputParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.HingeLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.HingeLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.HingeLossParameter.displayName = 'proto.apollo.perception.inference.HingeLossParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.RepeatedList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.RepeatedList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.RepeatedList.displayName = 'proto.apollo.perception.inference.RepeatedList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DatasetParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.DatasetParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.DatasetParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DatasetParameter.displayName = 'proto.apollo.perception.inference.DatasetParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ImageDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.ImageDataParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.ImageDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ImageDataParameter.displayName = 'proto.apollo.perception.inference.ImageDataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.InfogainLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.InfogainLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.InfogainLossParameter.displayName = 'proto.apollo.perception.inference.InfogainLossParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.InnerProductParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.InnerProductParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.InnerProductParameter.displayName = 'proto.apollo.perception.inference.InnerProductParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.InputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.InputParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.InputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.InputParameter.displayName = 'proto.apollo.perception.inference.InputParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.LogParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.LogParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.LogParameter.displayName = 'proto.apollo.perception.inference.LogParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.LRNParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.LRNParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.LRNParameter.displayName = 'proto.apollo.perception.inference.LRNParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.MemoryDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.MemoryDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.MemoryDataParameter.displayName = 'proto.apollo.perception.inference.MemoryDataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.MultiBoxLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.MultiBoxLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.MultiBoxLossParameter.displayName = 'proto.apollo.perception.inference.MultiBoxLossParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.MVNParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.MVNParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.MVNParameter.displayName = 'proto.apollo.perception.inference.MVNParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NormalizeParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.NormalizeParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NormalizeParameter.displayName = 'proto.apollo.perception.inference.NormalizeParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ParameterParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ParameterParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ParameterParameter.displayName = 'proto.apollo.perception.inference.ParameterParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.PermuteParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.PermuteParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.PermuteParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.PermuteParameter.displayName = 'proto.apollo.perception.inference.PermuteParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.PoolingParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.PoolingParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.PoolingParameter.displayName = 'proto.apollo.perception.inference.PoolingParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.PowerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.PowerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.PowerParameter.displayName = 'proto.apollo.perception.inference.PowerParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.PriorBoxParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.PriorBoxParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.PriorBoxParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.PriorBoxParameter.displayName = 'proto.apollo.perception.inference.PriorBoxParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.PythonParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.PythonParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.PythonParameter.displayName = 'proto.apollo.perception.inference.PythonParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.RecurrentParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.RecurrentParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.RecurrentParameter.displayName = 'proto.apollo.perception.inference.RecurrentParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ReductionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ReductionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ReductionParameter.displayName = 'proto.apollo.perception.inference.ReductionParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ReLUParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ReLUParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ReLUParameter.displayName = 'proto.apollo.perception.inference.ReLUParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ReshapeParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ReshapeParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ReshapeParameter.displayName = 'proto.apollo.perception.inference.ReshapeParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ROIPoolingParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ROIPoolingParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ROIPoolingParameter.displayName = 'proto.apollo.perception.inference.ROIPoolingParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ScaleParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ScaleParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ScaleParameter.displayName = 'proto.apollo.perception.inference.ScaleParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.SigmoidParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.SigmoidParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.SigmoidParameter.displayName = 'proto.apollo.perception.inference.SigmoidParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.SliceParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.SliceParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.SliceParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.SliceParameter.displayName = 'proto.apollo.perception.inference.SliceParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.SoftmaxParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.SoftmaxParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.SoftmaxParameter.displayName = 'proto.apollo.perception.inference.SoftmaxParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.TanHParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.TanHParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.TanHParameter.displayName = 'proto.apollo.perception.inference.TanHParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.TileParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.TileParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.TileParameter.displayName = 'proto.apollo.perception.inference.TileParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ThresholdParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ThresholdParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ThresholdParameter.displayName = 'proto.apollo.perception.inference.ThresholdParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.VideoDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.VideoDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.VideoDataParameter.displayName = 'proto.apollo.perception.inference.VideoDataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.WindowDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.WindowDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.WindowDataParameter.displayName = 'proto.apollo.perception.inference.WindowDataParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.SPPParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.SPPParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.SPPParameter.displayName = 'proto.apollo.perception.inference.SPPParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.V1LayerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.apollo.perception.inference.V1LayerParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.V1LayerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.V1LayerParameter.displayName = 'proto.apollo.perception.inference.V1LayerParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.V0LayerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.apollo.perception.inference.V0LayerParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.V0LayerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.V0LayerParameter.displayName = 'proto.apollo.perception.inference.V0LayerParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.PReLUParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.PReLUParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.PReLUParameter.displayName = 'proto.apollo.perception.inference.PReLUParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.PaddingParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.PaddingParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.PaddingParameter.displayName = 'proto.apollo.perception.inference.PaddingParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.YoloLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.YoloLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.YoloLossParameter.displayName = 'proto.apollo.perception.inference.YoloLossParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.YoloDumpParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.YoloDumpParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.YoloDumpParameter.displayName = 'proto.apollo.perception.inference.YoloDumpParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.YoloAnchorsParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.YoloAnchorsParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.YoloAnchorsParameter.displayName = 'proto.apollo.perception.inference.YoloAnchorsParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DimensionStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.DimensionStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DimensionStatistics.displayName = 'proto.apollo.perception.inference.DimensionStatistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.YoloTargetParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.YoloTargetParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.YoloTargetParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.YoloTargetParameter.displayName = 'proto.apollo.perception.inference.YoloTargetParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.RegionProposalParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.RegionProposalParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.RegionProposalParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.RegionProposalParameter.displayName = 'proto.apollo.perception.inference.RegionProposalParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.RegionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.RegionParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.RegionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.RegionParameter.displayName = 'proto.apollo.perception.inference.RegionParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.AnchorBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.AnchorBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.AnchorBox.displayName = 'proto.apollo.perception.inference.AnchorBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.ReorgParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.ReorgParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.ReorgParameter.displayName = 'proto.apollo.perception.inference.ReorgParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.BBoxRegParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.BBoxRegParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.BBoxRegParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.BBoxRegParameter.displayName = 'proto.apollo.perception.inference.BBoxRegParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.inference.DFMBPSROIAlignParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DFMBPSROIAlignParameter.displayName = 'proto.apollo.perception.inference.DFMBPSROIAlignParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.DetectionOutputSSDParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.DetectionOutputSSDParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.DetectionOutputSSDParameter.displayName = 'proto.apollo.perception.inference.DetectionOutputSSDParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.NMSSSDParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.NMSSSDParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.NMSSSDParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.NMSSSDParameter.displayName = 'proto.apollo.perception.inference.NMSSSDParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.inference.GenAnchorParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.inference.GenAnchorParameter.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.inference.GenAnchorParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.inference.GenAnchorParameter.displayName = 'proto.apollo.perception.inference.GenAnchorParameter';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.BlobShape.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.BlobShape.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.BlobShape.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.BlobShape} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BlobShape.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BlobShape as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.BlobShape.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dimList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.BlobShape.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.BlobShape.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.BlobShape();
  obj.dimList != null && jspb.Message.setField(msg, 1, obj.dimList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.BlobShape.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.BlobShape;
  return proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.BlobShape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDim(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.BlobShape.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.BlobShape} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 dim = 1;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.BlobShape.prototype.getDimList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.BlobShape} returns this
 */
proto.apollo.perception.inference.BlobShape.prototype.setDimList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobShape} returns this
 */
proto.apollo.perception.inference.BlobShape.prototype.addDim = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.BlobShape} returns this
 */
proto.apollo.perception.inference.BlobShape.prototype.clearDimList = function() {
  return this.setDimList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.BlobProto.repeatedFields_ = [5,6,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.BlobProto.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.BlobProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.BlobProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BlobProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.apollo.perception.inference.BlobShape.toObject(includeInstance, f),
    dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    diffList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    doubleDataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f,
    doubleDiffList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f,
    num: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BlobProto as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.BlobProto.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.shape;

  /** @type {?|undefined} */
  this.dataList;

  /** @type {?|undefined} */
  this.diffList;

  /** @type {?|undefined} */
  this.doubleDataList;

  /** @type {?|undefined} */
  this.doubleDiffList;

  /** @type {?|undefined} */
  this.num;

  /** @type {?|undefined} */
  this.channels;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.width;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.BlobProto.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.BlobProto}
 */
proto.apollo.perception.inference.BlobProto.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.BlobProto();
  obj.shape && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.perception.inference.BlobShape.fromObject(obj.shape));
  obj.dataList != null && jspb.Message.setField(msg, 5, obj.dataList);
  obj.diffList != null && jspb.Message.setField(msg, 6, obj.diffList);
  obj.doubleDataList != null && jspb.Message.setField(msg, 8, obj.doubleDataList);
  obj.doubleDiffList != null && jspb.Message.setField(msg, 9, obj.doubleDiffList);
  obj.num != null && jspb.Message.setField(msg, 1, obj.num);
  obj.channels != null && jspb.Message.setField(msg, 2, obj.channels);
  obj.height != null && jspb.Message.setField(msg, 3, obj.height);
  obj.width != null && jspb.Message.setField(msg, 4, obj.width);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.BlobProto}
 */
proto.apollo.perception.inference.BlobProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.BlobProto;
  return proto.apollo.perception.inference.BlobProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.BlobProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.BlobProto}
 */
proto.apollo.perception.inference.BlobProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new proto.apollo.perception.inference.BlobShape;
      reader.readMessage(value,proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addData(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDiff(values[i]);
      }
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDoubleData(values[i]);
      }
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDoubleDiff(values[i]);
      }
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.BlobProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.BlobProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.BlobProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BlobProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getDiffList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getDoubleDataList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getDoubleDiffList();
  if (f.length > 0) {
    writer.writePackedDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional BlobShape shape = 7;
 * @return {?proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.BlobProto.prototype.getShape = function() {
  return /** @type{?proto.apollo.perception.inference.BlobShape} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.BlobShape, 7));
};


/**
 * @param {?proto.apollo.perception.inference.BlobShape|undefined} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
*/
proto.apollo.perception.inference.BlobProto.prototype.setShape = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearShape = function() {
  return this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BlobProto.prototype.hasShape = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated float data = 5;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.BlobProto.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated float diff = 6;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.BlobProto.prototype.getDiffList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setDiffList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.addDiff = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearDiffList = function() {
  return this.setDiffList([]);
};


/**
 * repeated double double_data = 8;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.BlobProto.prototype.getDoubleDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setDoubleDataList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.addDoubleData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearDoubleDataList = function() {
  return this.setDoubleDataList([]);
};


/**
 * repeated double double_diff = 9;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.BlobProto.prototype.getDoubleDiffList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setDoubleDiffList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.addDoubleDiff = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearDoubleDiffList = function() {
  return this.setDoubleDiffList([]);
};


/**
 * optional int32 num = 1;
 * @return {number}
 */
proto.apollo.perception.inference.BlobProto.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setNum = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearNum = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BlobProto.prototype.hasNum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 channels = 2;
 * @return {number}
 */
proto.apollo.perception.inference.BlobProto.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setChannels = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearChannels = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BlobProto.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.apollo.perception.inference.BlobProto.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BlobProto.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 width = 4;
 * @return {number}
 */
proto.apollo.perception.inference.BlobProto.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BlobProto} returns this
 */
proto.apollo.perception.inference.BlobProto.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BlobProto.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.Datum.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.Datum.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.Datum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.Datum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.Datum.toObject = function(includeInstance, msg) {
  var f, obj = {
    channels: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    width: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    data: msg.getData_asB64(),
    label: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    floatDataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    encoded: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Datum as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.Datum.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.channels;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.data;

  /** @type {?|undefined} */
  this.label;

  /** @type {?|undefined} */
  this.floatDataList;

  /** @type {?|undefined} */
  this.encoded;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.Datum.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.Datum}
 */
proto.apollo.perception.inference.Datum.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.Datum();
  obj.channels != null && jspb.Message.setField(msg, 1, obj.channels);
  obj.height != null && jspb.Message.setField(msg, 2, obj.height);
  obj.width != null && jspb.Message.setField(msg, 3, obj.width);
  obj.data != null && jspb.Message.setField(msg, 4, obj.data);
  obj.label != null && jspb.Message.setField(msg, 5, obj.label);
  obj.floatDataList != null && jspb.Message.setField(msg, 6, obj.floatDataList);
  obj.encoded != null && jspb.Message.setField(msg, 7, obj.encoded);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.Datum}
 */
proto.apollo.perception.inference.Datum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.Datum;
  return proto.apollo.perception.inference.Datum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.Datum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.Datum}
 */
proto.apollo.perception.inference.Datum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabel(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFloatData(values[i]);
      }
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEncoded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.Datum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.Datum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.Datum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.Datum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFloatDataList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional int32 channels = 1;
 * @return {number}
 */
proto.apollo.perception.inference.Datum.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.setChannels = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.clearChannels = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Datum.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.apollo.perception.inference.Datum.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Datum.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.apollo.perception.inference.Datum.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Datum.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.perception.inference.Datum.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.apollo.perception.inference.Datum.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.Datum.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.setData = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.clearData = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Datum.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 label = 5;
 * @return {number}
 */
proto.apollo.perception.inference.Datum.prototype.getLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Datum.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated float float_data = 6;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.Datum.prototype.getFloatDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.setFloatDataList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.addFloatData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.clearFloatDataList = function() {
  return this.setFloatDataList([]);
};


/**
 * optional bool encoded = 7;
 * @return {boolean}
 */
proto.apollo.perception.inference.Datum.prototype.getEncoded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.setEncoded = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Datum} returns this
 */
proto.apollo.perception.inference.Datum.prototype.clearEncoded = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Datum.prototype.hasEncoded = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.LabelMapItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.LabelMapItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LabelMapItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    label: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    displayName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LabelMapItem as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.LabelMapItem.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.label;

  /** @type {?|undefined} */
  this.displayName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.LabelMapItem.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.LabelMapItem}
 */
proto.apollo.perception.inference.LabelMapItem.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.LabelMapItem();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.label != null && jspb.Message.setField(msg, 2, obj.label);
  obj.displayName != null && jspb.Message.setField(msg, 3, obj.displayName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.LabelMapItem}
 */
proto.apollo.perception.inference.LabelMapItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.LabelMapItem;
  return proto.apollo.perception.inference.LabelMapItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.LabelMapItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.LabelMapItem}
 */
proto.apollo.perception.inference.LabelMapItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.LabelMapItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.LabelMapItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LabelMapItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.LabelMapItem} returns this
 */
proto.apollo.perception.inference.LabelMapItem.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LabelMapItem} returns this
 */
proto.apollo.perception.inference.LabelMapItem.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 label = 2;
 * @return {number}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.getLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LabelMapItem} returns this
 */
proto.apollo.perception.inference.LabelMapItem.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LabelMapItem} returns this
 */
proto.apollo.perception.inference.LabelMapItem.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.LabelMapItem} returns this
 */
proto.apollo.perception.inference.LabelMapItem.prototype.setDisplayName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LabelMapItem} returns this
 */
proto.apollo.perception.inference.LabelMapItem.prototype.clearDisplayName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LabelMapItem.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.LabelMap.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.LabelMap.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.LabelMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.LabelMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LabelMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.apollo.perception.inference.LabelMapItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LabelMap as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.LabelMap.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.itemList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.LabelMap.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.LabelMap}
 */
proto.apollo.perception.inference.LabelMap.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.LabelMap();
  obj.itemList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.itemList.map(
          proto.apollo.perception.inference.LabelMapItem.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.LabelMap}
 */
proto.apollo.perception.inference.LabelMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.LabelMap;
  return proto.apollo.perception.inference.LabelMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.LabelMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.LabelMap}
 */
proto.apollo.perception.inference.LabelMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.LabelMapItem;
      reader.readMessage(value,proto.apollo.perception.inference.LabelMapItem.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.LabelMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.LabelMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.LabelMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LabelMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.inference.LabelMapItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LabelMapItem item = 1;
 * @return {!Array<!proto.apollo.perception.inference.LabelMapItem>}
 */
proto.apollo.perception.inference.LabelMap.prototype.getItemList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.LabelMapItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.LabelMapItem, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.LabelMapItem>} value
 * @return {!proto.apollo.perception.inference.LabelMap} returns this
*/
proto.apollo.perception.inference.LabelMap.prototype.setItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.inference.LabelMapItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.LabelMapItem}
 */
proto.apollo.perception.inference.LabelMap.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.inference.LabelMapItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LabelMap} returns this
 */
proto.apollo.perception.inference.LabelMap.prototype.clearItemList = function() {
  return this.setItemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.Sampler.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.Sampler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.Sampler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.Sampler.toObject = function(includeInstance, msg) {
  var f, obj = {
    minScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    maxScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    minAspectRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    maxAspectRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Sampler as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.Sampler.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minScale;

  /** @type {?|undefined} */
  this.maxScale;

  /** @type {?|undefined} */
  this.minAspectRatio;

  /** @type {?|undefined} */
  this.maxAspectRatio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.Sampler.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.Sampler}
 */
proto.apollo.perception.inference.Sampler.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.Sampler();
  obj.minScale != null && jspb.Message.setField(msg, 1, obj.minScale);
  obj.maxScale != null && jspb.Message.setField(msg, 2, obj.maxScale);
  obj.minAspectRatio != null && jspb.Message.setField(msg, 3, obj.minAspectRatio);
  obj.maxAspectRatio != null && jspb.Message.setField(msg, 4, obj.maxAspectRatio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.Sampler}
 */
proto.apollo.perception.inference.Sampler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.Sampler;
  return proto.apollo.perception.inference.Sampler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.Sampler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.Sampler}
 */
proto.apollo.perception.inference.Sampler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinScale(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinAspectRatio(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxAspectRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.Sampler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.Sampler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.Sampler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.Sampler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float min_scale = 1;
 * @return {number}
 */
proto.apollo.perception.inference.Sampler.prototype.getMinScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.setMinScale = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.clearMinScale = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Sampler.prototype.hasMinScale = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float max_scale = 2;
 * @return {number}
 */
proto.apollo.perception.inference.Sampler.prototype.getMaxScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.setMaxScale = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.clearMaxScale = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Sampler.prototype.hasMaxScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float min_aspect_ratio = 3;
 * @return {number}
 */
proto.apollo.perception.inference.Sampler.prototype.getMinAspectRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.setMinAspectRatio = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.clearMinAspectRatio = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Sampler.prototype.hasMinAspectRatio = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float max_aspect_ratio = 4;
 * @return {number}
 */
proto.apollo.perception.inference.Sampler.prototype.getMaxAspectRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.setMaxAspectRatio = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Sampler} returns this
 */
proto.apollo.perception.inference.Sampler.prototype.clearMaxAspectRatio = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Sampler.prototype.hasMaxAspectRatio = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.SampleConstraint.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.SampleConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.SampleConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SampleConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    minJaccardOverlap: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    maxJaccardOverlap: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    minSampleCoverage: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    maxSampleCoverage: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    minObjectCoverage: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    maxObjectCoverage: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    balanceTypeList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SampleConstraint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.SampleConstraint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minJaccardOverlap;

  /** @type {?|undefined} */
  this.maxJaccardOverlap;

  /** @type {?|undefined} */
  this.minSampleCoverage;

  /** @type {?|undefined} */
  this.maxSampleCoverage;

  /** @type {?|undefined} */
  this.minObjectCoverage;

  /** @type {?|undefined} */
  this.maxObjectCoverage;

  /** @type {?|undefined} */
  this.balanceTypeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.SampleConstraint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.SampleConstraint}
 */
proto.apollo.perception.inference.SampleConstraint.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.SampleConstraint();
  obj.minJaccardOverlap != null && jspb.Message.setField(msg, 1, obj.minJaccardOverlap);
  obj.maxJaccardOverlap != null && jspb.Message.setField(msg, 2, obj.maxJaccardOverlap);
  obj.minSampleCoverage != null && jspb.Message.setField(msg, 3, obj.minSampleCoverage);
  obj.maxSampleCoverage != null && jspb.Message.setField(msg, 4, obj.maxSampleCoverage);
  obj.minObjectCoverage != null && jspb.Message.setField(msg, 5, obj.minObjectCoverage);
  obj.maxObjectCoverage != null && jspb.Message.setField(msg, 6, obj.maxObjectCoverage);
  obj.balanceTypeList != null && jspb.Message.setField(msg, 7, obj.balanceTypeList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.SampleConstraint}
 */
proto.apollo.perception.inference.SampleConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.SampleConstraint;
  return proto.apollo.perception.inference.SampleConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.SampleConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.SampleConstraint}
 */
proto.apollo.perception.inference.SampleConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinJaccardOverlap(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxJaccardOverlap(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinSampleCoverage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxSampleCoverage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinObjectCoverage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxObjectCoverage(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBalanceType(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.SampleConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.SampleConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SampleConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getBalanceTypeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
};


/**
 * optional float min_jaccard_overlap = 1;
 * @return {number}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.getMinJaccardOverlap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.setMinJaccardOverlap = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.clearMinJaccardOverlap = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.hasMinJaccardOverlap = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float max_jaccard_overlap = 2;
 * @return {number}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.getMaxJaccardOverlap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.setMaxJaccardOverlap = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.clearMaxJaccardOverlap = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.hasMaxJaccardOverlap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float min_sample_coverage = 3;
 * @return {number}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.getMinSampleCoverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.setMinSampleCoverage = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.clearMinSampleCoverage = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.hasMinSampleCoverage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float max_sample_coverage = 4;
 * @return {number}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.getMaxSampleCoverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.setMaxSampleCoverage = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.clearMaxSampleCoverage = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.hasMaxSampleCoverage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float min_object_coverage = 5;
 * @return {number}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.getMinObjectCoverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.setMinObjectCoverage = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.clearMinObjectCoverage = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.hasMinObjectCoverage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float max_object_coverage = 6;
 * @return {number}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.getMaxObjectCoverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.setMaxObjectCoverage = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.clearMaxObjectCoverage = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.hasMaxObjectCoverage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated int32 balance_type = 7;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.SampleConstraint.prototype.getBalanceTypeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.setBalanceTypeList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.addBalanceType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.SampleConstraint} returns this
 */
proto.apollo.perception.inference.SampleConstraint.prototype.clearBalanceTypeList = function() {
  return this.setBalanceTypeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.BatchSampler.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.BatchSampler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.BatchSampler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BatchSampler.toObject = function(includeInstance, msg) {
  var f, obj = {
    useOriginalImage: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    sampler: (f = msg.getSampler()) && proto.apollo.perception.inference.Sampler.toObject(includeInstance, f),
    sampleConstraint: (f = msg.getSampleConstraint()) && proto.apollo.perception.inference.SampleConstraint.toObject(includeInstance, f),
    maxSample: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    maxTrials: jspb.Message.getFieldWithDefault(msg, 5, 100)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BatchSampler as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.BatchSampler.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.useOriginalImage;

  /** @type {?|undefined} */
  this.sampler;

  /** @type {?|undefined} */
  this.sampleConstraint;

  /** @type {?|undefined} */
  this.maxSample;

  /** @type {?|undefined} */
  this.maxTrials;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.BatchSampler.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.BatchSampler}
 */
proto.apollo.perception.inference.BatchSampler.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.BatchSampler();
  obj.useOriginalImage != null && jspb.Message.setField(msg, 1, obj.useOriginalImage);
  obj.sampler && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.inference.Sampler.fromObject(obj.sampler));
  obj.sampleConstraint && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.inference.SampleConstraint.fromObject(obj.sampleConstraint));
  obj.maxSample != null && jspb.Message.setField(msg, 4, obj.maxSample);
  obj.maxTrials != null && jspb.Message.setField(msg, 5, obj.maxTrials);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.BatchSampler}
 */
proto.apollo.perception.inference.BatchSampler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.BatchSampler;
  return proto.apollo.perception.inference.BatchSampler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.BatchSampler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.BatchSampler}
 */
proto.apollo.perception.inference.BatchSampler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseOriginalImage(value);
      break;
    case 2:
      var value = new proto.apollo.perception.inference.Sampler;
      reader.readMessage(value,proto.apollo.perception.inference.Sampler.deserializeBinaryFromReader);
      msg.setSampler(value);
      break;
    case 3:
      var value = new proto.apollo.perception.inference.SampleConstraint;
      reader.readMessage(value,proto.apollo.perception.inference.SampleConstraint.deserializeBinaryFromReader);
      msg.setSampleConstraint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxSample(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxTrials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.BatchSampler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.BatchSampler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.BatchSampler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BatchSampler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSampler();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.inference.Sampler.serializeBinaryToWriter
    );
  }
  f = message.getSampleConstraint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.inference.SampleConstraint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional bool use_original_image = 1;
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchSampler.prototype.getUseOriginalImage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.setUseOriginalImage = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.clearUseOriginalImage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchSampler.prototype.hasUseOriginalImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Sampler sampler = 2;
 * @return {?proto.apollo.perception.inference.Sampler}
 */
proto.apollo.perception.inference.BatchSampler.prototype.getSampler = function() {
  return /** @type{?proto.apollo.perception.inference.Sampler} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.Sampler, 2));
};


/**
 * @param {?proto.apollo.perception.inference.Sampler|undefined} value
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
*/
proto.apollo.perception.inference.BatchSampler.prototype.setSampler = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.clearSampler = function() {
  return this.setSampler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchSampler.prototype.hasSampler = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SampleConstraint sample_constraint = 3;
 * @return {?proto.apollo.perception.inference.SampleConstraint}
 */
proto.apollo.perception.inference.BatchSampler.prototype.getSampleConstraint = function() {
  return /** @type{?proto.apollo.perception.inference.SampleConstraint} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SampleConstraint, 3));
};


/**
 * @param {?proto.apollo.perception.inference.SampleConstraint|undefined} value
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
*/
proto.apollo.perception.inference.BatchSampler.prototype.setSampleConstraint = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.clearSampleConstraint = function() {
  return this.setSampleConstraint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchSampler.prototype.hasSampleConstraint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 max_sample = 4;
 * @return {number}
 */
proto.apollo.perception.inference.BatchSampler.prototype.getMaxSample = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.setMaxSample = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.clearMaxSample = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchSampler.prototype.hasMaxSample = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 max_trials = 5;
 * @return {number}
 */
proto.apollo.perception.inference.BatchSampler.prototype.getMaxTrials = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 100));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.setMaxTrials = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchSampler} returns this
 */
proto.apollo.perception.inference.BatchSampler.prototype.clearMaxTrials = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchSampler.prototype.hasMaxTrials = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.EmitConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.EmitConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.EmitConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.EmitConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    emitType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    emitOverlap: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EmitConstraint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.EmitConstraint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.emitType;

  /** @type {?|undefined} */
  this.emitOverlap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.EmitConstraint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.EmitConstraint}
 */
proto.apollo.perception.inference.EmitConstraint.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.EmitConstraint();
  obj.emitType != null && jspb.Message.setField(msg, 1, obj.emitType);
  obj.emitOverlap != null && jspb.Message.setField(msg, 2, obj.emitOverlap);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.EmitConstraint}
 */
proto.apollo.perception.inference.EmitConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.EmitConstraint;
  return proto.apollo.perception.inference.EmitConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.EmitConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.EmitConstraint}
 */
proto.apollo.perception.inference.EmitConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.EmitConstraint.EmitType} */ (reader.readEnum());
      msg.setEmitType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEmitOverlap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.EmitConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.EmitConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.EmitConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.EmitConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.EmitConstraint.EmitType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.EmitConstraint.EmitType = {
  CENTER: 0,
  MIN_OVERLAP: 1
};

/**
 * optional EmitType emit_type = 1;
 * @return {!proto.apollo.perception.inference.EmitConstraint.EmitType}
 */
proto.apollo.perception.inference.EmitConstraint.prototype.getEmitType = function() {
  return /** @type {!proto.apollo.perception.inference.EmitConstraint.EmitType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.inference.EmitConstraint.EmitType} value
 * @return {!proto.apollo.perception.inference.EmitConstraint} returns this
 */
proto.apollo.perception.inference.EmitConstraint.prototype.setEmitType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.EmitConstraint} returns this
 */
proto.apollo.perception.inference.EmitConstraint.prototype.clearEmitType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EmitConstraint.prototype.hasEmitType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float emit_overlap = 2;
 * @return {number}
 */
proto.apollo.perception.inference.EmitConstraint.prototype.getEmitOverlap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.EmitConstraint} returns this
 */
proto.apollo.perception.inference.EmitConstraint.prototype.setEmitOverlap = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.EmitConstraint} returns this
 */
proto.apollo.perception.inference.EmitConstraint.prototype.clearEmitOverlap = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EmitConstraint.prototype.hasEmitOverlap = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NormalizedBBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NormalizedBBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NormalizedBBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    xmin: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    ymin: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    xmax: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    ymax: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    label: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    difficult: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    score: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    size: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NormalizedBBox as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NormalizedBBox.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.xmin;

  /** @type {?|undefined} */
  this.ymin;

  /** @type {?|undefined} */
  this.xmax;

  /** @type {?|undefined} */
  this.ymax;

  /** @type {?|undefined} */
  this.label;

  /** @type {?|undefined} */
  this.difficult;

  /** @type {?|undefined} */
  this.score;

  /** @type {?|undefined} */
  this.size;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NormalizedBBox.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NormalizedBBox}
 */
proto.apollo.perception.inference.NormalizedBBox.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NormalizedBBox();
  obj.xmin != null && jspb.Message.setField(msg, 1, obj.xmin);
  obj.ymin != null && jspb.Message.setField(msg, 2, obj.ymin);
  obj.xmax != null && jspb.Message.setField(msg, 3, obj.xmax);
  obj.ymax != null && jspb.Message.setField(msg, 4, obj.ymax);
  obj.label != null && jspb.Message.setField(msg, 5, obj.label);
  obj.difficult != null && jspb.Message.setField(msg, 6, obj.difficult);
  obj.score != null && jspb.Message.setField(msg, 7, obj.score);
  obj.size != null && jspb.Message.setField(msg, 8, obj.size);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NormalizedBBox}
 */
proto.apollo.perception.inference.NormalizedBBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NormalizedBBox;
  return proto.apollo.perception.inference.NormalizedBBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NormalizedBBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NormalizedBBox}
 */
proto.apollo.perception.inference.NormalizedBBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXmin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYmin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setXmax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYmax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabel(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDifficult(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NormalizedBBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NormalizedBBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NormalizedBBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional float xmin = 1;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getXmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setXmin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearXmin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasXmin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float ymin = 2;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getYmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setYmin = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearYmin = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasYmin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float xmax = 3;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getXmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setXmax = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearXmax = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasXmax = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float ymax = 4;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getYmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setYmax = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearYmax = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasYmax = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 label = 5;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool difficult = 6;
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getDifficult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setDifficult = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearDifficult = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasDifficult = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float score = 7;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setScore = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearScore = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float size = 8;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.setSize = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizedBBox} returns this
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.clearSize = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizedBBox.prototype.hasSize = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.BBox3D.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.BBox3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.BBox3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BBox3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    h: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    w: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    l: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    alpha: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BBox3D as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.BBox3D.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.h;

  /** @type {?|undefined} */
  this.w;

  /** @type {?|undefined} */
  this.l;

  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.alpha;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.BBox3D.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.BBox3D}
 */
proto.apollo.perception.inference.BBox3D.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.BBox3D();
  obj.h != null && jspb.Message.setField(msg, 1, obj.h);
  obj.w != null && jspb.Message.setField(msg, 2, obj.w);
  obj.l != null && jspb.Message.setField(msg, 3, obj.l);
  obj.x != null && jspb.Message.setField(msg, 4, obj.x);
  obj.y != null && jspb.Message.setField(msg, 5, obj.y);
  obj.z != null && jspb.Message.setField(msg, 6, obj.z);
  obj.alpha != null && jspb.Message.setField(msg, 7, obj.alpha);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.BBox3D}
 */
proto.apollo.perception.inference.BBox3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.BBox3D;
  return proto.apollo.perception.inference.BBox3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.BBox3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.BBox3D}
 */
proto.apollo.perception.inference.BBox3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setH(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setL(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.BBox3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.BBox3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.BBox3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BBox3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional float h = 1;
 * @return {number}
 */
proto.apollo.perception.inference.BBox3D.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.setH = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.clearH = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BBox3D.prototype.hasH = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float w = 2;
 * @return {number}
 */
proto.apollo.perception.inference.BBox3D.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.setW = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.clearW = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BBox3D.prototype.hasW = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float l = 3;
 * @return {number}
 */
proto.apollo.perception.inference.BBox3D.prototype.getL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.setL = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.clearL = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BBox3D.prototype.hasL = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float x = 4;
 * @return {number}
 */
proto.apollo.perception.inference.BBox3D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.setX = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.clearX = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BBox3D.prototype.hasX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float y = 5;
 * @return {number}
 */
proto.apollo.perception.inference.BBox3D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.setY = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.clearY = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BBox3D.prototype.hasY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float z = 6;
 * @return {number}
 */
proto.apollo.perception.inference.BBox3D.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.clearZ = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BBox3D.prototype.hasZ = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float alpha = 7;
 * @return {number}
 */
proto.apollo.perception.inference.BBox3D.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.setAlpha = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BBox3D} returns this
 */
proto.apollo.perception.inference.BBox3D.prototype.clearAlpha = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BBox3D.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.Annotation.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.Annotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.Annotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.Annotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    instanceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bbox: (f = msg.getBbox()) && proto.apollo.perception.inference.NormalizedBBox.toObject(includeInstance, f),
    bbox3d: (f = msg.getBbox3d()) && proto.apollo.perception.inference.BBox3D.toObject(includeInstance, f),
    frontBbox: (f = msg.getFrontBbox()) && proto.apollo.perception.inference.NormalizedBBox.toObject(includeInstance, f),
    rearBbox: (f = msg.getRearBbox()) && proto.apollo.perception.inference.NormalizedBBox.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Annotation as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.Annotation.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.instanceId;

  /** @type {?|undefined} */
  this.bbox;

  /** @type {?|undefined} */
  this.bbox3d;

  /** @type {?|undefined} */
  this.frontBbox;

  /** @type {?|undefined} */
  this.rearBbox;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.Annotation.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.Annotation}
 */
proto.apollo.perception.inference.Annotation.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.Annotation();
  obj.instanceId != null && jspb.Message.setField(msg, 1, obj.instanceId);
  obj.bbox && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.inference.NormalizedBBox.fromObject(obj.bbox));
  obj.bbox3d && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.inference.BBox3D.fromObject(obj.bbox3d));
  obj.frontBbox && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.inference.NormalizedBBox.fromObject(obj.frontBbox));
  obj.rearBbox && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.perception.inference.NormalizedBBox.fromObject(obj.rearBbox));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.Annotation}
 */
proto.apollo.perception.inference.Annotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.Annotation;
  return proto.apollo.perception.inference.Annotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.Annotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.Annotation}
 */
proto.apollo.perception.inference.Annotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstanceId(value);
      break;
    case 2:
      var value = new proto.apollo.perception.inference.NormalizedBBox;
      reader.readMessage(value,proto.apollo.perception.inference.NormalizedBBox.deserializeBinaryFromReader);
      msg.setBbox(value);
      break;
    case 3:
      var value = new proto.apollo.perception.inference.BBox3D;
      reader.readMessage(value,proto.apollo.perception.inference.BBox3D.deserializeBinaryFromReader);
      msg.setBbox3d(value);
      break;
    case 4:
      var value = new proto.apollo.perception.inference.NormalizedBBox;
      reader.readMessage(value,proto.apollo.perception.inference.NormalizedBBox.deserializeBinaryFromReader);
      msg.setFrontBbox(value);
      break;
    case 5:
      var value = new proto.apollo.perception.inference.NormalizedBBox;
      reader.readMessage(value,proto.apollo.perception.inference.NormalizedBBox.deserializeBinaryFromReader);
      msg.setRearBbox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.Annotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.Annotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.Annotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.Annotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBbox();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.inference.NormalizedBBox.serializeBinaryToWriter
    );
  }
  f = message.getBbox3d();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.inference.BBox3D.serializeBinaryToWriter
    );
  }
  f = message.getFrontBbox();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.inference.NormalizedBBox.serializeBinaryToWriter
    );
  }
  f = message.getRearBbox();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.perception.inference.NormalizedBBox.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 instance_id = 1;
 * @return {number}
 */
proto.apollo.perception.inference.Annotation.prototype.getInstanceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.Annotation} returns this
 */
proto.apollo.perception.inference.Annotation.prototype.setInstanceId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.Annotation} returns this
 */
proto.apollo.perception.inference.Annotation.prototype.clearInstanceId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Annotation.prototype.hasInstanceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NormalizedBBox bbox = 2;
 * @return {?proto.apollo.perception.inference.NormalizedBBox}
 */
proto.apollo.perception.inference.Annotation.prototype.getBbox = function() {
  return /** @type{?proto.apollo.perception.inference.NormalizedBBox} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NormalizedBBox, 2));
};


/**
 * @param {?proto.apollo.perception.inference.NormalizedBBox|undefined} value
 * @return {!proto.apollo.perception.inference.Annotation} returns this
*/
proto.apollo.perception.inference.Annotation.prototype.setBbox = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.Annotation} returns this
 */
proto.apollo.perception.inference.Annotation.prototype.clearBbox = function() {
  return this.setBbox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Annotation.prototype.hasBbox = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BBox3D bbox3d = 3;
 * @return {?proto.apollo.perception.inference.BBox3D}
 */
proto.apollo.perception.inference.Annotation.prototype.getBbox3d = function() {
  return /** @type{?proto.apollo.perception.inference.BBox3D} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.BBox3D, 3));
};


/**
 * @param {?proto.apollo.perception.inference.BBox3D|undefined} value
 * @return {!proto.apollo.perception.inference.Annotation} returns this
*/
proto.apollo.perception.inference.Annotation.prototype.setBbox3d = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.Annotation} returns this
 */
proto.apollo.perception.inference.Annotation.prototype.clearBbox3d = function() {
  return this.setBbox3d(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Annotation.prototype.hasBbox3d = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NormalizedBBox front_bbox = 4;
 * @return {?proto.apollo.perception.inference.NormalizedBBox}
 */
proto.apollo.perception.inference.Annotation.prototype.getFrontBbox = function() {
  return /** @type{?proto.apollo.perception.inference.NormalizedBBox} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NormalizedBBox, 4));
};


/**
 * @param {?proto.apollo.perception.inference.NormalizedBBox|undefined} value
 * @return {!proto.apollo.perception.inference.Annotation} returns this
*/
proto.apollo.perception.inference.Annotation.prototype.setFrontBbox = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.Annotation} returns this
 */
proto.apollo.perception.inference.Annotation.prototype.clearFrontBbox = function() {
  return this.setFrontBbox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Annotation.prototype.hasFrontBbox = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NormalizedBBox rear_bbox = 5;
 * @return {?proto.apollo.perception.inference.NormalizedBBox}
 */
proto.apollo.perception.inference.Annotation.prototype.getRearBbox = function() {
  return /** @type{?proto.apollo.perception.inference.NormalizedBBox} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NormalizedBBox, 5));
};


/**
 * @param {?proto.apollo.perception.inference.NormalizedBBox|undefined} value
 * @return {!proto.apollo.perception.inference.Annotation} returns this
*/
proto.apollo.perception.inference.Annotation.prototype.setRearBbox = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.Annotation} returns this
 */
proto.apollo.perception.inference.Annotation.prototype.clearRearBbox = function() {
  return this.setRearBbox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.Annotation.prototype.hasRearBbox = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.AnnotationGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.AnnotationGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.AnnotationGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnnotationGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupLabel: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    annotationList: jspb.Message.toObjectList(msg.getAnnotationList(),
    proto.apollo.perception.inference.Annotation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AnnotationGroup as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.AnnotationGroup.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.groupLabel;

  /** @type {?|undefined} */
  this.annotationList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.AnnotationGroup.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.AnnotationGroup}
 */
proto.apollo.perception.inference.AnnotationGroup.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.AnnotationGroup();
  obj.groupLabel != null && jspb.Message.setField(msg, 1, obj.groupLabel);
  obj.annotationList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.annotationList.map(
          proto.apollo.perception.inference.Annotation.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.AnnotationGroup}
 */
proto.apollo.perception.inference.AnnotationGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.AnnotationGroup;
  return proto.apollo.perception.inference.AnnotationGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.AnnotationGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.AnnotationGroup}
 */
proto.apollo.perception.inference.AnnotationGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupLabel(value);
      break;
    case 2:
      var value = new proto.apollo.perception.inference.Annotation;
      reader.readMessage(value,proto.apollo.perception.inference.Annotation.deserializeBinaryFromReader);
      msg.addAnnotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.AnnotationGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.AnnotationGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnnotationGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnnotationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.perception.inference.Annotation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 group_label = 1;
 * @return {number}
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.getGroupLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.AnnotationGroup} returns this
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.setGroupLabel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AnnotationGroup} returns this
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.clearGroupLabel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.hasGroupLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Annotation annotation = 2;
 * @return {!Array<!proto.apollo.perception.inference.Annotation>}
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.getAnnotationList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.Annotation, 2));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.Annotation>} value
 * @return {!proto.apollo.perception.inference.AnnotationGroup} returns this
*/
proto.apollo.perception.inference.AnnotationGroup.prototype.setAnnotationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.perception.inference.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.Annotation}
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.addAnnotation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.perception.inference.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.AnnotationGroup} returns this
 */
proto.apollo.perception.inference.AnnotationGroup.prototype.clearAnnotationList = function() {
  return this.setAnnotationList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.AnnotatedDatum.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.AnnotatedDatum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.AnnotatedDatum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnnotatedDatum.toObject = function(includeInstance, msg) {
  var f, obj = {
    datum: (f = msg.getDatum()) && proto.apollo.perception.inference.Datum.toObject(includeInstance, f),
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    annotationGroupList: jspb.Message.toObjectList(msg.getAnnotationGroupList(),
    proto.apollo.perception.inference.AnnotationGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AnnotatedDatum as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.AnnotatedDatum.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.datum;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.annotationGroupList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.AnnotatedDatum.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.AnnotatedDatum}
 */
proto.apollo.perception.inference.AnnotatedDatum.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.AnnotatedDatum();
  obj.datum && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.inference.Datum.fromObject(obj.datum));
  obj.type != null && jspb.Message.setField(msg, 2, obj.type);
  obj.annotationGroupList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.annotationGroupList.map(
          proto.apollo.perception.inference.AnnotationGroup.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.AnnotatedDatum}
 */
proto.apollo.perception.inference.AnnotatedDatum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.AnnotatedDatum;
  return proto.apollo.perception.inference.AnnotatedDatum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.AnnotatedDatum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.AnnotatedDatum}
 */
proto.apollo.perception.inference.AnnotatedDatum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.Datum;
      reader.readMessage(value,proto.apollo.perception.inference.Datum.deserializeBinaryFromReader);
      msg.setDatum(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.apollo.perception.inference.AnnotationGroup;
      reader.readMessage(value,proto.apollo.perception.inference.AnnotationGroup.deserializeBinaryFromReader);
      msg.addAnnotationGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.AnnotatedDatum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.AnnotatedDatum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnnotatedDatum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatum();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.inference.Datum.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAnnotationGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.perception.inference.AnnotationGroup.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.AnnotatedDatum.AnnotationType = {
  BBOX: 0,
  BBOX3D: 1,
  BBOX3DFR: 2
};

/**
 * optional Datum datum = 1;
 * @return {?proto.apollo.perception.inference.Datum}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.getDatum = function() {
  return /** @type{?proto.apollo.perception.inference.Datum} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.Datum, 1));
};


/**
 * @param {?proto.apollo.perception.inference.Datum|undefined} value
 * @return {!proto.apollo.perception.inference.AnnotatedDatum} returns this
*/
proto.apollo.perception.inference.AnnotatedDatum.prototype.setDatum = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.AnnotatedDatum} returns this
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.clearDatum = function() {
  return this.setDatum(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.hasDatum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AnnotationType type = 2;
 * @return {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} value
 * @return {!proto.apollo.perception.inference.AnnotatedDatum} returns this
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AnnotatedDatum} returns this
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated AnnotationGroup annotation_group = 3;
 * @return {!Array<!proto.apollo.perception.inference.AnnotationGroup>}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.getAnnotationGroupList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.AnnotationGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.AnnotationGroup, 3));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.AnnotationGroup>} value
 * @return {!proto.apollo.perception.inference.AnnotatedDatum} returns this
*/
proto.apollo.perception.inference.AnnotatedDatum.prototype.setAnnotationGroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.perception.inference.AnnotationGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.AnnotationGroup}
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.addAnnotationGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.perception.inference.AnnotationGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.AnnotatedDatum} returns this
 */
proto.apollo.perception.inference.AnnotatedDatum.prototype.clearAnnotationGroupList = function() {
  return this.setAnnotationGroupList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.FillerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.FillerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.FillerParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.FillerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, "constant"),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0),
    mean: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    std: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 1.0),
    sparse: jspb.Message.getFieldWithDefault(msg, 7, -1),
    varianceNorm: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FillerParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.FillerParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.value;

  /** @type {?|undefined} */
  this.min;

  /** @type {?|undefined} */
  this.max;

  /** @type {?|undefined} */
  this.mean;

  /** @type {?|undefined} */
  this.std;

  /** @type {?|undefined} */
  this.sparse;

  /** @type {?|undefined} */
  this.varianceNorm;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.FillerParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.FillerParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.FillerParameter();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.value != null && jspb.Message.setField(msg, 2, obj.value);
  obj.min != null && jspb.Message.setField(msg, 3, obj.min);
  obj.max != null && jspb.Message.setField(msg, 4, obj.max);
  obj.mean != null && jspb.Message.setField(msg, 5, obj.mean);
  obj.std != null && jspb.Message.setField(msg, 6, obj.std);
  obj.sparse != null && jspb.Message.setField(msg, 7, obj.sparse);
  obj.varianceNorm != null && jspb.Message.setField(msg, 8, obj.varianceNorm);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.FillerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.FillerParameter;
  return proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.FillerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMean(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStd(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSparse(value);
      break;
    case 8:
      var value = /** @type {!proto.apollo.perception.inference.FillerParameter.VarianceNorm} */ (reader.readEnum());
      msg.setVarianceNorm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.FillerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.FillerParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.FillerParameter.VarianceNorm} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.FillerParameter.VarianceNorm = {
  FAN_IN: 0,
  FAN_OUT: 1,
  AVERAGE: 2
};

/**
 * optional string type = 1;
 * @return {string}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "constant"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float min = 3;
 * @return {number}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearMin = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasMin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float max = 4;
 * @return {number}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearMax = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasMax = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float mean = 5;
 * @return {number}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getMean = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setMean = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearMean = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasMean = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float std = 6;
 * @return {number}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getStd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setStd = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearStd = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasStd = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 sparse = 7;
 * @return {number}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getSparse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setSparse = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearSparse = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasSparse = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional VarianceNorm variance_norm = 8;
 * @return {!proto.apollo.perception.inference.FillerParameter.VarianceNorm}
 */
proto.apollo.perception.inference.FillerParameter.prototype.getVarianceNorm = function() {
  return /** @type {!proto.apollo.perception.inference.FillerParameter.VarianceNorm} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.apollo.perception.inference.FillerParameter.VarianceNorm} value
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.setVarianceNorm = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FillerParameter} returns this
 */
proto.apollo.perception.inference.FillerParameter.prototype.clearVarianceNorm = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FillerParameter.prototype.hasVarianceNorm = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.NetParameter.repeatedFields_ = [3,8,4,100,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NetParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NetParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NetParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NetParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    inputList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    inputShapeList: jspb.Message.toObjectList(msg.getInputShapeList(),
    proto.apollo.perception.inference.BlobShape.toObject, includeInstance),
    inputDimList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    forceBackward: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    state: (f = msg.getState()) && proto.apollo.perception.inference.NetState.toObject(includeInstance, f),
    debugInfo: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    layerList: jspb.Message.toObjectList(msg.getLayerList(),
    proto.apollo.perception.inference.LayerParameter.toObject, includeInstance),
    layersList: jspb.Message.toObjectList(msg.getLayersList(),
    proto.apollo.perception.inference.V1LayerParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NetParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NetParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.inputList;

  /** @type {?|undefined} */
  this.inputShapeList;

  /** @type {?|undefined} */
  this.inputDimList;

  /** @type {?|undefined} */
  this.forceBackward;

  /** @type {?|undefined} */
  this.state;

  /** @type {?|undefined} */
  this.debugInfo;

  /** @type {?|undefined} */
  this.layerList;

  /** @type {?|undefined} */
  this.layersList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NetParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NetParameter}
 */
proto.apollo.perception.inference.NetParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NetParameter();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.inputList != null && jspb.Message.setField(msg, 3, obj.inputList);
  obj.inputShapeList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.inputShapeList.map(
          proto.apollo.perception.inference.BlobShape.fromObject));
  obj.inputDimList != null && jspb.Message.setField(msg, 4, obj.inputDimList);
  obj.forceBackward != null && jspb.Message.setField(msg, 5, obj.forceBackward);
  obj.state && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.perception.inference.NetState.fromObject(obj.state));
  obj.debugInfo != null && jspb.Message.setField(msg, 7, obj.debugInfo);
  obj.layerList && jspb.Message.setRepeatedWrapperField(
      msg, 100, obj.layerList.map(
          proto.apollo.perception.inference.LayerParameter.fromObject));
  obj.layersList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.layersList.map(
          proto.apollo.perception.inference.V1LayerParameter.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NetParameter}
 */
proto.apollo.perception.inference.NetParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NetParameter;
  return proto.apollo.perception.inference.NetParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NetParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NetParameter}
 */
proto.apollo.perception.inference.NetParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addInput(value);
      break;
    case 8:
      var value = new proto.apollo.perception.inference.BlobShape;
      reader.readMessage(value,proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader);
      msg.addInputShape(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInputDim(values[i]);
      }
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceBackward(value);
      break;
    case 6:
      var value = new proto.apollo.perception.inference.NetState;
      reader.readMessage(value,proto.apollo.perception.inference.NetState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugInfo(value);
      break;
    case 100:
      var value = new proto.apollo.perception.inference.LayerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.LayerParameter.deserializeBinaryFromReader);
      msg.addLayer(value);
      break;
    case 2:
      var value = new proto.apollo.perception.inference.V1LayerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.V1LayerParameter.deserializeBinaryFromReader);
      msg.addLayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NetParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NetParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NetParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NetParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInputList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getInputShapeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter
    );
  }
  f = message.getInputDimList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.perception.inference.NetState.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      100,
      f,
      proto.apollo.perception.inference.LayerParameter.serializeBinaryToWriter
    );
  }
  f = message.getLayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.perception.inference.V1LayerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.inference.NetParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string input = 3;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.NetParameter.prototype.getInputList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.setInputList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.addInput = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearInputList = function() {
  return this.setInputList([]);
};


/**
 * repeated BlobShape input_shape = 8;
 * @return {!Array<!proto.apollo.perception.inference.BlobShape>}
 */
proto.apollo.perception.inference.NetParameter.prototype.getInputShapeList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.BlobShape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.BlobShape, 8));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.BlobShape>} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
*/
proto.apollo.perception.inference.NetParameter.prototype.setInputShapeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.perception.inference.BlobShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.NetParameter.prototype.addInputShape = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.perception.inference.BlobShape, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearInputShapeList = function() {
  return this.setInputShapeList([]);
};


/**
 * repeated int32 input_dim = 4;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.NetParameter.prototype.getInputDimList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.setInputDimList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.addInputDim = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearInputDimList = function() {
  return this.setInputDimList([]);
};


/**
 * optional bool force_backward = 5;
 * @return {boolean}
 */
proto.apollo.perception.inference.NetParameter.prototype.getForceBackward = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.setForceBackward = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearForceBackward = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetParameter.prototype.hasForceBackward = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NetState state = 6;
 * @return {?proto.apollo.perception.inference.NetState}
 */
proto.apollo.perception.inference.NetParameter.prototype.getState = function() {
  return /** @type{?proto.apollo.perception.inference.NetState} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NetState, 6));
};


/**
 * @param {?proto.apollo.perception.inference.NetState|undefined} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
*/
proto.apollo.perception.inference.NetParameter.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetParameter.prototype.hasState = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool debug_info = 7;
 * @return {boolean}
 */
proto.apollo.perception.inference.NetParameter.prototype.getDebugInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.setDebugInfo = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearDebugInfo = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetParameter.prototype.hasDebugInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated LayerParameter layer = 100;
 * @return {!Array<!proto.apollo.perception.inference.LayerParameter>}
 */
proto.apollo.perception.inference.NetParameter.prototype.getLayerList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.LayerParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.LayerParameter, 100));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.LayerParameter>} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
*/
proto.apollo.perception.inference.NetParameter.prototype.setLayerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 100, value);
};


/**
 * @param {!proto.apollo.perception.inference.LayerParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.LayerParameter}
 */
proto.apollo.perception.inference.NetParameter.prototype.addLayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 100, opt_value, proto.apollo.perception.inference.LayerParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearLayerList = function() {
  return this.setLayerList([]);
};


/**
 * repeated V1LayerParameter layers = 2;
 * @return {!Array<!proto.apollo.perception.inference.V1LayerParameter>}
 */
proto.apollo.perception.inference.NetParameter.prototype.getLayersList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.V1LayerParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.V1LayerParameter, 2));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.V1LayerParameter>} value
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
*/
proto.apollo.perception.inference.NetParameter.prototype.setLayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.perception.inference.V1LayerParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter}
 */
proto.apollo.perception.inference.NetParameter.prototype.addLayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.perception.inference.V1LayerParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetParameter} returns this
 */
proto.apollo.perception.inference.NetParameter.prototype.clearLayersList = function() {
  return this.setLayersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.NetState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NetState.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NetState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NetState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NetState.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, 1),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stageList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NetState as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NetState.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.phase;

  /** @type {?|undefined} */
  this.level;

  /** @type {?|undefined} */
  this.stageList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NetState.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NetState}
 */
proto.apollo.perception.inference.NetState.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NetState();
  obj.phase != null && jspb.Message.setField(msg, 1, obj.phase);
  obj.level != null && jspb.Message.setField(msg, 2, obj.level);
  obj.stageList != null && jspb.Message.setField(msg, 3, obj.stageList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NetState}
 */
proto.apollo.perception.inference.NetState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NetState;
  return proto.apollo.perception.inference.NetState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NetState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NetState}
 */
proto.apollo.perception.inference.NetState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NetState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NetState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NetState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NetState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.Phase} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional Phase phase = 1;
 * @return {!proto.apollo.perception.inference.Phase}
 */
proto.apollo.perception.inference.NetState.prototype.getPhase = function() {
  return /** @type {!proto.apollo.perception.inference.Phase} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.perception.inference.Phase} value
 * @return {!proto.apollo.perception.inference.NetState} returns this
 */
proto.apollo.perception.inference.NetState.prototype.setPhase = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetState} returns this
 */
proto.apollo.perception.inference.NetState.prototype.clearPhase = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetState.prototype.hasPhase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.apollo.perception.inference.NetState.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NetState} returns this
 */
proto.apollo.perception.inference.NetState.prototype.setLevel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetState} returns this
 */
proto.apollo.perception.inference.NetState.prototype.clearLevel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetState.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string stage = 3;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.NetState.prototype.getStageList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.NetState} returns this
 */
proto.apollo.perception.inference.NetState.prototype.setStageList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetState} returns this
 */
proto.apollo.perception.inference.NetState.prototype.addStage = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetState} returns this
 */
proto.apollo.perception.inference.NetState.prototype.clearStageList = function() {
  return this.setStageList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.NetStateRule.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NetStateRule.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NetStateRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NetStateRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NetStateRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    minLevel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    maxLevel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    stageList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    notStageList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NetStateRule as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NetStateRule.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.phase;

  /** @type {?|undefined} */
  this.minLevel;

  /** @type {?|undefined} */
  this.maxLevel;

  /** @type {?|undefined} */
  this.stageList;

  /** @type {?|undefined} */
  this.notStageList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NetStateRule.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NetStateRule}
 */
proto.apollo.perception.inference.NetStateRule.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NetStateRule();
  obj.phase != null && jspb.Message.setField(msg, 1, obj.phase);
  obj.minLevel != null && jspb.Message.setField(msg, 2, obj.minLevel);
  obj.maxLevel != null && jspb.Message.setField(msg, 3, obj.maxLevel);
  obj.stageList != null && jspb.Message.setField(msg, 4, obj.stageList);
  obj.notStageList != null && jspb.Message.setField(msg, 5, obj.notStageList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NetStateRule}
 */
proto.apollo.perception.inference.NetStateRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NetStateRule;
  return proto.apollo.perception.inference.NetStateRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NetStateRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NetStateRule}
 */
proto.apollo.perception.inference.NetStateRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addStage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addNotStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NetStateRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NetStateRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NetStateRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NetStateRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.Phase} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getNotStageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional Phase phase = 1;
 * @return {!proto.apollo.perception.inference.Phase}
 */
proto.apollo.perception.inference.NetStateRule.prototype.getPhase = function() {
  return /** @type {!proto.apollo.perception.inference.Phase} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.inference.Phase} value
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.setPhase = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.clearPhase = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetStateRule.prototype.hasPhase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 min_level = 2;
 * @return {number}
 */
proto.apollo.perception.inference.NetStateRule.prototype.getMinLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.setMinLevel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.clearMinLevel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetStateRule.prototype.hasMinLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 max_level = 3;
 * @return {number}
 */
proto.apollo.perception.inference.NetStateRule.prototype.getMaxLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.setMaxLevel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.clearMaxLevel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NetStateRule.prototype.hasMaxLevel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string stage = 4;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.NetStateRule.prototype.getStageList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.setStageList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.addStage = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.clearStageList = function() {
  return this.setStageList([]);
};


/**
 * repeated string not_stage = 5;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.NetStateRule.prototype.getNotStageList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.setNotStageList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.addNotStage = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NetStateRule} returns this
 */
proto.apollo.perception.inference.NetStateRule.prototype.clearNotStageList = function() {
  return this.setNotStageList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ParamSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ParamSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ParamSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ParamSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    shareMode: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lrMult: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    decayMult: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ParamSpec as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ParamSpec.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.shareMode;

  /** @type {?|undefined} */
  this.lrMult;

  /** @type {?|undefined} */
  this.decayMult;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ParamSpec.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ParamSpec}
 */
proto.apollo.perception.inference.ParamSpec.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ParamSpec();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.shareMode != null && jspb.Message.setField(msg, 2, obj.shareMode);
  obj.lrMult != null && jspb.Message.setField(msg, 3, obj.lrMult);
  obj.decayMult != null && jspb.Message.setField(msg, 4, obj.decayMult);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ParamSpec}
 */
proto.apollo.perception.inference.ParamSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ParamSpec;
  return proto.apollo.perception.inference.ParamSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ParamSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ParamSpec}
 */
proto.apollo.perception.inference.ParamSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.perception.inference.ParamSpec.DimCheckMode} */ (reader.readEnum());
      msg.setShareMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLrMult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDecayMult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ParamSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ParamSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ParamSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ParamSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.ParamSpec.DimCheckMode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.ParamSpec.DimCheckMode = {
  STRICT: 0,
  PERMISSIVE: 1
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.inference.ParamSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ParamSpec.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DimCheckMode share_mode = 2;
 * @return {!proto.apollo.perception.inference.ParamSpec.DimCheckMode}
 */
proto.apollo.perception.inference.ParamSpec.prototype.getShareMode = function() {
  return /** @type {!proto.apollo.perception.inference.ParamSpec.DimCheckMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.perception.inference.ParamSpec.DimCheckMode} value
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.setShareMode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.clearShareMode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ParamSpec.prototype.hasShareMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float lr_mult = 3;
 * @return {number}
 */
proto.apollo.perception.inference.ParamSpec.prototype.getLrMult = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.setLrMult = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.clearLrMult = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ParamSpec.prototype.hasLrMult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float decay_mult = 4;
 * @return {number}
 */
proto.apollo.perception.inference.ParamSpec.prototype.getDecayMult = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.setDecayMult = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ParamSpec} returns this
 */
proto.apollo.perception.inference.ParamSpec.prototype.clearDecayMult = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ParamSpec.prototype.hasDecayMult = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.LayerParameter.repeatedFields_ = [3,4,5,6,7,11,8,9,1707111,1707112];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.LayerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.LayerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.LayerParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LayerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    bottomList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    topList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    phase: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    lossWeightList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    paramList: jspb.Message.toObjectList(msg.getParamList(),
    proto.apollo.perception.inference.ParamSpec.toObject, includeInstance),
    blobsList: jspb.Message.toObjectList(msg.getBlobsList(),
    proto.apollo.perception.inference.BlobProto.toObject, includeInstance),
    propagateDownList: (f = jspb.Message.getRepeatedBooleanField(msg, 11)) == null ? undefined : f,
    includeList: jspb.Message.toObjectList(msg.getIncludeList(),
    proto.apollo.perception.inference.NetStateRule.toObject, includeInstance),
    excludeList: jspb.Message.toObjectList(msg.getExcludeList(),
    proto.apollo.perception.inference.NetStateRule.toObject, includeInstance),
    transformParam: (f = msg.getTransformParam()) && proto.apollo.perception.inference.TransformationParameter.toObject(includeInstance, f),
    lossParam: (f = msg.getLossParam()) && proto.apollo.perception.inference.LossParameter.toObject(includeInstance, f),
    accuracyParam: (f = msg.getAccuracyParam()) && proto.apollo.perception.inference.AccuracyParameter.toObject(includeInstance, f),
    annotatedDataParam: (f = msg.getAnnotatedDataParam()) && proto.apollo.perception.inference.AnnotatedDataParameter.toObject(includeInstance, f),
    argmaxParam: (f = msg.getArgmaxParam()) && proto.apollo.perception.inference.ArgMaxParameter.toObject(includeInstance, f),
    batchNormParam: (f = msg.getBatchNormParam()) && proto.apollo.perception.inference.BatchNormParameter.toObject(includeInstance, f),
    bboxRegParam: (f = msg.getBboxRegParam()) && proto.apollo.perception.inference.BBoxRegParameter.toObject(includeInstance, f),
    biasParam: (f = msg.getBiasParam()) && proto.apollo.perception.inference.BiasParameter.toObject(includeInstance, f),
    concatParam: (f = msg.getConcatParam()) && proto.apollo.perception.inference.ConcatParameter.toObject(includeInstance, f),
    contrastiveLossParam: (f = msg.getContrastiveLossParam()) && proto.apollo.perception.inference.ContrastiveLossParameter.toObject(includeInstance, f),
    convolutionParam: (f = msg.getConvolutionParam()) && proto.apollo.perception.inference.ConvolutionParameter.toObject(includeInstance, f),
    cropParam: (f = msg.getCropParam()) && proto.apollo.perception.inference.CropParameter.toObject(includeInstance, f),
    dataParam: (f = msg.getDataParam()) && proto.apollo.perception.inference.DataParameter.toObject(includeInstance, f),
    detectionEvaluateParam: (f = msg.getDetectionEvaluateParam()) && proto.apollo.perception.inference.DetectionEvaluateParameter.toObject(includeInstance, f),
    detectionOutputParam: (f = msg.getDetectionOutputParam()) && proto.apollo.perception.inference.DetectionOutputParameter.toObject(includeInstance, f),
    detectionOutputSsdParam: (f = msg.getDetectionOutputSsdParam()) && proto.apollo.perception.inference.DetectionOutputSSDParameter.toObject(includeInstance, f),
    dfmbPsroiPoolingParam: (f = msg.getDfmbPsroiPoolingParam()) && proto.apollo.perception.inference.DFMBPSROIAlignParameter.toObject(includeInstance, f),
    dropoutParam: (f = msg.getDropoutParam()) && proto.apollo.perception.inference.DropoutParameter.toObject(includeInstance, f),
    dummyDataParam: (f = msg.getDummyDataParam()) && proto.apollo.perception.inference.DummyDataParameter.toObject(includeInstance, f),
    eltwiseParam: (f = msg.getEltwiseParam()) && proto.apollo.perception.inference.EltwiseParameter.toObject(includeInstance, f),
    eluParam: (f = msg.getEluParam()) && proto.apollo.perception.inference.ELUParameter.toObject(includeInstance, f),
    embedParam: (f = msg.getEmbedParam()) && proto.apollo.perception.inference.EmbedParameter.toObject(includeInstance, f),
    expParam: (f = msg.getExpParam()) && proto.apollo.perception.inference.ExpParameter.toObject(includeInstance, f),
    flattenParam: (f = msg.getFlattenParam()) && proto.apollo.perception.inference.FlattenParameter.toObject(includeInstance, f),
    hdf5DataParam: (f = msg.getHdf5DataParam()) && proto.apollo.perception.inference.HDF5DataParameter.toObject(includeInstance, f),
    hdf5OutputParam: (f = msg.getHdf5OutputParam()) && proto.apollo.perception.inference.HDF5OutputParameter.toObject(includeInstance, f),
    hingeLossParam: (f = msg.getHingeLossParam()) && proto.apollo.perception.inference.HingeLossParameter.toObject(includeInstance, f),
    imageDataParam: (f = msg.getImageDataParam()) && proto.apollo.perception.inference.ImageDataParameter.toObject(includeInstance, f),
    yoloDataParamList: jspb.Message.toObjectList(msg.getYoloDataParamList(),
    proto.apollo.perception.inference.ImageDataParameter.toObject, includeInstance),
    dataProbParamList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1707112)) == null ? undefined : f,
    infogainLossParam: (f = msg.getInfogainLossParam()) && proto.apollo.perception.inference.InfogainLossParameter.toObject(includeInstance, f),
    innerProductParam: (f = msg.getInnerProductParam()) && proto.apollo.perception.inference.InnerProductParameter.toObject(includeInstance, f),
    inputParam: (f = msg.getInputParam()) && proto.apollo.perception.inference.InputParameter.toObject(includeInstance, f),
    logParam: (f = msg.getLogParam()) && proto.apollo.perception.inference.LogParameter.toObject(includeInstance, f),
    lrnParam: (f = msg.getLrnParam()) && proto.apollo.perception.inference.LRNParameter.toObject(includeInstance, f),
    memoryDataParam: (f = msg.getMemoryDataParam()) && proto.apollo.perception.inference.MemoryDataParameter.toObject(includeInstance, f),
    multiboxLossParam: (f = msg.getMultiboxLossParam()) && proto.apollo.perception.inference.MultiBoxLossParameter.toObject(includeInstance, f),
    regionParam: (f = msg.getRegionParam()) && proto.apollo.perception.inference.RegionParameter.toObject(includeInstance, f),
    regionOutputParam: (f = msg.getRegionOutputParam()) && proto.apollo.perception.inference.RegionOutputParameter.toObject(includeInstance, f),
    regionProposalParam: (f = msg.getRegionProposalParam()) && proto.apollo.perception.inference.RegionProposalParameter.toObject(includeInstance, f),
    yoloTargetParam: (f = msg.getYoloTargetParam()) && proto.apollo.perception.inference.YoloTargetParameter.toObject(includeInstance, f),
    yoloAnchorsParam: (f = msg.getYoloAnchorsParam()) && proto.apollo.perception.inference.YoloAnchorsParameter.toObject(includeInstance, f),
    yoloLossParam: (f = msg.getYoloLossParam()) && proto.apollo.perception.inference.YoloLossParameter.toObject(includeInstance, f),
    yoloDumpParam: (f = msg.getYoloDumpParam()) && proto.apollo.perception.inference.YoloDumpParameter.toObject(includeInstance, f),
    paddingParam: (f = msg.getPaddingParam()) && proto.apollo.perception.inference.PaddingParameter.toObject(includeInstance, f),
    reorgParam: (f = msg.getReorgParam()) && proto.apollo.perception.inference.ReorgParameter.toObject(includeInstance, f),
    mvnParam: (f = msg.getMvnParam()) && proto.apollo.perception.inference.MVNParameter.toObject(includeInstance, f),
    normParam: (f = msg.getNormParam()) && proto.apollo.perception.inference.NormalizeParameter.toObject(includeInstance, f),
    parameterParam: (f = msg.getParameterParam()) && proto.apollo.perception.inference.ParameterParameter.toObject(includeInstance, f),
    permuteParam: (f = msg.getPermuteParam()) && proto.apollo.perception.inference.PermuteParameter.toObject(includeInstance, f),
    poolingParam: (f = msg.getPoolingParam()) && proto.apollo.perception.inference.PoolingParameter.toObject(includeInstance, f),
    powerParam: (f = msg.getPowerParam()) && proto.apollo.perception.inference.PowerParameter.toObject(includeInstance, f),
    preluParam: (f = msg.getPreluParam()) && proto.apollo.perception.inference.PReLUParameter.toObject(includeInstance, f),
    priorBoxParam: (f = msg.getPriorBoxParam()) && proto.apollo.perception.inference.PriorBoxParameter.toObject(includeInstance, f),
    pythonParam: (f = msg.getPythonParam()) && proto.apollo.perception.inference.PythonParameter.toObject(includeInstance, f),
    recurrentParam: (f = msg.getRecurrentParam()) && proto.apollo.perception.inference.RecurrentParameter.toObject(includeInstance, f),
    reductionParam: (f = msg.getReductionParam()) && proto.apollo.perception.inference.ReductionParameter.toObject(includeInstance, f),
    reluParam: (f = msg.getReluParam()) && proto.apollo.perception.inference.ReLUParameter.toObject(includeInstance, f),
    reshapeParam: (f = msg.getReshapeParam()) && proto.apollo.perception.inference.ReshapeParameter.toObject(includeInstance, f),
    roiPoolingParam: (f = msg.getRoiPoolingParam()) && proto.apollo.perception.inference.ROIPoolingParameter.toObject(includeInstance, f),
    scaleParam: (f = msg.getScaleParam()) && proto.apollo.perception.inference.ScaleParameter.toObject(includeInstance, f),
    sigmoidParam: (f = msg.getSigmoidParam()) && proto.apollo.perception.inference.SigmoidParameter.toObject(includeInstance, f),
    softmaxParam: (f = msg.getSoftmaxParam()) && proto.apollo.perception.inference.SoftmaxParameter.toObject(includeInstance, f),
    sppParam: (f = msg.getSppParam()) && proto.apollo.perception.inference.SPPParameter.toObject(includeInstance, f),
    sliceParam: (f = msg.getSliceParam()) && proto.apollo.perception.inference.SliceParameter.toObject(includeInstance, f),
    tanhParam: (f = msg.getTanhParam()) && proto.apollo.perception.inference.TanHParameter.toObject(includeInstance, f),
    thresholdParam: (f = msg.getThresholdParam()) && proto.apollo.perception.inference.ThresholdParameter.toObject(includeInstance, f),
    tileParam: (f = msg.getTileParam()) && proto.apollo.perception.inference.TileParameter.toObject(includeInstance, f),
    videoDataParam: (f = msg.getVideoDataParam()) && proto.apollo.perception.inference.VideoDataParameter.toObject(includeInstance, f),
    windowDataParam: (f = msg.getWindowDataParam()) && proto.apollo.perception.inference.WindowDataParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LayerParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.LayerParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.bottomList;

  /** @type {?|undefined} */
  this.topList;

  /** @type {?|undefined} */
  this.phase;

  /** @type {?|undefined} */
  this.lossWeightList;

  /** @type {?|undefined} */
  this.paramList;

  /** @type {?|undefined} */
  this.blobsList;

  /** @type {?|undefined} */
  this.propagateDownList;

  /** @type {?|undefined} */
  this.includeList;

  /** @type {?|undefined} */
  this.excludeList;

  /** @type {?|undefined} */
  this.transformParam;

  /** @type {?|undefined} */
  this.lossParam;

  /** @type {?|undefined} */
  this.accuracyParam;

  /** @type {?|undefined} */
  this.annotatedDataParam;

  /** @type {?|undefined} */
  this.argmaxParam;

  /** @type {?|undefined} */
  this.batchNormParam;

  /** @type {?|undefined} */
  this.bboxRegParam;

  /** @type {?|undefined} */
  this.biasParam;

  /** @type {?|undefined} */
  this.concatParam;

  /** @type {?|undefined} */
  this.contrastiveLossParam;

  /** @type {?|undefined} */
  this.convolutionParam;

  /** @type {?|undefined} */
  this.cropParam;

  /** @type {?|undefined} */
  this.dataParam;

  /** @type {?|undefined} */
  this.detectionEvaluateParam;

  /** @type {?|undefined} */
  this.detectionOutputParam;

  /** @type {?|undefined} */
  this.detectionOutputSsdParam;

  /** @type {?|undefined} */
  this.dfmbPsroiPoolingParam;

  /** @type {?|undefined} */
  this.dropoutParam;

  /** @type {?|undefined} */
  this.dummyDataParam;

  /** @type {?|undefined} */
  this.eltwiseParam;

  /** @type {?|undefined} */
  this.eluParam;

  /** @type {?|undefined} */
  this.embedParam;

  /** @type {?|undefined} */
  this.expParam;

  /** @type {?|undefined} */
  this.flattenParam;

  /** @type {?|undefined} */
  this.hdf5DataParam;

  /** @type {?|undefined} */
  this.hdf5OutputParam;

  /** @type {?|undefined} */
  this.hingeLossParam;

  /** @type {?|undefined} */
  this.imageDataParam;

  /** @type {?|undefined} */
  this.yoloDataParamList;

  /** @type {?|undefined} */
  this.dataProbParamList;

  /** @type {?|undefined} */
  this.infogainLossParam;

  /** @type {?|undefined} */
  this.innerProductParam;

  /** @type {?|undefined} */
  this.inputParam;

  /** @type {?|undefined} */
  this.logParam;

  /** @type {?|undefined} */
  this.lrnParam;

  /** @type {?|undefined} */
  this.memoryDataParam;

  /** @type {?|undefined} */
  this.multiboxLossParam;

  /** @type {?|undefined} */
  this.regionParam;

  /** @type {?|undefined} */
  this.regionOutputParam;

  /** @type {?|undefined} */
  this.regionProposalParam;

  /** @type {?|undefined} */
  this.yoloTargetParam;

  /** @type {?|undefined} */
  this.yoloAnchorsParam;

  /** @type {?|undefined} */
  this.yoloLossParam;

  /** @type {?|undefined} */
  this.yoloDumpParam;

  /** @type {?|undefined} */
  this.paddingParam;

  /** @type {?|undefined} */
  this.reorgParam;

  /** @type {?|undefined} */
  this.mvnParam;

  /** @type {?|undefined} */
  this.normParam;

  /** @type {?|undefined} */
  this.parameterParam;

  /** @type {?|undefined} */
  this.permuteParam;

  /** @type {?|undefined} */
  this.poolingParam;

  /** @type {?|undefined} */
  this.powerParam;

  /** @type {?|undefined} */
  this.preluParam;

  /** @type {?|undefined} */
  this.priorBoxParam;

  /** @type {?|undefined} */
  this.pythonParam;

  /** @type {?|undefined} */
  this.recurrentParam;

  /** @type {?|undefined} */
  this.reductionParam;

  /** @type {?|undefined} */
  this.reluParam;

  /** @type {?|undefined} */
  this.reshapeParam;

  /** @type {?|undefined} */
  this.roiPoolingParam;

  /** @type {?|undefined} */
  this.scaleParam;

  /** @type {?|undefined} */
  this.sigmoidParam;

  /** @type {?|undefined} */
  this.softmaxParam;

  /** @type {?|undefined} */
  this.sppParam;

  /** @type {?|undefined} */
  this.sliceParam;

  /** @type {?|undefined} */
  this.tanhParam;

  /** @type {?|undefined} */
  this.thresholdParam;

  /** @type {?|undefined} */
  this.tileParam;

  /** @type {?|undefined} */
  this.videoDataParam;

  /** @type {?|undefined} */
  this.windowDataParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.LayerParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.LayerParameter}
 */
proto.apollo.perception.inference.LayerParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.LayerParameter();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.type != null && jspb.Message.setField(msg, 2, obj.type);
  obj.bottomList != null && jspb.Message.setField(msg, 3, obj.bottomList);
  obj.topList != null && jspb.Message.setField(msg, 4, obj.topList);
  obj.phase != null && jspb.Message.setField(msg, 10, obj.phase);
  obj.lossWeightList != null && jspb.Message.setField(msg, 5, obj.lossWeightList);
  obj.paramList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.paramList.map(
          proto.apollo.perception.inference.ParamSpec.fromObject));
  obj.blobsList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.blobsList.map(
          proto.apollo.perception.inference.BlobProto.fromObject));
  obj.propagateDownList != null && jspb.Message.setField(msg, 11, obj.propagateDownList);
  obj.includeList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.includeList.map(
          proto.apollo.perception.inference.NetStateRule.fromObject));
  obj.excludeList && jspb.Message.setRepeatedWrapperField(
      msg, 9, obj.excludeList.map(
          proto.apollo.perception.inference.NetStateRule.fromObject));
  obj.transformParam && jspb.Message.setWrapperField(
      msg, 100, proto.apollo.perception.inference.TransformationParameter.fromObject(obj.transformParam));
  obj.lossParam && jspb.Message.setWrapperField(
      msg, 101, proto.apollo.perception.inference.LossParameter.fromObject(obj.lossParam));
  obj.accuracyParam && jspb.Message.setWrapperField(
      msg, 102, proto.apollo.perception.inference.AccuracyParameter.fromObject(obj.accuracyParam));
  obj.annotatedDataParam && jspb.Message.setWrapperField(
      msg, 200, proto.apollo.perception.inference.AnnotatedDataParameter.fromObject(obj.annotatedDataParam));
  obj.argmaxParam && jspb.Message.setWrapperField(
      msg, 103, proto.apollo.perception.inference.ArgMaxParameter.fromObject(obj.argmaxParam));
  obj.batchNormParam && jspb.Message.setWrapperField(
      msg, 139, proto.apollo.perception.inference.BatchNormParameter.fromObject(obj.batchNormParam));
  obj.bboxRegParam && jspb.Message.setWrapperField(
      msg, 209, proto.apollo.perception.inference.BBoxRegParameter.fromObject(obj.bboxRegParam));
  obj.biasParam && jspb.Message.setWrapperField(
      msg, 141, proto.apollo.perception.inference.BiasParameter.fromObject(obj.biasParam));
  obj.concatParam && jspb.Message.setWrapperField(
      msg, 104, proto.apollo.perception.inference.ConcatParameter.fromObject(obj.concatParam));
  obj.contrastiveLossParam && jspb.Message.setWrapperField(
      msg, 105, proto.apollo.perception.inference.ContrastiveLossParameter.fromObject(obj.contrastiveLossParam));
  obj.convolutionParam && jspb.Message.setWrapperField(
      msg, 106, proto.apollo.perception.inference.ConvolutionParameter.fromObject(obj.convolutionParam));
  obj.cropParam && jspb.Message.setWrapperField(
      msg, 144, proto.apollo.perception.inference.CropParameter.fromObject(obj.cropParam));
  obj.dataParam && jspb.Message.setWrapperField(
      msg, 107, proto.apollo.perception.inference.DataParameter.fromObject(obj.dataParam));
  obj.detectionEvaluateParam && jspb.Message.setWrapperField(
      msg, 205, proto.apollo.perception.inference.DetectionEvaluateParameter.fromObject(obj.detectionEvaluateParam));
  obj.detectionOutputParam && jspb.Message.setWrapperField(
      msg, 204, proto.apollo.perception.inference.DetectionOutputParameter.fromObject(obj.detectionOutputParam));
  obj.detectionOutputSsdParam && jspb.Message.setWrapperField(
      msg, 210, proto.apollo.perception.inference.DetectionOutputSSDParameter.fromObject(obj.detectionOutputSsdParam));
  obj.dfmbPsroiPoolingParam && jspb.Message.setWrapperField(
      msg, 208, proto.apollo.perception.inference.DFMBPSROIAlignParameter.fromObject(obj.dfmbPsroiPoolingParam));
  obj.dropoutParam && jspb.Message.setWrapperField(
      msg, 108, proto.apollo.perception.inference.DropoutParameter.fromObject(obj.dropoutParam));
  obj.dummyDataParam && jspb.Message.setWrapperField(
      msg, 109, proto.apollo.perception.inference.DummyDataParameter.fromObject(obj.dummyDataParam));
  obj.eltwiseParam && jspb.Message.setWrapperField(
      msg, 110, proto.apollo.perception.inference.EltwiseParameter.fromObject(obj.eltwiseParam));
  obj.eluParam && jspb.Message.setWrapperField(
      msg, 140, proto.apollo.perception.inference.ELUParameter.fromObject(obj.eluParam));
  obj.embedParam && jspb.Message.setWrapperField(
      msg, 137, proto.apollo.perception.inference.EmbedParameter.fromObject(obj.embedParam));
  obj.expParam && jspb.Message.setWrapperField(
      msg, 111, proto.apollo.perception.inference.ExpParameter.fromObject(obj.expParam));
  obj.flattenParam && jspb.Message.setWrapperField(
      msg, 135, proto.apollo.perception.inference.FlattenParameter.fromObject(obj.flattenParam));
  obj.hdf5DataParam && jspb.Message.setWrapperField(
      msg, 112, proto.apollo.perception.inference.HDF5DataParameter.fromObject(obj.hdf5DataParam));
  obj.hdf5OutputParam && jspb.Message.setWrapperField(
      msg, 113, proto.apollo.perception.inference.HDF5OutputParameter.fromObject(obj.hdf5OutputParam));
  obj.hingeLossParam && jspb.Message.setWrapperField(
      msg, 114, proto.apollo.perception.inference.HingeLossParameter.fromObject(obj.hingeLossParam));
  obj.imageDataParam && jspb.Message.setWrapperField(
      msg, 115, proto.apollo.perception.inference.ImageDataParameter.fromObject(obj.imageDataParam));
  obj.yoloDataParamList && jspb.Message.setRepeatedWrapperField(
      msg, 1707111, obj.yoloDataParamList.map(
          proto.apollo.perception.inference.ImageDataParameter.fromObject));
  obj.dataProbParamList != null && jspb.Message.setField(msg, 1707112, obj.dataProbParamList);
  obj.infogainLossParam && jspb.Message.setWrapperField(
      msg, 116, proto.apollo.perception.inference.InfogainLossParameter.fromObject(obj.infogainLossParam));
  obj.innerProductParam && jspb.Message.setWrapperField(
      msg, 117, proto.apollo.perception.inference.InnerProductParameter.fromObject(obj.innerProductParam));
  obj.inputParam && jspb.Message.setWrapperField(
      msg, 143, proto.apollo.perception.inference.InputParameter.fromObject(obj.inputParam));
  obj.logParam && jspb.Message.setWrapperField(
      msg, 134, proto.apollo.perception.inference.LogParameter.fromObject(obj.logParam));
  obj.lrnParam && jspb.Message.setWrapperField(
      msg, 118, proto.apollo.perception.inference.LRNParameter.fromObject(obj.lrnParam));
  obj.memoryDataParam && jspb.Message.setWrapperField(
      msg, 119, proto.apollo.perception.inference.MemoryDataParameter.fromObject(obj.memoryDataParam));
  obj.multiboxLossParam && jspb.Message.setWrapperField(
      msg, 201, proto.apollo.perception.inference.MultiBoxLossParameter.fromObject(obj.multiboxLossParam));
  obj.regionParam && jspb.Message.setWrapperField(
      msg, 300, proto.apollo.perception.inference.RegionParameter.fromObject(obj.regionParam));
  obj.regionOutputParam && jspb.Message.setWrapperField(
      msg, 310, proto.apollo.perception.inference.RegionOutputParameter.fromObject(obj.regionOutputParam));
  obj.regionProposalParam && jspb.Message.setWrapperField(
      msg, 320, proto.apollo.perception.inference.RegionProposalParameter.fromObject(obj.regionProposalParam));
  obj.yoloTargetParam && jspb.Message.setWrapperField(
      msg, 204801, proto.apollo.perception.inference.YoloTargetParameter.fromObject(obj.yoloTargetParam));
  obj.yoloAnchorsParam && jspb.Message.setWrapperField(
      msg, 204802, proto.apollo.perception.inference.YoloAnchorsParameter.fromObject(obj.yoloAnchorsParam));
  obj.yoloLossParam && jspb.Message.setWrapperField(
      msg, 204803, proto.apollo.perception.inference.YoloLossParameter.fromObject(obj.yoloLossParam));
  obj.yoloDumpParam && jspb.Message.setWrapperField(
      msg, 204804, proto.apollo.perception.inference.YoloDumpParameter.fromObject(obj.yoloDumpParam));
  obj.paddingParam && jspb.Message.setWrapperField(
      msg, 1001, proto.apollo.perception.inference.PaddingParameter.fromObject(obj.paddingParam));
  obj.reorgParam && jspb.Message.setWrapperField(
      msg, 301, proto.apollo.perception.inference.ReorgParameter.fromObject(obj.reorgParam));
  obj.mvnParam && jspb.Message.setWrapperField(
      msg, 120, proto.apollo.perception.inference.MVNParameter.fromObject(obj.mvnParam));
  obj.normParam && jspb.Message.setWrapperField(
      msg, 206, proto.apollo.perception.inference.NormalizeParameter.fromObject(obj.normParam));
  obj.parameterParam && jspb.Message.setWrapperField(
      msg, 145, proto.apollo.perception.inference.ParameterParameter.fromObject(obj.parameterParam));
  obj.permuteParam && jspb.Message.setWrapperField(
      msg, 202, proto.apollo.perception.inference.PermuteParameter.fromObject(obj.permuteParam));
  obj.poolingParam && jspb.Message.setWrapperField(
      msg, 121, proto.apollo.perception.inference.PoolingParameter.fromObject(obj.poolingParam));
  obj.powerParam && jspb.Message.setWrapperField(
      msg, 122, proto.apollo.perception.inference.PowerParameter.fromObject(obj.powerParam));
  obj.preluParam && jspb.Message.setWrapperField(
      msg, 131, proto.apollo.perception.inference.PReLUParameter.fromObject(obj.preluParam));
  obj.priorBoxParam && jspb.Message.setWrapperField(
      msg, 203, proto.apollo.perception.inference.PriorBoxParameter.fromObject(obj.priorBoxParam));
  obj.pythonParam && jspb.Message.setWrapperField(
      msg, 130, proto.apollo.perception.inference.PythonParameter.fromObject(obj.pythonParam));
  obj.recurrentParam && jspb.Message.setWrapperField(
      msg, 146, proto.apollo.perception.inference.RecurrentParameter.fromObject(obj.recurrentParam));
  obj.reductionParam && jspb.Message.setWrapperField(
      msg, 136, proto.apollo.perception.inference.ReductionParameter.fromObject(obj.reductionParam));
  obj.reluParam && jspb.Message.setWrapperField(
      msg, 123, proto.apollo.perception.inference.ReLUParameter.fromObject(obj.reluParam));
  obj.reshapeParam && jspb.Message.setWrapperField(
      msg, 133, proto.apollo.perception.inference.ReshapeParameter.fromObject(obj.reshapeParam));
  obj.roiPoolingParam && jspb.Message.setWrapperField(
      msg, 8266711, proto.apollo.perception.inference.ROIPoolingParameter.fromObject(obj.roiPoolingParam));
  obj.scaleParam && jspb.Message.setWrapperField(
      msg, 142, proto.apollo.perception.inference.ScaleParameter.fromObject(obj.scaleParam));
  obj.sigmoidParam && jspb.Message.setWrapperField(
      msg, 124, proto.apollo.perception.inference.SigmoidParameter.fromObject(obj.sigmoidParam));
  obj.softmaxParam && jspb.Message.setWrapperField(
      msg, 125, proto.apollo.perception.inference.SoftmaxParameter.fromObject(obj.softmaxParam));
  obj.sppParam && jspb.Message.setWrapperField(
      msg, 132, proto.apollo.perception.inference.SPPParameter.fromObject(obj.sppParam));
  obj.sliceParam && jspb.Message.setWrapperField(
      msg, 126, proto.apollo.perception.inference.SliceParameter.fromObject(obj.sliceParam));
  obj.tanhParam && jspb.Message.setWrapperField(
      msg, 127, proto.apollo.perception.inference.TanHParameter.fromObject(obj.tanhParam));
  obj.thresholdParam && jspb.Message.setWrapperField(
      msg, 128, proto.apollo.perception.inference.ThresholdParameter.fromObject(obj.thresholdParam));
  obj.tileParam && jspb.Message.setWrapperField(
      msg, 138, proto.apollo.perception.inference.TileParameter.fromObject(obj.tileParam));
  obj.videoDataParam && jspb.Message.setWrapperField(
      msg, 207, proto.apollo.perception.inference.VideoDataParameter.fromObject(obj.videoDataParam));
  obj.windowDataParam && jspb.Message.setWrapperField(
      msg, 129, proto.apollo.perception.inference.WindowDataParameter.fromObject(obj.windowDataParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.LayerParameter}
 */
proto.apollo.perception.inference.LayerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.LayerParameter;
  return proto.apollo.perception.inference.LayerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.LayerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.LayerParameter}
 */
proto.apollo.perception.inference.LayerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addBottom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTop(value);
      break;
    case 10:
      var value = /** @type {!proto.apollo.perception.inference.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLossWeight(values[i]);
      }
      break;
    case 6:
      var value = new proto.apollo.perception.inference.ParamSpec;
      reader.readMessage(value,proto.apollo.perception.inference.ParamSpec.deserializeBinaryFromReader);
      msg.addParam(value);
      break;
    case 7:
      var value = new proto.apollo.perception.inference.BlobProto;
      reader.readMessage(value,proto.apollo.perception.inference.BlobProto.deserializeBinaryFromReader);
      msg.addBlobs(value);
      break;
    case 11:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPropagateDown(values[i]);
      }
      break;
    case 8:
      var value = new proto.apollo.perception.inference.NetStateRule;
      reader.readMessage(value,proto.apollo.perception.inference.NetStateRule.deserializeBinaryFromReader);
      msg.addInclude(value);
      break;
    case 9:
      var value = new proto.apollo.perception.inference.NetStateRule;
      reader.readMessage(value,proto.apollo.perception.inference.NetStateRule.deserializeBinaryFromReader);
      msg.addExclude(value);
      break;
    case 100:
      var value = new proto.apollo.perception.inference.TransformationParameter;
      reader.readMessage(value,proto.apollo.perception.inference.TransformationParameter.deserializeBinaryFromReader);
      msg.setTransformParam(value);
      break;
    case 101:
      var value = new proto.apollo.perception.inference.LossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.LossParameter.deserializeBinaryFromReader);
      msg.setLossParam(value);
      break;
    case 102:
      var value = new proto.apollo.perception.inference.AccuracyParameter;
      reader.readMessage(value,proto.apollo.perception.inference.AccuracyParameter.deserializeBinaryFromReader);
      msg.setAccuracyParam(value);
      break;
    case 200:
      var value = new proto.apollo.perception.inference.AnnotatedDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.AnnotatedDataParameter.deserializeBinaryFromReader);
      msg.setAnnotatedDataParam(value);
      break;
    case 103:
      var value = new proto.apollo.perception.inference.ArgMaxParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ArgMaxParameter.deserializeBinaryFromReader);
      msg.setArgmaxParam(value);
      break;
    case 139:
      var value = new proto.apollo.perception.inference.BatchNormParameter;
      reader.readMessage(value,proto.apollo.perception.inference.BatchNormParameter.deserializeBinaryFromReader);
      msg.setBatchNormParam(value);
      break;
    case 209:
      var value = new proto.apollo.perception.inference.BBoxRegParameter;
      reader.readMessage(value,proto.apollo.perception.inference.BBoxRegParameter.deserializeBinaryFromReader);
      msg.setBboxRegParam(value);
      break;
    case 141:
      var value = new proto.apollo.perception.inference.BiasParameter;
      reader.readMessage(value,proto.apollo.perception.inference.BiasParameter.deserializeBinaryFromReader);
      msg.setBiasParam(value);
      break;
    case 104:
      var value = new proto.apollo.perception.inference.ConcatParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ConcatParameter.deserializeBinaryFromReader);
      msg.setConcatParam(value);
      break;
    case 105:
      var value = new proto.apollo.perception.inference.ContrastiveLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ContrastiveLossParameter.deserializeBinaryFromReader);
      msg.setContrastiveLossParam(value);
      break;
    case 106:
      var value = new proto.apollo.perception.inference.ConvolutionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ConvolutionParameter.deserializeBinaryFromReader);
      msg.setConvolutionParam(value);
      break;
    case 144:
      var value = new proto.apollo.perception.inference.CropParameter;
      reader.readMessage(value,proto.apollo.perception.inference.CropParameter.deserializeBinaryFromReader);
      msg.setCropParam(value);
      break;
    case 107:
      var value = new proto.apollo.perception.inference.DataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DataParameter.deserializeBinaryFromReader);
      msg.setDataParam(value);
      break;
    case 205:
      var value = new proto.apollo.perception.inference.DetectionEvaluateParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DetectionEvaluateParameter.deserializeBinaryFromReader);
      msg.setDetectionEvaluateParam(value);
      break;
    case 204:
      var value = new proto.apollo.perception.inference.DetectionOutputParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DetectionOutputParameter.deserializeBinaryFromReader);
      msg.setDetectionOutputParam(value);
      break;
    case 210:
      var value = new proto.apollo.perception.inference.DetectionOutputSSDParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DetectionOutputSSDParameter.deserializeBinaryFromReader);
      msg.setDetectionOutputSsdParam(value);
      break;
    case 208:
      var value = new proto.apollo.perception.inference.DFMBPSROIAlignParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DFMBPSROIAlignParameter.deserializeBinaryFromReader);
      msg.setDfmbPsroiPoolingParam(value);
      break;
    case 108:
      var value = new proto.apollo.perception.inference.DropoutParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DropoutParameter.deserializeBinaryFromReader);
      msg.setDropoutParam(value);
      break;
    case 109:
      var value = new proto.apollo.perception.inference.DummyDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DummyDataParameter.deserializeBinaryFromReader);
      msg.setDummyDataParam(value);
      break;
    case 110:
      var value = new proto.apollo.perception.inference.EltwiseParameter;
      reader.readMessage(value,proto.apollo.perception.inference.EltwiseParameter.deserializeBinaryFromReader);
      msg.setEltwiseParam(value);
      break;
    case 140:
      var value = new proto.apollo.perception.inference.ELUParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ELUParameter.deserializeBinaryFromReader);
      msg.setEluParam(value);
      break;
    case 137:
      var value = new proto.apollo.perception.inference.EmbedParameter;
      reader.readMessage(value,proto.apollo.perception.inference.EmbedParameter.deserializeBinaryFromReader);
      msg.setEmbedParam(value);
      break;
    case 111:
      var value = new proto.apollo.perception.inference.ExpParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ExpParameter.deserializeBinaryFromReader);
      msg.setExpParam(value);
      break;
    case 135:
      var value = new proto.apollo.perception.inference.FlattenParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FlattenParameter.deserializeBinaryFromReader);
      msg.setFlattenParam(value);
      break;
    case 112:
      var value = new proto.apollo.perception.inference.HDF5DataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.HDF5DataParameter.deserializeBinaryFromReader);
      msg.setHdf5DataParam(value);
      break;
    case 113:
      var value = new proto.apollo.perception.inference.HDF5OutputParameter;
      reader.readMessage(value,proto.apollo.perception.inference.HDF5OutputParameter.deserializeBinaryFromReader);
      msg.setHdf5OutputParam(value);
      break;
    case 114:
      var value = new proto.apollo.perception.inference.HingeLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.HingeLossParameter.deserializeBinaryFromReader);
      msg.setHingeLossParam(value);
      break;
    case 115:
      var value = new proto.apollo.perception.inference.ImageDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ImageDataParameter.deserializeBinaryFromReader);
      msg.setImageDataParam(value);
      break;
    case 1707111:
      var value = new proto.apollo.perception.inference.ImageDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ImageDataParameter.deserializeBinaryFromReader);
      msg.addYoloDataParam(value);
      break;
    case 1707112:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDataProbParam(values[i]);
      }
      break;
    case 116:
      var value = new proto.apollo.perception.inference.InfogainLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.InfogainLossParameter.deserializeBinaryFromReader);
      msg.setInfogainLossParam(value);
      break;
    case 117:
      var value = new proto.apollo.perception.inference.InnerProductParameter;
      reader.readMessage(value,proto.apollo.perception.inference.InnerProductParameter.deserializeBinaryFromReader);
      msg.setInnerProductParam(value);
      break;
    case 143:
      var value = new proto.apollo.perception.inference.InputParameter;
      reader.readMessage(value,proto.apollo.perception.inference.InputParameter.deserializeBinaryFromReader);
      msg.setInputParam(value);
      break;
    case 134:
      var value = new proto.apollo.perception.inference.LogParameter;
      reader.readMessage(value,proto.apollo.perception.inference.LogParameter.deserializeBinaryFromReader);
      msg.setLogParam(value);
      break;
    case 118:
      var value = new proto.apollo.perception.inference.LRNParameter;
      reader.readMessage(value,proto.apollo.perception.inference.LRNParameter.deserializeBinaryFromReader);
      msg.setLrnParam(value);
      break;
    case 119:
      var value = new proto.apollo.perception.inference.MemoryDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.MemoryDataParameter.deserializeBinaryFromReader);
      msg.setMemoryDataParam(value);
      break;
    case 201:
      var value = new proto.apollo.perception.inference.MultiBoxLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.MultiBoxLossParameter.deserializeBinaryFromReader);
      msg.setMultiboxLossParam(value);
      break;
    case 300:
      var value = new proto.apollo.perception.inference.RegionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.RegionParameter.deserializeBinaryFromReader);
      msg.setRegionParam(value);
      break;
    case 310:
      var value = new proto.apollo.perception.inference.RegionOutputParameter;
      reader.readMessage(value,proto.apollo.perception.inference.RegionOutputParameter.deserializeBinaryFromReader);
      msg.setRegionOutputParam(value);
      break;
    case 320:
      var value = new proto.apollo.perception.inference.RegionProposalParameter;
      reader.readMessage(value,proto.apollo.perception.inference.RegionProposalParameter.deserializeBinaryFromReader);
      msg.setRegionProposalParam(value);
      break;
    case 204801:
      var value = new proto.apollo.perception.inference.YoloTargetParameter;
      reader.readMessage(value,proto.apollo.perception.inference.YoloTargetParameter.deserializeBinaryFromReader);
      msg.setYoloTargetParam(value);
      break;
    case 204802:
      var value = new proto.apollo.perception.inference.YoloAnchorsParameter;
      reader.readMessage(value,proto.apollo.perception.inference.YoloAnchorsParameter.deserializeBinaryFromReader);
      msg.setYoloAnchorsParam(value);
      break;
    case 204803:
      var value = new proto.apollo.perception.inference.YoloLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.YoloLossParameter.deserializeBinaryFromReader);
      msg.setYoloLossParam(value);
      break;
    case 204804:
      var value = new proto.apollo.perception.inference.YoloDumpParameter;
      reader.readMessage(value,proto.apollo.perception.inference.YoloDumpParameter.deserializeBinaryFromReader);
      msg.setYoloDumpParam(value);
      break;
    case 1001:
      var value = new proto.apollo.perception.inference.PaddingParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PaddingParameter.deserializeBinaryFromReader);
      msg.setPaddingParam(value);
      break;
    case 301:
      var value = new proto.apollo.perception.inference.ReorgParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ReorgParameter.deserializeBinaryFromReader);
      msg.setReorgParam(value);
      break;
    case 120:
      var value = new proto.apollo.perception.inference.MVNParameter;
      reader.readMessage(value,proto.apollo.perception.inference.MVNParameter.deserializeBinaryFromReader);
      msg.setMvnParam(value);
      break;
    case 206:
      var value = new proto.apollo.perception.inference.NormalizeParameter;
      reader.readMessage(value,proto.apollo.perception.inference.NormalizeParameter.deserializeBinaryFromReader);
      msg.setNormParam(value);
      break;
    case 145:
      var value = new proto.apollo.perception.inference.ParameterParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ParameterParameter.deserializeBinaryFromReader);
      msg.setParameterParam(value);
      break;
    case 202:
      var value = new proto.apollo.perception.inference.PermuteParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PermuteParameter.deserializeBinaryFromReader);
      msg.setPermuteParam(value);
      break;
    case 121:
      var value = new proto.apollo.perception.inference.PoolingParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PoolingParameter.deserializeBinaryFromReader);
      msg.setPoolingParam(value);
      break;
    case 122:
      var value = new proto.apollo.perception.inference.PowerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PowerParameter.deserializeBinaryFromReader);
      msg.setPowerParam(value);
      break;
    case 131:
      var value = new proto.apollo.perception.inference.PReLUParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PReLUParameter.deserializeBinaryFromReader);
      msg.setPreluParam(value);
      break;
    case 203:
      var value = new proto.apollo.perception.inference.PriorBoxParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PriorBoxParameter.deserializeBinaryFromReader);
      msg.setPriorBoxParam(value);
      break;
    case 130:
      var value = new proto.apollo.perception.inference.PythonParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PythonParameter.deserializeBinaryFromReader);
      msg.setPythonParam(value);
      break;
    case 146:
      var value = new proto.apollo.perception.inference.RecurrentParameter;
      reader.readMessage(value,proto.apollo.perception.inference.RecurrentParameter.deserializeBinaryFromReader);
      msg.setRecurrentParam(value);
      break;
    case 136:
      var value = new proto.apollo.perception.inference.ReductionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ReductionParameter.deserializeBinaryFromReader);
      msg.setReductionParam(value);
      break;
    case 123:
      var value = new proto.apollo.perception.inference.ReLUParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ReLUParameter.deserializeBinaryFromReader);
      msg.setReluParam(value);
      break;
    case 133:
      var value = new proto.apollo.perception.inference.ReshapeParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ReshapeParameter.deserializeBinaryFromReader);
      msg.setReshapeParam(value);
      break;
    case 8266711:
      var value = new proto.apollo.perception.inference.ROIPoolingParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ROIPoolingParameter.deserializeBinaryFromReader);
      msg.setRoiPoolingParam(value);
      break;
    case 142:
      var value = new proto.apollo.perception.inference.ScaleParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ScaleParameter.deserializeBinaryFromReader);
      msg.setScaleParam(value);
      break;
    case 124:
      var value = new proto.apollo.perception.inference.SigmoidParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SigmoidParameter.deserializeBinaryFromReader);
      msg.setSigmoidParam(value);
      break;
    case 125:
      var value = new proto.apollo.perception.inference.SoftmaxParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SoftmaxParameter.deserializeBinaryFromReader);
      msg.setSoftmaxParam(value);
      break;
    case 132:
      var value = new proto.apollo.perception.inference.SPPParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SPPParameter.deserializeBinaryFromReader);
      msg.setSppParam(value);
      break;
    case 126:
      var value = new proto.apollo.perception.inference.SliceParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SliceParameter.deserializeBinaryFromReader);
      msg.setSliceParam(value);
      break;
    case 127:
      var value = new proto.apollo.perception.inference.TanHParameter;
      reader.readMessage(value,proto.apollo.perception.inference.TanHParameter.deserializeBinaryFromReader);
      msg.setTanhParam(value);
      break;
    case 128:
      var value = new proto.apollo.perception.inference.ThresholdParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ThresholdParameter.deserializeBinaryFromReader);
      msg.setThresholdParam(value);
      break;
    case 138:
      var value = new proto.apollo.perception.inference.TileParameter;
      reader.readMessage(value,proto.apollo.perception.inference.TileParameter.deserializeBinaryFromReader);
      msg.setTileParam(value);
      break;
    case 207:
      var value = new proto.apollo.perception.inference.VideoDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.VideoDataParameter.deserializeBinaryFromReader);
      msg.setVideoDataParam(value);
      break;
    case 129:
      var value = new proto.apollo.perception.inference.WindowDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.WindowDataParameter.deserializeBinaryFromReader);
      msg.setWindowDataParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.LayerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.LayerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.LayerParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LayerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBottomList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTopList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.Phase} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getLossWeightList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      5,
      f
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.perception.inference.ParamSpec.serializeBinaryToWriter
    );
  }
  f = message.getBlobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.perception.inference.BlobProto.serializeBinaryToWriter
    );
  }
  f = message.getPropagateDownList();
  if (f.length > 0) {
    writer.writeRepeatedBool(
      11,
      f
    );
  }
  f = message.getIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.perception.inference.NetStateRule.serializeBinaryToWriter
    );
  }
  f = message.getExcludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.apollo.perception.inference.NetStateRule.serializeBinaryToWriter
    );
  }
  f = message.getTransformParam();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.apollo.perception.inference.TransformationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLossParam();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.apollo.perception.inference.LossParameter.serializeBinaryToWriter
    );
  }
  f = message.getAccuracyParam();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.apollo.perception.inference.AccuracyParameter.serializeBinaryToWriter
    );
  }
  f = message.getAnnotatedDataParam();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.apollo.perception.inference.AnnotatedDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getArgmaxParam();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.apollo.perception.inference.ArgMaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getBatchNormParam();
  if (f != null) {
    writer.writeMessage(
      139,
      f,
      proto.apollo.perception.inference.BatchNormParameter.serializeBinaryToWriter
    );
  }
  f = message.getBboxRegParam();
  if (f != null) {
    writer.writeMessage(
      209,
      f,
      proto.apollo.perception.inference.BBoxRegParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasParam();
  if (f != null) {
    writer.writeMessage(
      141,
      f,
      proto.apollo.perception.inference.BiasParameter.serializeBinaryToWriter
    );
  }
  f = message.getConcatParam();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.apollo.perception.inference.ConcatParameter.serializeBinaryToWriter
    );
  }
  f = message.getContrastiveLossParam();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.apollo.perception.inference.ContrastiveLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getConvolutionParam();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.apollo.perception.inference.ConvolutionParameter.serializeBinaryToWriter
    );
  }
  f = message.getCropParam();
  if (f != null) {
    writer.writeMessage(
      144,
      f,
      proto.apollo.perception.inference.CropParameter.serializeBinaryToWriter
    );
  }
  f = message.getDataParam();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.apollo.perception.inference.DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getDetectionEvaluateParam();
  if (f != null) {
    writer.writeMessage(
      205,
      f,
      proto.apollo.perception.inference.DetectionEvaluateParameter.serializeBinaryToWriter
    );
  }
  f = message.getDetectionOutputParam();
  if (f != null) {
    writer.writeMessage(
      204,
      f,
      proto.apollo.perception.inference.DetectionOutputParameter.serializeBinaryToWriter
    );
  }
  f = message.getDetectionOutputSsdParam();
  if (f != null) {
    writer.writeMessage(
      210,
      f,
      proto.apollo.perception.inference.DetectionOutputSSDParameter.serializeBinaryToWriter
    );
  }
  f = message.getDfmbPsroiPoolingParam();
  if (f != null) {
    writer.writeMessage(
      208,
      f,
      proto.apollo.perception.inference.DFMBPSROIAlignParameter.serializeBinaryToWriter
    );
  }
  f = message.getDropoutParam();
  if (f != null) {
    writer.writeMessage(
      108,
      f,
      proto.apollo.perception.inference.DropoutParameter.serializeBinaryToWriter
    );
  }
  f = message.getDummyDataParam();
  if (f != null) {
    writer.writeMessage(
      109,
      f,
      proto.apollo.perception.inference.DummyDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getEltwiseParam();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.apollo.perception.inference.EltwiseParameter.serializeBinaryToWriter
    );
  }
  f = message.getEluParam();
  if (f != null) {
    writer.writeMessage(
      140,
      f,
      proto.apollo.perception.inference.ELUParameter.serializeBinaryToWriter
    );
  }
  f = message.getEmbedParam();
  if (f != null) {
    writer.writeMessage(
      137,
      f,
      proto.apollo.perception.inference.EmbedParameter.serializeBinaryToWriter
    );
  }
  f = message.getExpParam();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.apollo.perception.inference.ExpParameter.serializeBinaryToWriter
    );
  }
  f = message.getFlattenParam();
  if (f != null) {
    writer.writeMessage(
      135,
      f,
      proto.apollo.perception.inference.FlattenParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5DataParam();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.apollo.perception.inference.HDF5DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5OutputParam();
  if (f != null) {
    writer.writeMessage(
      113,
      f,
      proto.apollo.perception.inference.HDF5OutputParameter.serializeBinaryToWriter
    );
  }
  f = message.getHingeLossParam();
  if (f != null) {
    writer.writeMessage(
      114,
      f,
      proto.apollo.perception.inference.HingeLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getImageDataParam();
  if (f != null) {
    writer.writeMessage(
      115,
      f,
      proto.apollo.perception.inference.ImageDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getYoloDataParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1707111,
      f,
      proto.apollo.perception.inference.ImageDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getDataProbParamList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      1707112,
      f
    );
  }
  f = message.getInfogainLossParam();
  if (f != null) {
    writer.writeMessage(
      116,
      f,
      proto.apollo.perception.inference.InfogainLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getInnerProductParam();
  if (f != null) {
    writer.writeMessage(
      117,
      f,
      proto.apollo.perception.inference.InnerProductParameter.serializeBinaryToWriter
    );
  }
  f = message.getInputParam();
  if (f != null) {
    writer.writeMessage(
      143,
      f,
      proto.apollo.perception.inference.InputParameter.serializeBinaryToWriter
    );
  }
  f = message.getLogParam();
  if (f != null) {
    writer.writeMessage(
      134,
      f,
      proto.apollo.perception.inference.LogParameter.serializeBinaryToWriter
    );
  }
  f = message.getLrnParam();
  if (f != null) {
    writer.writeMessage(
      118,
      f,
      proto.apollo.perception.inference.LRNParameter.serializeBinaryToWriter
    );
  }
  f = message.getMemoryDataParam();
  if (f != null) {
    writer.writeMessage(
      119,
      f,
      proto.apollo.perception.inference.MemoryDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getMultiboxLossParam();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.apollo.perception.inference.MultiBoxLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getRegionParam();
  if (f != null) {
    writer.writeMessage(
      300,
      f,
      proto.apollo.perception.inference.RegionParameter.serializeBinaryToWriter
    );
  }
  f = message.getRegionOutputParam();
  if (f != null) {
    writer.writeMessage(
      310,
      f,
      proto.apollo.perception.inference.RegionOutputParameter.serializeBinaryToWriter
    );
  }
  f = message.getRegionProposalParam();
  if (f != null) {
    writer.writeMessage(
      320,
      f,
      proto.apollo.perception.inference.RegionProposalParameter.serializeBinaryToWriter
    );
  }
  f = message.getYoloTargetParam();
  if (f != null) {
    writer.writeMessage(
      204801,
      f,
      proto.apollo.perception.inference.YoloTargetParameter.serializeBinaryToWriter
    );
  }
  f = message.getYoloAnchorsParam();
  if (f != null) {
    writer.writeMessage(
      204802,
      f,
      proto.apollo.perception.inference.YoloAnchorsParameter.serializeBinaryToWriter
    );
  }
  f = message.getYoloLossParam();
  if (f != null) {
    writer.writeMessage(
      204803,
      f,
      proto.apollo.perception.inference.YoloLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getYoloDumpParam();
  if (f != null) {
    writer.writeMessage(
      204804,
      f,
      proto.apollo.perception.inference.YoloDumpParameter.serializeBinaryToWriter
    );
  }
  f = message.getPaddingParam();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.apollo.perception.inference.PaddingParameter.serializeBinaryToWriter
    );
  }
  f = message.getReorgParam();
  if (f != null) {
    writer.writeMessage(
      301,
      f,
      proto.apollo.perception.inference.ReorgParameter.serializeBinaryToWriter
    );
  }
  f = message.getMvnParam();
  if (f != null) {
    writer.writeMessage(
      120,
      f,
      proto.apollo.perception.inference.MVNParameter.serializeBinaryToWriter
    );
  }
  f = message.getNormParam();
  if (f != null) {
    writer.writeMessage(
      206,
      f,
      proto.apollo.perception.inference.NormalizeParameter.serializeBinaryToWriter
    );
  }
  f = message.getParameterParam();
  if (f != null) {
    writer.writeMessage(
      145,
      f,
      proto.apollo.perception.inference.ParameterParameter.serializeBinaryToWriter
    );
  }
  f = message.getPermuteParam();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.apollo.perception.inference.PermuteParameter.serializeBinaryToWriter
    );
  }
  f = message.getPoolingParam();
  if (f != null) {
    writer.writeMessage(
      121,
      f,
      proto.apollo.perception.inference.PoolingParameter.serializeBinaryToWriter
    );
  }
  f = message.getPowerParam();
  if (f != null) {
    writer.writeMessage(
      122,
      f,
      proto.apollo.perception.inference.PowerParameter.serializeBinaryToWriter
    );
  }
  f = message.getPreluParam();
  if (f != null) {
    writer.writeMessage(
      131,
      f,
      proto.apollo.perception.inference.PReLUParameter.serializeBinaryToWriter
    );
  }
  f = message.getPriorBoxParam();
  if (f != null) {
    writer.writeMessage(
      203,
      f,
      proto.apollo.perception.inference.PriorBoxParameter.serializeBinaryToWriter
    );
  }
  f = message.getPythonParam();
  if (f != null) {
    writer.writeMessage(
      130,
      f,
      proto.apollo.perception.inference.PythonParameter.serializeBinaryToWriter
    );
  }
  f = message.getRecurrentParam();
  if (f != null) {
    writer.writeMessage(
      146,
      f,
      proto.apollo.perception.inference.RecurrentParameter.serializeBinaryToWriter
    );
  }
  f = message.getReductionParam();
  if (f != null) {
    writer.writeMessage(
      136,
      f,
      proto.apollo.perception.inference.ReductionParameter.serializeBinaryToWriter
    );
  }
  f = message.getReluParam();
  if (f != null) {
    writer.writeMessage(
      123,
      f,
      proto.apollo.perception.inference.ReLUParameter.serializeBinaryToWriter
    );
  }
  f = message.getReshapeParam();
  if (f != null) {
    writer.writeMessage(
      133,
      f,
      proto.apollo.perception.inference.ReshapeParameter.serializeBinaryToWriter
    );
  }
  f = message.getRoiPoolingParam();
  if (f != null) {
    writer.writeMessage(
      8266711,
      f,
      proto.apollo.perception.inference.ROIPoolingParameter.serializeBinaryToWriter
    );
  }
  f = message.getScaleParam();
  if (f != null) {
    writer.writeMessage(
      142,
      f,
      proto.apollo.perception.inference.ScaleParameter.serializeBinaryToWriter
    );
  }
  f = message.getSigmoidParam();
  if (f != null) {
    writer.writeMessage(
      124,
      f,
      proto.apollo.perception.inference.SigmoidParameter.serializeBinaryToWriter
    );
  }
  f = message.getSoftmaxParam();
  if (f != null) {
    writer.writeMessage(
      125,
      f,
      proto.apollo.perception.inference.SoftmaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getSppParam();
  if (f != null) {
    writer.writeMessage(
      132,
      f,
      proto.apollo.perception.inference.SPPParameter.serializeBinaryToWriter
    );
  }
  f = message.getSliceParam();
  if (f != null) {
    writer.writeMessage(
      126,
      f,
      proto.apollo.perception.inference.SliceParameter.serializeBinaryToWriter
    );
  }
  f = message.getTanhParam();
  if (f != null) {
    writer.writeMessage(
      127,
      f,
      proto.apollo.perception.inference.TanHParameter.serializeBinaryToWriter
    );
  }
  f = message.getThresholdParam();
  if (f != null) {
    writer.writeMessage(
      128,
      f,
      proto.apollo.perception.inference.ThresholdParameter.serializeBinaryToWriter
    );
  }
  f = message.getTileParam();
  if (f != null) {
    writer.writeMessage(
      138,
      f,
      proto.apollo.perception.inference.TileParameter.serializeBinaryToWriter
    );
  }
  f = message.getVideoDataParam();
  if (f != null) {
    writer.writeMessage(
      207,
      f,
      proto.apollo.perception.inference.VideoDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getWindowDataParam();
  if (f != null) {
    writer.writeMessage(
      129,
      f,
      proto.apollo.perception.inference.WindowDataParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string bottom = 3;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getBottomList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setBottomList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.addBottom = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearBottomList = function() {
  return this.setBottomList([]);
};


/**
 * repeated string top = 4;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getTopList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setTopList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.addTop = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearTopList = function() {
  return this.setTopList([]);
};


/**
 * optional Phase phase = 10;
 * @return {!proto.apollo.perception.inference.Phase}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPhase = function() {
  return /** @type {!proto.apollo.perception.inference.Phase} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.apollo.perception.inference.Phase} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setPhase = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPhase = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPhase = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated float loss_weight = 5;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getLossWeightList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setLossWeightList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.addLossWeight = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearLossWeightList = function() {
  return this.setLossWeightList([]);
};


/**
 * repeated ParamSpec param = 6;
 * @return {!Array<!proto.apollo.perception.inference.ParamSpec>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getParamList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.ParamSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.ParamSpec, 6));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.ParamSpec>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.perception.inference.ParamSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ParamSpec}
 */
proto.apollo.perception.inference.LayerParameter.prototype.addParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.perception.inference.ParamSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearParamList = function() {
  return this.setParamList([]);
};


/**
 * repeated BlobProto blobs = 7;
 * @return {!Array<!proto.apollo.perception.inference.BlobProto>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getBlobsList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.BlobProto, 7));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.BlobProto>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setBlobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.perception.inference.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobProto}
 */
proto.apollo.perception.inference.LayerParameter.prototype.addBlobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.perception.inference.BlobProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearBlobsList = function() {
  return this.setBlobsList([]);
};


/**
 * repeated bool propagate_down = 11;
 * @return {!Array<boolean>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPropagateDownList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 11));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setPropagateDownList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.addPropagateDown = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPropagateDownList = function() {
  return this.setPropagateDownList([]);
};


/**
 * repeated NetStateRule include = 8;
 * @return {!Array<!proto.apollo.perception.inference.NetStateRule>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getIncludeList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.NetStateRule, 8));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.NetStateRule>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setIncludeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.perception.inference.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetStateRule}
 */
proto.apollo.perception.inference.LayerParameter.prototype.addInclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.perception.inference.NetStateRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearIncludeList = function() {
  return this.setIncludeList([]);
};


/**
 * repeated NetStateRule exclude = 9;
 * @return {!Array<!proto.apollo.perception.inference.NetStateRule>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getExcludeList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.NetStateRule, 9));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.NetStateRule>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setExcludeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.apollo.perception.inference.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetStateRule}
 */
proto.apollo.perception.inference.LayerParameter.prototype.addExclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.apollo.perception.inference.NetStateRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearExcludeList = function() {
  return this.setExcludeList([]);
};


/**
 * optional TransformationParameter transform_param = 100;
 * @return {?proto.apollo.perception.inference.TransformationParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getTransformParam = function() {
  return /** @type{?proto.apollo.perception.inference.TransformationParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.TransformationParameter, 100));
};


/**
 * @param {?proto.apollo.perception.inference.TransformationParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setTransformParam = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearTransformParam = function() {
  return this.setTransformParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasTransformParam = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional LossParameter loss_param = 101;
 * @return {?proto.apollo.perception.inference.LossParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.LossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.LossParameter, 101));
};


/**
 * @param {?proto.apollo.perception.inference.LossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 101, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearLossParam = function() {
  return this.setLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasLossParam = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional AccuracyParameter accuracy_param = 102;
 * @return {?proto.apollo.perception.inference.AccuracyParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getAccuracyParam = function() {
  return /** @type{?proto.apollo.perception.inference.AccuracyParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.AccuracyParameter, 102));
};


/**
 * @param {?proto.apollo.perception.inference.AccuracyParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setAccuracyParam = function(value) {
  return jspb.Message.setWrapperField(this, 102, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearAccuracyParam = function() {
  return this.setAccuracyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasAccuracyParam = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional AnnotatedDataParameter annotated_data_param = 200;
 * @return {?proto.apollo.perception.inference.AnnotatedDataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getAnnotatedDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.AnnotatedDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.AnnotatedDataParameter, 200));
};


/**
 * @param {?proto.apollo.perception.inference.AnnotatedDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setAnnotatedDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 200, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearAnnotatedDataParam = function() {
  return this.setAnnotatedDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasAnnotatedDataParam = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional ArgMaxParameter argmax_param = 103;
 * @return {?proto.apollo.perception.inference.ArgMaxParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getArgmaxParam = function() {
  return /** @type{?proto.apollo.perception.inference.ArgMaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ArgMaxParameter, 103));
};


/**
 * @param {?proto.apollo.perception.inference.ArgMaxParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setArgmaxParam = function(value) {
  return jspb.Message.setWrapperField(this, 103, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearArgmaxParam = function() {
  return this.setArgmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasArgmaxParam = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional BatchNormParameter batch_norm_param = 139;
 * @return {?proto.apollo.perception.inference.BatchNormParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getBatchNormParam = function() {
  return /** @type{?proto.apollo.perception.inference.BatchNormParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.BatchNormParameter, 139));
};


/**
 * @param {?proto.apollo.perception.inference.BatchNormParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setBatchNormParam = function(value) {
  return jspb.Message.setWrapperField(this, 139, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearBatchNormParam = function() {
  return this.setBatchNormParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasBatchNormParam = function() {
  return jspb.Message.getField(this, 139) != null;
};


/**
 * optional BBoxRegParameter bbox_reg_param = 209;
 * @return {?proto.apollo.perception.inference.BBoxRegParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getBboxRegParam = function() {
  return /** @type{?proto.apollo.perception.inference.BBoxRegParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.BBoxRegParameter, 209));
};


/**
 * @param {?proto.apollo.perception.inference.BBoxRegParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setBboxRegParam = function(value) {
  return jspb.Message.setWrapperField(this, 209, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearBboxRegParam = function() {
  return this.setBboxRegParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasBboxRegParam = function() {
  return jspb.Message.getField(this, 209) != null;
};


/**
 * optional BiasParameter bias_param = 141;
 * @return {?proto.apollo.perception.inference.BiasParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getBiasParam = function() {
  return /** @type{?proto.apollo.perception.inference.BiasParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.BiasParameter, 141));
};


/**
 * @param {?proto.apollo.perception.inference.BiasParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setBiasParam = function(value) {
  return jspb.Message.setWrapperField(this, 141, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearBiasParam = function() {
  return this.setBiasParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasBiasParam = function() {
  return jspb.Message.getField(this, 141) != null;
};


/**
 * optional ConcatParameter concat_param = 104;
 * @return {?proto.apollo.perception.inference.ConcatParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getConcatParam = function() {
  return /** @type{?proto.apollo.perception.inference.ConcatParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ConcatParameter, 104));
};


/**
 * @param {?proto.apollo.perception.inference.ConcatParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setConcatParam = function(value) {
  return jspb.Message.setWrapperField(this, 104, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearConcatParam = function() {
  return this.setConcatParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasConcatParam = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional ContrastiveLossParameter contrastive_loss_param = 105;
 * @return {?proto.apollo.perception.inference.ContrastiveLossParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getContrastiveLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.ContrastiveLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ContrastiveLossParameter, 105));
};


/**
 * @param {?proto.apollo.perception.inference.ContrastiveLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setContrastiveLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 105, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearContrastiveLossParam = function() {
  return this.setContrastiveLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasContrastiveLossParam = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional ConvolutionParameter convolution_param = 106;
 * @return {?proto.apollo.perception.inference.ConvolutionParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getConvolutionParam = function() {
  return /** @type{?proto.apollo.perception.inference.ConvolutionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ConvolutionParameter, 106));
};


/**
 * @param {?proto.apollo.perception.inference.ConvolutionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setConvolutionParam = function(value) {
  return jspb.Message.setWrapperField(this, 106, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearConvolutionParam = function() {
  return this.setConvolutionParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasConvolutionParam = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional CropParameter crop_param = 144;
 * @return {?proto.apollo.perception.inference.CropParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getCropParam = function() {
  return /** @type{?proto.apollo.perception.inference.CropParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.CropParameter, 144));
};


/**
 * @param {?proto.apollo.perception.inference.CropParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setCropParam = function(value) {
  return jspb.Message.setWrapperField(this, 144, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearCropParam = function() {
  return this.setCropParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasCropParam = function() {
  return jspb.Message.getField(this, 144) != null;
};


/**
 * optional DataParameter data_param = 107;
 * @return {?proto.apollo.perception.inference.DataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DataParameter, 107));
};


/**
 * @param {?proto.apollo.perception.inference.DataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 107, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDataParam = function() {
  return this.setDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasDataParam = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional DetectionEvaluateParameter detection_evaluate_param = 205;
 * @return {?proto.apollo.perception.inference.DetectionEvaluateParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDetectionEvaluateParam = function() {
  return /** @type{?proto.apollo.perception.inference.DetectionEvaluateParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DetectionEvaluateParameter, 205));
};


/**
 * @param {?proto.apollo.perception.inference.DetectionEvaluateParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setDetectionEvaluateParam = function(value) {
  return jspb.Message.setWrapperField(this, 205, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDetectionEvaluateParam = function() {
  return this.setDetectionEvaluateParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasDetectionEvaluateParam = function() {
  return jspb.Message.getField(this, 205) != null;
};


/**
 * optional DetectionOutputParameter detection_output_param = 204;
 * @return {?proto.apollo.perception.inference.DetectionOutputParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDetectionOutputParam = function() {
  return /** @type{?proto.apollo.perception.inference.DetectionOutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DetectionOutputParameter, 204));
};


/**
 * @param {?proto.apollo.perception.inference.DetectionOutputParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setDetectionOutputParam = function(value) {
  return jspb.Message.setWrapperField(this, 204, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDetectionOutputParam = function() {
  return this.setDetectionOutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasDetectionOutputParam = function() {
  return jspb.Message.getField(this, 204) != null;
};


/**
 * optional DetectionOutputSSDParameter detection_output_ssd_param = 210;
 * @return {?proto.apollo.perception.inference.DetectionOutputSSDParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDetectionOutputSsdParam = function() {
  return /** @type{?proto.apollo.perception.inference.DetectionOutputSSDParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DetectionOutputSSDParameter, 210));
};


/**
 * @param {?proto.apollo.perception.inference.DetectionOutputSSDParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setDetectionOutputSsdParam = function(value) {
  return jspb.Message.setWrapperField(this, 210, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDetectionOutputSsdParam = function() {
  return this.setDetectionOutputSsdParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasDetectionOutputSsdParam = function() {
  return jspb.Message.getField(this, 210) != null;
};


/**
 * optional DFMBPSROIAlignParameter dfmb_psroi_pooling_param = 208;
 * @return {?proto.apollo.perception.inference.DFMBPSROIAlignParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDfmbPsroiPoolingParam = function() {
  return /** @type{?proto.apollo.perception.inference.DFMBPSROIAlignParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DFMBPSROIAlignParameter, 208));
};


/**
 * @param {?proto.apollo.perception.inference.DFMBPSROIAlignParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setDfmbPsroiPoolingParam = function(value) {
  return jspb.Message.setWrapperField(this, 208, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDfmbPsroiPoolingParam = function() {
  return this.setDfmbPsroiPoolingParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasDfmbPsroiPoolingParam = function() {
  return jspb.Message.getField(this, 208) != null;
};


/**
 * optional DropoutParameter dropout_param = 108;
 * @return {?proto.apollo.perception.inference.DropoutParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDropoutParam = function() {
  return /** @type{?proto.apollo.perception.inference.DropoutParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DropoutParameter, 108));
};


/**
 * @param {?proto.apollo.perception.inference.DropoutParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setDropoutParam = function(value) {
  return jspb.Message.setWrapperField(this, 108, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDropoutParam = function() {
  return this.setDropoutParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasDropoutParam = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional DummyDataParameter dummy_data_param = 109;
 * @return {?proto.apollo.perception.inference.DummyDataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDummyDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.DummyDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DummyDataParameter, 109));
};


/**
 * @param {?proto.apollo.perception.inference.DummyDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setDummyDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 109, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDummyDataParam = function() {
  return this.setDummyDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasDummyDataParam = function() {
  return jspb.Message.getField(this, 109) != null;
};


/**
 * optional EltwiseParameter eltwise_param = 110;
 * @return {?proto.apollo.perception.inference.EltwiseParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getEltwiseParam = function() {
  return /** @type{?proto.apollo.perception.inference.EltwiseParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.EltwiseParameter, 110));
};


/**
 * @param {?proto.apollo.perception.inference.EltwiseParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setEltwiseParam = function(value) {
  return jspb.Message.setWrapperField(this, 110, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearEltwiseParam = function() {
  return this.setEltwiseParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasEltwiseParam = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional ELUParameter elu_param = 140;
 * @return {?proto.apollo.perception.inference.ELUParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getEluParam = function() {
  return /** @type{?proto.apollo.perception.inference.ELUParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ELUParameter, 140));
};


/**
 * @param {?proto.apollo.perception.inference.ELUParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setEluParam = function(value) {
  return jspb.Message.setWrapperField(this, 140, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearEluParam = function() {
  return this.setEluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasEluParam = function() {
  return jspb.Message.getField(this, 140) != null;
};


/**
 * optional EmbedParameter embed_param = 137;
 * @return {?proto.apollo.perception.inference.EmbedParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getEmbedParam = function() {
  return /** @type{?proto.apollo.perception.inference.EmbedParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.EmbedParameter, 137));
};


/**
 * @param {?proto.apollo.perception.inference.EmbedParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setEmbedParam = function(value) {
  return jspb.Message.setWrapperField(this, 137, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearEmbedParam = function() {
  return this.setEmbedParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasEmbedParam = function() {
  return jspb.Message.getField(this, 137) != null;
};


/**
 * optional ExpParameter exp_param = 111;
 * @return {?proto.apollo.perception.inference.ExpParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getExpParam = function() {
  return /** @type{?proto.apollo.perception.inference.ExpParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ExpParameter, 111));
};


/**
 * @param {?proto.apollo.perception.inference.ExpParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setExpParam = function(value) {
  return jspb.Message.setWrapperField(this, 111, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearExpParam = function() {
  return this.setExpParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasExpParam = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional FlattenParameter flatten_param = 135;
 * @return {?proto.apollo.perception.inference.FlattenParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getFlattenParam = function() {
  return /** @type{?proto.apollo.perception.inference.FlattenParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FlattenParameter, 135));
};


/**
 * @param {?proto.apollo.perception.inference.FlattenParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setFlattenParam = function(value) {
  return jspb.Message.setWrapperField(this, 135, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearFlattenParam = function() {
  return this.setFlattenParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasFlattenParam = function() {
  return jspb.Message.getField(this, 135) != null;
};


/**
 * optional HDF5DataParameter hdf5_data_param = 112;
 * @return {?proto.apollo.perception.inference.HDF5DataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getHdf5DataParam = function() {
  return /** @type{?proto.apollo.perception.inference.HDF5DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.HDF5DataParameter, 112));
};


/**
 * @param {?proto.apollo.perception.inference.HDF5DataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setHdf5DataParam = function(value) {
  return jspb.Message.setWrapperField(this, 112, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearHdf5DataParam = function() {
  return this.setHdf5DataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasHdf5DataParam = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional HDF5OutputParameter hdf5_output_param = 113;
 * @return {?proto.apollo.perception.inference.HDF5OutputParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getHdf5OutputParam = function() {
  return /** @type{?proto.apollo.perception.inference.HDF5OutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.HDF5OutputParameter, 113));
};


/**
 * @param {?proto.apollo.perception.inference.HDF5OutputParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setHdf5OutputParam = function(value) {
  return jspb.Message.setWrapperField(this, 113, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearHdf5OutputParam = function() {
  return this.setHdf5OutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasHdf5OutputParam = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional HingeLossParameter hinge_loss_param = 114;
 * @return {?proto.apollo.perception.inference.HingeLossParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getHingeLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.HingeLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.HingeLossParameter, 114));
};


/**
 * @param {?proto.apollo.perception.inference.HingeLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setHingeLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 114, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearHingeLossParam = function() {
  return this.setHingeLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasHingeLossParam = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional ImageDataParameter image_data_param = 115;
 * @return {?proto.apollo.perception.inference.ImageDataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getImageDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.ImageDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ImageDataParameter, 115));
};


/**
 * @param {?proto.apollo.perception.inference.ImageDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setImageDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 115, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearImageDataParam = function() {
  return this.setImageDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasImageDataParam = function() {
  return jspb.Message.getField(this, 115) != null;
};


/**
 * repeated ImageDataParameter yolo_data_param = 1707111;
 * @return {!Array<!proto.apollo.perception.inference.ImageDataParameter>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getYoloDataParamList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.ImageDataParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.ImageDataParameter, 1707111));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.ImageDataParameter>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setYoloDataParamList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1707111, value);
};


/**
 * @param {!proto.apollo.perception.inference.ImageDataParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ImageDataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.addYoloDataParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1707111, opt_value, proto.apollo.perception.inference.ImageDataParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearYoloDataParamList = function() {
  return this.setYoloDataParamList([]);
};


/**
 * repeated float data_prob_param = 1707112;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getDataProbParamList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1707112));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.setDataProbParamList = function(value) {
  return jspb.Message.setField(this, 1707112, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.addDataProbParam = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1707112, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearDataProbParamList = function() {
  return this.setDataProbParamList([]);
};


/**
 * optional InfogainLossParameter infogain_loss_param = 116;
 * @return {?proto.apollo.perception.inference.InfogainLossParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getInfogainLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.InfogainLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.InfogainLossParameter, 116));
};


/**
 * @param {?proto.apollo.perception.inference.InfogainLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setInfogainLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 116, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearInfogainLossParam = function() {
  return this.setInfogainLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasInfogainLossParam = function() {
  return jspb.Message.getField(this, 116) != null;
};


/**
 * optional InnerProductParameter inner_product_param = 117;
 * @return {?proto.apollo.perception.inference.InnerProductParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getInnerProductParam = function() {
  return /** @type{?proto.apollo.perception.inference.InnerProductParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.InnerProductParameter, 117));
};


/**
 * @param {?proto.apollo.perception.inference.InnerProductParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setInnerProductParam = function(value) {
  return jspb.Message.setWrapperField(this, 117, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearInnerProductParam = function() {
  return this.setInnerProductParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasInnerProductParam = function() {
  return jspb.Message.getField(this, 117) != null;
};


/**
 * optional InputParameter input_param = 143;
 * @return {?proto.apollo.perception.inference.InputParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getInputParam = function() {
  return /** @type{?proto.apollo.perception.inference.InputParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.InputParameter, 143));
};


/**
 * @param {?proto.apollo.perception.inference.InputParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setInputParam = function(value) {
  return jspb.Message.setWrapperField(this, 143, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearInputParam = function() {
  return this.setInputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasInputParam = function() {
  return jspb.Message.getField(this, 143) != null;
};


/**
 * optional LogParameter log_param = 134;
 * @return {?proto.apollo.perception.inference.LogParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getLogParam = function() {
  return /** @type{?proto.apollo.perception.inference.LogParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.LogParameter, 134));
};


/**
 * @param {?proto.apollo.perception.inference.LogParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setLogParam = function(value) {
  return jspb.Message.setWrapperField(this, 134, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearLogParam = function() {
  return this.setLogParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasLogParam = function() {
  return jspb.Message.getField(this, 134) != null;
};


/**
 * optional LRNParameter lrn_param = 118;
 * @return {?proto.apollo.perception.inference.LRNParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getLrnParam = function() {
  return /** @type{?proto.apollo.perception.inference.LRNParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.LRNParameter, 118));
};


/**
 * @param {?proto.apollo.perception.inference.LRNParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setLrnParam = function(value) {
  return jspb.Message.setWrapperField(this, 118, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearLrnParam = function() {
  return this.setLrnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasLrnParam = function() {
  return jspb.Message.getField(this, 118) != null;
};


/**
 * optional MemoryDataParameter memory_data_param = 119;
 * @return {?proto.apollo.perception.inference.MemoryDataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getMemoryDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.MemoryDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.MemoryDataParameter, 119));
};


/**
 * @param {?proto.apollo.perception.inference.MemoryDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setMemoryDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 119, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearMemoryDataParam = function() {
  return this.setMemoryDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasMemoryDataParam = function() {
  return jspb.Message.getField(this, 119) != null;
};


/**
 * optional MultiBoxLossParameter multibox_loss_param = 201;
 * @return {?proto.apollo.perception.inference.MultiBoxLossParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getMultiboxLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.MultiBoxLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.MultiBoxLossParameter, 201));
};


/**
 * @param {?proto.apollo.perception.inference.MultiBoxLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setMultiboxLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 201, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearMultiboxLossParam = function() {
  return this.setMultiboxLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasMultiboxLossParam = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional RegionParameter region_param = 300;
 * @return {?proto.apollo.perception.inference.RegionParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getRegionParam = function() {
  return /** @type{?proto.apollo.perception.inference.RegionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.RegionParameter, 300));
};


/**
 * @param {?proto.apollo.perception.inference.RegionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setRegionParam = function(value) {
  return jspb.Message.setWrapperField(this, 300, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearRegionParam = function() {
  return this.setRegionParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasRegionParam = function() {
  return jspb.Message.getField(this, 300) != null;
};


/**
 * optional RegionOutputParameter region_output_param = 310;
 * @return {?proto.apollo.perception.inference.RegionOutputParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getRegionOutputParam = function() {
  return /** @type{?proto.apollo.perception.inference.RegionOutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.RegionOutputParameter, 310));
};


/**
 * @param {?proto.apollo.perception.inference.RegionOutputParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setRegionOutputParam = function(value) {
  return jspb.Message.setWrapperField(this, 310, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearRegionOutputParam = function() {
  return this.setRegionOutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasRegionOutputParam = function() {
  return jspb.Message.getField(this, 310) != null;
};


/**
 * optional RegionProposalParameter region_proposal_param = 320;
 * @return {?proto.apollo.perception.inference.RegionProposalParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getRegionProposalParam = function() {
  return /** @type{?proto.apollo.perception.inference.RegionProposalParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.RegionProposalParameter, 320));
};


/**
 * @param {?proto.apollo.perception.inference.RegionProposalParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setRegionProposalParam = function(value) {
  return jspb.Message.setWrapperField(this, 320, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearRegionProposalParam = function() {
  return this.setRegionProposalParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasRegionProposalParam = function() {
  return jspb.Message.getField(this, 320) != null;
};


/**
 * optional YoloTargetParameter yolo_target_param = 204801;
 * @return {?proto.apollo.perception.inference.YoloTargetParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getYoloTargetParam = function() {
  return /** @type{?proto.apollo.perception.inference.YoloTargetParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.YoloTargetParameter, 204801));
};


/**
 * @param {?proto.apollo.perception.inference.YoloTargetParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setYoloTargetParam = function(value) {
  return jspb.Message.setWrapperField(this, 204801, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearYoloTargetParam = function() {
  return this.setYoloTargetParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasYoloTargetParam = function() {
  return jspb.Message.getField(this, 204801) != null;
};


/**
 * optional YoloAnchorsParameter yolo_anchors_param = 204802;
 * @return {?proto.apollo.perception.inference.YoloAnchorsParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getYoloAnchorsParam = function() {
  return /** @type{?proto.apollo.perception.inference.YoloAnchorsParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.YoloAnchorsParameter, 204802));
};


/**
 * @param {?proto.apollo.perception.inference.YoloAnchorsParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setYoloAnchorsParam = function(value) {
  return jspb.Message.setWrapperField(this, 204802, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearYoloAnchorsParam = function() {
  return this.setYoloAnchorsParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasYoloAnchorsParam = function() {
  return jspb.Message.getField(this, 204802) != null;
};


/**
 * optional YoloLossParameter yolo_loss_param = 204803;
 * @return {?proto.apollo.perception.inference.YoloLossParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getYoloLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.YoloLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.YoloLossParameter, 204803));
};


/**
 * @param {?proto.apollo.perception.inference.YoloLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setYoloLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 204803, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearYoloLossParam = function() {
  return this.setYoloLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasYoloLossParam = function() {
  return jspb.Message.getField(this, 204803) != null;
};


/**
 * optional YoloDumpParameter yolo_dump_param = 204804;
 * @return {?proto.apollo.perception.inference.YoloDumpParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getYoloDumpParam = function() {
  return /** @type{?proto.apollo.perception.inference.YoloDumpParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.YoloDumpParameter, 204804));
};


/**
 * @param {?proto.apollo.perception.inference.YoloDumpParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setYoloDumpParam = function(value) {
  return jspb.Message.setWrapperField(this, 204804, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearYoloDumpParam = function() {
  return this.setYoloDumpParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasYoloDumpParam = function() {
  return jspb.Message.getField(this, 204804) != null;
};


/**
 * optional PaddingParameter padding_param = 1001;
 * @return {?proto.apollo.perception.inference.PaddingParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPaddingParam = function() {
  return /** @type{?proto.apollo.perception.inference.PaddingParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PaddingParameter, 1001));
};


/**
 * @param {?proto.apollo.perception.inference.PaddingParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setPaddingParam = function(value) {
  return jspb.Message.setWrapperField(this, 1001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPaddingParam = function() {
  return this.setPaddingParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPaddingParam = function() {
  return jspb.Message.getField(this, 1001) != null;
};


/**
 * optional ReorgParameter reorg_param = 301;
 * @return {?proto.apollo.perception.inference.ReorgParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getReorgParam = function() {
  return /** @type{?proto.apollo.perception.inference.ReorgParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ReorgParameter, 301));
};


/**
 * @param {?proto.apollo.perception.inference.ReorgParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setReorgParam = function(value) {
  return jspb.Message.setWrapperField(this, 301, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearReorgParam = function() {
  return this.setReorgParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasReorgParam = function() {
  return jspb.Message.getField(this, 301) != null;
};


/**
 * optional MVNParameter mvn_param = 120;
 * @return {?proto.apollo.perception.inference.MVNParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getMvnParam = function() {
  return /** @type{?proto.apollo.perception.inference.MVNParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.MVNParameter, 120));
};


/**
 * @param {?proto.apollo.perception.inference.MVNParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setMvnParam = function(value) {
  return jspb.Message.setWrapperField(this, 120, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearMvnParam = function() {
  return this.setMvnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasMvnParam = function() {
  return jspb.Message.getField(this, 120) != null;
};


/**
 * optional NormalizeParameter norm_param = 206;
 * @return {?proto.apollo.perception.inference.NormalizeParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getNormParam = function() {
  return /** @type{?proto.apollo.perception.inference.NormalizeParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NormalizeParameter, 206));
};


/**
 * @param {?proto.apollo.perception.inference.NormalizeParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setNormParam = function(value) {
  return jspb.Message.setWrapperField(this, 206, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearNormParam = function() {
  return this.setNormParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasNormParam = function() {
  return jspb.Message.getField(this, 206) != null;
};


/**
 * optional ParameterParameter parameter_param = 145;
 * @return {?proto.apollo.perception.inference.ParameterParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getParameterParam = function() {
  return /** @type{?proto.apollo.perception.inference.ParameterParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ParameterParameter, 145));
};


/**
 * @param {?proto.apollo.perception.inference.ParameterParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setParameterParam = function(value) {
  return jspb.Message.setWrapperField(this, 145, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearParameterParam = function() {
  return this.setParameterParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasParameterParam = function() {
  return jspb.Message.getField(this, 145) != null;
};


/**
 * optional PermuteParameter permute_param = 202;
 * @return {?proto.apollo.perception.inference.PermuteParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPermuteParam = function() {
  return /** @type{?proto.apollo.perception.inference.PermuteParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PermuteParameter, 202));
};


/**
 * @param {?proto.apollo.perception.inference.PermuteParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setPermuteParam = function(value) {
  return jspb.Message.setWrapperField(this, 202, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPermuteParam = function() {
  return this.setPermuteParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPermuteParam = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional PoolingParameter pooling_param = 121;
 * @return {?proto.apollo.perception.inference.PoolingParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPoolingParam = function() {
  return /** @type{?proto.apollo.perception.inference.PoolingParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PoolingParameter, 121));
};


/**
 * @param {?proto.apollo.perception.inference.PoolingParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setPoolingParam = function(value) {
  return jspb.Message.setWrapperField(this, 121, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPoolingParam = function() {
  return this.setPoolingParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPoolingParam = function() {
  return jspb.Message.getField(this, 121) != null;
};


/**
 * optional PowerParameter power_param = 122;
 * @return {?proto.apollo.perception.inference.PowerParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPowerParam = function() {
  return /** @type{?proto.apollo.perception.inference.PowerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PowerParameter, 122));
};


/**
 * @param {?proto.apollo.perception.inference.PowerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setPowerParam = function(value) {
  return jspb.Message.setWrapperField(this, 122, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPowerParam = function() {
  return this.setPowerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPowerParam = function() {
  return jspb.Message.getField(this, 122) != null;
};


/**
 * optional PReLUParameter prelu_param = 131;
 * @return {?proto.apollo.perception.inference.PReLUParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPreluParam = function() {
  return /** @type{?proto.apollo.perception.inference.PReLUParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PReLUParameter, 131));
};


/**
 * @param {?proto.apollo.perception.inference.PReLUParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setPreluParam = function(value) {
  return jspb.Message.setWrapperField(this, 131, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPreluParam = function() {
  return this.setPreluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPreluParam = function() {
  return jspb.Message.getField(this, 131) != null;
};


/**
 * optional PriorBoxParameter prior_box_param = 203;
 * @return {?proto.apollo.perception.inference.PriorBoxParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPriorBoxParam = function() {
  return /** @type{?proto.apollo.perception.inference.PriorBoxParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PriorBoxParameter, 203));
};


/**
 * @param {?proto.apollo.perception.inference.PriorBoxParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setPriorBoxParam = function(value) {
  return jspb.Message.setWrapperField(this, 203, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPriorBoxParam = function() {
  return this.setPriorBoxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPriorBoxParam = function() {
  return jspb.Message.getField(this, 203) != null;
};


/**
 * optional PythonParameter python_param = 130;
 * @return {?proto.apollo.perception.inference.PythonParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getPythonParam = function() {
  return /** @type{?proto.apollo.perception.inference.PythonParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PythonParameter, 130));
};


/**
 * @param {?proto.apollo.perception.inference.PythonParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setPythonParam = function(value) {
  return jspb.Message.setWrapperField(this, 130, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearPythonParam = function() {
  return this.setPythonParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasPythonParam = function() {
  return jspb.Message.getField(this, 130) != null;
};


/**
 * optional RecurrentParameter recurrent_param = 146;
 * @return {?proto.apollo.perception.inference.RecurrentParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getRecurrentParam = function() {
  return /** @type{?proto.apollo.perception.inference.RecurrentParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.RecurrentParameter, 146));
};


/**
 * @param {?proto.apollo.perception.inference.RecurrentParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setRecurrentParam = function(value) {
  return jspb.Message.setWrapperField(this, 146, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearRecurrentParam = function() {
  return this.setRecurrentParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasRecurrentParam = function() {
  return jspb.Message.getField(this, 146) != null;
};


/**
 * optional ReductionParameter reduction_param = 136;
 * @return {?proto.apollo.perception.inference.ReductionParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getReductionParam = function() {
  return /** @type{?proto.apollo.perception.inference.ReductionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ReductionParameter, 136));
};


/**
 * @param {?proto.apollo.perception.inference.ReductionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setReductionParam = function(value) {
  return jspb.Message.setWrapperField(this, 136, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearReductionParam = function() {
  return this.setReductionParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasReductionParam = function() {
  return jspb.Message.getField(this, 136) != null;
};


/**
 * optional ReLUParameter relu_param = 123;
 * @return {?proto.apollo.perception.inference.ReLUParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getReluParam = function() {
  return /** @type{?proto.apollo.perception.inference.ReLUParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ReLUParameter, 123));
};


/**
 * @param {?proto.apollo.perception.inference.ReLUParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setReluParam = function(value) {
  return jspb.Message.setWrapperField(this, 123, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearReluParam = function() {
  return this.setReluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasReluParam = function() {
  return jspb.Message.getField(this, 123) != null;
};


/**
 * optional ReshapeParameter reshape_param = 133;
 * @return {?proto.apollo.perception.inference.ReshapeParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getReshapeParam = function() {
  return /** @type{?proto.apollo.perception.inference.ReshapeParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ReshapeParameter, 133));
};


/**
 * @param {?proto.apollo.perception.inference.ReshapeParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setReshapeParam = function(value) {
  return jspb.Message.setWrapperField(this, 133, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearReshapeParam = function() {
  return this.setReshapeParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasReshapeParam = function() {
  return jspb.Message.getField(this, 133) != null;
};


/**
 * optional ROIPoolingParameter roi_pooling_param = 8266711;
 * @return {?proto.apollo.perception.inference.ROIPoolingParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getRoiPoolingParam = function() {
  return /** @type{?proto.apollo.perception.inference.ROIPoolingParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ROIPoolingParameter, 8266711));
};


/**
 * @param {?proto.apollo.perception.inference.ROIPoolingParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setRoiPoolingParam = function(value) {
  return jspb.Message.setWrapperField(this, 8266711, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearRoiPoolingParam = function() {
  return this.setRoiPoolingParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasRoiPoolingParam = function() {
  return jspb.Message.getField(this, 8266711) != null;
};


/**
 * optional ScaleParameter scale_param = 142;
 * @return {?proto.apollo.perception.inference.ScaleParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getScaleParam = function() {
  return /** @type{?proto.apollo.perception.inference.ScaleParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ScaleParameter, 142));
};


/**
 * @param {?proto.apollo.perception.inference.ScaleParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setScaleParam = function(value) {
  return jspb.Message.setWrapperField(this, 142, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearScaleParam = function() {
  return this.setScaleParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasScaleParam = function() {
  return jspb.Message.getField(this, 142) != null;
};


/**
 * optional SigmoidParameter sigmoid_param = 124;
 * @return {?proto.apollo.perception.inference.SigmoidParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getSigmoidParam = function() {
  return /** @type{?proto.apollo.perception.inference.SigmoidParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SigmoidParameter, 124));
};


/**
 * @param {?proto.apollo.perception.inference.SigmoidParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setSigmoidParam = function(value) {
  return jspb.Message.setWrapperField(this, 124, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearSigmoidParam = function() {
  return this.setSigmoidParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasSigmoidParam = function() {
  return jspb.Message.getField(this, 124) != null;
};


/**
 * optional SoftmaxParameter softmax_param = 125;
 * @return {?proto.apollo.perception.inference.SoftmaxParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getSoftmaxParam = function() {
  return /** @type{?proto.apollo.perception.inference.SoftmaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SoftmaxParameter, 125));
};


/**
 * @param {?proto.apollo.perception.inference.SoftmaxParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setSoftmaxParam = function(value) {
  return jspb.Message.setWrapperField(this, 125, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearSoftmaxParam = function() {
  return this.setSoftmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasSoftmaxParam = function() {
  return jspb.Message.getField(this, 125) != null;
};


/**
 * optional SPPParameter spp_param = 132;
 * @return {?proto.apollo.perception.inference.SPPParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getSppParam = function() {
  return /** @type{?proto.apollo.perception.inference.SPPParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SPPParameter, 132));
};


/**
 * @param {?proto.apollo.perception.inference.SPPParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setSppParam = function(value) {
  return jspb.Message.setWrapperField(this, 132, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearSppParam = function() {
  return this.setSppParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasSppParam = function() {
  return jspb.Message.getField(this, 132) != null;
};


/**
 * optional SliceParameter slice_param = 126;
 * @return {?proto.apollo.perception.inference.SliceParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getSliceParam = function() {
  return /** @type{?proto.apollo.perception.inference.SliceParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SliceParameter, 126));
};


/**
 * @param {?proto.apollo.perception.inference.SliceParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setSliceParam = function(value) {
  return jspb.Message.setWrapperField(this, 126, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearSliceParam = function() {
  return this.setSliceParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasSliceParam = function() {
  return jspb.Message.getField(this, 126) != null;
};


/**
 * optional TanHParameter tanh_param = 127;
 * @return {?proto.apollo.perception.inference.TanHParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getTanhParam = function() {
  return /** @type{?proto.apollo.perception.inference.TanHParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.TanHParameter, 127));
};


/**
 * @param {?proto.apollo.perception.inference.TanHParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setTanhParam = function(value) {
  return jspb.Message.setWrapperField(this, 127, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearTanhParam = function() {
  return this.setTanhParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasTanhParam = function() {
  return jspb.Message.getField(this, 127) != null;
};


/**
 * optional ThresholdParameter threshold_param = 128;
 * @return {?proto.apollo.perception.inference.ThresholdParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getThresholdParam = function() {
  return /** @type{?proto.apollo.perception.inference.ThresholdParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ThresholdParameter, 128));
};


/**
 * @param {?proto.apollo.perception.inference.ThresholdParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setThresholdParam = function(value) {
  return jspb.Message.setWrapperField(this, 128, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearThresholdParam = function() {
  return this.setThresholdParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasThresholdParam = function() {
  return jspb.Message.getField(this, 128) != null;
};


/**
 * optional TileParameter tile_param = 138;
 * @return {?proto.apollo.perception.inference.TileParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getTileParam = function() {
  return /** @type{?proto.apollo.perception.inference.TileParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.TileParameter, 138));
};


/**
 * @param {?proto.apollo.perception.inference.TileParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setTileParam = function(value) {
  return jspb.Message.setWrapperField(this, 138, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearTileParam = function() {
  return this.setTileParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasTileParam = function() {
  return jspb.Message.getField(this, 138) != null;
};


/**
 * optional VideoDataParameter video_data_param = 207;
 * @return {?proto.apollo.perception.inference.VideoDataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getVideoDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.VideoDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.VideoDataParameter, 207));
};


/**
 * @param {?proto.apollo.perception.inference.VideoDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setVideoDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 207, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearVideoDataParam = function() {
  return this.setVideoDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasVideoDataParam = function() {
  return jspb.Message.getField(this, 207) != null;
};


/**
 * optional WindowDataParameter window_data_param = 129;
 * @return {?proto.apollo.perception.inference.WindowDataParameter}
 */
proto.apollo.perception.inference.LayerParameter.prototype.getWindowDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.WindowDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.WindowDataParameter, 129));
};


/**
 * @param {?proto.apollo.perception.inference.WindowDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
*/
proto.apollo.perception.inference.LayerParameter.prototype.setWindowDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 129, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.LayerParameter} returns this
 */
proto.apollo.perception.inference.LayerParameter.prototype.clearWindowDataParam = function() {
  return this.setWindowDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LayerParameter.prototype.hasWindowDataParam = function() {
  return jspb.Message.getField(this, 129) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.TransformationParameter.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.TransformationParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.TransformationParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.TransformationParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    mirror: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    cropSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cropH: jspb.Message.getFieldWithDefault(msg, 11, 0),
    cropW: jspb.Message.getFieldWithDefault(msg, 12, 0),
    meanFile: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    meanValueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    forceColor: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    forceGray: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    resizeParam: (f = msg.getResizeParam()) && proto.apollo.perception.inference.ResizeParameter.toObject(includeInstance, f),
    noiseParam: (f = msg.getNoiseParam()) && proto.apollo.perception.inference.NoiseParameter.toObject(includeInstance, f),
    distortParam: (f = msg.getDistortParam()) && proto.apollo.perception.inference.DistortionParameter.toObject(includeInstance, f),
    expandParam: (f = msg.getExpandParam()) && proto.apollo.perception.inference.ExpansionParameter.toObject(includeInstance, f),
    jitter: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    emitConstraint: (f = msg.getEmitConstraint()) && proto.apollo.perception.inference.EmitConstraint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TransformationParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.TransformationParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.mirror;

  /** @type {?|undefined} */
  this.cropSize;

  /** @type {?|undefined} */
  this.cropH;

  /** @type {?|undefined} */
  this.cropW;

  /** @type {?|undefined} */
  this.meanFile;

  /** @type {?|undefined} */
  this.meanValueList;

  /** @type {?|undefined} */
  this.forceColor;

  /** @type {?|undefined} */
  this.forceGray;

  /** @type {?|undefined} */
  this.resizeParam;

  /** @type {?|undefined} */
  this.noiseParam;

  /** @type {?|undefined} */
  this.distortParam;

  /** @type {?|undefined} */
  this.expandParam;

  /** @type {?|undefined} */
  this.jitter;

  /** @type {?|undefined} */
  this.emitConstraint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.TransformationParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.TransformationParameter}
 */
proto.apollo.perception.inference.TransformationParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.TransformationParameter();
  obj.scale != null && jspb.Message.setField(msg, 1, obj.scale);
  obj.mirror != null && jspb.Message.setField(msg, 2, obj.mirror);
  obj.cropSize != null && jspb.Message.setField(msg, 3, obj.cropSize);
  obj.cropH != null && jspb.Message.setField(msg, 11, obj.cropH);
  obj.cropW != null && jspb.Message.setField(msg, 12, obj.cropW);
  obj.meanFile != null && jspb.Message.setField(msg, 4, obj.meanFile);
  obj.meanValueList != null && jspb.Message.setField(msg, 5, obj.meanValueList);
  obj.forceColor != null && jspb.Message.setField(msg, 6, obj.forceColor);
  obj.forceGray != null && jspb.Message.setField(msg, 7, obj.forceGray);
  obj.resizeParam && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.perception.inference.ResizeParameter.fromObject(obj.resizeParam));
  obj.noiseParam && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.perception.inference.NoiseParameter.fromObject(obj.noiseParam));
  obj.distortParam && jspb.Message.setWrapperField(
      msg, 13, proto.apollo.perception.inference.DistortionParameter.fromObject(obj.distortParam));
  obj.expandParam && jspb.Message.setWrapperField(
      msg, 14, proto.apollo.perception.inference.ExpansionParameter.fromObject(obj.expandParam));
  obj.jitter != null && jspb.Message.setField(msg, 15, obj.jitter);
  obj.emitConstraint && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.perception.inference.EmitConstraint.fromObject(obj.emitConstraint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.TransformationParameter}
 */
proto.apollo.perception.inference.TransformationParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.TransformationParameter;
  return proto.apollo.perception.inference.TransformationParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.TransformationParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.TransformationParameter}
 */
proto.apollo.perception.inference.TransformationParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropH(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropW(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMeanValue(values[i]);
      }
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceColor(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceGray(value);
      break;
    case 8:
      var value = new proto.apollo.perception.inference.ResizeParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ResizeParameter.deserializeBinaryFromReader);
      msg.setResizeParam(value);
      break;
    case 9:
      var value = new proto.apollo.perception.inference.NoiseParameter;
      reader.readMessage(value,proto.apollo.perception.inference.NoiseParameter.deserializeBinaryFromReader);
      msg.setNoiseParam(value);
      break;
    case 13:
      var value = new proto.apollo.perception.inference.DistortionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DistortionParameter.deserializeBinaryFromReader);
      msg.setDistortParam(value);
      break;
    case 14:
      var value = new proto.apollo.perception.inference.ExpansionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ExpansionParameter.deserializeBinaryFromReader);
      msg.setExpandParam(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setJitter(value);
      break;
    case 10:
      var value = new proto.apollo.perception.inference.EmitConstraint;
      reader.readMessage(value,proto.apollo.perception.inference.EmitConstraint.deserializeBinaryFromReader);
      msg.setEmitConstraint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.TransformationParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.TransformationParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.TransformationParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMeanValueList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getResizeParam();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.perception.inference.ResizeParameter.serializeBinaryToWriter
    );
  }
  f = message.getNoiseParam();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.perception.inference.NoiseParameter.serializeBinaryToWriter
    );
  }
  f = message.getDistortParam();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.apollo.perception.inference.DistortionParameter.serializeBinaryToWriter
    );
  }
  f = message.getExpandParam();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.apollo.perception.inference.ExpansionParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getEmitConstraint();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.perception.inference.EmitConstraint.serializeBinaryToWriter
    );
  }
};


/**
 * optional float scale = 1;
 * @return {number}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool mirror = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setMirror = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearMirror = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 crop_size = 3;
 * @return {number}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setCropSize = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearCropSize = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 crop_h = 11;
 * @return {number}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getCropH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setCropH = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearCropH = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasCropH = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 crop_w = 12;
 * @return {number}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getCropW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setCropW = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearCropW = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasCropW = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string mean_file = 4;
 * @return {string}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setMeanFile = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearMeanFile = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated float mean_value = 5;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getMeanValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setMeanValueList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.addMeanValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearMeanValueList = function() {
  return this.setMeanValueList([]);
};


/**
 * optional bool force_color = 6;
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getForceColor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setForceColor = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearForceColor = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasForceColor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool force_gray = 7;
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getForceGray = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setForceGray = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearForceGray = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasForceGray = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ResizeParameter resize_param = 8;
 * @return {?proto.apollo.perception.inference.ResizeParameter}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getResizeParam = function() {
  return /** @type{?proto.apollo.perception.inference.ResizeParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ResizeParameter, 8));
};


/**
 * @param {?proto.apollo.perception.inference.ResizeParameter|undefined} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
*/
proto.apollo.perception.inference.TransformationParameter.prototype.setResizeParam = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearResizeParam = function() {
  return this.setResizeParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasResizeParam = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NoiseParameter noise_param = 9;
 * @return {?proto.apollo.perception.inference.NoiseParameter}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getNoiseParam = function() {
  return /** @type{?proto.apollo.perception.inference.NoiseParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NoiseParameter, 9));
};


/**
 * @param {?proto.apollo.perception.inference.NoiseParameter|undefined} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
*/
proto.apollo.perception.inference.TransformationParameter.prototype.setNoiseParam = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearNoiseParam = function() {
  return this.setNoiseParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasNoiseParam = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DistortionParameter distort_param = 13;
 * @return {?proto.apollo.perception.inference.DistortionParameter}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getDistortParam = function() {
  return /** @type{?proto.apollo.perception.inference.DistortionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DistortionParameter, 13));
};


/**
 * @param {?proto.apollo.perception.inference.DistortionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
*/
proto.apollo.perception.inference.TransformationParameter.prototype.setDistortParam = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearDistortParam = function() {
  return this.setDistortParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasDistortParam = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ExpansionParameter expand_param = 14;
 * @return {?proto.apollo.perception.inference.ExpansionParameter}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getExpandParam = function() {
  return /** @type{?proto.apollo.perception.inference.ExpansionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ExpansionParameter, 14));
};


/**
 * @param {?proto.apollo.perception.inference.ExpansionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
*/
proto.apollo.perception.inference.TransformationParameter.prototype.setExpandParam = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearExpandParam = function() {
  return this.setExpandParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasExpandParam = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float jitter = 15;
 * @return {number}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getJitter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.setJitter = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearJitter = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasJitter = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional EmitConstraint emit_constraint = 10;
 * @return {?proto.apollo.perception.inference.EmitConstraint}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.getEmitConstraint = function() {
  return /** @type{?proto.apollo.perception.inference.EmitConstraint} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.EmitConstraint, 10));
};


/**
 * @param {?proto.apollo.perception.inference.EmitConstraint|undefined} value
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
*/
proto.apollo.perception.inference.TransformationParameter.prototype.setEmitConstraint = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.TransformationParameter} returns this
 */
proto.apollo.perception.inference.TransformationParameter.prototype.clearEmitConstraint = function() {
  return this.setEmitConstraint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TransformationParameter.prototype.hasEmitConstraint = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.ResizeParameter.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ResizeParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ResizeParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ResizeParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    prob: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    resizeMode: jspb.Message.getFieldWithDefault(msg, 2, 1),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    heightScale: jspb.Message.getFieldWithDefault(msg, 8, 0),
    widthScale: jspb.Message.getFieldWithDefault(msg, 9, 0),
    padMode: jspb.Message.getFieldWithDefault(msg, 5, 1),
    padValueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    interpModeList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ResizeParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ResizeParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.prob;

  /** @type {?|undefined} */
  this.resizeMode;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.heightScale;

  /** @type {?|undefined} */
  this.widthScale;

  /** @type {?|undefined} */
  this.padMode;

  /** @type {?|undefined} */
  this.padValueList;

  /** @type {?|undefined} */
  this.interpModeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ResizeParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ResizeParameter}
 */
proto.apollo.perception.inference.ResizeParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ResizeParameter();
  obj.prob != null && jspb.Message.setField(msg, 1, obj.prob);
  obj.resizeMode != null && jspb.Message.setField(msg, 2, obj.resizeMode);
  obj.height != null && jspb.Message.setField(msg, 3, obj.height);
  obj.width != null && jspb.Message.setField(msg, 4, obj.width);
  obj.heightScale != null && jspb.Message.setField(msg, 8, obj.heightScale);
  obj.widthScale != null && jspb.Message.setField(msg, 9, obj.widthScale);
  obj.padMode != null && jspb.Message.setField(msg, 5, obj.padMode);
  obj.padValueList != null && jspb.Message.setField(msg, 6, obj.padValueList);
  obj.interpModeList != null && jspb.Message.setField(msg, 7, obj.interpModeList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ResizeParameter}
 */
proto.apollo.perception.inference.ResizeParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ResizeParameter;
  return proto.apollo.perception.inference.ResizeParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ResizeParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ResizeParameter}
 */
proto.apollo.perception.inference.ResizeParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProb(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.perception.inference.ResizeParameter.Resize_mode} */ (reader.readEnum());
      msg.setResizeMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeightScale(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidthScale(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.perception.inference.ResizeParameter.Pad_mode} */ (reader.readEnum());
      msg.setPadMode(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPadValue(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<!proto.apollo.perception.inference.ResizeParameter.Interp_mode>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInterpMode(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ResizeParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ResizeParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ResizeParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.ResizeParameter.Resize_mode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.ResizeParameter.Pad_mode} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPadValueList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      6,
      f
    );
  }
  f = message.getInterpModeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.ResizeParameter.Resize_mode = {
  WARP: 1,
  FIT_SMALL_SIZE: 2,
  FIT_LARGE_SIZE_AND_PAD: 3
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.ResizeParameter.Pad_mode = {
  CONSTANT: 1,
  MIRRORED: 2,
  REPEAT_NEAREST: 3
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.ResizeParameter.Interp_mode = {
  LINEAR: 1,
  AREA: 2,
  NEAREST: 3,
  CUBIC: 4,
  LANCZOS4: 5
};

/**
 * optional float prob = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setProb = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearProb = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.hasProb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Resize_mode resize_mode = 2;
 * @return {!proto.apollo.perception.inference.ResizeParameter.Resize_mode}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getResizeMode = function() {
  return /** @type {!proto.apollo.perception.inference.ResizeParameter.Resize_mode} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.apollo.perception.inference.ResizeParameter.Resize_mode} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setResizeMode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearResizeMode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.hasResizeMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 width = 4;
 * @return {number}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 height_scale = 8;
 * @return {number}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getHeightScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setHeightScale = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearHeightScale = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.hasHeightScale = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 width_scale = 9;
 * @return {number}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getWidthScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setWidthScale = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearWidthScale = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.hasWidthScale = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Pad_mode pad_mode = 5;
 * @return {!proto.apollo.perception.inference.ResizeParameter.Pad_mode}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getPadMode = function() {
  return /** @type {!proto.apollo.perception.inference.ResizeParameter.Pad_mode} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/**
 * @param {!proto.apollo.perception.inference.ResizeParameter.Pad_mode} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setPadMode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearPadMode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.hasPadMode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated float pad_value = 6;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getPadValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setPadValueList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.addPadValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearPadValueList = function() {
  return this.setPadValueList([]);
};


/**
 * repeated Interp_mode interp_mode = 7;
 * @return {!Array<!proto.apollo.perception.inference.ResizeParameter.Interp_mode>}
 */
proto.apollo.perception.inference.ResizeParameter.prototype.getInterpModeList = function() {
  return /** @type {!Array<!proto.apollo.perception.inference.ResizeParameter.Interp_mode>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.ResizeParameter.Interp_mode>} value
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.setInterpModeList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.apollo.perception.inference.ResizeParameter.Interp_mode} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.addInterpMode = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.ResizeParameter} returns this
 */
proto.apollo.perception.inference.ResizeParameter.prototype.clearInterpModeList = function() {
  return this.setInterpModeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.SaltPepperParameter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.SaltPepperParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.SaltPepperParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SaltPepperParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    fraction: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    valueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SaltPepperParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.SaltPepperParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.fraction;

  /** @type {?|undefined} */
  this.valueList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.SaltPepperParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.SaltPepperParameter}
 */
proto.apollo.perception.inference.SaltPepperParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.SaltPepperParameter();
  obj.fraction != null && jspb.Message.setField(msg, 1, obj.fraction);
  obj.valueList != null && jspb.Message.setField(msg, 2, obj.valueList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.SaltPepperParameter}
 */
proto.apollo.perception.inference.SaltPepperParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.SaltPepperParameter;
  return proto.apollo.perception.inference.SaltPepperParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.SaltPepperParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.SaltPepperParameter}
 */
proto.apollo.perception.inference.SaltPepperParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFraction(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValue(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.SaltPepperParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.SaltPepperParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SaltPepperParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
};


/**
 * optional float fraction = 1;
 * @return {number}
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.getFraction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SaltPepperParameter} returns this
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.setFraction = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SaltPepperParameter} returns this
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.clearFraction = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.hasFraction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float value = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.getValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.SaltPepperParameter} returns this
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.SaltPepperParameter} returns this
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.SaltPepperParameter} returns this
 */
proto.apollo.perception.inference.SaltPepperParameter.prototype.clearValueList = function() {
  return this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NoiseParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NoiseParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NoiseParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    prob: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    histEq: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    inverse: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    decolorize: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    gaussBlur: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    jpeg: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, -1.0),
    posterize: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    erode: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    saltpepper: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    saltpepperParam: (f = msg.getSaltpepperParam()) && proto.apollo.perception.inference.SaltPepperParameter.toObject(includeInstance, f),
    clahe: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    convertToHsv: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    convertToLab: jspb.Message.getBooleanFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NoiseParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NoiseParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.prob;

  /** @type {?|undefined} */
  this.histEq;

  /** @type {?|undefined} */
  this.inverse;

  /** @type {?|undefined} */
  this.decolorize;

  /** @type {?|undefined} */
  this.gaussBlur;

  /** @type {?|undefined} */
  this.jpeg;

  /** @type {?|undefined} */
  this.posterize;

  /** @type {?|undefined} */
  this.erode;

  /** @type {?|undefined} */
  this.saltpepper;

  /** @type {?|undefined} */
  this.saltpepperParam;

  /** @type {?|undefined} */
  this.clahe;

  /** @type {?|undefined} */
  this.convertToHsv;

  /** @type {?|undefined} */
  this.convertToLab;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NoiseParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NoiseParameter}
 */
proto.apollo.perception.inference.NoiseParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NoiseParameter();
  obj.prob != null && jspb.Message.setField(msg, 1, obj.prob);
  obj.histEq != null && jspb.Message.setField(msg, 2, obj.histEq);
  obj.inverse != null && jspb.Message.setField(msg, 3, obj.inverse);
  obj.decolorize != null && jspb.Message.setField(msg, 4, obj.decolorize);
  obj.gaussBlur != null && jspb.Message.setField(msg, 5, obj.gaussBlur);
  obj.jpeg != null && jspb.Message.setField(msg, 6, obj.jpeg);
  obj.posterize != null && jspb.Message.setField(msg, 7, obj.posterize);
  obj.erode != null && jspb.Message.setField(msg, 8, obj.erode);
  obj.saltpepper != null && jspb.Message.setField(msg, 9, obj.saltpepper);
  obj.saltpepperParam && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.perception.inference.SaltPepperParameter.fromObject(obj.saltpepperParam));
  obj.clahe != null && jspb.Message.setField(msg, 11, obj.clahe);
  obj.convertToHsv != null && jspb.Message.setField(msg, 12, obj.convertToHsv);
  obj.convertToLab != null && jspb.Message.setField(msg, 13, obj.convertToLab);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NoiseParameter}
 */
proto.apollo.perception.inference.NoiseParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NoiseParameter;
  return proto.apollo.perception.inference.NoiseParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NoiseParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NoiseParameter}
 */
proto.apollo.perception.inference.NoiseParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProb(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHistEq(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInverse(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDecolorize(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGaussBlur(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setJpeg(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPosterize(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setErode(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaltpepper(value);
      break;
    case 10:
      var value = new proto.apollo.perception.inference.SaltPepperParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SaltPepperParameter.deserializeBinaryFromReader);
      msg.setSaltpepperParam(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClahe(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConvertToHsv(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConvertToLab(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NoiseParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NoiseParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NoiseParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getSaltpepperParam();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.perception.inference.SaltPepperParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional float prob = 1;
 * @return {number}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setProb = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearProb = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasProb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool hist_eq = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getHistEq = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setHistEq = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearHistEq = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasHistEq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool inverse = 3;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getInverse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setInverse = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearInverse = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasInverse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool decolorize = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getDecolorize = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setDecolorize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearDecolorize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasDecolorize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool gauss_blur = 5;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getGaussBlur = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setGaussBlur = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearGaussBlur = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasGaussBlur = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float jpeg = 6;
 * @return {number}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getJpeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, -1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setJpeg = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearJpeg = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasJpeg = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool posterize = 7;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getPosterize = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setPosterize = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearPosterize = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasPosterize = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool erode = 8;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getErode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setErode = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearErode = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasErode = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool saltpepper = 9;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getSaltpepper = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setSaltpepper = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearSaltpepper = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasSaltpepper = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SaltPepperParameter saltpepper_param = 10;
 * @return {?proto.apollo.perception.inference.SaltPepperParameter}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getSaltpepperParam = function() {
  return /** @type{?proto.apollo.perception.inference.SaltPepperParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SaltPepperParameter, 10));
};


/**
 * @param {?proto.apollo.perception.inference.SaltPepperParameter|undefined} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
*/
proto.apollo.perception.inference.NoiseParameter.prototype.setSaltpepperParam = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearSaltpepperParam = function() {
  return this.setSaltpepperParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasSaltpepperParam = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool clahe = 11;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getClahe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setClahe = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearClahe = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasClahe = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool convert_to_hsv = 12;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getConvertToHsv = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setConvertToHsv = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearConvertToHsv = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasConvertToHsv = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool convert_to_lab = 13;
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.getConvertToLab = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.setConvertToLab = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NoiseParameter} returns this
 */
proto.apollo.perception.inference.NoiseParameter.prototype.clearConvertToLab = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NoiseParameter.prototype.hasConvertToLab = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DistortionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DistortionParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DistortionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    brightnessProb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    brightnessDelta: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    contrastProb: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    contrastLower: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    contrastUpper: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    hueProb: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    hueDelta: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    saturationProb: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    saturationLower: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    saturationUpper: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    randomOrderProb: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DistortionParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DistortionParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.brightnessProb;

  /** @type {?|undefined} */
  this.brightnessDelta;

  /** @type {?|undefined} */
  this.contrastProb;

  /** @type {?|undefined} */
  this.contrastLower;

  /** @type {?|undefined} */
  this.contrastUpper;

  /** @type {?|undefined} */
  this.hueProb;

  /** @type {?|undefined} */
  this.hueDelta;

  /** @type {?|undefined} */
  this.saturationProb;

  /** @type {?|undefined} */
  this.saturationLower;

  /** @type {?|undefined} */
  this.saturationUpper;

  /** @type {?|undefined} */
  this.randomOrderProb;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DistortionParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DistortionParameter}
 */
proto.apollo.perception.inference.DistortionParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DistortionParameter();
  obj.brightnessProb != null && jspb.Message.setField(msg, 1, obj.brightnessProb);
  obj.brightnessDelta != null && jspb.Message.setField(msg, 2, obj.brightnessDelta);
  obj.contrastProb != null && jspb.Message.setField(msg, 3, obj.contrastProb);
  obj.contrastLower != null && jspb.Message.setField(msg, 4, obj.contrastLower);
  obj.contrastUpper != null && jspb.Message.setField(msg, 5, obj.contrastUpper);
  obj.hueProb != null && jspb.Message.setField(msg, 6, obj.hueProb);
  obj.hueDelta != null && jspb.Message.setField(msg, 7, obj.hueDelta);
  obj.saturationProb != null && jspb.Message.setField(msg, 8, obj.saturationProb);
  obj.saturationLower != null && jspb.Message.setField(msg, 9, obj.saturationLower);
  obj.saturationUpper != null && jspb.Message.setField(msg, 10, obj.saturationUpper);
  obj.randomOrderProb != null && jspb.Message.setField(msg, 11, obj.randomOrderProb);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DistortionParameter}
 */
proto.apollo.perception.inference.DistortionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DistortionParameter;
  return proto.apollo.perception.inference.DistortionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DistortionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DistortionParameter}
 */
proto.apollo.perception.inference.DistortionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBrightnessProb(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBrightnessDelta(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setContrastProb(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setContrastLower(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setContrastUpper(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHueProb(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHueDelta(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSaturationProb(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSaturationLower(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSaturationUpper(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRandomOrderProb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DistortionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DistortionParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DistortionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * optional float brightness_prob = 1;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getBrightnessProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setBrightnessProb = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearBrightnessProb = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasBrightnessProb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float brightness_delta = 2;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getBrightnessDelta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setBrightnessDelta = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearBrightnessDelta = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasBrightnessDelta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float contrast_prob = 3;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getContrastProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setContrastProb = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearContrastProb = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasContrastProb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float contrast_lower = 4;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getContrastLower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setContrastLower = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearContrastLower = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasContrastLower = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float contrast_upper = 5;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getContrastUpper = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setContrastUpper = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearContrastUpper = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasContrastUpper = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float hue_prob = 6;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getHueProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setHueProb = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearHueProb = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasHueProb = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float hue_delta = 7;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getHueDelta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setHueDelta = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearHueDelta = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasHueDelta = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float saturation_prob = 8;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getSaturationProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setSaturationProb = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearSaturationProb = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasSaturationProb = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float saturation_lower = 9;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getSaturationLower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setSaturationLower = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearSaturationLower = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasSaturationLower = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float saturation_upper = 10;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getSaturationUpper = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setSaturationUpper = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearSaturationUpper = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasSaturationUpper = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float random_order_prob = 11;
 * @return {number}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.getRandomOrderProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.setRandomOrderProb = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DistortionParameter} returns this
 */
proto.apollo.perception.inference.DistortionParameter.prototype.clearRandomOrderProb = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DistortionParameter.prototype.hasRandomOrderProb = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ExpansionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ExpansionParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ExpansionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    prob: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    maxExpandRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ExpansionParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ExpansionParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.prob;

  /** @type {?|undefined} */
  this.maxExpandRatio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ExpansionParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ExpansionParameter}
 */
proto.apollo.perception.inference.ExpansionParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ExpansionParameter();
  obj.prob != null && jspb.Message.setField(msg, 1, obj.prob);
  obj.maxExpandRatio != null && jspb.Message.setField(msg, 2, obj.maxExpandRatio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ExpansionParameter}
 */
proto.apollo.perception.inference.ExpansionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ExpansionParameter;
  return proto.apollo.perception.inference.ExpansionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ExpansionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ExpansionParameter}
 */
proto.apollo.perception.inference.ExpansionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProb(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxExpandRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ExpansionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ExpansionParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ExpansionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float prob = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.getProb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ExpansionParameter} returns this
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.setProb = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ExpansionParameter} returns this
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.clearProb = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.hasProb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float max_expand_ratio = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.getMaxExpandRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ExpansionParameter} returns this
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.setMaxExpandRatio = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ExpansionParameter} returns this
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.clearMaxExpandRatio = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ExpansionParameter.prototype.hasMaxExpandRatio = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.LossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.LossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.LossParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    ignoreLabel: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    normalization: jspb.Message.getFieldWithDefault(msg, 3, 1),
    normalize: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LossParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.LossParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ignoreLabel;

  /** @type {?|undefined} */
  this.normalization;

  /** @type {?|undefined} */
  this.normalize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.LossParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.LossParameter}
 */
proto.apollo.perception.inference.LossParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.LossParameter();
  obj.ignoreLabel != null && jspb.Message.setField(msg, 1, obj.ignoreLabel);
  obj.normalization != null && jspb.Message.setField(msg, 3, obj.normalization);
  obj.normalize != null && jspb.Message.setField(msg, 2, obj.normalize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.LossParameter}
 */
proto.apollo.perception.inference.LossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.LossParameter;
  return proto.apollo.perception.inference.LossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.LossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.LossParameter}
 */
proto.apollo.perception.inference.LossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIgnoreLabel(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.perception.inference.LossParameter.NormalizationMode} */ (reader.readEnum());
      msg.setNormalization(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNormalize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.LossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.LossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.LossParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.LossParameter.NormalizationMode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.LossParameter.NormalizationMode = {
  FULL: 0,
  VALID: 1,
  BATCH_SIZE: 2,
  NONE: 3
};

/**
 * optional int32 ignore_label = 1;
 * @return {number}
 */
proto.apollo.perception.inference.LossParameter.prototype.getIgnoreLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LossParameter} returns this
 */
proto.apollo.perception.inference.LossParameter.prototype.setIgnoreLabel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LossParameter} returns this
 */
proto.apollo.perception.inference.LossParameter.prototype.clearIgnoreLabel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LossParameter.prototype.hasIgnoreLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NormalizationMode normalization = 3;
 * @return {!proto.apollo.perception.inference.LossParameter.NormalizationMode}
 */
proto.apollo.perception.inference.LossParameter.prototype.getNormalization = function() {
  return /** @type {!proto.apollo.perception.inference.LossParameter.NormalizationMode} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.apollo.perception.inference.LossParameter.NormalizationMode} value
 * @return {!proto.apollo.perception.inference.LossParameter} returns this
 */
proto.apollo.perception.inference.LossParameter.prototype.setNormalization = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LossParameter} returns this
 */
proto.apollo.perception.inference.LossParameter.prototype.clearNormalization = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LossParameter.prototype.hasNormalization = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool normalize = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.LossParameter.prototype.getNormalize = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.LossParameter} returns this
 */
proto.apollo.perception.inference.LossParameter.prototype.setNormalize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LossParameter} returns this
 */
proto.apollo.perception.inference.LossParameter.prototype.clearNormalize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LossParameter.prototype.hasNormalize = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.AccuracyParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.AccuracyParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AccuracyParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    topK: jspb.Message.getFieldWithDefault(msg, 1, 1),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 1),
    ignoreLabel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AccuracyParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.AccuracyParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topK;

  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.ignoreLabel;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.AccuracyParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.AccuracyParameter}
 */
proto.apollo.perception.inference.AccuracyParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.AccuracyParameter();
  obj.topK != null && jspb.Message.setField(msg, 1, obj.topK);
  obj.axis != null && jspb.Message.setField(msg, 2, obj.axis);
  obj.ignoreLabel != null && jspb.Message.setField(msg, 3, obj.ignoreLabel);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.AccuracyParameter}
 */
proto.apollo.perception.inference.AccuracyParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.AccuracyParameter;
  return proto.apollo.perception.inference.AccuracyParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.AccuracyParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.AccuracyParameter}
 */
proto.apollo.perception.inference.AccuracyParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTopK(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIgnoreLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.AccuracyParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.AccuracyParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AccuracyParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 top_k = 1;
 * @return {number}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.getTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.AccuracyParameter} returns this
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.setTopK = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AccuracyParameter} returns this
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.clearTopK = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.hasTopK = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.AccuracyParameter} returns this
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AccuracyParameter} returns this
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 ignore_label = 3;
 * @return {number}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.getIgnoreLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.AccuracyParameter} returns this
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.setIgnoreLabel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AccuracyParameter} returns this
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.clearIgnoreLabel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AccuracyParameter.prototype.hasIgnoreLabel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.AnnotatedDataParameter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.AnnotatedDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.AnnotatedDataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnnotatedDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchSamplerList: jspb.Message.toObjectList(msg.getBatchSamplerList(),
    proto.apollo.perception.inference.BatchSampler.toObject, includeInstance),
    labelMapFile: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    annoType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numClasses: jspb.Message.getFieldWithDefault(msg, 10, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AnnotatedDataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.AnnotatedDataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.batchSamplerList;

  /** @type {?|undefined} */
  this.labelMapFile;

  /** @type {?|undefined} */
  this.annoType;

  /** @type {?|undefined} */
  this.numClasses;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.AnnotatedDataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.AnnotatedDataParameter();
  obj.batchSamplerList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.batchSamplerList.map(
          proto.apollo.perception.inference.BatchSampler.fromObject));
  obj.labelMapFile != null && jspb.Message.setField(msg, 2, obj.labelMapFile);
  obj.annoType != null && jspb.Message.setField(msg, 3, obj.annoType);
  obj.numClasses != null && jspb.Message.setField(msg, 10, obj.numClasses);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.AnnotatedDataParameter;
  return proto.apollo.perception.inference.AnnotatedDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.AnnotatedDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.BatchSampler;
      reader.readMessage(value,proto.apollo.perception.inference.BatchSampler.deserializeBinaryFromReader);
      msg.addBatchSampler(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelMapFile(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} */ (reader.readEnum());
      msg.setAnnoType(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumClasses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.AnnotatedDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.AnnotatedDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnnotatedDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchSamplerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.inference.BatchSampler.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * repeated BatchSampler batch_sampler = 1;
 * @return {!Array<!proto.apollo.perception.inference.BatchSampler>}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.getBatchSamplerList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.BatchSampler>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.BatchSampler, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.BatchSampler>} value
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
*/
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.setBatchSamplerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.inference.BatchSampler=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BatchSampler}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.addBatchSampler = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.inference.BatchSampler, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.clearBatchSamplerList = function() {
  return this.setBatchSamplerList([]);
};


/**
 * optional string label_map_file = 2;
 * @return {string}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.getLabelMapFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.setLabelMapFile = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.clearLabelMapFile = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.hasLabelMapFile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AnnotatedDatum.AnnotationType anno_type = 3;
 * @return {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.getAnnoType = function() {
  return /** @type {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.perception.inference.AnnotatedDatum.AnnotationType} value
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.setAnnoType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.clearAnnoType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.hasAnnoType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 num_classes = 10;
 * @return {number}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AnnotatedDataParameter} returns this
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnnotatedDataParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ArgMaxParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ArgMaxParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ArgMaxParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    outMaxVal: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    topK: jspb.Message.getFieldWithDefault(msg, 2, 1),
    axis: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ArgMaxParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ArgMaxParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.outMaxVal;

  /** @type {?|undefined} */
  this.topK;

  /** @type {?|undefined} */
  this.axis;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ArgMaxParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ArgMaxParameter}
 */
proto.apollo.perception.inference.ArgMaxParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ArgMaxParameter();
  obj.outMaxVal != null && jspb.Message.setField(msg, 1, obj.outMaxVal);
  obj.topK != null && jspb.Message.setField(msg, 2, obj.topK);
  obj.axis != null && jspb.Message.setField(msg, 3, obj.axis);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ArgMaxParameter}
 */
proto.apollo.perception.inference.ArgMaxParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ArgMaxParameter;
  return proto.apollo.perception.inference.ArgMaxParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ArgMaxParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ArgMaxParameter}
 */
proto.apollo.perception.inference.ArgMaxParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutMaxVal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTopK(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ArgMaxParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ArgMaxParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ArgMaxParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool out_max_val = 1;
 * @return {boolean}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.getOutMaxVal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ArgMaxParameter} returns this
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.setOutMaxVal = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ArgMaxParameter} returns this
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.clearOutMaxVal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.hasOutMaxVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 top_k = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.getTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ArgMaxParameter} returns this
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.setTopK = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ArgMaxParameter} returns this
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.clearTopK = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.hasTopK = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 axis = 3;
 * @return {number}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ArgMaxParameter} returns this
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ArgMaxParameter} returns this
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ArgMaxParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ConcatParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ConcatParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ConcatParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ConcatParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 2, 1),
    concatDim: jspb.Message.getFieldWithDefault(msg, 1, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ConcatParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ConcatParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.concatDim;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ConcatParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ConcatParameter}
 */
proto.apollo.perception.inference.ConcatParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ConcatParameter();
  obj.axis != null && jspb.Message.setField(msg, 2, obj.axis);
  obj.concatDim != null && jspb.Message.setField(msg, 1, obj.concatDim);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ConcatParameter}
 */
proto.apollo.perception.inference.ConcatParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ConcatParameter;
  return proto.apollo.perception.inference.ConcatParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ConcatParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ConcatParameter}
 */
proto.apollo.perception.inference.ConcatParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConcatDim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ConcatParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ConcatParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ConcatParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ConcatParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ConcatParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConcatParameter} returns this
 */
proto.apollo.perception.inference.ConcatParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConcatParameter} returns this
 */
proto.apollo.perception.inference.ConcatParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConcatParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 concat_dim = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ConcatParameter.prototype.getConcatDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConcatParameter} returns this
 */
proto.apollo.perception.inference.ConcatParameter.prototype.setConcatDim = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConcatParameter} returns this
 */
proto.apollo.perception.inference.ConcatParameter.prototype.clearConcatDim = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConcatParameter.prototype.hasConcatDim = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.BatchNormParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.BatchNormParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BatchNormParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    useGlobalStats: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    movingAverageFraction: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.999),
    eps: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0E-5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BatchNormParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.BatchNormParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.useGlobalStats;

  /** @type {?|undefined} */
  this.movingAverageFraction;

  /** @type {?|undefined} */
  this.eps;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.BatchNormParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.BatchNormParameter}
 */
proto.apollo.perception.inference.BatchNormParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.BatchNormParameter();
  obj.useGlobalStats != null && jspb.Message.setField(msg, 1, obj.useGlobalStats);
  obj.movingAverageFraction != null && jspb.Message.setField(msg, 2, obj.movingAverageFraction);
  obj.eps != null && jspb.Message.setField(msg, 3, obj.eps);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.BatchNormParameter}
 */
proto.apollo.perception.inference.BatchNormParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.BatchNormParameter;
  return proto.apollo.perception.inference.BatchNormParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.BatchNormParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.BatchNormParameter}
 */
proto.apollo.perception.inference.BatchNormParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseGlobalStats(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMovingAverageFraction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.BatchNormParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.BatchNormParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BatchNormParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional bool use_global_stats = 1;
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.getUseGlobalStats = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.BatchNormParameter} returns this
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.setUseGlobalStats = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchNormParameter} returns this
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.clearUseGlobalStats = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.hasUseGlobalStats = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float moving_average_fraction = 2;
 * @return {number}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.getMovingAverageFraction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.999));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BatchNormParameter} returns this
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.setMovingAverageFraction = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchNormParameter} returns this
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.clearMovingAverageFraction = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.hasMovingAverageFraction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float eps = 3;
 * @return {number}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.getEps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0E-5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BatchNormParameter} returns this
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.setEps = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BatchNormParameter} returns this
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.clearEps = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BatchNormParameter.prototype.hasEps = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.BiasParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.BiasParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.BiasParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BiasParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    numAxes: jspb.Message.getFieldWithDefault(msg, 2, 1),
    filler: (f = msg.getFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BiasParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.BiasParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.numAxes;

  /** @type {?|undefined} */
  this.filler;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.BiasParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.BiasParameter}
 */
proto.apollo.perception.inference.BiasParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.BiasParameter();
  obj.axis != null && jspb.Message.setField(msg, 1, obj.axis);
  obj.numAxes != null && jspb.Message.setField(msg, 2, obj.numAxes);
  obj.filler && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.inference.FillerParameter.fromObject(obj.filler));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.BiasParameter}
 */
proto.apollo.perception.inference.BiasParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.BiasParameter;
  return proto.apollo.perception.inference.BiasParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.BiasParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.BiasParameter}
 */
proto.apollo.perception.inference.BiasParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumAxes(value);
      break;
    case 3:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setFiller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.BiasParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.BiasParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.BiasParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BiasParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.apollo.perception.inference.BiasParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BiasParameter} returns this
 */
proto.apollo.perception.inference.BiasParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BiasParameter} returns this
 */
proto.apollo.perception.inference.BiasParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BiasParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 num_axes = 2;
 * @return {number}
 */
proto.apollo.perception.inference.BiasParameter.prototype.getNumAxes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.BiasParameter} returns this
 */
proto.apollo.perception.inference.BiasParameter.prototype.setNumAxes = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.BiasParameter} returns this
 */
proto.apollo.perception.inference.BiasParameter.prototype.clearNumAxes = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BiasParameter.prototype.hasNumAxes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter filler = 3;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.BiasParameter.prototype.getFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 3));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.BiasParameter} returns this
*/
proto.apollo.perception.inference.BiasParameter.prototype.setFiller = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.BiasParameter} returns this
 */
proto.apollo.perception.inference.BiasParameter.prototype.clearFiller = function() {
  return this.setFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.BiasParameter.prototype.hasFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ContrastiveLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ContrastiveLossParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ContrastiveLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    margin: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    legacyVersion: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ContrastiveLossParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ContrastiveLossParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.margin;

  /** @type {?|undefined} */
  this.legacyVersion;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ContrastiveLossParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ContrastiveLossParameter}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ContrastiveLossParameter();
  obj.margin != null && jspb.Message.setField(msg, 1, obj.margin);
  obj.legacyVersion != null && jspb.Message.setField(msg, 2, obj.legacyVersion);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ContrastiveLossParameter}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ContrastiveLossParameter;
  return proto.apollo.perception.inference.ContrastiveLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ContrastiveLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ContrastiveLossParameter}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMargin(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLegacyVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ContrastiveLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ContrastiveLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ContrastiveLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional float margin = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.getMargin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ContrastiveLossParameter} returns this
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.setMargin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ContrastiveLossParameter} returns this
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.clearMargin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.hasMargin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool legacy_version = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.getLegacyVersion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ContrastiveLossParameter} returns this
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.setLegacyVersion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ContrastiveLossParameter} returns this
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.clearLegacyVersion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ContrastiveLossParameter.prototype.hasLegacyVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.ConvolutionParameter.repeatedFields_ = [3,4,6,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ConvolutionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ConvolutionParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ConvolutionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    biasTerm: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    padList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    kernelSizeList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    strideList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    dilationList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
    padH: jspb.Message.getFieldWithDefault(msg, 9, 0),
    padW: jspb.Message.getFieldWithDefault(msg, 10, 0),
    kernelH: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    kernelW: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    strideH: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    strideW: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    group: jspb.Message.getFieldWithDefault(msg, 5, 1),
    weightFiller: (f = msg.getWeightFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    engine: jspb.Message.getFieldWithDefault(msg, 15, 0),
    axis: jspb.Message.getFieldWithDefault(msg, 16, 1),
    forceNdIm2col: jspb.Message.getBooleanFieldWithDefault(msg, 17, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ConvolutionParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ConvolutionParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.numOutput;

  /** @type {?|undefined} */
  this.biasTerm;

  /** @type {?|undefined} */
  this.padList;

  /** @type {?|undefined} */
  this.kernelSizeList;

  /** @type {?|undefined} */
  this.strideList;

  /** @type {?|undefined} */
  this.dilationList;

  /** @type {?|undefined} */
  this.padH;

  /** @type {?|undefined} */
  this.padW;

  /** @type {?|undefined} */
  this.kernelH;

  /** @type {?|undefined} */
  this.kernelW;

  /** @type {?|undefined} */
  this.strideH;

  /** @type {?|undefined} */
  this.strideW;

  /** @type {?|undefined} */
  this.group;

  /** @type {?|undefined} */
  this.weightFiller;

  /** @type {?|undefined} */
  this.biasFiller;

  /** @type {?|undefined} */
  this.engine;

  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.forceNdIm2col;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ConvolutionParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter}
 */
proto.apollo.perception.inference.ConvolutionParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ConvolutionParameter();
  obj.numOutput != null && jspb.Message.setField(msg, 1, obj.numOutput);
  obj.biasTerm != null && jspb.Message.setField(msg, 2, obj.biasTerm);
  obj.padList != null && jspb.Message.setField(msg, 3, obj.padList);
  obj.kernelSizeList != null && jspb.Message.setField(msg, 4, obj.kernelSizeList);
  obj.strideList != null && jspb.Message.setField(msg, 6, obj.strideList);
  obj.dilationList != null && jspb.Message.setField(msg, 18, obj.dilationList);
  obj.padH != null && jspb.Message.setField(msg, 9, obj.padH);
  obj.padW != null && jspb.Message.setField(msg, 10, obj.padW);
  obj.kernelH != null && jspb.Message.setField(msg, 11, obj.kernelH);
  obj.kernelW != null && jspb.Message.setField(msg, 12, obj.kernelW);
  obj.strideH != null && jspb.Message.setField(msg, 13, obj.strideH);
  obj.strideW != null && jspb.Message.setField(msg, 14, obj.strideW);
  obj.group != null && jspb.Message.setField(msg, 5, obj.group);
  obj.weightFiller && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.perception.inference.FillerParameter.fromObject(obj.weightFiller));
  obj.biasFiller && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.perception.inference.FillerParameter.fromObject(obj.biasFiller));
  obj.engine != null && jspb.Message.setField(msg, 15, obj.engine);
  obj.axis != null && jspb.Message.setField(msg, 16, obj.axis);
  obj.forceNdIm2col != null && jspb.Message.setField(msg, 17, obj.forceNdIm2col);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter}
 */
proto.apollo.perception.inference.ConvolutionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ConvolutionParameter;
  return proto.apollo.perception.inference.ConvolutionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ConvolutionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter}
 */
proto.apollo.perception.inference.ConvolutionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPad(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addKernelSize(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStride(values[i]);
      }
      break;
    case 18:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDilation(values[i]);
      }
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadH(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadW(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelH(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelW(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideH(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideW(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 7:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 8:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 15:
      var value = /** @type {!proto.apollo.perception.inference.ConvolutionParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceNdIm2col(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ConvolutionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ConvolutionParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ConvolutionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPadList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = message.getKernelSizeList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      4,
      f
    );
  }
  f = message.getStrideList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      6,
      f
    );
  }
  f = message.getDilationList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.inference.ConvolutionParameter.Engine} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setNumOutput = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearNumOutput = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bias_term = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setBiasTerm = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearBiasTerm = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint32 pad = 3;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getPadList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setPadList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.addPad = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearPadList = function() {
  return this.setPadList([]);
};


/**
 * repeated uint32 kernel_size = 4;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getKernelSizeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setKernelSizeList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.addKernelSize = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearKernelSizeList = function() {
  return this.setKernelSizeList([]);
};


/**
 * repeated uint32 stride = 6;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getStrideList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setStrideList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.addStride = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearStrideList = function() {
  return this.setStrideList([]);
};


/**
 * repeated uint32 dilation = 18;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getDilationList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 18));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setDilationList = function(value) {
  return jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.addDilation = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearDilationList = function() {
  return this.setDilationList([]);
};


/**
 * optional uint32 pad_h = 9;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getPadH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setPadH = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearPadH = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasPadH = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 pad_w = 10;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getPadW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setPadW = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearPadW = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasPadW = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 kernel_h = 11;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getKernelH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setKernelH = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearKernelH = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasKernelH = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 kernel_w = 12;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getKernelW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setKernelW = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearKernelW = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasKernelW = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 stride_h = 13;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getStrideH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setStrideH = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearStrideH = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasStrideH = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 stride_w = 14;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getStrideW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setStrideW = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearStrideW = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasStrideW = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 group = 5;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setGroup = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FillerParameter weight_filler = 7;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 7));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
*/
proto.apollo.perception.inference.ConvolutionParameter.prototype.setWeightFiller = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearWeightFiller = function() {
  return this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FillerParameter bias_filler = 8;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 8));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
*/
proto.apollo.perception.inference.ConvolutionParameter.prototype.setBiasFiller = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearBiasFiller = function() {
  return this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Engine engine = 15;
 * @return {!proto.apollo.perception.inference.ConvolutionParameter.Engine}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.ConvolutionParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.apollo.perception.inference.ConvolutionParameter.Engine} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 axis = 16;
 * @return {number}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool force_nd_im2col = 17;
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.getForceNdIm2col = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.setForceNdIm2col = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ConvolutionParameter} returns this
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.clearForceNdIm2col = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ConvolutionParameter.prototype.hasForceNdIm2col = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.CropParameter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.CropParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.CropParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.CropParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.CropParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 2),
    offsetList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CropParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.CropParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.offsetList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.CropParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.CropParameter}
 */
proto.apollo.perception.inference.CropParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.CropParameter();
  obj.axis != null && jspb.Message.setField(msg, 1, obj.axis);
  obj.offsetList != null && jspb.Message.setField(msg, 2, obj.offsetList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.CropParameter}
 */
proto.apollo.perception.inference.CropParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.CropParameter;
  return proto.apollo.perception.inference.CropParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.CropParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.CropParameter}
 */
proto.apollo.perception.inference.CropParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOffset(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.CropParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.CropParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.CropParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.CropParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOffsetList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.apollo.perception.inference.CropParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.CropParameter} returns this
 */
proto.apollo.perception.inference.CropParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.CropParameter} returns this
 */
proto.apollo.perception.inference.CropParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.CropParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 offset = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.CropParameter.prototype.getOffsetList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.CropParameter} returns this
 */
proto.apollo.perception.inference.CropParameter.prototype.setOffsetList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.CropParameter} returns this
 */
proto.apollo.perception.inference.CropParameter.prototype.addOffset = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.CropParameter} returns this
 */
proto.apollo.perception.inference.CropParameter.prototype.clearOffsetList = function() {
  return this.setOffsetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    batchSize: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    randSkip: jspb.Message.getFieldWithDefault(msg, 7, 0),
    backend: jspb.Message.getFieldWithDefault(msg, 8, 0),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    meanFile: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    cropSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mirror: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    forceEncodedColor: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    prefetch: jspb.Message.getFieldWithDefault(msg, 10, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.batchSize;

  /** @type {?|undefined} */
  this.randSkip;

  /** @type {?|undefined} */
  this.backend;

  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.meanFile;

  /** @type {?|undefined} */
  this.cropSize;

  /** @type {?|undefined} */
  this.mirror;

  /** @type {?|undefined} */
  this.forceEncodedColor;

  /** @type {?|undefined} */
  this.prefetch;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DataParameter}
 */
proto.apollo.perception.inference.DataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DataParameter();
  obj.source != null && jspb.Message.setField(msg, 1, obj.source);
  obj.batchSize != null && jspb.Message.setField(msg, 4, obj.batchSize);
  obj.randSkip != null && jspb.Message.setField(msg, 7, obj.randSkip);
  obj.backend != null && jspb.Message.setField(msg, 8, obj.backend);
  obj.scale != null && jspb.Message.setField(msg, 2, obj.scale);
  obj.meanFile != null && jspb.Message.setField(msg, 3, obj.meanFile);
  obj.cropSize != null && jspb.Message.setField(msg, 5, obj.cropSize);
  obj.mirror != null && jspb.Message.setField(msg, 6, obj.mirror);
  obj.forceEncodedColor != null && jspb.Message.setField(msg, 9, obj.forceEncodedColor);
  obj.prefetch != null && jspb.Message.setField(msg, 10, obj.prefetch);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DataParameter}
 */
proto.apollo.perception.inference.DataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DataParameter;
  return proto.apollo.perception.inference.DataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DataParameter}
 */
proto.apollo.perception.inference.DataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandSkip(value);
      break;
    case 8:
      var value = /** @type {!proto.apollo.perception.inference.DataParameter.DB} */ (reader.readEnum());
      msg.setBackend(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceEncodedColor(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrefetch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.DataParameter.DB} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.DataParameter.DB = {
  LEVELDB: 0,
  LMDB: 1
};

/**
 * optional string source = 1;
 * @return {string}
 */
proto.apollo.perception.inference.DataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 batch_size = 4;
 * @return {number}
 */
proto.apollo.perception.inference.DataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setBatchSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearBatchSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rand_skip = 7;
 * @return {number}
 */
proto.apollo.perception.inference.DataParameter.prototype.getRandSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setRandSkip = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearRandSkip = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasRandSkip = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DB backend = 8;
 * @return {!proto.apollo.perception.inference.DataParameter.DB}
 */
proto.apollo.perception.inference.DataParameter.prototype.getBackend = function() {
  return /** @type {!proto.apollo.perception.inference.DataParameter.DB} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.apollo.perception.inference.DataParameter.DB} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setBackend = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearBackend = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.apollo.perception.inference.DataParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mean_file = 3;
 * @return {string}
 */
proto.apollo.perception.inference.DataParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setMeanFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearMeanFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 crop_size = 5;
 * @return {number}
 */
proto.apollo.perception.inference.DataParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setCropSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearCropSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool mirror = 6;
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setMirror = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearMirror = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool force_encoded_color = 9;
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.getForceEncodedColor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setForceEncodedColor = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearForceEncodedColor = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasForceEncodedColor = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 prefetch = 10;
 * @return {number}
 */
proto.apollo.perception.inference.DataParameter.prototype.getPrefetch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.setPrefetch = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DataParameter} returns this
 */
proto.apollo.perception.inference.DataParameter.prototype.clearPrefetch = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DataParameter.prototype.hasPrefetch = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DetectionEvaluateParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DetectionEvaluateParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numClasses: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    backgroundLabelId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    overlapThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.5),
    evaluateDifficultGt: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    nameSizeFile: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    resizeParam: (f = msg.getResizeParam()) && proto.apollo.perception.inference.ResizeParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DetectionEvaluateParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.numClasses;

  /** @type {?|undefined} */
  this.backgroundLabelId;

  /** @type {?|undefined} */
  this.overlapThreshold;

  /** @type {?|undefined} */
  this.evaluateDifficultGt;

  /** @type {?|undefined} */
  this.nameSizeFile;

  /** @type {?|undefined} */
  this.resizeParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DetectionEvaluateParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DetectionEvaluateParameter();
  obj.numClasses != null && jspb.Message.setField(msg, 1, obj.numClasses);
  obj.backgroundLabelId != null && jspb.Message.setField(msg, 2, obj.backgroundLabelId);
  obj.overlapThreshold != null && jspb.Message.setField(msg, 3, obj.overlapThreshold);
  obj.evaluateDifficultGt != null && jspb.Message.setField(msg, 4, obj.evaluateDifficultGt);
  obj.nameSizeFile != null && jspb.Message.setField(msg, 5, obj.nameSizeFile);
  obj.resizeParam && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.perception.inference.ResizeParameter.fromObject(obj.resizeParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DetectionEvaluateParameter;
  return proto.apollo.perception.inference.DetectionEvaluateParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DetectionEvaluateParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumClasses(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBackgroundLabelId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOverlapThreshold(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEvaluateDifficultGt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameSizeFile(value);
      break;
    case 6:
      var value = new proto.apollo.perception.inference.ResizeParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ResizeParameter.deserializeBinaryFromReader);
      msg.setResizeParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DetectionEvaluateParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DetectionEvaluateParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getResizeParam();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.perception.inference.ResizeParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_classes = 1;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 background_label_id = 2;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.getBackgroundLabelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.setBackgroundLabelId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.clearBackgroundLabelId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.hasBackgroundLabelId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float overlap_threshold = 3;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.getOverlapThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.setOverlapThreshold = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.clearOverlapThreshold = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.hasOverlapThreshold = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool evaluate_difficult_gt = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.getEvaluateDifficultGt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.setEvaluateDifficultGt = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.clearEvaluateDifficultGt = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.hasEvaluateDifficultGt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string name_size_file = 5;
 * @return {string}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.getNameSizeFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.setNameSizeFile = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.clearNameSizeFile = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.hasNameSizeFile = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResizeParameter resize_param = 6;
 * @return {?proto.apollo.perception.inference.ResizeParameter}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.getResizeParam = function() {
  return /** @type{?proto.apollo.perception.inference.ResizeParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ResizeParameter, 6));
};


/**
 * @param {?proto.apollo.perception.inference.ResizeParameter|undefined} value
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
*/
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.setResizeParam = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionEvaluateParameter} returns this
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.clearResizeParam = function() {
  return this.setResizeParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionEvaluateParameter.prototype.hasResizeParam = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NonMaximumSuppressionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    nmsThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.3),
    topK: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    eta: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NonMaximumSuppressionParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.nmsThreshold;

  /** @type {?|undefined} */
  this.topK;

  /** @type {?|undefined} */
  this.eta;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NonMaximumSuppressionParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NonMaximumSuppressionParameter();
  obj.nmsThreshold != null && jspb.Message.setField(msg, 1, obj.nmsThreshold);
  obj.topK != null && jspb.Message.setField(msg, 2, obj.topK);
  obj.eta != null && jspb.Message.setField(msg, 3, obj.eta);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NonMaximumSuppressionParameter;
  return proto.apollo.perception.inference.NonMaximumSuppressionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNmsThreshold(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTopK(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NonMaximumSuppressionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float nms_threshold = 1;
 * @return {number}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.getNmsThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} returns this
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.setNmsThreshold = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} returns this
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.clearNmsThreshold = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.hasNmsThreshold = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 top_k = 2;
 * @return {number}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.getTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} returns this
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.setTopK = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} returns this
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.clearTopK = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.hasTopK = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float eta = 3;
 * @return {number}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.getEta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} returns this
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.setEta = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NonMaximumSuppressionParameter} returns this
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.clearEta = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NonMaximumSuppressionParameter.prototype.hasEta = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.SaveOutputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.SaveOutputParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SaveOutputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputDirectory: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    outputNamePrefix: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    outputFormat: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    labelMapFile: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    nameSizeFile: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    numTestImage: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    resizeParam: (f = msg.getResizeParam()) && proto.apollo.perception.inference.ResizeParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SaveOutputParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.SaveOutputParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.outputDirectory;

  /** @type {?|undefined} */
  this.outputNamePrefix;

  /** @type {?|undefined} */
  this.outputFormat;

  /** @type {?|undefined} */
  this.labelMapFile;

  /** @type {?|undefined} */
  this.nameSizeFile;

  /** @type {?|undefined} */
  this.numTestImage;

  /** @type {?|undefined} */
  this.resizeParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.SaveOutputParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter}
 */
proto.apollo.perception.inference.SaveOutputParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.SaveOutputParameter();
  obj.outputDirectory != null && jspb.Message.setField(msg, 1, obj.outputDirectory);
  obj.outputNamePrefix != null && jspb.Message.setField(msg, 2, obj.outputNamePrefix);
  obj.outputFormat != null && jspb.Message.setField(msg, 3, obj.outputFormat);
  obj.labelMapFile != null && jspb.Message.setField(msg, 4, obj.labelMapFile);
  obj.nameSizeFile != null && jspb.Message.setField(msg, 5, obj.nameSizeFile);
  obj.numTestImage != null && jspb.Message.setField(msg, 6, obj.numTestImage);
  obj.resizeParam && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.perception.inference.ResizeParameter.fromObject(obj.resizeParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter}
 */
proto.apollo.perception.inference.SaveOutputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.SaveOutputParameter;
  return proto.apollo.perception.inference.SaveOutputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.SaveOutputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter}
 */
proto.apollo.perception.inference.SaveOutputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputDirectory(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputNamePrefix(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputFormat(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelMapFile(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameSizeFile(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumTestImage(value);
      break;
    case 7:
      var value = new proto.apollo.perception.inference.ResizeParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ResizeParameter.deserializeBinaryFromReader);
      msg.setResizeParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.SaveOutputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.SaveOutputParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SaveOutputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getResizeParam();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.perception.inference.ResizeParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string output_directory = 1;
 * @return {string}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.getOutputDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.setOutputDirectory = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.clearOutputDirectory = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.hasOutputDirectory = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string output_name_prefix = 2;
 * @return {string}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.getOutputNamePrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.setOutputNamePrefix = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.clearOutputNamePrefix = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.hasOutputNamePrefix = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string output_format = 3;
 * @return {string}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.getOutputFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.setOutputFormat = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.clearOutputFormat = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.hasOutputFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string label_map_file = 4;
 * @return {string}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.getLabelMapFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.setLabelMapFile = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.clearLabelMapFile = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.hasLabelMapFile = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string name_size_file = 5;
 * @return {string}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.getNameSizeFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.setNameSizeFile = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.clearNameSizeFile = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.hasNameSizeFile = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 num_test_image = 6;
 * @return {number}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.getNumTestImage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.setNumTestImage = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.clearNumTestImage = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.hasNumTestImage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ResizeParameter resize_param = 7;
 * @return {?proto.apollo.perception.inference.ResizeParameter}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.getResizeParam = function() {
  return /** @type{?proto.apollo.perception.inference.ResizeParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ResizeParameter, 7));
};


/**
 * @param {?proto.apollo.perception.inference.ResizeParameter|undefined} value
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
*/
proto.apollo.perception.inference.SaveOutputParameter.prototype.setResizeParam = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.SaveOutputParameter} returns this
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.clearResizeParam = function() {
  return this.setResizeParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SaveOutputParameter.prototype.hasResizeParam = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DetectionOutputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DetectionOutputParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DetectionOutputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numClasses: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    shareLocation: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    backgroundLabelId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nmsParam: (f = msg.getNmsParam()) && proto.apollo.perception.inference.NonMaximumSuppressionParameter.toObject(includeInstance, f),
    saveOutputParam: (f = msg.getSaveOutputParam()) && proto.apollo.perception.inference.SaveOutputParameter.toObject(includeInstance, f),
    codeType: jspb.Message.getFieldWithDefault(msg, 6, 1),
    varianceEncodedInTarget: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    keepTopK: jspb.Message.getFieldWithDefault(msg, 7, -1),
    confidenceThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    visualize: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    visualizeThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    saveFile: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DetectionOutputParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DetectionOutputParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.numClasses;

  /** @type {?|undefined} */
  this.shareLocation;

  /** @type {?|undefined} */
  this.backgroundLabelId;

  /** @type {?|undefined} */
  this.nmsParam;

  /** @type {?|undefined} */
  this.saveOutputParam;

  /** @type {?|undefined} */
  this.codeType;

  /** @type {?|undefined} */
  this.varianceEncodedInTarget;

  /** @type {?|undefined} */
  this.keepTopK;

  /** @type {?|undefined} */
  this.confidenceThreshold;

  /** @type {?|undefined} */
  this.visualize;

  /** @type {?|undefined} */
  this.visualizeThreshold;

  /** @type {?|undefined} */
  this.saveFile;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DetectionOutputParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter}
 */
proto.apollo.perception.inference.DetectionOutputParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DetectionOutputParameter();
  obj.numClasses != null && jspb.Message.setField(msg, 1, obj.numClasses);
  obj.shareLocation != null && jspb.Message.setField(msg, 2, obj.shareLocation);
  obj.backgroundLabelId != null && jspb.Message.setField(msg, 3, obj.backgroundLabelId);
  obj.nmsParam && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.inference.NonMaximumSuppressionParameter.fromObject(obj.nmsParam));
  obj.saveOutputParam && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.perception.inference.SaveOutputParameter.fromObject(obj.saveOutputParam));
  obj.codeType != null && jspb.Message.setField(msg, 6, obj.codeType);
  obj.varianceEncodedInTarget != null && jspb.Message.setField(msg, 8, obj.varianceEncodedInTarget);
  obj.keepTopK != null && jspb.Message.setField(msg, 7, obj.keepTopK);
  obj.confidenceThreshold != null && jspb.Message.setField(msg, 9, obj.confidenceThreshold);
  obj.visualize != null && jspb.Message.setField(msg, 10, obj.visualize);
  obj.visualizeThreshold != null && jspb.Message.setField(msg, 11, obj.visualizeThreshold);
  obj.saveFile != null && jspb.Message.setField(msg, 12, obj.saveFile);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter}
 */
proto.apollo.perception.inference.DetectionOutputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DetectionOutputParameter;
  return proto.apollo.perception.inference.DetectionOutputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DetectionOutputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter}
 */
proto.apollo.perception.inference.DetectionOutputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumClasses(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShareLocation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBackgroundLabelId(value);
      break;
    case 4:
      var value = new proto.apollo.perception.inference.NonMaximumSuppressionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.NonMaximumSuppressionParameter.deserializeBinaryFromReader);
      msg.setNmsParam(value);
      break;
    case 5:
      var value = new proto.apollo.perception.inference.SaveOutputParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SaveOutputParameter.deserializeBinaryFromReader);
      msg.setSaveOutputParam(value);
      break;
    case 6:
      var value = /** @type {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} */ (reader.readEnum());
      msg.setCodeType(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVarianceEncodedInTarget(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeepTopK(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidenceThreshold(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisualize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVisualizeThreshold(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaveFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DetectionOutputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DetectionOutputParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DetectionOutputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNmsParam();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.inference.NonMaximumSuppressionParameter.serializeBinaryToWriter
    );
  }
  f = message.getSaveOutputParam();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.perception.inference.SaveOutputParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional uint32 num_classes = 1;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool share_location = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getShareLocation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setShareLocation = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearShareLocation = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasShareLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 background_label_id = 3;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getBackgroundLabelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setBackgroundLabelId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearBackgroundLabelId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasBackgroundLabelId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NonMaximumSuppressionParameter nms_param = 4;
 * @return {?proto.apollo.perception.inference.NonMaximumSuppressionParameter}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getNmsParam = function() {
  return /** @type{?proto.apollo.perception.inference.NonMaximumSuppressionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NonMaximumSuppressionParameter, 4));
};


/**
 * @param {?proto.apollo.perception.inference.NonMaximumSuppressionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
*/
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setNmsParam = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearNmsParam = function() {
  return this.setNmsParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasNmsParam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SaveOutputParameter save_output_param = 5;
 * @return {?proto.apollo.perception.inference.SaveOutputParameter}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getSaveOutputParam = function() {
  return /** @type{?proto.apollo.perception.inference.SaveOutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SaveOutputParameter, 5));
};


/**
 * @param {?proto.apollo.perception.inference.SaveOutputParameter|undefined} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
*/
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setSaveOutputParam = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearSaveOutputParam = function() {
  return this.setSaveOutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasSaveOutputParam = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PriorBoxParameter.CodeType code_type = 6;
 * @return {!proto.apollo.perception.inference.PriorBoxParameter.CodeType}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getCodeType = function() {
  return /** @type {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/**
 * @param {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setCodeType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearCodeType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasCodeType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool variance_encoded_in_target = 8;
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getVarianceEncodedInTarget = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setVarianceEncodedInTarget = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearVarianceEncodedInTarget = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasVarianceEncodedInTarget = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 keep_top_k = 7;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getKeepTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setKeepTopK = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearKeepTopK = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasKeepTopK = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float confidence_threshold = 9;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getConfidenceThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setConfidenceThreshold = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearConfidenceThreshold = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasConfidenceThreshold = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool visualize = 10;
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getVisualize = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setVisualize = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearVisualize = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasVisualize = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float visualize_threshold = 11;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getVisualizeThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setVisualizeThreshold = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearVisualizeThreshold = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasVisualizeThreshold = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string save_file = 12;
 * @return {string}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.getSaveFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.setSaveFile = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.clearSaveFile = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputParameter.prototype.hasSaveFile = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.RegionOutputParameter.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.RegionOutputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.RegionOutputParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RegionOutputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numClasses: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    nmsParam: (f = msg.getNmsParam()) && proto.apollo.perception.inference.NonMaximumSuppressionParameter.toObject(includeInstance, f),
    keepTopK: jspb.Message.getFieldWithDefault(msg, 3, -1),
    confidenceThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    anchorboxList: jspb.Message.toObjectList(msg.getAnchorboxList(),
    proto.apollo.perception.inference.AnchorBox.toObject, includeInstance),
    nmsType: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    nmsSigma: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    isRpn: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RegionOutputParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.RegionOutputParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.numClasses;

  /** @type {?|undefined} */
  this.nmsParam;

  /** @type {?|undefined} */
  this.keepTopK;

  /** @type {?|undefined} */
  this.confidenceThreshold;

  /** @type {?|undefined} */
  this.anchorboxList;

  /** @type {?|undefined} */
  this.nmsType;

  /** @type {?|undefined} */
  this.nmsSigma;

  /** @type {?|undefined} */
  this.isRpn;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.RegionOutputParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter}
 */
proto.apollo.perception.inference.RegionOutputParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.RegionOutputParameter();
  obj.numClasses != null && jspb.Message.setField(msg, 1, obj.numClasses);
  obj.nmsParam && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.inference.NonMaximumSuppressionParameter.fromObject(obj.nmsParam));
  obj.keepTopK != null && jspb.Message.setField(msg, 3, obj.keepTopK);
  obj.confidenceThreshold != null && jspb.Message.setField(msg, 4, obj.confidenceThreshold);
  obj.anchorboxList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.anchorboxList.map(
          proto.apollo.perception.inference.AnchorBox.fromObject));
  obj.nmsType != null && jspb.Message.setField(msg, 6, obj.nmsType);
  obj.nmsSigma != null && jspb.Message.setField(msg, 7, obj.nmsSigma);
  obj.isRpn != null && jspb.Message.setField(msg, 8, obj.isRpn);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter}
 */
proto.apollo.perception.inference.RegionOutputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.RegionOutputParameter;
  return proto.apollo.perception.inference.RegionOutputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.RegionOutputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter}
 */
proto.apollo.perception.inference.RegionOutputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumClasses(value);
      break;
    case 2:
      var value = new proto.apollo.perception.inference.NonMaximumSuppressionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.NonMaximumSuppressionParameter.deserializeBinaryFromReader);
      msg.setNmsParam(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeepTopK(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidenceThreshold(value);
      break;
    case 5:
      var value = new proto.apollo.perception.inference.AnchorBox;
      reader.readMessage(value,proto.apollo.perception.inference.AnchorBox.deserializeBinaryFromReader);
      msg.addAnchorbox(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNmsType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNmsSigma(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRpn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.RegionOutputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.RegionOutputParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RegionOutputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNmsParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.inference.NonMaximumSuppressionParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getAnchorboxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.perception.inference.AnchorBox.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional uint32 num_classes = 1;
 * @return {number}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NonMaximumSuppressionParameter nms_param = 2;
 * @return {?proto.apollo.perception.inference.NonMaximumSuppressionParameter}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getNmsParam = function() {
  return /** @type{?proto.apollo.perception.inference.NonMaximumSuppressionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NonMaximumSuppressionParameter, 2));
};


/**
 * @param {?proto.apollo.perception.inference.NonMaximumSuppressionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
*/
proto.apollo.perception.inference.RegionOutputParameter.prototype.setNmsParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearNmsParam = function() {
  return this.setNmsParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.hasNmsParam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 keep_top_k = 3;
 * @return {number}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getKeepTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.setKeepTopK = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearKeepTopK = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.hasKeepTopK = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float confidence_threshold = 4;
 * @return {number}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getConfidenceThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.setConfidenceThreshold = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearConfidenceThreshold = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.hasConfidenceThreshold = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated AnchorBox anchorbox = 5;
 * @return {!Array<!proto.apollo.perception.inference.AnchorBox>}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getAnchorboxList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.AnchorBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.AnchorBox, 5));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.AnchorBox>} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
*/
proto.apollo.perception.inference.RegionOutputParameter.prototype.setAnchorboxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.perception.inference.AnchorBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.AnchorBox}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.addAnchorbox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.perception.inference.AnchorBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearAnchorboxList = function() {
  return this.setAnchorboxList([]);
};


/**
 * optional int32 nms_type = 6;
 * @return {number}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getNmsType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.setNmsType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearNmsType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.hasNmsType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float nms_sigma = 7;
 * @return {number}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getNmsSigma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.setNmsSigma = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearNmsSigma = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.hasNmsSigma = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool is_rpn = 8;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.getIsRpn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.setIsRpn = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionOutputParameter} returns this
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.clearIsRpn = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionOutputParameter.prototype.hasIsRpn = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DropoutParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DropoutParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DropoutParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DropoutParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    dropoutRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DropoutParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DropoutParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dropoutRatio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DropoutParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DropoutParameter}
 */
proto.apollo.perception.inference.DropoutParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DropoutParameter();
  obj.dropoutRatio != null && jspb.Message.setField(msg, 1, obj.dropoutRatio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DropoutParameter}
 */
proto.apollo.perception.inference.DropoutParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DropoutParameter;
  return proto.apollo.perception.inference.DropoutParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DropoutParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DropoutParameter}
 */
proto.apollo.perception.inference.DropoutParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDropoutRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DropoutParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DropoutParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DropoutParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DropoutParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float dropout_ratio = 1;
 * @return {number}
 */
proto.apollo.perception.inference.DropoutParameter.prototype.getDropoutRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DropoutParameter} returns this
 */
proto.apollo.perception.inference.DropoutParameter.prototype.setDropoutRatio = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DropoutParameter} returns this
 */
proto.apollo.perception.inference.DropoutParameter.prototype.clearDropoutRatio = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DropoutParameter.prototype.hasDropoutRatio = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.DummyDataParameter.repeatedFields_ = [1,6,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DummyDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DummyDataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DummyDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataFillerList: jspb.Message.toObjectList(msg.getDataFillerList(),
    proto.apollo.perception.inference.FillerParameter.toObject, includeInstance),
    shapeList: jspb.Message.toObjectList(msg.getShapeList(),
    proto.apollo.perception.inference.BlobShape.toObject, includeInstance),
    numList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    channelsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    heightList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    widthList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DummyDataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DummyDataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dataFillerList;

  /** @type {?|undefined} */
  this.shapeList;

  /** @type {?|undefined} */
  this.numList;

  /** @type {?|undefined} */
  this.channelsList;

  /** @type {?|undefined} */
  this.heightList;

  /** @type {?|undefined} */
  this.widthList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DummyDataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DummyDataParameter}
 */
proto.apollo.perception.inference.DummyDataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DummyDataParameter();
  obj.dataFillerList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.dataFillerList.map(
          proto.apollo.perception.inference.FillerParameter.fromObject));
  obj.shapeList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.shapeList.map(
          proto.apollo.perception.inference.BlobShape.fromObject));
  obj.numList != null && jspb.Message.setField(msg, 2, obj.numList);
  obj.channelsList != null && jspb.Message.setField(msg, 3, obj.channelsList);
  obj.heightList != null && jspb.Message.setField(msg, 4, obj.heightList);
  obj.widthList != null && jspb.Message.setField(msg, 5, obj.widthList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DummyDataParameter}
 */
proto.apollo.perception.inference.DummyDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DummyDataParameter;
  return proto.apollo.perception.inference.DummyDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DummyDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DummyDataParameter}
 */
proto.apollo.perception.inference.DummyDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.addDataFiller(value);
      break;
    case 6:
      var value = new proto.apollo.perception.inference.BlobShape;
      reader.readMessage(value,proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader);
      msg.addShape(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNum(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addChannels(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addHeight(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWidth(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DummyDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DummyDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DummyDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataFillerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter
    );
  }
  f = message.getNumList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = message.getHeightList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      4,
      f
    );
  }
  f = message.getWidthList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      5,
      f
    );
  }
};


/**
 * repeated FillerParameter data_filler = 1;
 * @return {!Array<!proto.apollo.perception.inference.FillerParameter>}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.getDataFillerList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.FillerParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.FillerParameter, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.FillerParameter>} value
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
*/
proto.apollo.perception.inference.DummyDataParameter.prototype.setDataFillerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.inference.FillerParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.addDataFiller = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.inference.FillerParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.clearDataFillerList = function() {
  return this.setDataFillerList([]);
};


/**
 * repeated BlobShape shape = 6;
 * @return {!Array<!proto.apollo.perception.inference.BlobShape>}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.getShapeList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.BlobShape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.BlobShape, 6));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.BlobShape>} value
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
*/
proto.apollo.perception.inference.DummyDataParameter.prototype.setShapeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.perception.inference.BlobShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.addShape = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.perception.inference.BlobShape, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.clearShapeList = function() {
  return this.setShapeList([]);
};


/**
 * repeated uint32 num = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.getNumList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.setNumList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.addNum = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.clearNumList = function() {
  return this.setNumList([]);
};


/**
 * repeated uint32 channels = 3;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.getChannelsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.setChannelsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.addChannels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * repeated uint32 height = 4;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.getHeightList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.setHeightList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.addHeight = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.clearHeightList = function() {
  return this.setHeightList([]);
};


/**
 * repeated uint32 width = 5;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.getWidthList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.setWidthList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.addWidth = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DummyDataParameter} returns this
 */
proto.apollo.perception.inference.DummyDataParameter.prototype.clearWidthList = function() {
  return this.setWidthList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.EltwiseParameter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.EltwiseParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.EltwiseParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.EltwiseParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 1),
    coeffList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    stableProdGrad: jspb.Message.getBooleanFieldWithDefault(msg, 3, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EltwiseParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.EltwiseParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.operation;

  /** @type {?|undefined} */
  this.coeffList;

  /** @type {?|undefined} */
  this.stableProdGrad;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.EltwiseParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.EltwiseParameter}
 */
proto.apollo.perception.inference.EltwiseParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.EltwiseParameter();
  obj.operation != null && jspb.Message.setField(msg, 1, obj.operation);
  obj.coeffList != null && jspb.Message.setField(msg, 2, obj.coeffList);
  obj.stableProdGrad != null && jspb.Message.setField(msg, 3, obj.stableProdGrad);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.EltwiseParameter}
 */
proto.apollo.perception.inference.EltwiseParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.EltwiseParameter;
  return proto.apollo.perception.inference.EltwiseParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.EltwiseParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.EltwiseParameter}
 */
proto.apollo.perception.inference.EltwiseParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.EltwiseParameter.EltwiseOp} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCoeff(values[i]);
      }
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStableProdGrad(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.EltwiseParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.EltwiseParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.EltwiseParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.EltwiseParameter.EltwiseOp} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCoeffList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.EltwiseParameter.EltwiseOp = {
  PROD: 0,
  SUM: 1,
  MAX: 2
};

/**
 * optional EltwiseOp operation = 1;
 * @return {!proto.apollo.perception.inference.EltwiseParameter.EltwiseOp}
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.getOperation = function() {
  return /** @type {!proto.apollo.perception.inference.EltwiseParameter.EltwiseOp} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.perception.inference.EltwiseParameter.EltwiseOp} value
 * @return {!proto.apollo.perception.inference.EltwiseParameter} returns this
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.setOperation = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.EltwiseParameter} returns this
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.clearOperation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float coeff = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.getCoeffList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.EltwiseParameter} returns this
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.setCoeffList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.EltwiseParameter} returns this
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.addCoeff = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.EltwiseParameter} returns this
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.clearCoeffList = function() {
  return this.setCoeffList([]);
};


/**
 * optional bool stable_prod_grad = 3;
 * @return {boolean}
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.getStableProdGrad = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.EltwiseParameter} returns this
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.setStableProdGrad = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.EltwiseParameter} returns this
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.clearStableProdGrad = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EltwiseParameter.prototype.hasStableProdGrad = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ELUParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ELUParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ELUParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ELUParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    alpha: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ELUParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ELUParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.alpha;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ELUParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ELUParameter}
 */
proto.apollo.perception.inference.ELUParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ELUParameter();
  obj.alpha != null && jspb.Message.setField(msg, 1, obj.alpha);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ELUParameter}
 */
proto.apollo.perception.inference.ELUParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ELUParameter;
  return proto.apollo.perception.inference.ELUParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ELUParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ELUParameter}
 */
proto.apollo.perception.inference.ELUParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ELUParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ELUParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ELUParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ELUParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float alpha = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ELUParameter.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ELUParameter} returns this
 */
proto.apollo.perception.inference.ELUParameter.prototype.setAlpha = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ELUParameter} returns this
 */
proto.apollo.perception.inference.ELUParameter.prototype.clearAlpha = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ELUParameter.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.EmbedParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.EmbedParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.EmbedParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    inputDim: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    biasTerm: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),
    weightFiller: (f = msg.getWeightFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EmbedParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.EmbedParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.numOutput;

  /** @type {?|undefined} */
  this.inputDim;

  /** @type {?|undefined} */
  this.biasTerm;

  /** @type {?|undefined} */
  this.weightFiller;

  /** @type {?|undefined} */
  this.biasFiller;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.EmbedParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.EmbedParameter}
 */
proto.apollo.perception.inference.EmbedParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.EmbedParameter();
  obj.numOutput != null && jspb.Message.setField(msg, 1, obj.numOutput);
  obj.inputDim != null && jspb.Message.setField(msg, 2, obj.inputDim);
  obj.biasTerm != null && jspb.Message.setField(msg, 3, obj.biasTerm);
  obj.weightFiller && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.inference.FillerParameter.fromObject(obj.weightFiller));
  obj.biasFiller && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.perception.inference.FillerParameter.fromObject(obj.biasFiller));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.EmbedParameter}
 */
proto.apollo.perception.inference.EmbedParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.EmbedParameter;
  return proto.apollo.perception.inference.EmbedParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.EmbedParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.EmbedParameter}
 */
proto.apollo.perception.inference.EmbedParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputDim(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 4:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 5:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.EmbedParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.EmbedParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.EmbedParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.setNumOutput = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.clearNumOutput = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 input_dim = 2;
 * @return {number}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.getInputDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.setInputDim = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.clearInputDim = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.hasInputDim = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool bias_term = 3;
 * @return {boolean}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.setBiasTerm = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.clearBiasTerm = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FillerParameter weight_filler = 4;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 4));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
*/
proto.apollo.perception.inference.EmbedParameter.prototype.setWeightFiller = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.clearWeightFiller = function() {
  return this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FillerParameter bias_filler = 5;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 5));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
*/
proto.apollo.perception.inference.EmbedParameter.prototype.setBiasFiller = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.EmbedParameter} returns this
 */
proto.apollo.perception.inference.EmbedParameter.prototype.clearBiasFiller = function() {
  return this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.EmbedParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ExpParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ExpParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ExpParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ExpParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, -1.0),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    shift: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ExpParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ExpParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.base;

  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.shift;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ExpParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ExpParameter}
 */
proto.apollo.perception.inference.ExpParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ExpParameter();
  obj.base != null && jspb.Message.setField(msg, 1, obj.base);
  obj.scale != null && jspb.Message.setField(msg, 2, obj.scale);
  obj.shift != null && jspb.Message.setField(msg, 3, obj.shift);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ExpParameter}
 */
proto.apollo.perception.inference.ExpParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ExpParameter;
  return proto.apollo.perception.inference.ExpParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ExpParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ExpParameter}
 */
proto.apollo.perception.inference.ExpParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ExpParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ExpParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ExpParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ExpParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float base = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ExpParameter.prototype.getBase = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, -1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ExpParameter} returns this
 */
proto.apollo.perception.inference.ExpParameter.prototype.setBase = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ExpParameter} returns this
 */
proto.apollo.perception.inference.ExpParameter.prototype.clearBase = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ExpParameter.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ExpParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ExpParameter} returns this
 */
proto.apollo.perception.inference.ExpParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ExpParameter} returns this
 */
proto.apollo.perception.inference.ExpParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ExpParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float shift = 3;
 * @return {number}
 */
proto.apollo.perception.inference.ExpParameter.prototype.getShift = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ExpParameter} returns this
 */
proto.apollo.perception.inference.ExpParameter.prototype.setShift = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ExpParameter} returns this
 */
proto.apollo.perception.inference.ExpParameter.prototype.clearShift = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ExpParameter.prototype.hasShift = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.FlattenParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.FlattenParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.FlattenParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.FlattenParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    endAxis: jspb.Message.getFieldWithDefault(msg, 2, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FlattenParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.FlattenParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.endAxis;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.FlattenParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.FlattenParameter}
 */
proto.apollo.perception.inference.FlattenParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.FlattenParameter();
  obj.axis != null && jspb.Message.setField(msg, 1, obj.axis);
  obj.endAxis != null && jspb.Message.setField(msg, 2, obj.endAxis);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.FlattenParameter}
 */
proto.apollo.perception.inference.FlattenParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.FlattenParameter;
  return proto.apollo.perception.inference.FlattenParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.FlattenParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.FlattenParameter}
 */
proto.apollo.perception.inference.FlattenParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.FlattenParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.FlattenParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.FlattenParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.FlattenParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.apollo.perception.inference.FlattenParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FlattenParameter} returns this
 */
proto.apollo.perception.inference.FlattenParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FlattenParameter} returns this
 */
proto.apollo.perception.inference.FlattenParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FlattenParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 end_axis = 2;
 * @return {number}
 */
proto.apollo.perception.inference.FlattenParameter.prototype.getEndAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.FlattenParameter} returns this
 */
proto.apollo.perception.inference.FlattenParameter.prototype.setEndAxis = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.FlattenParameter} returns this
 */
proto.apollo.perception.inference.FlattenParameter.prototype.clearEndAxis = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.FlattenParameter.prototype.hasEndAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.HDF5DataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.HDF5DataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.HDF5DataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    batchSize: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    shuffle: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of HDF5DataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.HDF5DataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.batchSize;

  /** @type {?|undefined} */
  this.shuffle;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.HDF5DataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.HDF5DataParameter}
 */
proto.apollo.perception.inference.HDF5DataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.HDF5DataParameter();
  obj.source != null && jspb.Message.setField(msg, 1, obj.source);
  obj.batchSize != null && jspb.Message.setField(msg, 2, obj.batchSize);
  obj.shuffle != null && jspb.Message.setField(msg, 3, obj.shuffle);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.HDF5DataParameter}
 */
proto.apollo.perception.inference.HDF5DataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.HDF5DataParameter;
  return proto.apollo.perception.inference.HDF5DataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.HDF5DataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.HDF5DataParameter}
 */
proto.apollo.perception.inference.HDF5DataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShuffle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.HDF5DataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.HDF5DataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.HDF5DataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.HDF5DataParameter} returns this
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.HDF5DataParameter} returns this
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 batch_size = 2;
 * @return {number}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.HDF5DataParameter} returns this
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.setBatchSize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.HDF5DataParameter} returns this
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.clearBatchSize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool shuffle = 3;
 * @return {boolean}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.getShuffle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.HDF5DataParameter} returns this
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.setShuffle = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.HDF5DataParameter} returns this
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.clearShuffle = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.HDF5DataParameter.prototype.hasShuffle = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.HDF5OutputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.HDF5OutputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.HDF5OutputParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.HDF5OutputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of HDF5OutputParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.HDF5OutputParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.fileName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.HDF5OutputParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.HDF5OutputParameter}
 */
proto.apollo.perception.inference.HDF5OutputParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.HDF5OutputParameter();
  obj.fileName != null && jspb.Message.setField(msg, 1, obj.fileName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.HDF5OutputParameter}
 */
proto.apollo.perception.inference.HDF5OutputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.HDF5OutputParameter;
  return proto.apollo.perception.inference.HDF5OutputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.HDF5OutputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.HDF5OutputParameter}
 */
proto.apollo.perception.inference.HDF5OutputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.HDF5OutputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.HDF5OutputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.HDF5OutputParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.HDF5OutputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_name = 1;
 * @return {string}
 */
proto.apollo.perception.inference.HDF5OutputParameter.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.HDF5OutputParameter} returns this
 */
proto.apollo.perception.inference.HDF5OutputParameter.prototype.setFileName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.HDF5OutputParameter} returns this
 */
proto.apollo.perception.inference.HDF5OutputParameter.prototype.clearFileName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.HDF5OutputParameter.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.HingeLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.HingeLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.HingeLossParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.HingeLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    norm: jspb.Message.getFieldWithDefault(msg, 1, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of HingeLossParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.HingeLossParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.norm;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.HingeLossParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.HingeLossParameter}
 */
proto.apollo.perception.inference.HingeLossParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.HingeLossParameter();
  obj.norm != null && jspb.Message.setField(msg, 1, obj.norm);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.HingeLossParameter}
 */
proto.apollo.perception.inference.HingeLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.HingeLossParameter;
  return proto.apollo.perception.inference.HingeLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.HingeLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.HingeLossParameter}
 */
proto.apollo.perception.inference.HingeLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.HingeLossParameter.Norm} */ (reader.readEnum());
      msg.setNorm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.HingeLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.HingeLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.HingeLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.HingeLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.HingeLossParameter.Norm} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.HingeLossParameter.Norm = {
  L1: 1,
  L2: 2
};

/**
 * optional Norm norm = 1;
 * @return {!proto.apollo.perception.inference.HingeLossParameter.Norm}
 */
proto.apollo.perception.inference.HingeLossParameter.prototype.getNorm = function() {
  return /** @type {!proto.apollo.perception.inference.HingeLossParameter.Norm} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.perception.inference.HingeLossParameter.Norm} value
 * @return {!proto.apollo.perception.inference.HingeLossParameter} returns this
 */
proto.apollo.perception.inference.HingeLossParameter.prototype.setNorm = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.HingeLossParameter} returns this
 */
proto.apollo.perception.inference.HingeLossParameter.prototype.clearNorm = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.HingeLossParameter.prototype.hasNorm = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.RepeatedList.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.RepeatedList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.RepeatedList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RepeatedList.toObject = function(includeInstance, msg) {
  var f, obj = {
    listPath: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    numRepeat: jspb.Message.getFieldWithDefault(msg, 2, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RepeatedList as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.RepeatedList.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.listPath;

  /** @type {?|undefined} */
  this.numRepeat;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.RepeatedList.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.RepeatedList}
 */
proto.apollo.perception.inference.RepeatedList.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.RepeatedList();
  obj.listPath != null && jspb.Message.setField(msg, 1, obj.listPath);
  obj.numRepeat != null && jspb.Message.setField(msg, 2, obj.numRepeat);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.RepeatedList}
 */
proto.apollo.perception.inference.RepeatedList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.RepeatedList;
  return proto.apollo.perception.inference.RepeatedList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.RepeatedList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.RepeatedList}
 */
proto.apollo.perception.inference.RepeatedList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumRepeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.RepeatedList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.RepeatedList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.RepeatedList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RepeatedList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string list_path = 1;
 * @return {string}
 */
proto.apollo.perception.inference.RepeatedList.prototype.getListPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.RepeatedList} returns this
 */
proto.apollo.perception.inference.RepeatedList.prototype.setListPath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RepeatedList} returns this
 */
proto.apollo.perception.inference.RepeatedList.prototype.clearListPath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RepeatedList.prototype.hasListPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 num_repeat = 2;
 * @return {number}
 */
proto.apollo.perception.inference.RepeatedList.prototype.getNumRepeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RepeatedList} returns this
 */
proto.apollo.perception.inference.RepeatedList.prototype.setNumRepeat = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RepeatedList} returns this
 */
proto.apollo.perception.inference.RepeatedList.prototype.clearNumRepeat = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RepeatedList.prototype.hasNumRepeat = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.DatasetParameter.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DatasetParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DatasetParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DatasetParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rootFolder: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 1),
    shuffle: jspb.Message.getBooleanFieldWithDefault(msg, 5, true),
    repeatedListList: jspb.Message.toObjectList(msg.getRepeatedListList(),
    proto.apollo.perception.inference.RepeatedList.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DatasetParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DatasetParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.rootFolder;

  /** @type {?|undefined} */
  this.weight;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.shuffle;

  /** @type {?|undefined} */
  this.repeatedListList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DatasetParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DatasetParameter}
 */
proto.apollo.perception.inference.DatasetParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DatasetParameter();
  obj.source != null && jspb.Message.setField(msg, 1, obj.source);
  obj.rootFolder != null && jspb.Message.setField(msg, 2, obj.rootFolder);
  obj.weight != null && jspb.Message.setField(msg, 3, obj.weight);
  obj.type != null && jspb.Message.setField(msg, 4, obj.type);
  obj.shuffle != null && jspb.Message.setField(msg, 5, obj.shuffle);
  obj.repeatedListList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.repeatedListList.map(
          proto.apollo.perception.inference.RepeatedList.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DatasetParameter}
 */
proto.apollo.perception.inference.DatasetParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DatasetParameter;
  return proto.apollo.perception.inference.DatasetParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DatasetParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DatasetParameter}
 */
proto.apollo.perception.inference.DatasetParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootFolder(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.perception.inference.DatasetParameter.DatasetType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShuffle(value);
      break;
    case 6:
      var value = new proto.apollo.perception.inference.RepeatedList;
      reader.readMessage(value,proto.apollo.perception.inference.RepeatedList.deserializeBinaryFromReader);
      msg.addRepeatedList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DatasetParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DatasetParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DatasetParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.DatasetParameter.DatasetType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRepeatedListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.perception.inference.RepeatedList.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.DatasetParameter.DatasetType = {
  LIST: 1,
  BLOCK: 2
};

/**
 * optional string source = 1;
 * @return {string}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string root_folder = 2;
 * @return {string}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.getRootFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.setRootFolder = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.clearRootFolder = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.hasRootFolder = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float weight = 3;
 * @return {number}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.setWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.clearWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DatasetType type = 4;
 * @return {!proto.apollo.perception.inference.DatasetParameter.DatasetType}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.inference.DatasetParameter.DatasetType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/**
 * @param {!proto.apollo.perception.inference.DatasetParameter.DatasetType} value
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.setType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.clearType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool shuffle = 5;
 * @return {boolean}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.getShuffle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.setShuffle = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.clearShuffle = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.hasShuffle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated RepeatedList repeated_list = 6;
 * @return {!Array<!proto.apollo.perception.inference.RepeatedList>}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.getRepeatedListList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.RepeatedList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.RepeatedList, 6));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.RepeatedList>} value
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
*/
proto.apollo.perception.inference.DatasetParameter.prototype.setRepeatedListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.perception.inference.RepeatedList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.RepeatedList}
 */
proto.apollo.perception.inference.DatasetParameter.prototype.addRepeatedList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.perception.inference.RepeatedList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DatasetParameter} returns this
 */
proto.apollo.perception.inference.DatasetParameter.prototype.clearRepeatedListList = function() {
  return this.setRepeatedListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.ImageDataParameter.repeatedFields_ = [100];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ImageDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ImageDataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ImageDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    batchSize: jspb.Message.getFieldWithDefault(msg, 4, 1),
    randSkip: jspb.Message.getFieldWithDefault(msg, 7, 0),
    shuffle: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    newHeight: jspb.Message.getFieldWithDefault(msg, 9, 0),
    newWidth: jspb.Message.getFieldWithDefault(msg, 10, 0),
    isColor: jspb.Message.getBooleanFieldWithDefault(msg, 11, true),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    meanFile: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    cropSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mirror: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    rootFolder: jspb.Message.getFieldWithDefault(msg, 12, ""),
    prefetch: jspb.Message.getFieldWithDefault(msg, 20, 4),
    imageSetList: jspb.Message.toObjectList(msg.getImageSetList(),
    proto.apollo.perception.inference.DatasetParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ImageDataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ImageDataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.batchSize;

  /** @type {?|undefined} */
  this.randSkip;

  /** @type {?|undefined} */
  this.shuffle;

  /** @type {?|undefined} */
  this.newHeight;

  /** @type {?|undefined} */
  this.newWidth;

  /** @type {?|undefined} */
  this.isColor;

  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.meanFile;

  /** @type {?|undefined} */
  this.cropSize;

  /** @type {?|undefined} */
  this.mirror;

  /** @type {?|undefined} */
  this.rootFolder;

  /** @type {?|undefined} */
  this.prefetch;

  /** @type {?|undefined} */
  this.imageSetList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ImageDataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ImageDataParameter}
 */
proto.apollo.perception.inference.ImageDataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ImageDataParameter();
  obj.source != null && jspb.Message.setField(msg, 1, obj.source);
  obj.batchSize != null && jspb.Message.setField(msg, 4, obj.batchSize);
  obj.randSkip != null && jspb.Message.setField(msg, 7, obj.randSkip);
  obj.shuffle != null && jspb.Message.setField(msg, 8, obj.shuffle);
  obj.newHeight != null && jspb.Message.setField(msg, 9, obj.newHeight);
  obj.newWidth != null && jspb.Message.setField(msg, 10, obj.newWidth);
  obj.isColor != null && jspb.Message.setField(msg, 11, obj.isColor);
  obj.scale != null && jspb.Message.setField(msg, 2, obj.scale);
  obj.meanFile != null && jspb.Message.setField(msg, 3, obj.meanFile);
  obj.cropSize != null && jspb.Message.setField(msg, 5, obj.cropSize);
  obj.mirror != null && jspb.Message.setField(msg, 6, obj.mirror);
  obj.rootFolder != null && jspb.Message.setField(msg, 12, obj.rootFolder);
  obj.prefetch != null && jspb.Message.setField(msg, 20, obj.prefetch);
  obj.imageSetList && jspb.Message.setRepeatedWrapperField(
      msg, 100, obj.imageSetList.map(
          proto.apollo.perception.inference.DatasetParameter.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ImageDataParameter}
 */
proto.apollo.perception.inference.ImageDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ImageDataParameter;
  return proto.apollo.perception.inference.ImageDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ImageDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ImageDataParameter}
 */
proto.apollo.perception.inference.ImageDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandSkip(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShuffle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewWidth(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootFolder(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrefetch(value);
      break;
    case 100:
      var value = new proto.apollo.perception.inference.DatasetParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DatasetParameter.deserializeBinaryFromReader);
      msg.addImageSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ImageDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ImageDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ImageDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getImageSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      100,
      f,
      proto.apollo.perception.inference.DatasetParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 batch_size = 4;
 * @return {number}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setBatchSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearBatchSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rand_skip = 7;
 * @return {number}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getRandSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setRandSkip = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearRandSkip = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasRandSkip = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool shuffle = 8;
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getShuffle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setShuffle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearShuffle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasShuffle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 new_height = 9;
 * @return {number}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getNewHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setNewHeight = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearNewHeight = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasNewHeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 new_width = 10;
 * @return {number}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getNewWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setNewWidth = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearNewWidth = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasNewWidth = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool is_color = 11;
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getIsColor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setIsColor = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearIsColor = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasIsColor = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mean_file = 3;
 * @return {string}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setMeanFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearMeanFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 crop_size = 5;
 * @return {number}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setCropSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearCropSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool mirror = 6;
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setMirror = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearMirror = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string root_folder = 12;
 * @return {string}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getRootFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setRootFolder = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearRootFolder = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasRootFolder = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 prefetch = 20;
 * @return {number}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getPrefetch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.setPrefetch = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearPrefetch = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.hasPrefetch = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated DatasetParameter image_set = 100;
 * @return {!Array<!proto.apollo.perception.inference.DatasetParameter>}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.getImageSetList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.DatasetParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.DatasetParameter, 100));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.DatasetParameter>} value
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
*/
proto.apollo.perception.inference.ImageDataParameter.prototype.setImageSetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 100, value);
};


/**
 * @param {!proto.apollo.perception.inference.DatasetParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.DatasetParameter}
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.addImageSet = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 100, opt_value, proto.apollo.perception.inference.DatasetParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.ImageDataParameter} returns this
 */
proto.apollo.perception.inference.ImageDataParameter.prototype.clearImageSetList = function() {
  return this.setImageSetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.InfogainLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.InfogainLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.InfogainLossParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.InfogainLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of InfogainLossParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.InfogainLossParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.source;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.InfogainLossParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.InfogainLossParameter}
 */
proto.apollo.perception.inference.InfogainLossParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.InfogainLossParameter();
  obj.source != null && jspb.Message.setField(msg, 1, obj.source);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.InfogainLossParameter}
 */
proto.apollo.perception.inference.InfogainLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.InfogainLossParameter;
  return proto.apollo.perception.inference.InfogainLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.InfogainLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.InfogainLossParameter}
 */
proto.apollo.perception.inference.InfogainLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.InfogainLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.InfogainLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.InfogainLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.InfogainLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.apollo.perception.inference.InfogainLossParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.InfogainLossParameter} returns this
 */
proto.apollo.perception.inference.InfogainLossParameter.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.InfogainLossParameter} returns this
 */
proto.apollo.perception.inference.InfogainLossParameter.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.InfogainLossParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.InnerProductParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.InnerProductParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.InnerProductParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    biasTerm: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    weightFiller: (f = msg.getWeightFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    axis: jspb.Message.getFieldWithDefault(msg, 5, 1),
    transpose: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of InnerProductParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.InnerProductParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.numOutput;

  /** @type {?|undefined} */
  this.biasTerm;

  /** @type {?|undefined} */
  this.weightFiller;

  /** @type {?|undefined} */
  this.biasFiller;

  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.transpose;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.InnerProductParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.InnerProductParameter}
 */
proto.apollo.perception.inference.InnerProductParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.InnerProductParameter();
  obj.numOutput != null && jspb.Message.setField(msg, 1, obj.numOutput);
  obj.biasTerm != null && jspb.Message.setField(msg, 2, obj.biasTerm);
  obj.weightFiller && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.inference.FillerParameter.fromObject(obj.weightFiller));
  obj.biasFiller && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.inference.FillerParameter.fromObject(obj.biasFiller));
  obj.axis != null && jspb.Message.setField(msg, 5, obj.axis);
  obj.transpose != null && jspb.Message.setField(msg, 6, obj.transpose);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.InnerProductParameter}
 */
proto.apollo.perception.inference.InnerProductParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.InnerProductParameter;
  return proto.apollo.perception.inference.InnerProductParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.InnerProductParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.InnerProductParameter}
 */
proto.apollo.perception.inference.InnerProductParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 3:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 4:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTranspose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.InnerProductParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.InnerProductParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.InnerProductParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.setNumOutput = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.clearNumOutput = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bias_term = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.setBiasTerm = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.clearBiasTerm = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter weight_filler = 3;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 3));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
*/
proto.apollo.perception.inference.InnerProductParameter.prototype.setWeightFiller = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.clearWeightFiller = function() {
  return this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FillerParameter bias_filler = 4;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 4));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
*/
proto.apollo.perception.inference.InnerProductParameter.prototype.setBiasFiller = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.clearBiasFiller = function() {
  return this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 axis = 5;
 * @return {number}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool transpose = 6;
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.getTranspose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.setTranspose = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.InnerProductParameter} returns this
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.clearTranspose = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.InnerProductParameter.prototype.hasTranspose = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.InputParameter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.InputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.InputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.InputParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.InputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shapeList: jspb.Message.toObjectList(msg.getShapeList(),
    proto.apollo.perception.inference.BlobShape.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of InputParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.InputParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.shapeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.InputParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.InputParameter}
 */
proto.apollo.perception.inference.InputParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.InputParameter();
  obj.shapeList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.shapeList.map(
          proto.apollo.perception.inference.BlobShape.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.InputParameter}
 */
proto.apollo.perception.inference.InputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.InputParameter;
  return proto.apollo.perception.inference.InputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.InputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.InputParameter}
 */
proto.apollo.perception.inference.InputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.BlobShape;
      reader.readMessage(value,proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader);
      msg.addShape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.InputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.InputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.InputParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.InputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlobShape shape = 1;
 * @return {!Array<!proto.apollo.perception.inference.BlobShape>}
 */
proto.apollo.perception.inference.InputParameter.prototype.getShapeList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.BlobShape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.BlobShape, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.BlobShape>} value
 * @return {!proto.apollo.perception.inference.InputParameter} returns this
*/
proto.apollo.perception.inference.InputParameter.prototype.setShapeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.inference.BlobShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.InputParameter.prototype.addShape = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.inference.BlobShape, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.InputParameter} returns this
 */
proto.apollo.perception.inference.InputParameter.prototype.clearShapeList = function() {
  return this.setShapeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.LogParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.LogParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.LogParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LogParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, -1.0),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    shift: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LogParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.LogParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.base;

  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.shift;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.LogParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.LogParameter}
 */
proto.apollo.perception.inference.LogParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.LogParameter();
  obj.base != null && jspb.Message.setField(msg, 1, obj.base);
  obj.scale != null && jspb.Message.setField(msg, 2, obj.scale);
  obj.shift != null && jspb.Message.setField(msg, 3, obj.shift);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.LogParameter}
 */
proto.apollo.perception.inference.LogParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.LogParameter;
  return proto.apollo.perception.inference.LogParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.LogParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.LogParameter}
 */
proto.apollo.perception.inference.LogParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.LogParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.LogParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.LogParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LogParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float base = 1;
 * @return {number}
 */
proto.apollo.perception.inference.LogParameter.prototype.getBase = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, -1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LogParameter} returns this
 */
proto.apollo.perception.inference.LogParameter.prototype.setBase = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LogParameter} returns this
 */
proto.apollo.perception.inference.LogParameter.prototype.clearBase = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LogParameter.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.apollo.perception.inference.LogParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LogParameter} returns this
 */
proto.apollo.perception.inference.LogParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LogParameter} returns this
 */
proto.apollo.perception.inference.LogParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LogParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float shift = 3;
 * @return {number}
 */
proto.apollo.perception.inference.LogParameter.prototype.getShift = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LogParameter} returns this
 */
proto.apollo.perception.inference.LogParameter.prototype.setShift = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LogParameter} returns this
 */
proto.apollo.perception.inference.LogParameter.prototype.clearShift = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LogParameter.prototype.hasShift = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.LRNParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.LRNParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.LRNParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LRNParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    localSize: jspb.Message.getFieldWithDefault(msg, 1, 5),
    alpha: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    beta: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.75),
    normRegion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    k: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 1.0),
    engine: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LRNParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.LRNParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.localSize;

  /** @type {?|undefined} */
  this.alpha;

  /** @type {?|undefined} */
  this.beta;

  /** @type {?|undefined} */
  this.normRegion;

  /** @type {?|undefined} */
  this.k;

  /** @type {?|undefined} */
  this.engine;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.LRNParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.LRNParameter}
 */
proto.apollo.perception.inference.LRNParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.LRNParameter();
  obj.localSize != null && jspb.Message.setField(msg, 1, obj.localSize);
  obj.alpha != null && jspb.Message.setField(msg, 2, obj.alpha);
  obj.beta != null && jspb.Message.setField(msg, 3, obj.beta);
  obj.normRegion != null && jspb.Message.setField(msg, 4, obj.normRegion);
  obj.k != null && jspb.Message.setField(msg, 5, obj.k);
  obj.engine != null && jspb.Message.setField(msg, 6, obj.engine);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.LRNParameter}
 */
proto.apollo.perception.inference.LRNParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.LRNParameter;
  return proto.apollo.perception.inference.LRNParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.LRNParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.LRNParameter}
 */
proto.apollo.perception.inference.LRNParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocalSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBeta(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.perception.inference.LRNParameter.NormRegion} */ (reader.readEnum());
      msg.setNormRegion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setK(value);
      break;
    case 6:
      var value = /** @type {!proto.apollo.perception.inference.LRNParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.LRNParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.LRNParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.LRNParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.LRNParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.LRNParameter.NormRegion} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.LRNParameter.Engine} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.LRNParameter.NormRegion = {
  ACROSS_CHANNELS: 0,
  WITHIN_CHANNEL: 1
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.LRNParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional uint32 local_size = 1;
 * @return {number}
 */
proto.apollo.perception.inference.LRNParameter.prototype.getLocalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.setLocalSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.clearLocalSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LRNParameter.prototype.hasLocalSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float alpha = 2;
 * @return {number}
 */
proto.apollo.perception.inference.LRNParameter.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.setAlpha = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.clearAlpha = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LRNParameter.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float beta = 3;
 * @return {number}
 */
proto.apollo.perception.inference.LRNParameter.prototype.getBeta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.75));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.setBeta = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.clearBeta = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LRNParameter.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NormRegion norm_region = 4;
 * @return {!proto.apollo.perception.inference.LRNParameter.NormRegion}
 */
proto.apollo.perception.inference.LRNParameter.prototype.getNormRegion = function() {
  return /** @type {!proto.apollo.perception.inference.LRNParameter.NormRegion} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.perception.inference.LRNParameter.NormRegion} value
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.setNormRegion = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.clearNormRegion = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LRNParameter.prototype.hasNormRegion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float k = 5;
 * @return {number}
 */
proto.apollo.perception.inference.LRNParameter.prototype.getK = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.setK = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.clearK = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LRNParameter.prototype.hasK = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Engine engine = 6;
 * @return {!proto.apollo.perception.inference.LRNParameter.Engine}
 */
proto.apollo.perception.inference.LRNParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.LRNParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.apollo.perception.inference.LRNParameter.Engine} value
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.LRNParameter} returns this
 */
proto.apollo.perception.inference.LRNParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.LRNParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.MemoryDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.MemoryDataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.MemoryDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchSize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    channels: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    width: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MemoryDataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.MemoryDataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.batchSize;

  /** @type {?|undefined} */
  this.channels;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.width;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.MemoryDataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.MemoryDataParameter}
 */
proto.apollo.perception.inference.MemoryDataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.MemoryDataParameter();
  obj.batchSize != null && jspb.Message.setField(msg, 1, obj.batchSize);
  obj.channels != null && jspb.Message.setField(msg, 2, obj.channels);
  obj.height != null && jspb.Message.setField(msg, 3, obj.height);
  obj.width != null && jspb.Message.setField(msg, 4, obj.width);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.MemoryDataParameter}
 */
proto.apollo.perception.inference.MemoryDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.MemoryDataParameter;
  return proto.apollo.perception.inference.MemoryDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.MemoryDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.MemoryDataParameter}
 */
proto.apollo.perception.inference.MemoryDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.MemoryDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.MemoryDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.MemoryDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 batch_size = 1;
 * @return {number}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.setBatchSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.clearBatchSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 channels = 2;
 * @return {number}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.setChannels = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.clearChannels = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 width = 4;
 * @return {number}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MemoryDataParameter} returns this
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MemoryDataParameter.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.MultiBoxLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.MultiBoxLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    locLossType: jspb.Message.getFieldWithDefault(msg, 1, 1),
    confLossType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    locWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    numClasses: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    shareLocation: jspb.Message.getBooleanFieldWithDefault(msg, 5, true),
    matchType: jspb.Message.getFieldWithDefault(msg, 6, 1),
    overlapThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.5),
    usePriorForMatching: jspb.Message.getBooleanFieldWithDefault(msg, 8, true),
    backgroundLabelId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    useDifficultGt: jspb.Message.getBooleanFieldWithDefault(msg, 10, true),
    doNegMining: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    negPosRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 3.0),
    negOverlap: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.5),
    codeType: jspb.Message.getFieldWithDefault(msg, 14, 1),
    encodeVarianceInTarget: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    mapObjectToAgnostic: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    ignoreCrossBoundaryBbox: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    bpInside: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    miningType: jspb.Message.getFieldWithDefault(msg, 20, 1),
    nmsParam: (f = msg.getNmsParam()) && proto.apollo.perception.inference.NonMaximumSuppressionParameter.toObject(includeInstance, f),
    sampleSize: jspb.Message.getFieldWithDefault(msg, 22, 64),
    usePriorForNms: jspb.Message.getBooleanFieldWithDefault(msg, 23, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MultiBoxLossParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.MultiBoxLossParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.locLossType;

  /** @type {?|undefined} */
  this.confLossType;

  /** @type {?|undefined} */
  this.locWeight;

  /** @type {?|undefined} */
  this.numClasses;

  /** @type {?|undefined} */
  this.shareLocation;

  /** @type {?|undefined} */
  this.matchType;

  /** @type {?|undefined} */
  this.overlapThreshold;

  /** @type {?|undefined} */
  this.usePriorForMatching;

  /** @type {?|undefined} */
  this.backgroundLabelId;

  /** @type {?|undefined} */
  this.useDifficultGt;

  /** @type {?|undefined} */
  this.doNegMining;

  /** @type {?|undefined} */
  this.negPosRatio;

  /** @type {?|undefined} */
  this.negOverlap;

  /** @type {?|undefined} */
  this.codeType;

  /** @type {?|undefined} */
  this.encodeVarianceInTarget;

  /** @type {?|undefined} */
  this.mapObjectToAgnostic;

  /** @type {?|undefined} */
  this.ignoreCrossBoundaryBbox;

  /** @type {?|undefined} */
  this.bpInside;

  /** @type {?|undefined} */
  this.miningType;

  /** @type {?|undefined} */
  this.nmsParam;

  /** @type {?|undefined} */
  this.sampleSize;

  /** @type {?|undefined} */
  this.usePriorForNms;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.MultiBoxLossParameter();
  obj.locLossType != null && jspb.Message.setField(msg, 1, obj.locLossType);
  obj.confLossType != null && jspb.Message.setField(msg, 2, obj.confLossType);
  obj.locWeight != null && jspb.Message.setField(msg, 3, obj.locWeight);
  obj.numClasses != null && jspb.Message.setField(msg, 4, obj.numClasses);
  obj.shareLocation != null && jspb.Message.setField(msg, 5, obj.shareLocation);
  obj.matchType != null && jspb.Message.setField(msg, 6, obj.matchType);
  obj.overlapThreshold != null && jspb.Message.setField(msg, 7, obj.overlapThreshold);
  obj.usePriorForMatching != null && jspb.Message.setField(msg, 8, obj.usePriorForMatching);
  obj.backgroundLabelId != null && jspb.Message.setField(msg, 9, obj.backgroundLabelId);
  obj.useDifficultGt != null && jspb.Message.setField(msg, 10, obj.useDifficultGt);
  obj.doNegMining != null && jspb.Message.setField(msg, 11, obj.doNegMining);
  obj.negPosRatio != null && jspb.Message.setField(msg, 12, obj.negPosRatio);
  obj.negOverlap != null && jspb.Message.setField(msg, 13, obj.negOverlap);
  obj.codeType != null && jspb.Message.setField(msg, 14, obj.codeType);
  obj.encodeVarianceInTarget != null && jspb.Message.setField(msg, 16, obj.encodeVarianceInTarget);
  obj.mapObjectToAgnostic != null && jspb.Message.setField(msg, 17, obj.mapObjectToAgnostic);
  obj.ignoreCrossBoundaryBbox != null && jspb.Message.setField(msg, 18, obj.ignoreCrossBoundaryBbox);
  obj.bpInside != null && jspb.Message.setField(msg, 19, obj.bpInside);
  obj.miningType != null && jspb.Message.setField(msg, 20, obj.miningType);
  obj.nmsParam && jspb.Message.setWrapperField(
      msg, 21, proto.apollo.perception.inference.NonMaximumSuppressionParameter.fromObject(obj.nmsParam));
  obj.sampleSize != null && jspb.Message.setField(msg, 22, obj.sampleSize);
  obj.usePriorForNms != null && jspb.Message.setField(msg, 23, obj.usePriorForNms);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.MultiBoxLossParameter;
  return proto.apollo.perception.inference.MultiBoxLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.LocLossType} */ (reader.readEnum());
      msg.setLocLossType(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.ConfLossType} */ (reader.readEnum());
      msg.setConfLossType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumClasses(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShareLocation(value);
      break;
    case 6:
      var value = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.MatchType} */ (reader.readEnum());
      msg.setMatchType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOverlapThreshold(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsePriorForMatching(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBackgroundLabelId(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseDifficultGt(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoNegMining(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegPosRatio(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegOverlap(value);
      break;
    case 14:
      var value = /** @type {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} */ (reader.readEnum());
      msg.setCodeType(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEncodeVarianceInTarget(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMapObjectToAgnostic(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnoreCrossBoundaryBbox(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBpInside(value);
      break;
    case 20:
      var value = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.MiningType} */ (reader.readEnum());
      msg.setMiningType(value);
      break;
    case 21:
      var value = new proto.apollo.perception.inference.NonMaximumSuppressionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.NonMaximumSuppressionParameter.deserializeBinaryFromReader);
      msg.setNmsParam(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleSize(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsePriorForNms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.MultiBoxLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.MultiBoxLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.LocLossType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.ConfLossType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.MatchType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.MiningType} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getNmsParam();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.apollo.perception.inference.NonMaximumSuppressionParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.LocLossType = {
  L2: 0,
  SMOOTH_L1: 1
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.ConfLossType = {
  SOFTMAX: 0,
  LOGISTIC: 1
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.MatchType = {
  BIPARTITE: 0,
  PER_PREDICTION: 1
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.MiningType = {
  NONE: 0,
  MAX_NEGATIVE: 1,
  HARD_EXAMPLE: 2
};

/**
 * optional LocLossType loc_loss_type = 1;
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter.LocLossType}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getLocLossType = function() {
  return /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.LocLossType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter.LocLossType} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setLocLossType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearLocLossType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasLocLossType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConfLossType conf_loss_type = 2;
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter.ConfLossType}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getConfLossType = function() {
  return /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.ConfLossType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter.ConfLossType} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setConfLossType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearConfLossType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasConfLossType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float loc_weight = 3;
 * @return {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getLocWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setLocWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearLocWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasLocWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 num_classes = 4;
 * @return {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool share_location = 5;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getShareLocation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setShareLocation = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearShareLocation = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasShareLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MatchType match_type = 6;
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter.MatchType}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getMatchType = function() {
  return /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.MatchType} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/**
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter.MatchType} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setMatchType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearMatchType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasMatchType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float overlap_threshold = 7;
 * @return {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getOverlapThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setOverlapThreshold = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearOverlapThreshold = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasOverlapThreshold = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool use_prior_for_matching = 8;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getUsePriorForMatching = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setUsePriorForMatching = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearUsePriorForMatching = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasUsePriorForMatching = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 background_label_id = 9;
 * @return {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getBackgroundLabelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setBackgroundLabelId = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearBackgroundLabelId = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasBackgroundLabelId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool use_difficult_gt = 10;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getUseDifficultGt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setUseDifficultGt = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearUseDifficultGt = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasUseDifficultGt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool do_neg_mining = 11;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getDoNegMining = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setDoNegMining = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearDoNegMining = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasDoNegMining = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float neg_pos_ratio = 12;
 * @return {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getNegPosRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setNegPosRatio = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearNegPosRatio = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasNegPosRatio = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float neg_overlap = 13;
 * @return {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getNegOverlap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setNegOverlap = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearNegOverlap = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasNegOverlap = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional PriorBoxParameter.CodeType code_type = 14;
 * @return {!proto.apollo.perception.inference.PriorBoxParameter.CodeType}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getCodeType = function() {
  return /** @type {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} */ (jspb.Message.getFieldWithDefault(this, 14, 1));
};


/**
 * @param {!proto.apollo.perception.inference.PriorBoxParameter.CodeType} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setCodeType = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearCodeType = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasCodeType = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool encode_variance_in_target = 16;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getEncodeVarianceInTarget = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setEncodeVarianceInTarget = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearEncodeVarianceInTarget = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasEncodeVarianceInTarget = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool map_object_to_agnostic = 17;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getMapObjectToAgnostic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setMapObjectToAgnostic = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearMapObjectToAgnostic = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasMapObjectToAgnostic = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool ignore_cross_boundary_bbox = 18;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getIgnoreCrossBoundaryBbox = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setIgnoreCrossBoundaryBbox = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearIgnoreCrossBoundaryBbox = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasIgnoreCrossBoundaryBbox = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool bp_inside = 19;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getBpInside = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setBpInside = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearBpInside = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasBpInside = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional MiningType mining_type = 20;
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter.MiningType}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getMiningType = function() {
  return /** @type {!proto.apollo.perception.inference.MultiBoxLossParameter.MiningType} */ (jspb.Message.getFieldWithDefault(this, 20, 1));
};


/**
 * @param {!proto.apollo.perception.inference.MultiBoxLossParameter.MiningType} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setMiningType = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearMiningType = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasMiningType = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional NonMaximumSuppressionParameter nms_param = 21;
 * @return {?proto.apollo.perception.inference.NonMaximumSuppressionParameter}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getNmsParam = function() {
  return /** @type{?proto.apollo.perception.inference.NonMaximumSuppressionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NonMaximumSuppressionParameter, 21));
};


/**
 * @param {?proto.apollo.perception.inference.NonMaximumSuppressionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
*/
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setNmsParam = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearNmsParam = function() {
  return this.setNmsParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasNmsParam = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int32 sample_size = 22;
 * @return {number}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getSampleSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 64));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setSampleSize = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearSampleSize = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasSampleSize = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool use_prior_for_nms = 23;
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.getUsePriorForNms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.setUsePriorForNms = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MultiBoxLossParameter} returns this
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.clearUsePriorForNms = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MultiBoxLossParameter.prototype.hasUsePriorForNms = function() {
  return jspb.Message.getField(this, 23) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.MVNParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.MVNParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.MVNParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.MVNParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    normalizeVariance: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    acrossChannels: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    eps: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0E-9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MVNParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.MVNParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.normalizeVariance;

  /** @type {?|undefined} */
  this.acrossChannels;

  /** @type {?|undefined} */
  this.eps;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.MVNParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.MVNParameter}
 */
proto.apollo.perception.inference.MVNParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.MVNParameter();
  obj.normalizeVariance != null && jspb.Message.setField(msg, 1, obj.normalizeVariance);
  obj.acrossChannels != null && jspb.Message.setField(msg, 2, obj.acrossChannels);
  obj.eps != null && jspb.Message.setField(msg, 3, obj.eps);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.MVNParameter}
 */
proto.apollo.perception.inference.MVNParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.MVNParameter;
  return proto.apollo.perception.inference.MVNParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.MVNParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.MVNParameter}
 */
proto.apollo.perception.inference.MVNParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNormalizeVariance(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcrossChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.MVNParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.MVNParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.MVNParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.MVNParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional bool normalize_variance = 1;
 * @return {boolean}
 */
proto.apollo.perception.inference.MVNParameter.prototype.getNormalizeVariance = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MVNParameter} returns this
 */
proto.apollo.perception.inference.MVNParameter.prototype.setNormalizeVariance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MVNParameter} returns this
 */
proto.apollo.perception.inference.MVNParameter.prototype.clearNormalizeVariance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MVNParameter.prototype.hasNormalizeVariance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool across_channels = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.MVNParameter.prototype.getAcrossChannels = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.MVNParameter} returns this
 */
proto.apollo.perception.inference.MVNParameter.prototype.setAcrossChannels = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MVNParameter} returns this
 */
proto.apollo.perception.inference.MVNParameter.prototype.clearAcrossChannels = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MVNParameter.prototype.hasAcrossChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float eps = 3;
 * @return {number}
 */
proto.apollo.perception.inference.MVNParameter.prototype.getEps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0E-9));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.MVNParameter} returns this
 */
proto.apollo.perception.inference.MVNParameter.prototype.setEps = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.MVNParameter} returns this
 */
proto.apollo.perception.inference.MVNParameter.prototype.clearEps = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.MVNParameter.prototype.hasEps = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NormalizeParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NormalizeParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NormalizeParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    acrossSpatial: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    scaleFiller: (f = msg.getScaleFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    channelShared: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),
    eps: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0E-10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NormalizeParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NormalizeParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.acrossSpatial;

  /** @type {?|undefined} */
  this.scaleFiller;

  /** @type {?|undefined} */
  this.channelShared;

  /** @type {?|undefined} */
  this.eps;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NormalizeParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NormalizeParameter}
 */
proto.apollo.perception.inference.NormalizeParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NormalizeParameter();
  obj.acrossSpatial != null && jspb.Message.setField(msg, 1, obj.acrossSpatial);
  obj.scaleFiller && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.inference.FillerParameter.fromObject(obj.scaleFiller));
  obj.channelShared != null && jspb.Message.setField(msg, 3, obj.channelShared);
  obj.eps != null && jspb.Message.setField(msg, 4, obj.eps);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NormalizeParameter}
 */
proto.apollo.perception.inference.NormalizeParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NormalizeParameter;
  return proto.apollo.perception.inference.NormalizeParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NormalizeParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NormalizeParameter}
 */
proto.apollo.perception.inference.NormalizeParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcrossSpatial(value);
      break;
    case 2:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setScaleFiller(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChannelShared(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NormalizeParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NormalizeParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NormalizeParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getScaleFiller();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional bool across_spatial = 1;
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.getAcrossSpatial = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.setAcrossSpatial = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.clearAcrossSpatial = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.hasAcrossSpatial = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FillerParameter scale_filler = 2;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.getScaleFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 2));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
*/
proto.apollo.perception.inference.NormalizeParameter.prototype.setScaleFiller = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.clearScaleFiller = function() {
  return this.setScaleFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.hasScaleFiller = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool channel_shared = 3;
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.getChannelShared = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.setChannelShared = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.clearChannelShared = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.hasChannelShared = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float eps = 4;
 * @return {number}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.getEps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0E-10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.setEps = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NormalizeParameter} returns this
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.clearEps = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NormalizeParameter.prototype.hasEps = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ParameterParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ParameterParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ParameterParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ParameterParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.apollo.perception.inference.BlobShape.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ParameterParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ParameterParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.shape;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ParameterParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ParameterParameter}
 */
proto.apollo.perception.inference.ParameterParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ParameterParameter();
  obj.shape && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.inference.BlobShape.fromObject(obj.shape));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ParameterParameter}
 */
proto.apollo.perception.inference.ParameterParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ParameterParameter;
  return proto.apollo.perception.inference.ParameterParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ParameterParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ParameterParameter}
 */
proto.apollo.perception.inference.ParameterParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.BlobShape;
      reader.readMessage(value,proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ParameterParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ParameterParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ParameterParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ParameterParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlobShape shape = 1;
 * @return {?proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.ParameterParameter.prototype.getShape = function() {
  return /** @type{?proto.apollo.perception.inference.BlobShape} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.BlobShape, 1));
};


/**
 * @param {?proto.apollo.perception.inference.BlobShape|undefined} value
 * @return {!proto.apollo.perception.inference.ParameterParameter} returns this
*/
proto.apollo.perception.inference.ParameterParameter.prototype.setShape = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.ParameterParameter} returns this
 */
proto.apollo.perception.inference.ParameterParameter.prototype.clearShape = function() {
  return this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ParameterParameter.prototype.hasShape = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.PermuteParameter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.PermuteParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.PermuteParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.PermuteParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PermuteParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PermuteParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.PermuteParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.orderList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.PermuteParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.PermuteParameter}
 */
proto.apollo.perception.inference.PermuteParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.PermuteParameter();
  obj.orderList != null && jspb.Message.setField(msg, 1, obj.orderList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.PermuteParameter}
 */
proto.apollo.perception.inference.PermuteParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.PermuteParameter;
  return proto.apollo.perception.inference.PermuteParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.PermuteParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.PermuteParameter}
 */
proto.apollo.perception.inference.PermuteParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOrder(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.PermuteParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.PermuteParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.PermuteParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PermuteParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 order = 1;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.PermuteParameter.prototype.getOrderList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.PermuteParameter} returns this
 */
proto.apollo.perception.inference.PermuteParameter.prototype.setOrderList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.PermuteParameter} returns this
 */
proto.apollo.perception.inference.PermuteParameter.prototype.addOrder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.PermuteParameter} returns this
 */
proto.apollo.perception.inference.PermuteParameter.prototype.clearOrderList = function() {
  return this.setOrderList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.PoolingParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.PoolingParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PoolingParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    pool: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pad: jspb.Message.getFieldWithDefault(msg, 4, 0),
    padH: jspb.Message.getFieldWithDefault(msg, 9, 0),
    padW: jspb.Message.getFieldWithDefault(msg, 10, 0),
    kernelSize: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    kernelH: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    kernelW: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    stride: jspb.Message.getFieldWithDefault(msg, 3, 1),
    strideH: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    strideW: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    engine: jspb.Message.getFieldWithDefault(msg, 11, 0),
    globalPooling: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    roundMode: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PoolingParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.PoolingParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pool;

  /** @type {?|undefined} */
  this.pad;

  /** @type {?|undefined} */
  this.padH;

  /** @type {?|undefined} */
  this.padW;

  /** @type {?|undefined} */
  this.kernelSize;

  /** @type {?|undefined} */
  this.kernelH;

  /** @type {?|undefined} */
  this.kernelW;

  /** @type {?|undefined} */
  this.stride;

  /** @type {?|undefined} */
  this.strideH;

  /** @type {?|undefined} */
  this.strideW;

  /** @type {?|undefined} */
  this.engine;

  /** @type {?|undefined} */
  this.globalPooling;

  /** @type {?|undefined} */
  this.roundMode;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.PoolingParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.PoolingParameter}
 */
proto.apollo.perception.inference.PoolingParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.PoolingParameter();
  obj.pool != null && jspb.Message.setField(msg, 1, obj.pool);
  obj.pad != null && jspb.Message.setField(msg, 4, obj.pad);
  obj.padH != null && jspb.Message.setField(msg, 9, obj.padH);
  obj.padW != null && jspb.Message.setField(msg, 10, obj.padW);
  obj.kernelSize != null && jspb.Message.setField(msg, 2, obj.kernelSize);
  obj.kernelH != null && jspb.Message.setField(msg, 5, obj.kernelH);
  obj.kernelW != null && jspb.Message.setField(msg, 6, obj.kernelW);
  obj.stride != null && jspb.Message.setField(msg, 3, obj.stride);
  obj.strideH != null && jspb.Message.setField(msg, 7, obj.strideH);
  obj.strideW != null && jspb.Message.setField(msg, 8, obj.strideW);
  obj.engine != null && jspb.Message.setField(msg, 11, obj.engine);
  obj.globalPooling != null && jspb.Message.setField(msg, 12, obj.globalPooling);
  obj.roundMode != null && jspb.Message.setField(msg, 13, obj.roundMode);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.PoolingParameter}
 */
proto.apollo.perception.inference.PoolingParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.PoolingParameter;
  return proto.apollo.perception.inference.PoolingParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.PoolingParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.PoolingParameter}
 */
proto.apollo.perception.inference.PoolingParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.PoolingParameter.PoolMethod} */ (reader.readEnum());
      msg.setPool(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPad(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadH(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelH(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelW(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStride(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideH(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideW(value);
      break;
    case 11:
      var value = /** @type {!proto.apollo.perception.inference.PoolingParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGlobalPooling(value);
      break;
    case 13:
      var value = /** @type {!proto.apollo.perception.inference.PoolingParameter.RoundMode} */ (reader.readEnum());
      msg.setRoundMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.PoolingParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.PoolingParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PoolingParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.PoolingParameter.PoolMethod} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.PoolingParameter.Engine} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.PoolingParameter.RoundMode} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.PoolingParameter.PoolMethod = {
  MAX: 0,
  AVE: 1,
  STOCHASTIC: 2
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.PoolingParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.PoolingParameter.RoundMode = {
  CEIL: 0,
  FLOOR: 1
};

/**
 * optional PoolMethod pool = 1;
 * @return {!proto.apollo.perception.inference.PoolingParameter.PoolMethod}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getPool = function() {
  return /** @type {!proto.apollo.perception.inference.PoolingParameter.PoolMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.inference.PoolingParameter.PoolMethod} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setPool = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearPool = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasPool = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 pad = 4;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setPad = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearPad = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasPad = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 pad_h = 9;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getPadH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setPadH = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearPadH = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasPadH = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 pad_w = 10;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getPadW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setPadW = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearPadW = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasPadW = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 kernel_size = 2;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getKernelSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setKernelSize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearKernelSize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasKernelSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 kernel_h = 5;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getKernelH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setKernelH = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearKernelH = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasKernelH = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 kernel_w = 6;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getKernelW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setKernelW = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearKernelW = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasKernelW = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 stride = 3;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setStride = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearStride = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 stride_h = 7;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getStrideH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setStrideH = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearStrideH = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasStrideH = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 stride_w = 8;
 * @return {number}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getStrideW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setStrideW = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearStrideW = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasStrideW = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Engine engine = 11;
 * @return {!proto.apollo.perception.inference.PoolingParameter.Engine}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.PoolingParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.apollo.perception.inference.PoolingParameter.Engine} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool global_pooling = 12;
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getGlobalPooling = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setGlobalPooling = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearGlobalPooling = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasGlobalPooling = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RoundMode round_mode = 13;
 * @return {!proto.apollo.perception.inference.PoolingParameter.RoundMode}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.getRoundMode = function() {
  return /** @type {!proto.apollo.perception.inference.PoolingParameter.RoundMode} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.apollo.perception.inference.PoolingParameter.RoundMode} value
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.setRoundMode = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PoolingParameter} returns this
 */
proto.apollo.perception.inference.PoolingParameter.prototype.clearRoundMode = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PoolingParameter.prototype.hasRoundMode = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.PowerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.PowerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.PowerParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PowerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    shift: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PowerParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.PowerParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.power;

  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.shift;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.PowerParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.PowerParameter}
 */
proto.apollo.perception.inference.PowerParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.PowerParameter();
  obj.power != null && jspb.Message.setField(msg, 1, obj.power);
  obj.scale != null && jspb.Message.setField(msg, 2, obj.scale);
  obj.shift != null && jspb.Message.setField(msg, 3, obj.shift);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.PowerParameter}
 */
proto.apollo.perception.inference.PowerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.PowerParameter;
  return proto.apollo.perception.inference.PowerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.PowerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.PowerParameter}
 */
proto.apollo.perception.inference.PowerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.PowerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.PowerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.PowerParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PowerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float power = 1;
 * @return {number}
 */
proto.apollo.perception.inference.PowerParameter.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PowerParameter} returns this
 */
proto.apollo.perception.inference.PowerParameter.prototype.setPower = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PowerParameter} returns this
 */
proto.apollo.perception.inference.PowerParameter.prototype.clearPower = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PowerParameter.prototype.hasPower = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.apollo.perception.inference.PowerParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PowerParameter} returns this
 */
proto.apollo.perception.inference.PowerParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PowerParameter} returns this
 */
proto.apollo.perception.inference.PowerParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PowerParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float shift = 3;
 * @return {number}
 */
proto.apollo.perception.inference.PowerParameter.prototype.getShift = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PowerParameter} returns this
 */
proto.apollo.perception.inference.PowerParameter.prototype.setShift = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PowerParameter} returns this
 */
proto.apollo.perception.inference.PowerParameter.prototype.clearShift = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PowerParameter.prototype.hasShift = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.PriorBoxParameter.repeatedFields_ = [1,2,3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.PriorBoxParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.PriorBoxParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PriorBoxParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    minSizeList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    maxSizeList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    aspectRatioList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    flip: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    clip: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    varianceList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    imgSize: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    imgH: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    imgW: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    step: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    stepH: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    stepW: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    offset: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PriorBoxParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.PriorBoxParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minSizeList;

  /** @type {?|undefined} */
  this.maxSizeList;

  /** @type {?|undefined} */
  this.aspectRatioList;

  /** @type {?|undefined} */
  this.flip;

  /** @type {?|undefined} */
  this.clip;

  /** @type {?|undefined} */
  this.varianceList;

  /** @type {?|undefined} */
  this.imgSize;

  /** @type {?|undefined} */
  this.imgH;

  /** @type {?|undefined} */
  this.imgW;

  /** @type {?|undefined} */
  this.step;

  /** @type {?|undefined} */
  this.stepH;

  /** @type {?|undefined} */
  this.stepW;

  /** @type {?|undefined} */
  this.offset;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.PriorBoxParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter}
 */
proto.apollo.perception.inference.PriorBoxParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.PriorBoxParameter();
  obj.minSizeList != null && jspb.Message.setField(msg, 1, obj.minSizeList);
  obj.maxSizeList != null && jspb.Message.setField(msg, 2, obj.maxSizeList);
  obj.aspectRatioList != null && jspb.Message.setField(msg, 3, obj.aspectRatioList);
  obj.flip != null && jspb.Message.setField(msg, 4, obj.flip);
  obj.clip != null && jspb.Message.setField(msg, 5, obj.clip);
  obj.varianceList != null && jspb.Message.setField(msg, 6, obj.varianceList);
  obj.imgSize != null && jspb.Message.setField(msg, 7, obj.imgSize);
  obj.imgH != null && jspb.Message.setField(msg, 8, obj.imgH);
  obj.imgW != null && jspb.Message.setField(msg, 9, obj.imgW);
  obj.step != null && jspb.Message.setField(msg, 10, obj.step);
  obj.stepH != null && jspb.Message.setField(msg, 11, obj.stepH);
  obj.stepW != null && jspb.Message.setField(msg, 12, obj.stepW);
  obj.offset != null && jspb.Message.setField(msg, 13, obj.offset);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter}
 */
proto.apollo.perception.inference.PriorBoxParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.PriorBoxParameter;
  return proto.apollo.perception.inference.PriorBoxParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.PriorBoxParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter}
 */
proto.apollo.perception.inference.PriorBoxParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMinSize(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMaxSize(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAspectRatio(values[i]);
      }
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlip(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClip(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVariance(values[i]);
      }
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImgSize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImgH(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImgW(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStep(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStepH(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStepW(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.PriorBoxParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.PriorBoxParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PriorBoxParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinSizeList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      1,
      f
    );
  }
  f = message.getMaxSizeList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
  f = message.getAspectRatioList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getVarianceList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.CodeType = {
  CORNER: 1,
  CENTER_SIZE: 2,
  CORNER_SIZE: 3
};

/**
 * repeated float min_size = 1;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getMinSizeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setMinSizeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.addMinSize = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearMinSizeList = function() {
  return this.setMinSizeList([]);
};


/**
 * repeated float max_size = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getMaxSizeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setMaxSizeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.addMaxSize = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearMaxSizeList = function() {
  return this.setMaxSizeList([]);
};


/**
 * repeated float aspect_ratio = 3;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getAspectRatioList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setAspectRatioList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.addAspectRatio = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearAspectRatioList = function() {
  return this.setAspectRatioList([]);
};


/**
 * optional bool flip = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getFlip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setFlip = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearFlip = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasFlip = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool clip = 5;
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getClip = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setClip = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearClip = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasClip = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated float variance = 6;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getVarianceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setVarianceList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.addVariance = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearVarianceList = function() {
  return this.setVarianceList([]);
};


/**
 * optional uint32 img_size = 7;
 * @return {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getImgSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setImgSize = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearImgSize = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasImgSize = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 img_h = 8;
 * @return {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getImgH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setImgH = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearImgH = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasImgH = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 img_w = 9;
 * @return {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getImgW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setImgW = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearImgW = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasImgW = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float step = 10;
 * @return {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setStep = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearStep = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasStep = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float step_h = 11;
 * @return {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getStepH = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setStepH = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearStepH = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasStepH = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float step_w = 12;
 * @return {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getStepW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setStepW = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearStepW = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasStepW = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float offset = 13;
 * @return {number}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.setOffset = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PriorBoxParameter} returns this
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.clearOffset = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PriorBoxParameter.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.PythonParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.PythonParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.PythonParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PythonParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    module: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    layer: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    paramStr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shareInParallel: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PythonParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.PythonParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.module;

  /** @type {?|undefined} */
  this.layer;

  /** @type {?|undefined} */
  this.paramStr;

  /** @type {?|undefined} */
  this.shareInParallel;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.PythonParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.PythonParameter}
 */
proto.apollo.perception.inference.PythonParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.PythonParameter();
  obj.module != null && jspb.Message.setField(msg, 1, obj.module);
  obj.layer != null && jspb.Message.setField(msg, 2, obj.layer);
  obj.paramStr != null && jspb.Message.setField(msg, 3, obj.paramStr);
  obj.shareInParallel != null && jspb.Message.setField(msg, 4, obj.shareInParallel);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.PythonParameter}
 */
proto.apollo.perception.inference.PythonParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.PythonParameter;
  return proto.apollo.perception.inference.PythonParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.PythonParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.PythonParameter}
 */
proto.apollo.perception.inference.PythonParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamStr(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShareInParallel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.PythonParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.PythonParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.PythonParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PythonParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string module = 1;
 * @return {string}
 */
proto.apollo.perception.inference.PythonParameter.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.setModule = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.clearModule = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PythonParameter.prototype.hasModule = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string layer = 2;
 * @return {string}
 */
proto.apollo.perception.inference.PythonParameter.prototype.getLayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.setLayer = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.clearLayer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PythonParameter.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string param_str = 3;
 * @return {string}
 */
proto.apollo.perception.inference.PythonParameter.prototype.getParamStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.setParamStr = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.clearParamStr = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PythonParameter.prototype.hasParamStr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool share_in_parallel = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.PythonParameter.prototype.getShareInParallel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.setShareInParallel = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PythonParameter} returns this
 */
proto.apollo.perception.inference.PythonParameter.prototype.clearShareInParallel = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PythonParameter.prototype.hasShareInParallel = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.RecurrentParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.RecurrentParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RecurrentParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: jspb.Message.getFieldWithDefault(msg, 1, 0),
    weightFiller: (f = msg.getWeightFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    debugInfo: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    exposeHidden: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RecurrentParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.RecurrentParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.numOutput;

  /** @type {?|undefined} */
  this.weightFiller;

  /** @type {?|undefined} */
  this.biasFiller;

  /** @type {?|undefined} */
  this.debugInfo;

  /** @type {?|undefined} */
  this.exposeHidden;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.RecurrentParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.RecurrentParameter}
 */
proto.apollo.perception.inference.RecurrentParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.RecurrentParameter();
  obj.numOutput != null && jspb.Message.setField(msg, 1, obj.numOutput);
  obj.weightFiller && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.inference.FillerParameter.fromObject(obj.weightFiller));
  obj.biasFiller && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.inference.FillerParameter.fromObject(obj.biasFiller));
  obj.debugInfo != null && jspb.Message.setField(msg, 4, obj.debugInfo);
  obj.exposeHidden != null && jspb.Message.setField(msg, 5, obj.exposeHidden);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.RecurrentParameter}
 */
proto.apollo.perception.inference.RecurrentParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.RecurrentParameter;
  return proto.apollo.perception.inference.RecurrentParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.RecurrentParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.RecurrentParameter}
 */
proto.apollo.perception.inference.RecurrentParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 3:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugInfo(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExposeHidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.RecurrentParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.RecurrentParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RecurrentParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.setNumOutput = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.clearNumOutput = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FillerParameter weight_filler = 2;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 2));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
*/
proto.apollo.perception.inference.RecurrentParameter.prototype.setWeightFiller = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.clearWeightFiller = function() {
  return this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter bias_filler = 3;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 3));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
*/
proto.apollo.perception.inference.RecurrentParameter.prototype.setBiasFiller = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.clearBiasFiller = function() {
  return this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool debug_info = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.getDebugInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.setDebugInfo = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.clearDebugInfo = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.hasDebugInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool expose_hidden = 5;
 * @return {boolean}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.getExposeHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.setExposeHidden = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RecurrentParameter} returns this
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.clearExposeHidden = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RecurrentParameter.prototype.hasExposeHidden = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ReductionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ReductionParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReductionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 1),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coeff: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReductionParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ReductionParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.operation;

  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.coeff;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ReductionParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ReductionParameter}
 */
proto.apollo.perception.inference.ReductionParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ReductionParameter();
  obj.operation != null && jspb.Message.setField(msg, 1, obj.operation);
  obj.axis != null && jspb.Message.setField(msg, 2, obj.axis);
  obj.coeff != null && jspb.Message.setField(msg, 3, obj.coeff);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ReductionParameter}
 */
proto.apollo.perception.inference.ReductionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ReductionParameter;
  return proto.apollo.perception.inference.ReductionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ReductionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ReductionParameter}
 */
proto.apollo.perception.inference.ReductionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.ReductionParameter.ReductionOp} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCoeff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ReductionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ReductionParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReductionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.ReductionParameter.ReductionOp} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.ReductionParameter.ReductionOp = {
  SUM: 1,
  ASUM: 2,
  SUMSQ: 3,
  MEAN: 4
};

/**
 * optional ReductionOp operation = 1;
 * @return {!proto.apollo.perception.inference.ReductionParameter.ReductionOp}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.getOperation = function() {
  return /** @type {!proto.apollo.perception.inference.ReductionParameter.ReductionOp} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.perception.inference.ReductionParameter.ReductionOp} value
 * @return {!proto.apollo.perception.inference.ReductionParameter} returns this
 */
proto.apollo.perception.inference.ReductionParameter.prototype.setOperation = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReductionParameter} returns this
 */
proto.apollo.perception.inference.ReductionParameter.prototype.clearOperation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ReductionParameter} returns this
 */
proto.apollo.perception.inference.ReductionParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReductionParameter} returns this
 */
proto.apollo.perception.inference.ReductionParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float coeff = 3;
 * @return {number}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.getCoeff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ReductionParameter} returns this
 */
proto.apollo.perception.inference.ReductionParameter.prototype.setCoeff = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReductionParameter} returns this
 */
proto.apollo.perception.inference.ReductionParameter.prototype.clearCoeff = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReductionParameter.prototype.hasCoeff = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ReLUParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ReLUParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ReLUParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReLUParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    negativeSlope: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    engine: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReLUParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ReLUParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.negativeSlope;

  /** @type {?|undefined} */
  this.engine;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ReLUParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ReLUParameter}
 */
proto.apollo.perception.inference.ReLUParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ReLUParameter();
  obj.negativeSlope != null && jspb.Message.setField(msg, 1, obj.negativeSlope);
  obj.engine != null && jspb.Message.setField(msg, 2, obj.engine);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ReLUParameter}
 */
proto.apollo.perception.inference.ReLUParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ReLUParameter;
  return proto.apollo.perception.inference.ReLUParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ReLUParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ReLUParameter}
 */
proto.apollo.perception.inference.ReLUParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegativeSlope(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.perception.inference.ReLUParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ReLUParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ReLUParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ReLUParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReLUParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.ReLUParameter.Engine} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.ReLUParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional float negative_slope = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ReLUParameter.prototype.getNegativeSlope = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ReLUParameter} returns this
 */
proto.apollo.perception.inference.ReLUParameter.prototype.setNegativeSlope = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReLUParameter} returns this
 */
proto.apollo.perception.inference.ReLUParameter.prototype.clearNegativeSlope = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReLUParameter.prototype.hasNegativeSlope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Engine engine = 2;
 * @return {!proto.apollo.perception.inference.ReLUParameter.Engine}
 */
proto.apollo.perception.inference.ReLUParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.ReLUParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.perception.inference.ReLUParameter.Engine} value
 * @return {!proto.apollo.perception.inference.ReLUParameter} returns this
 */
proto.apollo.perception.inference.ReLUParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReLUParameter} returns this
 */
proto.apollo.perception.inference.ReLUParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReLUParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ReshapeParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ReshapeParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReshapeParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.apollo.perception.inference.BlobShape.toObject(includeInstance, f),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numAxes: jspb.Message.getFieldWithDefault(msg, 3, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReshapeParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ReshapeParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.shape;

  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.numAxes;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ReshapeParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ReshapeParameter}
 */
proto.apollo.perception.inference.ReshapeParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ReshapeParameter();
  obj.shape && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.inference.BlobShape.fromObject(obj.shape));
  obj.axis != null && jspb.Message.setField(msg, 2, obj.axis);
  obj.numAxes != null && jspb.Message.setField(msg, 3, obj.numAxes);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ReshapeParameter}
 */
proto.apollo.perception.inference.ReshapeParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ReshapeParameter;
  return proto.apollo.perception.inference.ReshapeParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ReshapeParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ReshapeParameter}
 */
proto.apollo.perception.inference.ReshapeParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.BlobShape;
      reader.readMessage(value,proto.apollo.perception.inference.BlobShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumAxes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ReshapeParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ReshapeParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReshapeParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.inference.BlobShape.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional BlobShape shape = 1;
 * @return {?proto.apollo.perception.inference.BlobShape}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.getShape = function() {
  return /** @type{?proto.apollo.perception.inference.BlobShape} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.BlobShape, 1));
};


/**
 * @param {?proto.apollo.perception.inference.BlobShape|undefined} value
 * @return {!proto.apollo.perception.inference.ReshapeParameter} returns this
*/
proto.apollo.perception.inference.ReshapeParameter.prototype.setShape = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.ReshapeParameter} returns this
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.clearShape = function() {
  return this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.hasShape = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ReshapeParameter} returns this
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReshapeParameter} returns this
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 num_axes = 3;
 * @return {number}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.getNumAxes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ReshapeParameter} returns this
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.setNumAxes = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReshapeParameter} returns this
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.clearNumAxes = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReshapeParameter.prototype.hasNumAxes = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ROIPoolingParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ROIPoolingParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ROIPoolingParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    pooledH: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pooledW: jspb.Message.getFieldWithDefault(msg, 2, 0),
    spatialScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    useFloor: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ROIPoolingParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ROIPoolingParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pooledH;

  /** @type {?|undefined} */
  this.pooledW;

  /** @type {?|undefined} */
  this.spatialScale;

  /** @type {?|undefined} */
  this.useFloor;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ROIPoolingParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter}
 */
proto.apollo.perception.inference.ROIPoolingParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ROIPoolingParameter();
  obj.pooledH != null && jspb.Message.setField(msg, 1, obj.pooledH);
  obj.pooledW != null && jspb.Message.setField(msg, 2, obj.pooledW);
  obj.spatialScale != null && jspb.Message.setField(msg, 3, obj.spatialScale);
  obj.useFloor != null && jspb.Message.setField(msg, 10, obj.useFloor);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter}
 */
proto.apollo.perception.inference.ROIPoolingParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ROIPoolingParameter;
  return proto.apollo.perception.inference.ROIPoolingParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ROIPoolingParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter}
 */
proto.apollo.perception.inference.ROIPoolingParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPooledH(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPooledW(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpatialScale(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseFloor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ROIPoolingParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ROIPoolingParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ROIPoolingParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional uint32 pooled_h = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.getPooledH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.setPooledH = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.clearPooledH = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.hasPooledH = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 pooled_w = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.getPooledW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.setPooledW = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.clearPooledW = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.hasPooledW = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float spatial_scale = 3;
 * @return {number}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.getSpatialScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.setSpatialScale = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.clearSpatialScale = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.hasSpatialScale = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool use_floor = 10;
 * @return {boolean}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.getUseFloor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.setUseFloor = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ROIPoolingParameter} returns this
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.clearUseFloor = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ROIPoolingParameter.prototype.hasUseFloor = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ScaleParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ScaleParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ScaleParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    numAxes: jspb.Message.getFieldWithDefault(msg, 2, 1),
    filler: (f = msg.getFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    biasTerm: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    biasFiller: (f = msg.getBiasFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScaleParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ScaleParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.numAxes;

  /** @type {?|undefined} */
  this.filler;

  /** @type {?|undefined} */
  this.biasTerm;

  /** @type {?|undefined} */
  this.biasFiller;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ScaleParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ScaleParameter}
 */
proto.apollo.perception.inference.ScaleParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ScaleParameter();
  obj.axis != null && jspb.Message.setField(msg, 1, obj.axis);
  obj.numAxes != null && jspb.Message.setField(msg, 2, obj.numAxes);
  obj.filler && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.inference.FillerParameter.fromObject(obj.filler));
  obj.biasTerm != null && jspb.Message.setField(msg, 4, obj.biasTerm);
  obj.biasFiller && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.perception.inference.FillerParameter.fromObject(obj.biasFiller));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ScaleParameter}
 */
proto.apollo.perception.inference.ScaleParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ScaleParameter;
  return proto.apollo.perception.inference.ScaleParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ScaleParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ScaleParameter}
 */
proto.apollo.perception.inference.ScaleParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumAxes(value);
      break;
    case 3:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setFiller(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 5:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ScaleParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ScaleParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ScaleParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 num_axes = 2;
 * @return {number}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.getNumAxes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.setNumAxes = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.clearNumAxes = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.hasNumAxes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter filler = 3;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.getFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 3));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
*/
proto.apollo.perception.inference.ScaleParameter.prototype.setFiller = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.clearFiller = function() {
  return this.setFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.hasFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bias_term = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.setBiasTerm = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.clearBiasTerm = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FillerParameter bias_filler = 5;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 5));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
*/
proto.apollo.perception.inference.ScaleParameter.prototype.setBiasFiller = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.ScaleParameter} returns this
 */
proto.apollo.perception.inference.ScaleParameter.prototype.clearBiasFiller = function() {
  return this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ScaleParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.SigmoidParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.SigmoidParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.SigmoidParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SigmoidParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    engine: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SigmoidParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.SigmoidParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.engine;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.SigmoidParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.SigmoidParameter}
 */
proto.apollo.perception.inference.SigmoidParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.SigmoidParameter();
  obj.engine != null && jspb.Message.setField(msg, 1, obj.engine);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.SigmoidParameter}
 */
proto.apollo.perception.inference.SigmoidParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.SigmoidParameter;
  return proto.apollo.perception.inference.SigmoidParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.SigmoidParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.SigmoidParameter}
 */
proto.apollo.perception.inference.SigmoidParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.SigmoidParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.SigmoidParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.SigmoidParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.SigmoidParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SigmoidParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.SigmoidParameter.Engine} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.SigmoidParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional Engine engine = 1;
 * @return {!proto.apollo.perception.inference.SigmoidParameter.Engine}
 */
proto.apollo.perception.inference.SigmoidParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.SigmoidParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.inference.SigmoidParameter.Engine} value
 * @return {!proto.apollo.perception.inference.SigmoidParameter} returns this
 */
proto.apollo.perception.inference.SigmoidParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SigmoidParameter} returns this
 */
proto.apollo.perception.inference.SigmoidParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SigmoidParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.SliceParameter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.SliceParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.SliceParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.SliceParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SliceParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 3, 1),
    slicePointList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    sliceDim: jspb.Message.getFieldWithDefault(msg, 1, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SliceParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.SliceParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.slicePointList;

  /** @type {?|undefined} */
  this.sliceDim;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.SliceParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.SliceParameter}
 */
proto.apollo.perception.inference.SliceParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.SliceParameter();
  obj.axis != null && jspb.Message.setField(msg, 3, obj.axis);
  obj.slicePointList != null && jspb.Message.setField(msg, 2, obj.slicePointList);
  obj.sliceDim != null && jspb.Message.setField(msg, 1, obj.sliceDim);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.SliceParameter}
 */
proto.apollo.perception.inference.SliceParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.SliceParameter;
  return proto.apollo.perception.inference.SliceParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.SliceParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.SliceParameter}
 */
proto.apollo.perception.inference.SliceParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSlicePoint(values[i]);
      }
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSliceDim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.SliceParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.SliceParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.SliceParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SliceParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSlicePointList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional int32 axis = 3;
 * @return {number}
 */
proto.apollo.perception.inference.SliceParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SliceParameter} returns this
 */
proto.apollo.perception.inference.SliceParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SliceParameter} returns this
 */
proto.apollo.perception.inference.SliceParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SliceParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 slice_point = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.SliceParameter.prototype.getSlicePointList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.SliceParameter} returns this
 */
proto.apollo.perception.inference.SliceParameter.prototype.setSlicePointList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.SliceParameter} returns this
 */
proto.apollo.perception.inference.SliceParameter.prototype.addSlicePoint = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.SliceParameter} returns this
 */
proto.apollo.perception.inference.SliceParameter.prototype.clearSlicePointList = function() {
  return this.setSlicePointList([]);
};


/**
 * optional uint32 slice_dim = 1;
 * @return {number}
 */
proto.apollo.perception.inference.SliceParameter.prototype.getSliceDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SliceParameter} returns this
 */
proto.apollo.perception.inference.SliceParameter.prototype.setSliceDim = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SliceParameter} returns this
 */
proto.apollo.perception.inference.SliceParameter.prototype.clearSliceDim = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SliceParameter.prototype.hasSliceDim = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.SoftmaxParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.SoftmaxParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SoftmaxParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    engine: jspb.Message.getFieldWithDefault(msg, 1, 0),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SoftmaxParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.SoftmaxParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.engine;

  /** @type {?|undefined} */
  this.axis;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.SoftmaxParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.SoftmaxParameter}
 */
proto.apollo.perception.inference.SoftmaxParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.SoftmaxParameter();
  obj.engine != null && jspb.Message.setField(msg, 1, obj.engine);
  obj.axis != null && jspb.Message.setField(msg, 2, obj.axis);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.SoftmaxParameter}
 */
proto.apollo.perception.inference.SoftmaxParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.SoftmaxParameter;
  return proto.apollo.perception.inference.SoftmaxParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.SoftmaxParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.SoftmaxParameter}
 */
proto.apollo.perception.inference.SoftmaxParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.SoftmaxParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.SoftmaxParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.SoftmaxParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SoftmaxParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.SoftmaxParameter.Engine} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.SoftmaxParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional Engine engine = 1;
 * @return {!proto.apollo.perception.inference.SoftmaxParameter.Engine}
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.SoftmaxParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.inference.SoftmaxParameter.Engine} value
 * @return {!proto.apollo.perception.inference.SoftmaxParameter} returns this
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SoftmaxParameter} returns this
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SoftmaxParameter} returns this
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SoftmaxParameter} returns this
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SoftmaxParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.TanHParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.TanHParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.TanHParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.TanHParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    engine: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TanHParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.TanHParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.engine;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.TanHParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.TanHParameter}
 */
proto.apollo.perception.inference.TanHParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.TanHParameter();
  obj.engine != null && jspb.Message.setField(msg, 1, obj.engine);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.TanHParameter}
 */
proto.apollo.perception.inference.TanHParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.TanHParameter;
  return proto.apollo.perception.inference.TanHParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.TanHParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.TanHParameter}
 */
proto.apollo.perception.inference.TanHParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.TanHParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.TanHParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.TanHParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.TanHParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.TanHParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.TanHParameter.Engine} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.TanHParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional Engine engine = 1;
 * @return {!proto.apollo.perception.inference.TanHParameter.Engine}
 */
proto.apollo.perception.inference.TanHParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.TanHParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.inference.TanHParameter.Engine} value
 * @return {!proto.apollo.perception.inference.TanHParameter} returns this
 */
proto.apollo.perception.inference.TanHParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TanHParameter} returns this
 */
proto.apollo.perception.inference.TanHParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TanHParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.TileParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.TileParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.TileParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.TileParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    tiles: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TileParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.TileParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.axis;

  /** @type {?|undefined} */
  this.tiles;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.TileParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.TileParameter}
 */
proto.apollo.perception.inference.TileParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.TileParameter();
  obj.axis != null && jspb.Message.setField(msg, 1, obj.axis);
  obj.tiles != null && jspb.Message.setField(msg, 2, obj.tiles);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.TileParameter}
 */
proto.apollo.perception.inference.TileParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.TileParameter;
  return proto.apollo.perception.inference.TileParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.TileParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.TileParameter}
 */
proto.apollo.perception.inference.TileParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.TileParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.TileParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.TileParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.TileParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.apollo.perception.inference.TileParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.TileParameter} returns this
 */
proto.apollo.perception.inference.TileParameter.prototype.setAxis = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TileParameter} returns this
 */
proto.apollo.perception.inference.TileParameter.prototype.clearAxis = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TileParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 tiles = 2;
 * @return {number}
 */
proto.apollo.perception.inference.TileParameter.prototype.getTiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.TileParameter} returns this
 */
proto.apollo.perception.inference.TileParameter.prototype.setTiles = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.TileParameter} returns this
 */
proto.apollo.perception.inference.TileParameter.prototype.clearTiles = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.TileParameter.prototype.hasTiles = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ThresholdParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ThresholdParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ThresholdParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ThresholdParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ThresholdParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ThresholdParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.threshold;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ThresholdParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ThresholdParameter}
 */
proto.apollo.perception.inference.ThresholdParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ThresholdParameter();
  obj.threshold != null && jspb.Message.setField(msg, 1, obj.threshold);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ThresholdParameter}
 */
proto.apollo.perception.inference.ThresholdParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ThresholdParameter;
  return proto.apollo.perception.inference.ThresholdParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ThresholdParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ThresholdParameter}
 */
proto.apollo.perception.inference.ThresholdParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ThresholdParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ThresholdParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ThresholdParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ThresholdParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float threshold = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ThresholdParameter.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ThresholdParameter} returns this
 */
proto.apollo.perception.inference.ThresholdParameter.prototype.setThreshold = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ThresholdParameter} returns this
 */
proto.apollo.perception.inference.ThresholdParameter.prototype.clearThreshold = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ThresholdParameter.prototype.hasThreshold = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.VideoDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.VideoDataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.VideoDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    videoType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    videoFile: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    skipFrames: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VideoDataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.VideoDataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.videoType;

  /** @type {?|undefined} */
  this.deviceId;

  /** @type {?|undefined} */
  this.videoFile;

  /** @type {?|undefined} */
  this.skipFrames;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.VideoDataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.VideoDataParameter}
 */
proto.apollo.perception.inference.VideoDataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.VideoDataParameter();
  obj.videoType != null && jspb.Message.setField(msg, 1, obj.videoType);
  obj.deviceId != null && jspb.Message.setField(msg, 2, obj.deviceId);
  obj.videoFile != null && jspb.Message.setField(msg, 3, obj.videoFile);
  obj.skipFrames != null && jspb.Message.setField(msg, 4, obj.skipFrames);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.VideoDataParameter}
 */
proto.apollo.perception.inference.VideoDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.VideoDataParameter;
  return proto.apollo.perception.inference.VideoDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.VideoDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.VideoDataParameter}
 */
proto.apollo.perception.inference.VideoDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.VideoDataParameter.VideoType} */ (reader.readEnum());
      msg.setVideoType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVideoFile(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkipFrames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.VideoDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.VideoDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.VideoDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.VideoDataParameter.VideoType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.VideoDataParameter.VideoType = {
  WEBCAM: 0,
  VIDEO: 1
};

/**
 * optional VideoType video_type = 1;
 * @return {!proto.apollo.perception.inference.VideoDataParameter.VideoType}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.getVideoType = function() {
  return /** @type {!proto.apollo.perception.inference.VideoDataParameter.VideoType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.inference.VideoDataParameter.VideoType} value
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.setVideoType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.clearVideoType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.hasVideoType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 device_id = 2;
 * @return {number}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.getDeviceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.setDeviceId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.clearDeviceId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string video_file = 3;
 * @return {string}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.getVideoFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.setVideoFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.clearVideoFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.hasVideoFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 skip_frames = 4;
 * @return {number}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.getSkipFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.setSkipFrames = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.VideoDataParameter} returns this
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.clearSkipFrames = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.VideoDataParameter.prototype.hasSkipFrames = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.WindowDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.WindowDataParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.WindowDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    meanFile: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    batchSize: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    cropSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mirror: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    fgThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.5),
    bgThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.5),
    fgFraction: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.25),
    contextPad: jspb.Message.getFieldWithDefault(msg, 10, 0),
    cropMode: jspb.Message.getFieldWithDefault(msg, 11, "warp"),
    cacheImages: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    rootFolder: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of WindowDataParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.WindowDataParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.meanFile;

  /** @type {?|undefined} */
  this.batchSize;

  /** @type {?|undefined} */
  this.cropSize;

  /** @type {?|undefined} */
  this.mirror;

  /** @type {?|undefined} */
  this.fgThreshold;

  /** @type {?|undefined} */
  this.bgThreshold;

  /** @type {?|undefined} */
  this.fgFraction;

  /** @type {?|undefined} */
  this.contextPad;

  /** @type {?|undefined} */
  this.cropMode;

  /** @type {?|undefined} */
  this.cacheImages;

  /** @type {?|undefined} */
  this.rootFolder;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.WindowDataParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.WindowDataParameter}
 */
proto.apollo.perception.inference.WindowDataParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.WindowDataParameter();
  obj.source != null && jspb.Message.setField(msg, 1, obj.source);
  obj.scale != null && jspb.Message.setField(msg, 2, obj.scale);
  obj.meanFile != null && jspb.Message.setField(msg, 3, obj.meanFile);
  obj.batchSize != null && jspb.Message.setField(msg, 4, obj.batchSize);
  obj.cropSize != null && jspb.Message.setField(msg, 5, obj.cropSize);
  obj.mirror != null && jspb.Message.setField(msg, 6, obj.mirror);
  obj.fgThreshold != null && jspb.Message.setField(msg, 7, obj.fgThreshold);
  obj.bgThreshold != null && jspb.Message.setField(msg, 8, obj.bgThreshold);
  obj.fgFraction != null && jspb.Message.setField(msg, 9, obj.fgFraction);
  obj.contextPad != null && jspb.Message.setField(msg, 10, obj.contextPad);
  obj.cropMode != null && jspb.Message.setField(msg, 11, obj.cropMode);
  obj.cacheImages != null && jspb.Message.setField(msg, 12, obj.cacheImages);
  obj.rootFolder != null && jspb.Message.setField(msg, 13, obj.rootFolder);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.WindowDataParameter}
 */
proto.apollo.perception.inference.WindowDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.WindowDataParameter;
  return proto.apollo.perception.inference.WindowDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.WindowDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.WindowDataParameter}
 */
proto.apollo.perception.inference.WindowDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFgThreshold(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBgThreshold(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFgFraction(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContextPad(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCropMode(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCacheImages(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootFolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.WindowDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.WindowDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.WindowDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mean_file = 3;
 * @return {string}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setMeanFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearMeanFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 batch_size = 4;
 * @return {number}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setBatchSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearBatchSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 crop_size = 5;
 * @return {number}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setCropSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearCropSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool mirror = 6;
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setMirror = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearMirror = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float fg_threshold = 7;
 * @return {number}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getFgThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setFgThreshold = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearFgThreshold = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasFgThreshold = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float bg_threshold = 8;
 * @return {number}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getBgThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setBgThreshold = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearBgThreshold = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasBgThreshold = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float fg_fraction = 9;
 * @return {number}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getFgFraction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.25));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setFgFraction = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearFgFraction = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasFgFraction = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 context_pad = 10;
 * @return {number}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getContextPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setContextPad = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearContextPad = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasContextPad = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string crop_mode = 11;
 * @return {string}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getCropMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "warp"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setCropMode = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearCropMode = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasCropMode = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool cache_images = 12;
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getCacheImages = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setCacheImages = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearCacheImages = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasCacheImages = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string root_folder = 13;
 * @return {string}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.getRootFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.setRootFolder = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.WindowDataParameter} returns this
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.clearRootFolder = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.WindowDataParameter.prototype.hasRootFolder = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.SPPParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.SPPParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.SPPParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SPPParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    pyramidHeight: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    pool: jspb.Message.getFieldWithDefault(msg, 2, 0),
    engine: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SPPParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.SPPParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pyramidHeight;

  /** @type {?|undefined} */
  this.pool;

  /** @type {?|undefined} */
  this.engine;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.SPPParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.SPPParameter}
 */
proto.apollo.perception.inference.SPPParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.SPPParameter();
  obj.pyramidHeight != null && jspb.Message.setField(msg, 1, obj.pyramidHeight);
  obj.pool != null && jspb.Message.setField(msg, 2, obj.pool);
  obj.engine != null && jspb.Message.setField(msg, 6, obj.engine);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.SPPParameter}
 */
proto.apollo.perception.inference.SPPParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.SPPParameter;
  return proto.apollo.perception.inference.SPPParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.SPPParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.SPPParameter}
 */
proto.apollo.perception.inference.SPPParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPyramidHeight(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.perception.inference.SPPParameter.PoolMethod} */ (reader.readEnum());
      msg.setPool(value);
      break;
    case 6:
      var value = /** @type {!proto.apollo.perception.inference.SPPParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.SPPParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.SPPParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.SPPParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.SPPParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.SPPParameter.PoolMethod} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.SPPParameter.Engine} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.SPPParameter.PoolMethod = {
  MAX: 0,
  AVE: 1,
  STOCHASTIC: 2
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.SPPParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional uint32 pyramid_height = 1;
 * @return {number}
 */
proto.apollo.perception.inference.SPPParameter.prototype.getPyramidHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.SPPParameter} returns this
 */
proto.apollo.perception.inference.SPPParameter.prototype.setPyramidHeight = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SPPParameter} returns this
 */
proto.apollo.perception.inference.SPPParameter.prototype.clearPyramidHeight = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SPPParameter.prototype.hasPyramidHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PoolMethod pool = 2;
 * @return {!proto.apollo.perception.inference.SPPParameter.PoolMethod}
 */
proto.apollo.perception.inference.SPPParameter.prototype.getPool = function() {
  return /** @type {!proto.apollo.perception.inference.SPPParameter.PoolMethod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.perception.inference.SPPParameter.PoolMethod} value
 * @return {!proto.apollo.perception.inference.SPPParameter} returns this
 */
proto.apollo.perception.inference.SPPParameter.prototype.setPool = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SPPParameter} returns this
 */
proto.apollo.perception.inference.SPPParameter.prototype.clearPool = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SPPParameter.prototype.hasPool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Engine engine = 6;
 * @return {!proto.apollo.perception.inference.SPPParameter.Engine}
 */
proto.apollo.perception.inference.SPPParameter.prototype.getEngine = function() {
  return /** @type {!proto.apollo.perception.inference.SPPParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.apollo.perception.inference.SPPParameter.Engine} value
 * @return {!proto.apollo.perception.inference.SPPParameter} returns this
 */
proto.apollo.perception.inference.SPPParameter.prototype.setEngine = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.SPPParameter} returns this
 */
proto.apollo.perception.inference.SPPParameter.prototype.clearEngine = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.SPPParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.V1LayerParameter.repeatedFields_ = [2,3,32,33,6,1001,1002,7,8,35];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.V1LayerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.V1LayerParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.V1LayerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    bottomList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    topList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    includeList: jspb.Message.toObjectList(msg.getIncludeList(),
    proto.apollo.perception.inference.NetStateRule.toObject, includeInstance),
    excludeList: jspb.Message.toObjectList(msg.getExcludeList(),
    proto.apollo.perception.inference.NetStateRule.toObject, includeInstance),
    type: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    blobsList: jspb.Message.toObjectList(msg.getBlobsList(),
    proto.apollo.perception.inference.BlobProto.toObject, includeInstance),
    paramList: (f = jspb.Message.getRepeatedField(msg, 1001)) == null ? undefined : f,
    blobShareModeList: (f = jspb.Message.getRepeatedField(msg, 1002)) == null ? undefined : f,
    blobsLrList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    weightDecayList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f,
    lossWeightList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 35)) == null ? undefined : f,
    accuracyParam: (f = msg.getAccuracyParam()) && proto.apollo.perception.inference.AccuracyParameter.toObject(includeInstance, f),
    argmaxParam: (f = msg.getArgmaxParam()) && proto.apollo.perception.inference.ArgMaxParameter.toObject(includeInstance, f),
    concatParam: (f = msg.getConcatParam()) && proto.apollo.perception.inference.ConcatParameter.toObject(includeInstance, f),
    contrastiveLossParam: (f = msg.getContrastiveLossParam()) && proto.apollo.perception.inference.ContrastiveLossParameter.toObject(includeInstance, f),
    convolutionParam: (f = msg.getConvolutionParam()) && proto.apollo.perception.inference.ConvolutionParameter.toObject(includeInstance, f),
    dataParam: (f = msg.getDataParam()) && proto.apollo.perception.inference.DataParameter.toObject(includeInstance, f),
    dropoutParam: (f = msg.getDropoutParam()) && proto.apollo.perception.inference.DropoutParameter.toObject(includeInstance, f),
    dummyDataParam: (f = msg.getDummyDataParam()) && proto.apollo.perception.inference.DummyDataParameter.toObject(includeInstance, f),
    eltwiseParam: (f = msg.getEltwiseParam()) && proto.apollo.perception.inference.EltwiseParameter.toObject(includeInstance, f),
    expParam: (f = msg.getExpParam()) && proto.apollo.perception.inference.ExpParameter.toObject(includeInstance, f),
    hdf5DataParam: (f = msg.getHdf5DataParam()) && proto.apollo.perception.inference.HDF5DataParameter.toObject(includeInstance, f),
    hdf5OutputParam: (f = msg.getHdf5OutputParam()) && proto.apollo.perception.inference.HDF5OutputParameter.toObject(includeInstance, f),
    hingeLossParam: (f = msg.getHingeLossParam()) && proto.apollo.perception.inference.HingeLossParameter.toObject(includeInstance, f),
    imageDataParam: (f = msg.getImageDataParam()) && proto.apollo.perception.inference.ImageDataParameter.toObject(includeInstance, f),
    infogainLossParam: (f = msg.getInfogainLossParam()) && proto.apollo.perception.inference.InfogainLossParameter.toObject(includeInstance, f),
    innerProductParam: (f = msg.getInnerProductParam()) && proto.apollo.perception.inference.InnerProductParameter.toObject(includeInstance, f),
    lrnParam: (f = msg.getLrnParam()) && proto.apollo.perception.inference.LRNParameter.toObject(includeInstance, f),
    memoryDataParam: (f = msg.getMemoryDataParam()) && proto.apollo.perception.inference.MemoryDataParameter.toObject(includeInstance, f),
    mvnParam: (f = msg.getMvnParam()) && proto.apollo.perception.inference.MVNParameter.toObject(includeInstance, f),
    poolingParam: (f = msg.getPoolingParam()) && proto.apollo.perception.inference.PoolingParameter.toObject(includeInstance, f),
    powerParam: (f = msg.getPowerParam()) && proto.apollo.perception.inference.PowerParameter.toObject(includeInstance, f),
    reluParam: (f = msg.getReluParam()) && proto.apollo.perception.inference.ReLUParameter.toObject(includeInstance, f),
    sigmoidParam: (f = msg.getSigmoidParam()) && proto.apollo.perception.inference.SigmoidParameter.toObject(includeInstance, f),
    softmaxParam: (f = msg.getSoftmaxParam()) && proto.apollo.perception.inference.SoftmaxParameter.toObject(includeInstance, f),
    sliceParam: (f = msg.getSliceParam()) && proto.apollo.perception.inference.SliceParameter.toObject(includeInstance, f),
    tanhParam: (f = msg.getTanhParam()) && proto.apollo.perception.inference.TanHParameter.toObject(includeInstance, f),
    thresholdParam: (f = msg.getThresholdParam()) && proto.apollo.perception.inference.ThresholdParameter.toObject(includeInstance, f),
    windowDataParam: (f = msg.getWindowDataParam()) && proto.apollo.perception.inference.WindowDataParameter.toObject(includeInstance, f),
    transformParam: (f = msg.getTransformParam()) && proto.apollo.perception.inference.TransformationParameter.toObject(includeInstance, f),
    lossParam: (f = msg.getLossParam()) && proto.apollo.perception.inference.LossParameter.toObject(includeInstance, f),
    layer: (f = msg.getLayer()) && proto.apollo.perception.inference.V0LayerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of V1LayerParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.V1LayerParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.bottomList;

  /** @type {?|undefined} */
  this.topList;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.includeList;

  /** @type {?|undefined} */
  this.excludeList;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.blobsList;

  /** @type {?|undefined} */
  this.paramList;

  /** @type {?|undefined} */
  this.blobShareModeList;

  /** @type {?|undefined} */
  this.blobsLrList;

  /** @type {?|undefined} */
  this.weightDecayList;

  /** @type {?|undefined} */
  this.lossWeightList;

  /** @type {?|undefined} */
  this.accuracyParam;

  /** @type {?|undefined} */
  this.argmaxParam;

  /** @type {?|undefined} */
  this.concatParam;

  /** @type {?|undefined} */
  this.contrastiveLossParam;

  /** @type {?|undefined} */
  this.convolutionParam;

  /** @type {?|undefined} */
  this.dataParam;

  /** @type {?|undefined} */
  this.dropoutParam;

  /** @type {?|undefined} */
  this.dummyDataParam;

  /** @type {?|undefined} */
  this.eltwiseParam;

  /** @type {?|undefined} */
  this.expParam;

  /** @type {?|undefined} */
  this.hdf5DataParam;

  /** @type {?|undefined} */
  this.hdf5OutputParam;

  /** @type {?|undefined} */
  this.hingeLossParam;

  /** @type {?|undefined} */
  this.imageDataParam;

  /** @type {?|undefined} */
  this.infogainLossParam;

  /** @type {?|undefined} */
  this.innerProductParam;

  /** @type {?|undefined} */
  this.lrnParam;

  /** @type {?|undefined} */
  this.memoryDataParam;

  /** @type {?|undefined} */
  this.mvnParam;

  /** @type {?|undefined} */
  this.poolingParam;

  /** @type {?|undefined} */
  this.powerParam;

  /** @type {?|undefined} */
  this.reluParam;

  /** @type {?|undefined} */
  this.sigmoidParam;

  /** @type {?|undefined} */
  this.softmaxParam;

  /** @type {?|undefined} */
  this.sliceParam;

  /** @type {?|undefined} */
  this.tanhParam;

  /** @type {?|undefined} */
  this.thresholdParam;

  /** @type {?|undefined} */
  this.windowDataParam;

  /** @type {?|undefined} */
  this.transformParam;

  /** @type {?|undefined} */
  this.lossParam;

  /** @type {?|undefined} */
  this.layer;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.V1LayerParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.V1LayerParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.V1LayerParameter();
  obj.bottomList != null && jspb.Message.setField(msg, 2, obj.bottomList);
  obj.topList != null && jspb.Message.setField(msg, 3, obj.topList);
  obj.name != null && jspb.Message.setField(msg, 4, obj.name);
  obj.includeList && jspb.Message.setRepeatedWrapperField(
      msg, 32, obj.includeList.map(
          proto.apollo.perception.inference.NetStateRule.fromObject));
  obj.excludeList && jspb.Message.setRepeatedWrapperField(
      msg, 33, obj.excludeList.map(
          proto.apollo.perception.inference.NetStateRule.fromObject));
  obj.type != null && jspb.Message.setField(msg, 5, obj.type);
  obj.blobsList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.blobsList.map(
          proto.apollo.perception.inference.BlobProto.fromObject));
  obj.paramList != null && jspb.Message.setField(msg, 1001, obj.paramList);
  obj.blobShareModeList != null && jspb.Message.setField(msg, 1002, obj.blobShareModeList);
  obj.blobsLrList != null && jspb.Message.setField(msg, 7, obj.blobsLrList);
  obj.weightDecayList != null && jspb.Message.setField(msg, 8, obj.weightDecayList);
  obj.lossWeightList != null && jspb.Message.setField(msg, 35, obj.lossWeightList);
  obj.accuracyParam && jspb.Message.setWrapperField(
      msg, 27, proto.apollo.perception.inference.AccuracyParameter.fromObject(obj.accuracyParam));
  obj.argmaxParam && jspb.Message.setWrapperField(
      msg, 23, proto.apollo.perception.inference.ArgMaxParameter.fromObject(obj.argmaxParam));
  obj.concatParam && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.perception.inference.ConcatParameter.fromObject(obj.concatParam));
  obj.contrastiveLossParam && jspb.Message.setWrapperField(
      msg, 40, proto.apollo.perception.inference.ContrastiveLossParameter.fromObject(obj.contrastiveLossParam));
  obj.convolutionParam && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.perception.inference.ConvolutionParameter.fromObject(obj.convolutionParam));
  obj.dataParam && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.perception.inference.DataParameter.fromObject(obj.dataParam));
  obj.dropoutParam && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.perception.inference.DropoutParameter.fromObject(obj.dropoutParam));
  obj.dummyDataParam && jspb.Message.setWrapperField(
      msg, 26, proto.apollo.perception.inference.DummyDataParameter.fromObject(obj.dummyDataParam));
  obj.eltwiseParam && jspb.Message.setWrapperField(
      msg, 24, proto.apollo.perception.inference.EltwiseParameter.fromObject(obj.eltwiseParam));
  obj.expParam && jspb.Message.setWrapperField(
      msg, 41, proto.apollo.perception.inference.ExpParameter.fromObject(obj.expParam));
  obj.hdf5DataParam && jspb.Message.setWrapperField(
      msg, 13, proto.apollo.perception.inference.HDF5DataParameter.fromObject(obj.hdf5DataParam));
  obj.hdf5OutputParam && jspb.Message.setWrapperField(
      msg, 14, proto.apollo.perception.inference.HDF5OutputParameter.fromObject(obj.hdf5OutputParam));
  obj.hingeLossParam && jspb.Message.setWrapperField(
      msg, 29, proto.apollo.perception.inference.HingeLossParameter.fromObject(obj.hingeLossParam));
  obj.imageDataParam && jspb.Message.setWrapperField(
      msg, 15, proto.apollo.perception.inference.ImageDataParameter.fromObject(obj.imageDataParam));
  obj.infogainLossParam && jspb.Message.setWrapperField(
      msg, 16, proto.apollo.perception.inference.InfogainLossParameter.fromObject(obj.infogainLossParam));
  obj.innerProductParam && jspb.Message.setWrapperField(
      msg, 17, proto.apollo.perception.inference.InnerProductParameter.fromObject(obj.innerProductParam));
  obj.lrnParam && jspb.Message.setWrapperField(
      msg, 18, proto.apollo.perception.inference.LRNParameter.fromObject(obj.lrnParam));
  obj.memoryDataParam && jspb.Message.setWrapperField(
      msg, 22, proto.apollo.perception.inference.MemoryDataParameter.fromObject(obj.memoryDataParam));
  obj.mvnParam && jspb.Message.setWrapperField(
      msg, 34, proto.apollo.perception.inference.MVNParameter.fromObject(obj.mvnParam));
  obj.poolingParam && jspb.Message.setWrapperField(
      msg, 19, proto.apollo.perception.inference.PoolingParameter.fromObject(obj.poolingParam));
  obj.powerParam && jspb.Message.setWrapperField(
      msg, 21, proto.apollo.perception.inference.PowerParameter.fromObject(obj.powerParam));
  obj.reluParam && jspb.Message.setWrapperField(
      msg, 30, proto.apollo.perception.inference.ReLUParameter.fromObject(obj.reluParam));
  obj.sigmoidParam && jspb.Message.setWrapperField(
      msg, 38, proto.apollo.perception.inference.SigmoidParameter.fromObject(obj.sigmoidParam));
  obj.softmaxParam && jspb.Message.setWrapperField(
      msg, 39, proto.apollo.perception.inference.SoftmaxParameter.fromObject(obj.softmaxParam));
  obj.sliceParam && jspb.Message.setWrapperField(
      msg, 31, proto.apollo.perception.inference.SliceParameter.fromObject(obj.sliceParam));
  obj.tanhParam && jspb.Message.setWrapperField(
      msg, 37, proto.apollo.perception.inference.TanHParameter.fromObject(obj.tanhParam));
  obj.thresholdParam && jspb.Message.setWrapperField(
      msg, 25, proto.apollo.perception.inference.ThresholdParameter.fromObject(obj.thresholdParam));
  obj.windowDataParam && jspb.Message.setWrapperField(
      msg, 20, proto.apollo.perception.inference.WindowDataParameter.fromObject(obj.windowDataParam));
  obj.transformParam && jspb.Message.setWrapperField(
      msg, 36, proto.apollo.perception.inference.TransformationParameter.fromObject(obj.transformParam));
  obj.lossParam && jspb.Message.setWrapperField(
      msg, 42, proto.apollo.perception.inference.LossParameter.fromObject(obj.lossParam));
  obj.layer && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.inference.V0LayerParameter.fromObject(obj.layer));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.V1LayerParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.V1LayerParameter;
  return proto.apollo.perception.inference.V1LayerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.V1LayerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.V1LayerParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBottom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 32:
      var value = new proto.apollo.perception.inference.NetStateRule;
      reader.readMessage(value,proto.apollo.perception.inference.NetStateRule.deserializeBinaryFromReader);
      msg.addInclude(value);
      break;
    case 33:
      var value = new proto.apollo.perception.inference.NetStateRule;
      reader.readMessage(value,proto.apollo.perception.inference.NetStateRule.deserializeBinaryFromReader);
      msg.addExclude(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.perception.inference.V1LayerParameter.LayerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.apollo.perception.inference.BlobProto;
      reader.readMessage(value,proto.apollo.perception.inference.BlobProto.deserializeBinaryFromReader);
      msg.addBlobs(value);
      break;
    case 1001:
      var value = /** @type {string} */ (reader.readString());
      msg.addParam(value);
      break;
    case 1002:
      var values = /** @type {!Array<!proto.apollo.perception.inference.V1LayerParameter.DimCheckMode>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBlobShareMode(values[i]);
      }
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBlobsLr(values[i]);
      }
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWeightDecay(values[i]);
      }
      break;
    case 35:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addLossWeight(values[i]);
      }
      break;
    case 27:
      var value = new proto.apollo.perception.inference.AccuracyParameter;
      reader.readMessage(value,proto.apollo.perception.inference.AccuracyParameter.deserializeBinaryFromReader);
      msg.setAccuracyParam(value);
      break;
    case 23:
      var value = new proto.apollo.perception.inference.ArgMaxParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ArgMaxParameter.deserializeBinaryFromReader);
      msg.setArgmaxParam(value);
      break;
    case 9:
      var value = new proto.apollo.perception.inference.ConcatParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ConcatParameter.deserializeBinaryFromReader);
      msg.setConcatParam(value);
      break;
    case 40:
      var value = new proto.apollo.perception.inference.ContrastiveLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ContrastiveLossParameter.deserializeBinaryFromReader);
      msg.setContrastiveLossParam(value);
      break;
    case 10:
      var value = new proto.apollo.perception.inference.ConvolutionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ConvolutionParameter.deserializeBinaryFromReader);
      msg.setConvolutionParam(value);
      break;
    case 11:
      var value = new proto.apollo.perception.inference.DataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DataParameter.deserializeBinaryFromReader);
      msg.setDataParam(value);
      break;
    case 12:
      var value = new proto.apollo.perception.inference.DropoutParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DropoutParameter.deserializeBinaryFromReader);
      msg.setDropoutParam(value);
      break;
    case 26:
      var value = new proto.apollo.perception.inference.DummyDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.DummyDataParameter.deserializeBinaryFromReader);
      msg.setDummyDataParam(value);
      break;
    case 24:
      var value = new proto.apollo.perception.inference.EltwiseParameter;
      reader.readMessage(value,proto.apollo.perception.inference.EltwiseParameter.deserializeBinaryFromReader);
      msg.setEltwiseParam(value);
      break;
    case 41:
      var value = new proto.apollo.perception.inference.ExpParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ExpParameter.deserializeBinaryFromReader);
      msg.setExpParam(value);
      break;
    case 13:
      var value = new proto.apollo.perception.inference.HDF5DataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.HDF5DataParameter.deserializeBinaryFromReader);
      msg.setHdf5DataParam(value);
      break;
    case 14:
      var value = new proto.apollo.perception.inference.HDF5OutputParameter;
      reader.readMessage(value,proto.apollo.perception.inference.HDF5OutputParameter.deserializeBinaryFromReader);
      msg.setHdf5OutputParam(value);
      break;
    case 29:
      var value = new proto.apollo.perception.inference.HingeLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.HingeLossParameter.deserializeBinaryFromReader);
      msg.setHingeLossParam(value);
      break;
    case 15:
      var value = new proto.apollo.perception.inference.ImageDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ImageDataParameter.deserializeBinaryFromReader);
      msg.setImageDataParam(value);
      break;
    case 16:
      var value = new proto.apollo.perception.inference.InfogainLossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.InfogainLossParameter.deserializeBinaryFromReader);
      msg.setInfogainLossParam(value);
      break;
    case 17:
      var value = new proto.apollo.perception.inference.InnerProductParameter;
      reader.readMessage(value,proto.apollo.perception.inference.InnerProductParameter.deserializeBinaryFromReader);
      msg.setInnerProductParam(value);
      break;
    case 18:
      var value = new proto.apollo.perception.inference.LRNParameter;
      reader.readMessage(value,proto.apollo.perception.inference.LRNParameter.deserializeBinaryFromReader);
      msg.setLrnParam(value);
      break;
    case 22:
      var value = new proto.apollo.perception.inference.MemoryDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.MemoryDataParameter.deserializeBinaryFromReader);
      msg.setMemoryDataParam(value);
      break;
    case 34:
      var value = new proto.apollo.perception.inference.MVNParameter;
      reader.readMessage(value,proto.apollo.perception.inference.MVNParameter.deserializeBinaryFromReader);
      msg.setMvnParam(value);
      break;
    case 19:
      var value = new proto.apollo.perception.inference.PoolingParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PoolingParameter.deserializeBinaryFromReader);
      msg.setPoolingParam(value);
      break;
    case 21:
      var value = new proto.apollo.perception.inference.PowerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.PowerParameter.deserializeBinaryFromReader);
      msg.setPowerParam(value);
      break;
    case 30:
      var value = new proto.apollo.perception.inference.ReLUParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ReLUParameter.deserializeBinaryFromReader);
      msg.setReluParam(value);
      break;
    case 38:
      var value = new proto.apollo.perception.inference.SigmoidParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SigmoidParameter.deserializeBinaryFromReader);
      msg.setSigmoidParam(value);
      break;
    case 39:
      var value = new proto.apollo.perception.inference.SoftmaxParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SoftmaxParameter.deserializeBinaryFromReader);
      msg.setSoftmaxParam(value);
      break;
    case 31:
      var value = new proto.apollo.perception.inference.SliceParameter;
      reader.readMessage(value,proto.apollo.perception.inference.SliceParameter.deserializeBinaryFromReader);
      msg.setSliceParam(value);
      break;
    case 37:
      var value = new proto.apollo.perception.inference.TanHParameter;
      reader.readMessage(value,proto.apollo.perception.inference.TanHParameter.deserializeBinaryFromReader);
      msg.setTanhParam(value);
      break;
    case 25:
      var value = new proto.apollo.perception.inference.ThresholdParameter;
      reader.readMessage(value,proto.apollo.perception.inference.ThresholdParameter.deserializeBinaryFromReader);
      msg.setThresholdParam(value);
      break;
    case 20:
      var value = new proto.apollo.perception.inference.WindowDataParameter;
      reader.readMessage(value,proto.apollo.perception.inference.WindowDataParameter.deserializeBinaryFromReader);
      msg.setWindowDataParam(value);
      break;
    case 36:
      var value = new proto.apollo.perception.inference.TransformationParameter;
      reader.readMessage(value,proto.apollo.perception.inference.TransformationParameter.deserializeBinaryFromReader);
      msg.setTransformParam(value);
      break;
    case 42:
      var value = new proto.apollo.perception.inference.LossParameter;
      reader.readMessage(value,proto.apollo.perception.inference.LossParameter.deserializeBinaryFromReader);
      msg.setLossParam(value);
      break;
    case 1:
      var value = new proto.apollo.perception.inference.V0LayerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.V0LayerParameter.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.V1LayerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.V1LayerParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.V1LayerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBottomList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTopList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      32,
      f,
      proto.apollo.perception.inference.NetStateRule.serializeBinaryToWriter
    );
  }
  f = message.getExcludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      33,
      f,
      proto.apollo.perception.inference.NetStateRule.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.inference.V1LayerParameter.LayerType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getBlobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.perception.inference.BlobProto.serializeBinaryToWriter
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1001,
      f
    );
  }
  f = message.getBlobShareModeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1002,
      f
    );
  }
  f = message.getBlobsLrList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      7,
      f
    );
  }
  f = message.getWeightDecayList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      8,
      f
    );
  }
  f = message.getLossWeightList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      35,
      f
    );
  }
  f = message.getAccuracyParam();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.apollo.perception.inference.AccuracyParameter.serializeBinaryToWriter
    );
  }
  f = message.getArgmaxParam();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.apollo.perception.inference.ArgMaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getConcatParam();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.perception.inference.ConcatParameter.serializeBinaryToWriter
    );
  }
  f = message.getContrastiveLossParam();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.apollo.perception.inference.ContrastiveLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getConvolutionParam();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.perception.inference.ConvolutionParameter.serializeBinaryToWriter
    );
  }
  f = message.getDataParam();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.perception.inference.DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getDropoutParam();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.perception.inference.DropoutParameter.serializeBinaryToWriter
    );
  }
  f = message.getDummyDataParam();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.apollo.perception.inference.DummyDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getEltwiseParam();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.apollo.perception.inference.EltwiseParameter.serializeBinaryToWriter
    );
  }
  f = message.getExpParam();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.apollo.perception.inference.ExpParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5DataParam();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.apollo.perception.inference.HDF5DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5OutputParam();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.apollo.perception.inference.HDF5OutputParameter.serializeBinaryToWriter
    );
  }
  f = message.getHingeLossParam();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.apollo.perception.inference.HingeLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getImageDataParam();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.apollo.perception.inference.ImageDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getInfogainLossParam();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.apollo.perception.inference.InfogainLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getInnerProductParam();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.apollo.perception.inference.InnerProductParameter.serializeBinaryToWriter
    );
  }
  f = message.getLrnParam();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.apollo.perception.inference.LRNParameter.serializeBinaryToWriter
    );
  }
  f = message.getMemoryDataParam();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.apollo.perception.inference.MemoryDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getMvnParam();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.apollo.perception.inference.MVNParameter.serializeBinaryToWriter
    );
  }
  f = message.getPoolingParam();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.apollo.perception.inference.PoolingParameter.serializeBinaryToWriter
    );
  }
  f = message.getPowerParam();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.apollo.perception.inference.PowerParameter.serializeBinaryToWriter
    );
  }
  f = message.getReluParam();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.apollo.perception.inference.ReLUParameter.serializeBinaryToWriter
    );
  }
  f = message.getSigmoidParam();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.apollo.perception.inference.SigmoidParameter.serializeBinaryToWriter
    );
  }
  f = message.getSoftmaxParam();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.apollo.perception.inference.SoftmaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getSliceParam();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.apollo.perception.inference.SliceParameter.serializeBinaryToWriter
    );
  }
  f = message.getTanhParam();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.apollo.perception.inference.TanHParameter.serializeBinaryToWriter
    );
  }
  f = message.getThresholdParam();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.apollo.perception.inference.ThresholdParameter.serializeBinaryToWriter
    );
  }
  f = message.getWindowDataParam();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.apollo.perception.inference.WindowDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getTransformParam();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.apollo.perception.inference.TransformationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLossParam();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.apollo.perception.inference.LossParameter.serializeBinaryToWriter
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.inference.V0LayerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.V1LayerParameter.LayerType = {
  NONE: 0,
  ABSVAL: 35,
  ACCURACY: 1,
  ARGMAX: 30,
  BNLL: 2,
  CONCAT: 3,
  CONTRASTIVE_LOSS: 37,
  CONVOLUTION: 4,
  DATA: 5,
  DECONVOLUTION: 39,
  DROPOUT: 6,
  DUMMY_DATA: 32,
  EUCLIDEAN_LOSS: 7,
  ELTWISE: 25,
  EXP: 38,
  FLATTEN: 8,
  HDF5_DATA: 9,
  HDF5_OUTPUT: 10,
  HINGE_LOSS: 28,
  IM2COL: 11,
  IMAGE_DATA: 12,
  INFOGAIN_LOSS: 13,
  INNER_PRODUCT: 14,
  LRN: 15,
  MEMORY_DATA: 29,
  MULTINOMIAL_LOGISTIC_LOSS: 16,
  MVN: 34,
  POOLING: 17,
  POWER: 26,
  RELU: 18,
  SIGMOID: 19,
  SIGMOID_CROSS_ENTROPY_LOSS: 27,
  SILENCE: 36,
  SOFTMAX: 20,
  SOFTMAX_LOSS: 21,
  SPLIT: 22,
  SLICE: 33,
  TANH: 23,
  WINDOW_DATA: 24,
  THRESHOLD: 31
};

/**
 * @enum {number}
 */
proto.apollo.perception.inference.V1LayerParameter.DimCheckMode = {
  STRICT: 0,
  PERMISSIVE: 1
};

/**
 * repeated string bottom = 2;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getBottomList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setBottomList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addBottom = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearBottomList = function() {
  return this.setBottomList([]);
};


/**
 * repeated string top = 3;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getTopList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setTopList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addTop = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearTopList = function() {
  return this.setTopList([]);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated NetStateRule include = 32;
 * @return {!Array<!proto.apollo.perception.inference.NetStateRule>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getIncludeList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.NetStateRule, 32));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.NetStateRule>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setIncludeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.apollo.perception.inference.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetStateRule}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addInclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.apollo.perception.inference.NetStateRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearIncludeList = function() {
  return this.setIncludeList([]);
};


/**
 * repeated NetStateRule exclude = 33;
 * @return {!Array<!proto.apollo.perception.inference.NetStateRule>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getExcludeList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.NetStateRule, 33));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.NetStateRule>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setExcludeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.apollo.perception.inference.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NetStateRule}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addExclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.apollo.perception.inference.NetStateRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearExcludeList = function() {
  return this.setExcludeList([]);
};


/**
 * optional LayerType type = 5;
 * @return {!proto.apollo.perception.inference.V1LayerParameter.LayerType}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getType = function() {
  return /** @type {!proto.apollo.perception.inference.V1LayerParameter.LayerType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.apollo.perception.inference.V1LayerParameter.LayerType} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated BlobProto blobs = 6;
 * @return {!Array<!proto.apollo.perception.inference.BlobProto>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getBlobsList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.BlobProto, 6));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.BlobProto>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setBlobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.perception.inference.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobProto}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addBlobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.perception.inference.BlobProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearBlobsList = function() {
  return this.setBlobsList([]);
};


/**
 * repeated string param = 1001;
 * @return {!Array<string>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getParamList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1001));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setParamList = function(value) {
  return jspb.Message.setField(this, 1001, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addParam = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1001, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearParamList = function() {
  return this.setParamList([]);
};


/**
 * repeated DimCheckMode blob_share_mode = 1002;
 * @return {!Array<!proto.apollo.perception.inference.V1LayerParameter.DimCheckMode>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getBlobShareModeList = function() {
  return /** @type {!Array<!proto.apollo.perception.inference.V1LayerParameter.DimCheckMode>} */ (jspb.Message.getRepeatedField(this, 1002));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.V1LayerParameter.DimCheckMode>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setBlobShareModeList = function(value) {
  return jspb.Message.setField(this, 1002, value || []);
};


/**
 * @param {!proto.apollo.perception.inference.V1LayerParameter.DimCheckMode} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addBlobShareMode = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1002, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearBlobShareModeList = function() {
  return this.setBlobShareModeList([]);
};


/**
 * repeated float blobs_lr = 7;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getBlobsLrList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setBlobsLrList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addBlobsLr = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearBlobsLrList = function() {
  return this.setBlobsLrList([]);
};


/**
 * repeated float weight_decay = 8;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getWeightDecayList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setWeightDecayList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addWeightDecay = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearWeightDecayList = function() {
  return this.setWeightDecayList([]);
};


/**
 * repeated float loss_weight = 35;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getLossWeightList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 35));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.setLossWeightList = function(value) {
  return jspb.Message.setField(this, 35, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.addLossWeight = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 35, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearLossWeightList = function() {
  return this.setLossWeightList([]);
};


/**
 * optional AccuracyParameter accuracy_param = 27;
 * @return {?proto.apollo.perception.inference.AccuracyParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getAccuracyParam = function() {
  return /** @type{?proto.apollo.perception.inference.AccuracyParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.AccuracyParameter, 27));
};


/**
 * @param {?proto.apollo.perception.inference.AccuracyParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setAccuracyParam = function(value) {
  return jspb.Message.setWrapperField(this, 27, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearAccuracyParam = function() {
  return this.setAccuracyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasAccuracyParam = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional ArgMaxParameter argmax_param = 23;
 * @return {?proto.apollo.perception.inference.ArgMaxParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getArgmaxParam = function() {
  return /** @type{?proto.apollo.perception.inference.ArgMaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ArgMaxParameter, 23));
};


/**
 * @param {?proto.apollo.perception.inference.ArgMaxParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setArgmaxParam = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearArgmaxParam = function() {
  return this.setArgmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasArgmaxParam = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional ConcatParameter concat_param = 9;
 * @return {?proto.apollo.perception.inference.ConcatParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getConcatParam = function() {
  return /** @type{?proto.apollo.perception.inference.ConcatParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ConcatParameter, 9));
};


/**
 * @param {?proto.apollo.perception.inference.ConcatParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setConcatParam = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearConcatParam = function() {
  return this.setConcatParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasConcatParam = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ContrastiveLossParameter contrastive_loss_param = 40;
 * @return {?proto.apollo.perception.inference.ContrastiveLossParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getContrastiveLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.ContrastiveLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ContrastiveLossParameter, 40));
};


/**
 * @param {?proto.apollo.perception.inference.ContrastiveLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setContrastiveLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearContrastiveLossParam = function() {
  return this.setContrastiveLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasContrastiveLossParam = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional ConvolutionParameter convolution_param = 10;
 * @return {?proto.apollo.perception.inference.ConvolutionParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getConvolutionParam = function() {
  return /** @type{?proto.apollo.perception.inference.ConvolutionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ConvolutionParameter, 10));
};


/**
 * @param {?proto.apollo.perception.inference.ConvolutionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setConvolutionParam = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearConvolutionParam = function() {
  return this.setConvolutionParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasConvolutionParam = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DataParameter data_param = 11;
 * @return {?proto.apollo.perception.inference.DataParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DataParameter, 11));
};


/**
 * @param {?proto.apollo.perception.inference.DataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearDataParam = function() {
  return this.setDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasDataParam = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DropoutParameter dropout_param = 12;
 * @return {?proto.apollo.perception.inference.DropoutParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getDropoutParam = function() {
  return /** @type{?proto.apollo.perception.inference.DropoutParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DropoutParameter, 12));
};


/**
 * @param {?proto.apollo.perception.inference.DropoutParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setDropoutParam = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearDropoutParam = function() {
  return this.setDropoutParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasDropoutParam = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional DummyDataParameter dummy_data_param = 26;
 * @return {?proto.apollo.perception.inference.DummyDataParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getDummyDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.DummyDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.DummyDataParameter, 26));
};


/**
 * @param {?proto.apollo.perception.inference.DummyDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setDummyDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearDummyDataParam = function() {
  return this.setDummyDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasDummyDataParam = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional EltwiseParameter eltwise_param = 24;
 * @return {?proto.apollo.perception.inference.EltwiseParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getEltwiseParam = function() {
  return /** @type{?proto.apollo.perception.inference.EltwiseParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.EltwiseParameter, 24));
};


/**
 * @param {?proto.apollo.perception.inference.EltwiseParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setEltwiseParam = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearEltwiseParam = function() {
  return this.setEltwiseParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasEltwiseParam = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional ExpParameter exp_param = 41;
 * @return {?proto.apollo.perception.inference.ExpParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getExpParam = function() {
  return /** @type{?proto.apollo.perception.inference.ExpParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ExpParameter, 41));
};


/**
 * @param {?proto.apollo.perception.inference.ExpParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setExpParam = function(value) {
  return jspb.Message.setWrapperField(this, 41, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearExpParam = function() {
  return this.setExpParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasExpParam = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional HDF5DataParameter hdf5_data_param = 13;
 * @return {?proto.apollo.perception.inference.HDF5DataParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getHdf5DataParam = function() {
  return /** @type{?proto.apollo.perception.inference.HDF5DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.HDF5DataParameter, 13));
};


/**
 * @param {?proto.apollo.perception.inference.HDF5DataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setHdf5DataParam = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearHdf5DataParam = function() {
  return this.setHdf5DataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasHdf5DataParam = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional HDF5OutputParameter hdf5_output_param = 14;
 * @return {?proto.apollo.perception.inference.HDF5OutputParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getHdf5OutputParam = function() {
  return /** @type{?proto.apollo.perception.inference.HDF5OutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.HDF5OutputParameter, 14));
};


/**
 * @param {?proto.apollo.perception.inference.HDF5OutputParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setHdf5OutputParam = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearHdf5OutputParam = function() {
  return this.setHdf5OutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasHdf5OutputParam = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional HingeLossParameter hinge_loss_param = 29;
 * @return {?proto.apollo.perception.inference.HingeLossParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getHingeLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.HingeLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.HingeLossParameter, 29));
};


/**
 * @param {?proto.apollo.perception.inference.HingeLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setHingeLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 29, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearHingeLossParam = function() {
  return this.setHingeLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasHingeLossParam = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional ImageDataParameter image_data_param = 15;
 * @return {?proto.apollo.perception.inference.ImageDataParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getImageDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.ImageDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ImageDataParameter, 15));
};


/**
 * @param {?proto.apollo.perception.inference.ImageDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setImageDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearImageDataParam = function() {
  return this.setImageDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasImageDataParam = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional InfogainLossParameter infogain_loss_param = 16;
 * @return {?proto.apollo.perception.inference.InfogainLossParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getInfogainLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.InfogainLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.InfogainLossParameter, 16));
};


/**
 * @param {?proto.apollo.perception.inference.InfogainLossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setInfogainLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearInfogainLossParam = function() {
  return this.setInfogainLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasInfogainLossParam = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional InnerProductParameter inner_product_param = 17;
 * @return {?proto.apollo.perception.inference.InnerProductParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getInnerProductParam = function() {
  return /** @type{?proto.apollo.perception.inference.InnerProductParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.InnerProductParameter, 17));
};


/**
 * @param {?proto.apollo.perception.inference.InnerProductParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setInnerProductParam = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearInnerProductParam = function() {
  return this.setInnerProductParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasInnerProductParam = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional LRNParameter lrn_param = 18;
 * @return {?proto.apollo.perception.inference.LRNParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getLrnParam = function() {
  return /** @type{?proto.apollo.perception.inference.LRNParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.LRNParameter, 18));
};


/**
 * @param {?proto.apollo.perception.inference.LRNParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setLrnParam = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearLrnParam = function() {
  return this.setLrnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasLrnParam = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional MemoryDataParameter memory_data_param = 22;
 * @return {?proto.apollo.perception.inference.MemoryDataParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getMemoryDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.MemoryDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.MemoryDataParameter, 22));
};


/**
 * @param {?proto.apollo.perception.inference.MemoryDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setMemoryDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearMemoryDataParam = function() {
  return this.setMemoryDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasMemoryDataParam = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional MVNParameter mvn_param = 34;
 * @return {?proto.apollo.perception.inference.MVNParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getMvnParam = function() {
  return /** @type{?proto.apollo.perception.inference.MVNParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.MVNParameter, 34));
};


/**
 * @param {?proto.apollo.perception.inference.MVNParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setMvnParam = function(value) {
  return jspb.Message.setWrapperField(this, 34, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearMvnParam = function() {
  return this.setMvnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasMvnParam = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional PoolingParameter pooling_param = 19;
 * @return {?proto.apollo.perception.inference.PoolingParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getPoolingParam = function() {
  return /** @type{?proto.apollo.perception.inference.PoolingParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PoolingParameter, 19));
};


/**
 * @param {?proto.apollo.perception.inference.PoolingParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setPoolingParam = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearPoolingParam = function() {
  return this.setPoolingParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasPoolingParam = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional PowerParameter power_param = 21;
 * @return {?proto.apollo.perception.inference.PowerParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getPowerParam = function() {
  return /** @type{?proto.apollo.perception.inference.PowerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.PowerParameter, 21));
};


/**
 * @param {?proto.apollo.perception.inference.PowerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setPowerParam = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearPowerParam = function() {
  return this.setPowerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasPowerParam = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional ReLUParameter relu_param = 30;
 * @return {?proto.apollo.perception.inference.ReLUParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getReluParam = function() {
  return /** @type{?proto.apollo.perception.inference.ReLUParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ReLUParameter, 30));
};


/**
 * @param {?proto.apollo.perception.inference.ReLUParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setReluParam = function(value) {
  return jspb.Message.setWrapperField(this, 30, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearReluParam = function() {
  return this.setReluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasReluParam = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional SigmoidParameter sigmoid_param = 38;
 * @return {?proto.apollo.perception.inference.SigmoidParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getSigmoidParam = function() {
  return /** @type{?proto.apollo.perception.inference.SigmoidParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SigmoidParameter, 38));
};


/**
 * @param {?proto.apollo.perception.inference.SigmoidParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setSigmoidParam = function(value) {
  return jspb.Message.setWrapperField(this, 38, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearSigmoidParam = function() {
  return this.setSigmoidParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasSigmoidParam = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional SoftmaxParameter softmax_param = 39;
 * @return {?proto.apollo.perception.inference.SoftmaxParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getSoftmaxParam = function() {
  return /** @type{?proto.apollo.perception.inference.SoftmaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SoftmaxParameter, 39));
};


/**
 * @param {?proto.apollo.perception.inference.SoftmaxParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setSoftmaxParam = function(value) {
  return jspb.Message.setWrapperField(this, 39, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearSoftmaxParam = function() {
  return this.setSoftmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasSoftmaxParam = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional SliceParameter slice_param = 31;
 * @return {?proto.apollo.perception.inference.SliceParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getSliceParam = function() {
  return /** @type{?proto.apollo.perception.inference.SliceParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.SliceParameter, 31));
};


/**
 * @param {?proto.apollo.perception.inference.SliceParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setSliceParam = function(value) {
  return jspb.Message.setWrapperField(this, 31, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearSliceParam = function() {
  return this.setSliceParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasSliceParam = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional TanHParameter tanh_param = 37;
 * @return {?proto.apollo.perception.inference.TanHParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getTanhParam = function() {
  return /** @type{?proto.apollo.perception.inference.TanHParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.TanHParameter, 37));
};


/**
 * @param {?proto.apollo.perception.inference.TanHParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setTanhParam = function(value) {
  return jspb.Message.setWrapperField(this, 37, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearTanhParam = function() {
  return this.setTanhParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasTanhParam = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional ThresholdParameter threshold_param = 25;
 * @return {?proto.apollo.perception.inference.ThresholdParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getThresholdParam = function() {
  return /** @type{?proto.apollo.perception.inference.ThresholdParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.ThresholdParameter, 25));
};


/**
 * @param {?proto.apollo.perception.inference.ThresholdParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setThresholdParam = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearThresholdParam = function() {
  return this.setThresholdParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasThresholdParam = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional WindowDataParameter window_data_param = 20;
 * @return {?proto.apollo.perception.inference.WindowDataParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getWindowDataParam = function() {
  return /** @type{?proto.apollo.perception.inference.WindowDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.WindowDataParameter, 20));
};


/**
 * @param {?proto.apollo.perception.inference.WindowDataParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setWindowDataParam = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearWindowDataParam = function() {
  return this.setWindowDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasWindowDataParam = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional TransformationParameter transform_param = 36;
 * @return {?proto.apollo.perception.inference.TransformationParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getTransformParam = function() {
  return /** @type{?proto.apollo.perception.inference.TransformationParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.TransformationParameter, 36));
};


/**
 * @param {?proto.apollo.perception.inference.TransformationParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setTransformParam = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearTransformParam = function() {
  return this.setTransformParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasTransformParam = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional LossParameter loss_param = 42;
 * @return {?proto.apollo.perception.inference.LossParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getLossParam = function() {
  return /** @type{?proto.apollo.perception.inference.LossParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.LossParameter, 42));
};


/**
 * @param {?proto.apollo.perception.inference.LossParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setLossParam = function(value) {
  return jspb.Message.setWrapperField(this, 42, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearLossParam = function() {
  return this.setLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasLossParam = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional V0LayerParameter layer = 1;
 * @return {?proto.apollo.perception.inference.V0LayerParameter}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.getLayer = function() {
  return /** @type{?proto.apollo.perception.inference.V0LayerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.V0LayerParameter, 1));
};


/**
 * @param {?proto.apollo.perception.inference.V0LayerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
*/
proto.apollo.perception.inference.V1LayerParameter.prototype.setLayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V1LayerParameter} returns this
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.clearLayer = function() {
  return this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V1LayerParameter.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.V0LayerParameter.repeatedFields_ = [50,51,52];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.V0LayerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.V0LayerParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.V0LayerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    numOutput: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    biasterm: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    weightFiller: (f = msg.getWeightFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    pad: jspb.Message.getFieldWithDefault(msg, 7, 0),
    kernelsize: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    group: jspb.Message.getFieldWithDefault(msg, 9, 1),
    stride: jspb.Message.getFieldWithDefault(msg, 10, 1),
    pool: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dropoutRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.5),
    localSize: jspb.Message.getFieldWithDefault(msg, 13, 5),
    alpha: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 1.0),
    beta: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.75),
    k: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 1.0),
    source: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    scale: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 1.0),
    meanfile: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
    batchsize: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    cropsize: jspb.Message.getFieldWithDefault(msg, 20, 0),
    mirror: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    blobsList: jspb.Message.toObjectList(msg.getBlobsList(),
    proto.apollo.perception.inference.BlobProto.toObject, includeInstance),
    blobsLrList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 51)) == null ? undefined : f,
    weightDecayList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 52)) == null ? undefined : f,
    randSkip: jspb.Message.getFieldWithDefault(msg, 53, 0),
    detFgThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 54, 0.5),
    detBgThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 55, 0.5),
    detFgFraction: jspb.Message.getFloatingPointFieldWithDefault(msg, 56, 0.25),
    detContextPad: jspb.Message.getFieldWithDefault(msg, 58, 0),
    detCropMode: jspb.Message.getFieldWithDefault(msg, 59, "warp"),
    newNum: jspb.Message.getFieldWithDefault(msg, 60, 0),
    newChannels: jspb.Message.getFieldWithDefault(msg, 61, 0),
    newHeight: jspb.Message.getFieldWithDefault(msg, 62, 0),
    newWidth: jspb.Message.getFieldWithDefault(msg, 63, 0),
    shuffleImages: jspb.Message.getBooleanFieldWithDefault(msg, 64, false),
    concatDim: jspb.Message.getFieldWithDefault(msg, 65, 1),
    hdf5OutputParam: (f = msg.getHdf5OutputParam()) && proto.apollo.perception.inference.HDF5OutputParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of V0LayerParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.V0LayerParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.numOutput;

  /** @type {?|undefined} */
  this.biasterm;

  /** @type {?|undefined} */
  this.weightFiller;

  /** @type {?|undefined} */
  this.biasFiller;

  /** @type {?|undefined} */
  this.pad;

  /** @type {?|undefined} */
  this.kernelsize;

  /** @type {?|undefined} */
  this.group;

  /** @type {?|undefined} */
  this.stride;

  /** @type {?|undefined} */
  this.pool;

  /** @type {?|undefined} */
  this.dropoutRatio;

  /** @type {?|undefined} */
  this.localSize;

  /** @type {?|undefined} */
  this.alpha;

  /** @type {?|undefined} */
  this.beta;

  /** @type {?|undefined} */
  this.k;

  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.scale;

  /** @type {?|undefined} */
  this.meanfile;

  /** @type {?|undefined} */
  this.batchsize;

  /** @type {?|undefined} */
  this.cropsize;

  /** @type {?|undefined} */
  this.mirror;

  /** @type {?|undefined} */
  this.blobsList;

  /** @type {?|undefined} */
  this.blobsLrList;

  /** @type {?|undefined} */
  this.weightDecayList;

  /** @type {?|undefined} */
  this.randSkip;

  /** @type {?|undefined} */
  this.detFgThreshold;

  /** @type {?|undefined} */
  this.detBgThreshold;

  /** @type {?|undefined} */
  this.detFgFraction;

  /** @type {?|undefined} */
  this.detContextPad;

  /** @type {?|undefined} */
  this.detCropMode;

  /** @type {?|undefined} */
  this.newNum;

  /** @type {?|undefined} */
  this.newChannels;

  /** @type {?|undefined} */
  this.newHeight;

  /** @type {?|undefined} */
  this.newWidth;

  /** @type {?|undefined} */
  this.shuffleImages;

  /** @type {?|undefined} */
  this.concatDim;

  /** @type {?|undefined} */
  this.hdf5OutputParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.V0LayerParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.V0LayerParameter}
 */
proto.apollo.perception.inference.V0LayerParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.V0LayerParameter();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.type != null && jspb.Message.setField(msg, 2, obj.type);
  obj.numOutput != null && jspb.Message.setField(msg, 3, obj.numOutput);
  obj.biasterm != null && jspb.Message.setField(msg, 4, obj.biasterm);
  obj.weightFiller && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.perception.inference.FillerParameter.fromObject(obj.weightFiller));
  obj.biasFiller && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.perception.inference.FillerParameter.fromObject(obj.biasFiller));
  obj.pad != null && jspb.Message.setField(msg, 7, obj.pad);
  obj.kernelsize != null && jspb.Message.setField(msg, 8, obj.kernelsize);
  obj.group != null && jspb.Message.setField(msg, 9, obj.group);
  obj.stride != null && jspb.Message.setField(msg, 10, obj.stride);
  obj.pool != null && jspb.Message.setField(msg, 11, obj.pool);
  obj.dropoutRatio != null && jspb.Message.setField(msg, 12, obj.dropoutRatio);
  obj.localSize != null && jspb.Message.setField(msg, 13, obj.localSize);
  obj.alpha != null && jspb.Message.setField(msg, 14, obj.alpha);
  obj.beta != null && jspb.Message.setField(msg, 15, obj.beta);
  obj.k != null && jspb.Message.setField(msg, 22, obj.k);
  obj.source != null && jspb.Message.setField(msg, 16, obj.source);
  obj.scale != null && jspb.Message.setField(msg, 17, obj.scale);
  obj.meanfile != null && jspb.Message.setField(msg, 18, obj.meanfile);
  obj.batchsize != null && jspb.Message.setField(msg, 19, obj.batchsize);
  obj.cropsize != null && jspb.Message.setField(msg, 20, obj.cropsize);
  obj.mirror != null && jspb.Message.setField(msg, 21, obj.mirror);
  obj.blobsList && jspb.Message.setRepeatedWrapperField(
      msg, 50, obj.blobsList.map(
          proto.apollo.perception.inference.BlobProto.fromObject));
  obj.blobsLrList != null && jspb.Message.setField(msg, 51, obj.blobsLrList);
  obj.weightDecayList != null && jspb.Message.setField(msg, 52, obj.weightDecayList);
  obj.randSkip != null && jspb.Message.setField(msg, 53, obj.randSkip);
  obj.detFgThreshold != null && jspb.Message.setField(msg, 54, obj.detFgThreshold);
  obj.detBgThreshold != null && jspb.Message.setField(msg, 55, obj.detBgThreshold);
  obj.detFgFraction != null && jspb.Message.setField(msg, 56, obj.detFgFraction);
  obj.detContextPad != null && jspb.Message.setField(msg, 58, obj.detContextPad);
  obj.detCropMode != null && jspb.Message.setField(msg, 59, obj.detCropMode);
  obj.newNum != null && jspb.Message.setField(msg, 60, obj.newNum);
  obj.newChannels != null && jspb.Message.setField(msg, 61, obj.newChannels);
  obj.newHeight != null && jspb.Message.setField(msg, 62, obj.newHeight);
  obj.newWidth != null && jspb.Message.setField(msg, 63, obj.newWidth);
  obj.shuffleImages != null && jspb.Message.setField(msg, 64, obj.shuffleImages);
  obj.concatDim != null && jspb.Message.setField(msg, 65, obj.concatDim);
  obj.hdf5OutputParam && jspb.Message.setWrapperField(
      msg, 1001, proto.apollo.perception.inference.HDF5OutputParameter.fromObject(obj.hdf5OutputParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.V0LayerParameter}
 */
proto.apollo.perception.inference.V0LayerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.V0LayerParameter;
  return proto.apollo.perception.inference.V0LayerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.V0LayerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.V0LayerParameter}
 */
proto.apollo.perception.inference.V0LayerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasterm(value);
      break;
    case 5:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 6:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPad(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelsize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStride(value);
      break;
    case 11:
      var value = /** @type {!proto.apollo.perception.inference.V0LayerParameter.PoolMethod} */ (reader.readEnum());
      msg.setPool(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDropoutRatio(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocalSize(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBeta(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setK(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanfile(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchsize(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropsize(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 50:
      var value = new proto.apollo.perception.inference.BlobProto;
      reader.readMessage(value,proto.apollo.perception.inference.BlobProto.deserializeBinaryFromReader);
      msg.addBlobs(value);
      break;
    case 51:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBlobsLr(values[i]);
      }
      break;
    case 52:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWeightDecay(values[i]);
      }
      break;
    case 53:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandSkip(value);
      break;
    case 54:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDetFgThreshold(value);
      break;
    case 55:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDetBgThreshold(value);
      break;
    case 56:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDetFgFraction(value);
      break;
    case 58:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDetContextPad(value);
      break;
    case 59:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetCropMode(value);
      break;
    case 60:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewNum(value);
      break;
    case 61:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewChannels(value);
      break;
    case 62:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewHeight(value);
      break;
    case 63:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewWidth(value);
      break;
    case 64:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShuffleImages(value);
      break;
    case 65:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConcatDim(value);
      break;
    case 1001:
      var value = new proto.apollo.perception.inference.HDF5OutputParameter;
      reader.readMessage(value,proto.apollo.perception.inference.HDF5OutputParameter.deserializeBinaryFromReader);
      msg.setHdf5OutputParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.V0LayerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.V0LayerParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.V0LayerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.V0LayerParameter.PoolMethod} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeFloat(
      22,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getBlobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      50,
      f,
      proto.apollo.perception.inference.BlobProto.serializeBinaryToWriter
    );
  }
  f = message.getBlobsLrList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      51,
      f
    );
  }
  f = message.getWeightDecayList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      52,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 53));
  if (f != null) {
    writer.writeUint32(
      53,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 54));
  if (f != null) {
    writer.writeFloat(
      54,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 55));
  if (f != null) {
    writer.writeFloat(
      55,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 56));
  if (f != null) {
    writer.writeFloat(
      56,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 58));
  if (f != null) {
    writer.writeUint32(
      58,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 59));
  if (f != null) {
    writer.writeString(
      59,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 60));
  if (f != null) {
    writer.writeInt32(
      60,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 61));
  if (f != null) {
    writer.writeInt32(
      61,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 62));
  if (f != null) {
    writer.writeInt32(
      62,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 63));
  if (f != null) {
    writer.writeInt32(
      63,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 64));
  if (f != null) {
    writer.writeBool(
      64,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 65));
  if (f != null) {
    writer.writeUint32(
      65,
      f
    );
  }
  f = message.getHdf5OutputParam();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.apollo.perception.inference.HDF5OutputParameter.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.V0LayerParameter.PoolMethod = {
  MAX: 0,
  AVE: 1,
  STOCHASTIC: 2
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 num_output = 3;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setNumOutput = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearNumOutput = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool biasterm = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getBiasterm = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setBiasterm = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearBiasterm = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasBiasterm = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FillerParameter weight_filler = 5;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 5));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
*/
proto.apollo.perception.inference.V0LayerParameter.prototype.setWeightFiller = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearWeightFiller = function() {
  return this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FillerParameter bias_filler = 6;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 6));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
*/
proto.apollo.perception.inference.V0LayerParameter.prototype.setBiasFiller = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearBiasFiller = function() {
  return this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 pad = 7;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setPad = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearPad = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasPad = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 kernelsize = 8;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getKernelsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setKernelsize = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearKernelsize = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasKernelsize = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 group = 9;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setGroup = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 stride = 10;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setStride = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearStride = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PoolMethod pool = 11;
 * @return {!proto.apollo.perception.inference.V0LayerParameter.PoolMethod}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getPool = function() {
  return /** @type {!proto.apollo.perception.inference.V0LayerParameter.PoolMethod} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.apollo.perception.inference.V0LayerParameter.PoolMethod} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setPool = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearPool = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasPool = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float dropout_ratio = 12;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getDropoutRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setDropoutRatio = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearDropoutRatio = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasDropoutRatio = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 local_size = 13;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getLocalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setLocalSize = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearLocalSize = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasLocalSize = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float alpha = 14;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setAlpha = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearAlpha = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float beta = 15;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getBeta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.75));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setBeta = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearBeta = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float k = 22;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getK = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setK = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearK = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasK = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string source = 16;
 * @return {string}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearSource = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float scale = 17;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearScale = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string meanfile = 18;
 * @return {string}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getMeanfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setMeanfile = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearMeanfile = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasMeanfile = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional uint32 batchsize = 19;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getBatchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setBatchsize = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearBatchsize = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasBatchsize = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional uint32 cropsize = 20;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getCropsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setCropsize = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearCropsize = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasCropsize = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bool mirror = 21;
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setMirror = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearMirror = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated BlobProto blobs = 50;
 * @return {!Array<!proto.apollo.perception.inference.BlobProto>}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getBlobsList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.BlobProto, 50));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.BlobProto>} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
*/
proto.apollo.perception.inference.V0LayerParameter.prototype.setBlobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 50, value);
};


/**
 * @param {!proto.apollo.perception.inference.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BlobProto}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.addBlobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 50, opt_value, proto.apollo.perception.inference.BlobProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearBlobsList = function() {
  return this.setBlobsList([]);
};


/**
 * repeated float blobs_lr = 51;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getBlobsLrList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 51));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setBlobsLrList = function(value) {
  return jspb.Message.setField(this, 51, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.addBlobsLr = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 51, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearBlobsLrList = function() {
  return this.setBlobsLrList([]);
};


/**
 * repeated float weight_decay = 52;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getWeightDecayList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 52));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setWeightDecayList = function(value) {
  return jspb.Message.setField(this, 52, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.addWeightDecay = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 52, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearWeightDecayList = function() {
  return this.setWeightDecayList([]);
};


/**
 * optional uint32 rand_skip = 53;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getRandSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 53, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setRandSkip = function(value) {
  return jspb.Message.setField(this, 53, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearRandSkip = function() {
  return jspb.Message.setField(this, 53, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasRandSkip = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional float det_fg_threshold = 54;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getDetFgThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 54, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setDetFgThreshold = function(value) {
  return jspb.Message.setField(this, 54, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearDetFgThreshold = function() {
  return jspb.Message.setField(this, 54, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasDetFgThreshold = function() {
  return jspb.Message.getField(this, 54) != null;
};


/**
 * optional float det_bg_threshold = 55;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getDetBgThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 55, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setDetBgThreshold = function(value) {
  return jspb.Message.setField(this, 55, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearDetBgThreshold = function() {
  return jspb.Message.setField(this, 55, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasDetBgThreshold = function() {
  return jspb.Message.getField(this, 55) != null;
};


/**
 * optional float det_fg_fraction = 56;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getDetFgFraction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 56, 0.25));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setDetFgFraction = function(value) {
  return jspb.Message.setField(this, 56, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearDetFgFraction = function() {
  return jspb.Message.setField(this, 56, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasDetFgFraction = function() {
  return jspb.Message.getField(this, 56) != null;
};


/**
 * optional uint32 det_context_pad = 58;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getDetContextPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 58, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setDetContextPad = function(value) {
  return jspb.Message.setField(this, 58, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearDetContextPad = function() {
  return jspb.Message.setField(this, 58, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasDetContextPad = function() {
  return jspb.Message.getField(this, 58) != null;
};


/**
 * optional string det_crop_mode = 59;
 * @return {string}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getDetCropMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 59, "warp"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setDetCropMode = function(value) {
  return jspb.Message.setField(this, 59, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearDetCropMode = function() {
  return jspb.Message.setField(this, 59, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasDetCropMode = function() {
  return jspb.Message.getField(this, 59) != null;
};


/**
 * optional int32 new_num = 60;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getNewNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setNewNum = function(value) {
  return jspb.Message.setField(this, 60, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearNewNum = function() {
  return jspb.Message.setField(this, 60, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasNewNum = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional int32 new_channels = 61;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getNewChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 61, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setNewChannels = function(value) {
  return jspb.Message.setField(this, 61, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearNewChannels = function() {
  return jspb.Message.setField(this, 61, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasNewChannels = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * optional int32 new_height = 62;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getNewHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 62, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setNewHeight = function(value) {
  return jspb.Message.setField(this, 62, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearNewHeight = function() {
  return jspb.Message.setField(this, 62, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasNewHeight = function() {
  return jspb.Message.getField(this, 62) != null;
};


/**
 * optional int32 new_width = 63;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getNewWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 63, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setNewWidth = function(value) {
  return jspb.Message.setField(this, 63, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearNewWidth = function() {
  return jspb.Message.setField(this, 63, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasNewWidth = function() {
  return jspb.Message.getField(this, 63) != null;
};


/**
 * optional bool shuffle_images = 64;
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getShuffleImages = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 64, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setShuffleImages = function(value) {
  return jspb.Message.setField(this, 64, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearShuffleImages = function() {
  return jspb.Message.setField(this, 64, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasShuffleImages = function() {
  return jspb.Message.getField(this, 64) != null;
};


/**
 * optional uint32 concat_dim = 65;
 * @return {number}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getConcatDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 65, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.setConcatDim = function(value) {
  return jspb.Message.setField(this, 65, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearConcatDim = function() {
  return jspb.Message.setField(this, 65, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasConcatDim = function() {
  return jspb.Message.getField(this, 65) != null;
};


/**
 * optional HDF5OutputParameter hdf5_output_param = 1001;
 * @return {?proto.apollo.perception.inference.HDF5OutputParameter}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.getHdf5OutputParam = function() {
  return /** @type{?proto.apollo.perception.inference.HDF5OutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.HDF5OutputParameter, 1001));
};


/**
 * @param {?proto.apollo.perception.inference.HDF5OutputParameter|undefined} value
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
*/
proto.apollo.perception.inference.V0LayerParameter.prototype.setHdf5OutputParam = function(value) {
  return jspb.Message.setWrapperField(this, 1001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.V0LayerParameter} returns this
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.clearHdf5OutputParam = function() {
  return this.setHdf5OutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.V0LayerParameter.prototype.hasHdf5OutputParam = function() {
  return jspb.Message.getField(this, 1001) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.PReLUParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.PReLUParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.PReLUParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PReLUParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filler: (f = msg.getFiller()) && proto.apollo.perception.inference.FillerParameter.toObject(includeInstance, f),
    channelShared: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PReLUParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.PReLUParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.filler;

  /** @type {?|undefined} */
  this.channelShared;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.PReLUParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.PReLUParameter}
 */
proto.apollo.perception.inference.PReLUParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.PReLUParameter();
  obj.filler && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.inference.FillerParameter.fromObject(obj.filler));
  obj.channelShared != null && jspb.Message.setField(msg, 2, obj.channelShared);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.PReLUParameter}
 */
proto.apollo.perception.inference.PReLUParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.PReLUParameter;
  return proto.apollo.perception.inference.PReLUParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.PReLUParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.PReLUParameter}
 */
proto.apollo.perception.inference.PReLUParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.FillerParameter;
      reader.readMessage(value,proto.apollo.perception.inference.FillerParameter.deserializeBinaryFromReader);
      msg.setFiller(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChannelShared(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.PReLUParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.PReLUParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.PReLUParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PReLUParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiller();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.inference.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional FillerParameter filler = 1;
 * @return {?proto.apollo.perception.inference.FillerParameter}
 */
proto.apollo.perception.inference.PReLUParameter.prototype.getFiller = function() {
  return /** @type{?proto.apollo.perception.inference.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.FillerParameter, 1));
};


/**
 * @param {?proto.apollo.perception.inference.FillerParameter|undefined} value
 * @return {!proto.apollo.perception.inference.PReLUParameter} returns this
*/
proto.apollo.perception.inference.PReLUParameter.prototype.setFiller = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.PReLUParameter} returns this
 */
proto.apollo.perception.inference.PReLUParameter.prototype.clearFiller = function() {
  return this.setFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PReLUParameter.prototype.hasFiller = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool channel_shared = 2;
 * @return {boolean}
 */
proto.apollo.perception.inference.PReLUParameter.prototype.getChannelShared = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.PReLUParameter} returns this
 */
proto.apollo.perception.inference.PReLUParameter.prototype.setChannelShared = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PReLUParameter} returns this
 */
proto.apollo.perception.inference.PReLUParameter.prototype.clearChannelShared = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PReLUParameter.prototype.hasChannelShared = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.PaddingParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.PaddingParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PaddingParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    padT: jspb.Message.getFieldWithDefault(msg, 1, 0),
    padB: jspb.Message.getFieldWithDefault(msg, 2, 0),
    padL: jspb.Message.getFieldWithDefault(msg, 3, 0),
    padR: jspb.Message.getFieldWithDefault(msg, 4, 0),
    val: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PaddingParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.PaddingParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.padT;

  /** @type {?|undefined} */
  this.padB;

  /** @type {?|undefined} */
  this.padL;

  /** @type {?|undefined} */
  this.padR;

  /** @type {?|undefined} */
  this.val;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.PaddingParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.PaddingParameter}
 */
proto.apollo.perception.inference.PaddingParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.PaddingParameter();
  obj.padT != null && jspb.Message.setField(msg, 1, obj.padT);
  obj.padB != null && jspb.Message.setField(msg, 2, obj.padB);
  obj.padL != null && jspb.Message.setField(msg, 3, obj.padL);
  obj.padR != null && jspb.Message.setField(msg, 4, obj.padR);
  obj.val != null && jspb.Message.setField(msg, 5, obj.val);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.PaddingParameter}
 */
proto.apollo.perception.inference.PaddingParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.PaddingParameter;
  return proto.apollo.perception.inference.PaddingParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.PaddingParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.PaddingParameter}
 */
proto.apollo.perception.inference.PaddingParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadT(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadL(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadR(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.PaddingParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.PaddingParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.PaddingParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional uint32 pad_t = 1;
 * @return {number}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.getPadT = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.setPadT = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.clearPadT = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.hasPadT = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 pad_b = 2;
 * @return {number}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.getPadB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.setPadB = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.clearPadB = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.hasPadB = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 pad_l = 3;
 * @return {number}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.getPadL = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.setPadL = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.clearPadL = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.hasPadL = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 pad_r = 4;
 * @return {number}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.getPadR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.setPadR = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.clearPadR = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.hasPadR = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float val = 5;
 * @return {number}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.getVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.setVal = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.PaddingParameter} returns this
 */
proto.apollo.perception.inference.PaddingParameter.prototype.clearVal = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.PaddingParameter.prototype.hasVal = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.YoloLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.YoloLossParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    regLossType: jspb.Message.getFieldWithDefault(msg, 1, 2),
    targetAxis: jspb.Message.getFieldWithDefault(msg, 2, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of YoloLossParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.YoloLossParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.regLossType;

  /** @type {?|undefined} */
  this.targetAxis;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.YoloLossParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.YoloLossParameter}
 */
proto.apollo.perception.inference.YoloLossParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.YoloLossParameter();
  obj.regLossType != null && jspb.Message.setField(msg, 1, obj.regLossType);
  obj.targetAxis != null && jspb.Message.setField(msg, 2, obj.targetAxis);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.YoloLossParameter}
 */
proto.apollo.perception.inference.YoloLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.YoloLossParameter;
  return proto.apollo.perception.inference.YoloLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.YoloLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.YoloLossParameter}
 */
proto.apollo.perception.inference.YoloLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.inference.YoloLossParameter.RegLossType} */ (reader.readEnum());
      msg.setRegLossType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTargetAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.YoloLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.YoloLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.inference.YoloLossParameter.RegLossType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.YoloLossParameter.RegLossType = {
  L2: 0,
  L1: 1,
  SMOOTH_L1: 2
};

/**
 * optional RegLossType reg_loss_type = 1;
 * @return {!proto.apollo.perception.inference.YoloLossParameter.RegLossType}
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.getRegLossType = function() {
  return /** @type {!proto.apollo.perception.inference.YoloLossParameter.RegLossType} */ (jspb.Message.getFieldWithDefault(this, 1, 2));
};


/**
 * @param {!proto.apollo.perception.inference.YoloLossParameter.RegLossType} value
 * @return {!proto.apollo.perception.inference.YoloLossParameter} returns this
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.setRegLossType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloLossParameter} returns this
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.clearRegLossType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.hasRegLossType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 target_axis = 2;
 * @return {number}
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.getTargetAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloLossParameter} returns this
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.setTargetAxis = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloLossParameter} returns this
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.clearTargetAxis = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloLossParameter.prototype.hasTargetAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.YoloDumpParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.YoloDumpParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.YoloDumpParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloDumpParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    dumpDir: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of YoloDumpParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.YoloDumpParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dumpDir;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.YoloDumpParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.YoloDumpParameter}
 */
proto.apollo.perception.inference.YoloDumpParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.YoloDumpParameter();
  obj.dumpDir != null && jspb.Message.setField(msg, 1, obj.dumpDir);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.YoloDumpParameter}
 */
proto.apollo.perception.inference.YoloDumpParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.YoloDumpParameter;
  return proto.apollo.perception.inference.YoloDumpParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.YoloDumpParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.YoloDumpParameter}
 */
proto.apollo.perception.inference.YoloDumpParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDumpDir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.YoloDumpParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.YoloDumpParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.YoloDumpParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloDumpParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string dump_dir = 1;
 * @return {string}
 */
proto.apollo.perception.inference.YoloDumpParameter.prototype.getDumpDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.YoloDumpParameter} returns this
 */
proto.apollo.perception.inference.YoloDumpParameter.prototype.setDumpDir = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloDumpParameter} returns this
 */
proto.apollo.perception.inference.YoloDumpParameter.prototype.clearDumpDir = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloDumpParameter.prototype.hasDumpDir = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.YoloAnchorsParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.YoloAnchorsParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloAnchorsParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorsFile: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    refW: jspb.Message.getFieldWithDefault(msg, 2, 1),
    refH: jspb.Message.getFieldWithDefault(msg, 3, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of YoloAnchorsParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.YoloAnchorsParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.anchorsFile;

  /** @type {?|undefined} */
  this.refW;

  /** @type {?|undefined} */
  this.refH;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.YoloAnchorsParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.YoloAnchorsParameter();
  obj.anchorsFile != null && jspb.Message.setField(msg, 1, obj.anchorsFile);
  obj.refW != null && jspb.Message.setField(msg, 2, obj.refW);
  obj.refH != null && jspb.Message.setField(msg, 3, obj.refH);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.YoloAnchorsParameter;
  return proto.apollo.perception.inference.YoloAnchorsParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.YoloAnchorsParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchorsFile(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefW(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.YoloAnchorsParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.YoloAnchorsParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloAnchorsParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string anchors_file = 1;
 * @return {string}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.getAnchorsFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter} returns this
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.setAnchorsFile = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter} returns this
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.clearAnchorsFile = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.hasAnchorsFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 ref_w = 2;
 * @return {number}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.getRefW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter} returns this
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.setRefW = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter} returns this
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.clearRefW = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.hasRefW = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 ref_h = 3;
 * @return {number}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.getRefH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter} returns this
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.setRefH = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloAnchorsParameter} returns this
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.clearRefH = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloAnchorsParameter.prototype.hasRefH = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DimensionStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DimensionStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DimensionStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    meanH: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    meanW: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    meanL: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    stdH: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0),
    stdW: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 1.0),
    stdL: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DimensionStatistics as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DimensionStatistics.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.meanH;

  /** @type {?|undefined} */
  this.meanW;

  /** @type {?|undefined} */
  this.meanL;

  /** @type {?|undefined} */
  this.stdH;

  /** @type {?|undefined} */
  this.stdW;

  /** @type {?|undefined} */
  this.stdL;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DimensionStatistics.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DimensionStatistics}
 */
proto.apollo.perception.inference.DimensionStatistics.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DimensionStatistics();
  obj.meanH != null && jspb.Message.setField(msg, 1, obj.meanH);
  obj.meanW != null && jspb.Message.setField(msg, 2, obj.meanW);
  obj.meanL != null && jspb.Message.setField(msg, 3, obj.meanL);
  obj.stdH != null && jspb.Message.setField(msg, 4, obj.stdH);
  obj.stdW != null && jspb.Message.setField(msg, 5, obj.stdW);
  obj.stdL != null && jspb.Message.setField(msg, 6, obj.stdL);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DimensionStatistics}
 */
proto.apollo.perception.inference.DimensionStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DimensionStatistics;
  return proto.apollo.perception.inference.DimensionStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DimensionStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DimensionStatistics}
 */
proto.apollo.perception.inference.DimensionStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanH(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanW(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanL(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStdH(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStdW(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStdL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DimensionStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DimensionStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DimensionStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional float mean_h = 1;
 * @return {number}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.getMeanH = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.setMeanH = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.clearMeanH = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.hasMeanH = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float mean_w = 2;
 * @return {number}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.getMeanW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.setMeanW = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.clearMeanW = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.hasMeanW = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float mean_l = 3;
 * @return {number}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.getMeanL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.setMeanL = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.clearMeanL = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.hasMeanL = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float std_h = 4;
 * @return {number}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.getStdH = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.setStdH = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.clearStdH = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.hasStdH = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float std_w = 5;
 * @return {number}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.getStdW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.setStdW = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.clearStdW = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.hasStdW = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float std_l = 6;
 * @return {number}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.getStdL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.setStdL = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DimensionStatistics} returns this
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.clearStdL = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DimensionStatistics.prototype.hasStdL = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.YoloTargetParameter.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.YoloTargetParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.YoloTargetParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloTargetParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    negRoisRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    ignThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.6),
    negThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.1),
    minHeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.05),
    biasMatch: jspb.Message.getBooleanFieldWithDefault(msg, 5, true),
    rescore: jspb.Message.getBooleanFieldWithDefault(msg, 6, true),
    oriCyc: jspb.Message.getFieldWithDefault(msg, 7, 1),
    objWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 10.0),
    noobjWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.0),
    numClasses: jspb.Message.getFieldWithDefault(msg, 10, 0),
    dimensionStatisticsList: jspb.Message.toObjectList(msg.getDimensionStatisticsList(),
    proto.apollo.perception.inference.DimensionStatistics.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of YoloTargetParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.YoloTargetParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.negRoisRatio;

  /** @type {?|undefined} */
  this.ignThreshold;

  /** @type {?|undefined} */
  this.negThreshold;

  /** @type {?|undefined} */
  this.minHeight;

  /** @type {?|undefined} */
  this.biasMatch;

  /** @type {?|undefined} */
  this.rescore;

  /** @type {?|undefined} */
  this.oriCyc;

  /** @type {?|undefined} */
  this.objWeight;

  /** @type {?|undefined} */
  this.noobjWeight;

  /** @type {?|undefined} */
  this.numClasses;

  /** @type {?|undefined} */
  this.dimensionStatisticsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.YoloTargetParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter}
 */
proto.apollo.perception.inference.YoloTargetParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.YoloTargetParameter();
  obj.negRoisRatio != null && jspb.Message.setField(msg, 1, obj.negRoisRatio);
  obj.ignThreshold != null && jspb.Message.setField(msg, 2, obj.ignThreshold);
  obj.negThreshold != null && jspb.Message.setField(msg, 3, obj.negThreshold);
  obj.minHeight != null && jspb.Message.setField(msg, 4, obj.minHeight);
  obj.biasMatch != null && jspb.Message.setField(msg, 5, obj.biasMatch);
  obj.rescore != null && jspb.Message.setField(msg, 6, obj.rescore);
  obj.oriCyc != null && jspb.Message.setField(msg, 7, obj.oriCyc);
  obj.objWeight != null && jspb.Message.setField(msg, 8, obj.objWeight);
  obj.noobjWeight != null && jspb.Message.setField(msg, 9, obj.noobjWeight);
  obj.numClasses != null && jspb.Message.setField(msg, 10, obj.numClasses);
  obj.dimensionStatisticsList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.dimensionStatisticsList.map(
          proto.apollo.perception.inference.DimensionStatistics.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter}
 */
proto.apollo.perception.inference.YoloTargetParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.YoloTargetParameter;
  return proto.apollo.perception.inference.YoloTargetParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.YoloTargetParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter}
 */
proto.apollo.perception.inference.YoloTargetParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegRoisRatio(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIgnThreshold(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegThreshold(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinHeight(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasMatch(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRescore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOriCyc(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setObjWeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNoobjWeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumClasses(value);
      break;
    case 11:
      var value = new proto.apollo.perception.inference.DimensionStatistics;
      reader.readMessage(value,proto.apollo.perception.inference.DimensionStatistics.deserializeBinaryFromReader);
      msg.addDimensionStatistics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.YoloTargetParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.YoloTargetParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.YoloTargetParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getDimensionStatisticsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.perception.inference.DimensionStatistics.serializeBinaryToWriter
    );
  }
};


/**
 * optional float neg_rois_ratio = 1;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getNegRoisRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setNegRoisRatio = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearNegRoisRatio = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasNegRoisRatio = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float ign_threshold = 2;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getIgnThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.6));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setIgnThreshold = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearIgnThreshold = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasIgnThreshold = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float neg_threshold = 3;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getNegThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setNegThreshold = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearNegThreshold = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasNegThreshold = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float min_height = 4;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getMinHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setMinHeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearMinHeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasMinHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool bias_match = 5;
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getBiasMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setBiasMatch = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearBiasMatch = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasBiasMatch = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool rescore = 6;
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getRescore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setRescore = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearRescore = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasRescore = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 ori_cyc = 7;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getOriCyc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setOriCyc = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearOriCyc = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasOriCyc = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float obj_weight = 8;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getObjWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setObjWeight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearObjWeight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasObjWeight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float noobj_weight = 9;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getNoobjWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setNoobjWeight = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearNoobjWeight = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasNoobjWeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 num_classes = 10;
 * @return {number}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated DimensionStatistics dimension_statistics = 11;
 * @return {!Array<!proto.apollo.perception.inference.DimensionStatistics>}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.getDimensionStatisticsList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.DimensionStatistics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.DimensionStatistics, 11));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.DimensionStatistics>} value
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
*/
proto.apollo.perception.inference.YoloTargetParameter.prototype.setDimensionStatisticsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.perception.inference.DimensionStatistics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.DimensionStatistics}
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.addDimensionStatistics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.perception.inference.DimensionStatistics, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.YoloTargetParameter} returns this
 */
proto.apollo.perception.inference.YoloTargetParameter.prototype.clearDimensionStatisticsList = function() {
  return this.setDimensionStatisticsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.RegionProposalParameter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.RegionProposalParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.RegionProposalParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RegionProposalParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorboxList: jspb.Message.toObjectList(msg.getAnchorboxList(),
    proto.apollo.perception.inference.AnchorBox.toObject, includeInstance),
    thresholdsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    orientationScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    objectScale: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    noobjectScale: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    classScale: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    coordScale: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    jitter: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    bias: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    rescore: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    numClasses: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    biasMatch: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    threshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    trickyIter: jspb.Message.getFieldWithDefault(msg, 13, 400),
    nmsParam: (f = msg.getNmsParam()) && proto.apollo.perception.inference.NonMaximumSuppressionParameter.toObject(includeInstance, f),
    keepTopK: jspb.Message.getFieldWithDefault(msg, 16, -1),
    posThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    negThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    negRatio: jspb.Message.getFieldWithDefault(msg, 19, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RegionProposalParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.RegionProposalParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.anchorboxList;

  /** @type {?|undefined} */
  this.thresholdsList;

  /** @type {?|undefined} */
  this.orientationScale;

  /** @type {?|undefined} */
  this.objectScale;

  /** @type {?|undefined} */
  this.noobjectScale;

  /** @type {?|undefined} */
  this.classScale;

  /** @type {?|undefined} */
  this.coordScale;

  /** @type {?|undefined} */
  this.jitter;

  /** @type {?|undefined} */
  this.bias;

  /** @type {?|undefined} */
  this.rescore;

  /** @type {?|undefined} */
  this.numClasses;

  /** @type {?|undefined} */
  this.biasMatch;

  /** @type {?|undefined} */
  this.threshold;

  /** @type {?|undefined} */
  this.trickyIter;

  /** @type {?|undefined} */
  this.nmsParam;

  /** @type {?|undefined} */
  this.keepTopK;

  /** @type {?|undefined} */
  this.posThreshold;

  /** @type {?|undefined} */
  this.negThreshold;

  /** @type {?|undefined} */
  this.negRatio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.RegionProposalParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter}
 */
proto.apollo.perception.inference.RegionProposalParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.RegionProposalParameter();
  obj.anchorboxList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.anchorboxList.map(
          proto.apollo.perception.inference.AnchorBox.fromObject));
  obj.thresholdsList != null && jspb.Message.setField(msg, 2, obj.thresholdsList);
  obj.orientationScale != null && jspb.Message.setField(msg, 14, obj.orientationScale);
  obj.objectScale != null && jspb.Message.setField(msg, 3, obj.objectScale);
  obj.noobjectScale != null && jspb.Message.setField(msg, 4, obj.noobjectScale);
  obj.classScale != null && jspb.Message.setField(msg, 5, obj.classScale);
  obj.coordScale != null && jspb.Message.setField(msg, 6, obj.coordScale);
  obj.jitter != null && jspb.Message.setField(msg, 7, obj.jitter);
  obj.bias != null && jspb.Message.setField(msg, 8, obj.bias);
  obj.rescore != null && jspb.Message.setField(msg, 9, obj.rescore);
  obj.numClasses != null && jspb.Message.setField(msg, 10, obj.numClasses);
  obj.biasMatch != null && jspb.Message.setField(msg, 11, obj.biasMatch);
  obj.threshold != null && jspb.Message.setField(msg, 12, obj.threshold);
  obj.trickyIter != null && jspb.Message.setField(msg, 13, obj.trickyIter);
  obj.nmsParam && jspb.Message.setWrapperField(
      msg, 15, proto.apollo.perception.inference.NonMaximumSuppressionParameter.fromObject(obj.nmsParam));
  obj.keepTopK != null && jspb.Message.setField(msg, 16, obj.keepTopK);
  obj.posThreshold != null && jspb.Message.setField(msg, 17, obj.posThreshold);
  obj.negThreshold != null && jspb.Message.setField(msg, 18, obj.negThreshold);
  obj.negRatio != null && jspb.Message.setField(msg, 19, obj.negRatio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter}
 */
proto.apollo.perception.inference.RegionProposalParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.RegionProposalParameter;
  return proto.apollo.perception.inference.RegionProposalParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.RegionProposalParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter}
 */
proto.apollo.perception.inference.RegionProposalParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.AnchorBox;
      reader.readMessage(value,proto.apollo.perception.inference.AnchorBox.deserializeBinaryFromReader);
      msg.addAnchorbox(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addThresholds(values[i]);
      }
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrientationScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjectScale(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNoobjectScale(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClassScale(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoordScale(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setJitter(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBias(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRescore(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumClasses(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasMatch(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrickyIter(value);
      break;
    case 15:
      var value = new proto.apollo.perception.inference.NonMaximumSuppressionParameter;
      reader.readMessage(value,proto.apollo.perception.inference.NonMaximumSuppressionParameter.deserializeBinaryFromReader);
      msg.setNmsParam(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeepTopK(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosThreshold(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegThreshold(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNegRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.RegionProposalParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.RegionProposalParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RegionProposalParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorboxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.inference.AnchorBox.serializeBinaryToWriter
    );
  }
  f = message.getThresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getNmsParam();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.apollo.perception.inference.NonMaximumSuppressionParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
};


/**
 * repeated AnchorBox anchorbox = 1;
 * @return {!Array<!proto.apollo.perception.inference.AnchorBox>}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getAnchorboxList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.AnchorBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.AnchorBox, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.AnchorBox>} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
*/
proto.apollo.perception.inference.RegionProposalParameter.prototype.setAnchorboxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.inference.AnchorBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.AnchorBox}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.addAnchorbox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.inference.AnchorBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearAnchorboxList = function() {
  return this.setAnchorboxList([]);
};


/**
 * repeated float thresholds = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getThresholdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setThresholdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.addThresholds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearThresholdsList = function() {
  return this.setThresholdsList([]);
};


/**
 * optional float orientation_scale = 14;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getOrientationScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setOrientationScale = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearOrientationScale = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasOrientationScale = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 object_scale = 3;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getObjectScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setObjectScale = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearObjectScale = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasObjectScale = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 noobject_scale = 4;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getNoobjectScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setNoobjectScale = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearNoobjectScale = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasNoobjectScale = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 class_scale = 5;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getClassScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setClassScale = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearClassScale = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasClassScale = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 coord_scale = 6;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getCoordScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setCoordScale = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearCoordScale = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasCoordScale = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float jitter = 7;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getJitter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setJitter = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearJitter = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasJitter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float bias = 8;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getBias = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setBias = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearBias = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasBias = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool rescore = 9;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getRescore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setRescore = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearRescore = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasRescore = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 num_classes = 10;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool bias_match = 11;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getBiasMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setBiasMatch = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearBiasMatch = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasBiasMatch = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float threshold = 12;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setThreshold = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearThreshold = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasThreshold = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 tricky_iter = 13;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getTrickyIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 400));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setTrickyIter = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearTrickyIter = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasTrickyIter = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional NonMaximumSuppressionParameter nms_param = 15;
 * @return {?proto.apollo.perception.inference.NonMaximumSuppressionParameter}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getNmsParam = function() {
  return /** @type{?proto.apollo.perception.inference.NonMaximumSuppressionParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NonMaximumSuppressionParameter, 15));
};


/**
 * @param {?proto.apollo.perception.inference.NonMaximumSuppressionParameter|undefined} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
*/
proto.apollo.perception.inference.RegionProposalParameter.prototype.setNmsParam = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearNmsParam = function() {
  return this.setNmsParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasNmsParam = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 keep_top_k = 16;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getKeepTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setKeepTopK = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearKeepTopK = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasKeepTopK = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float pos_threshold = 17;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getPosThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setPosThreshold = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearPosThreshold = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasPosThreshold = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional float neg_threshold = 18;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getNegThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setNegThreshold = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearNegThreshold = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasNegThreshold = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int32 neg_ratio = 19;
 * @return {number}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.getNegRatio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.setNegRatio = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionProposalParameter} returns this
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.clearNegRatio = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionProposalParameter.prototype.hasNegRatio = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.RegionParameter.repeatedFields_ = [1,2,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.RegionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.RegionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.RegionParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RegionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorboxList: jspb.Message.toObjectList(msg.getAnchorboxList(),
    proto.apollo.perception.inference.AnchorBox.toObject, includeInstance),
    thresholdsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    orientationScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    dimensionScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    frontScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    rearScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    objectScale: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    noobjectScale: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    classScale: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    coordScale: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    jitter: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    bias: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    rescore: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    numClasses: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    biasMatch: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    threshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    trickyIter: jspb.Message.getFieldWithDefault(msg, 13, 400),
    useL1Loss: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    useTwiceSoftmax: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    isAnchorNormalized: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    oriEnableList: (f = jspb.Message.getRepeatedBooleanField(msg, 21)) == null ? undefined : f,
    anchorfile: jspb.Message.getFieldWithDefault(msg, 22, "anchor.txt"),
    useSideBoxV2: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
    useSideBoxV3: jspb.Message.getBooleanFieldWithDefault(msg, 24, false),
    oriCycle: jspb.Message.getFieldWithDefault(msg, 25, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RegionParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.RegionParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.anchorboxList;

  /** @type {?|undefined} */
  this.thresholdsList;

  /** @type {?|undefined} */
  this.orientationScale;

  /** @type {?|undefined} */
  this.dimensionScale;

  /** @type {?|undefined} */
  this.frontScale;

  /** @type {?|undefined} */
  this.rearScale;

  /** @type {?|undefined} */
  this.objectScale;

  /** @type {?|undefined} */
  this.noobjectScale;

  /** @type {?|undefined} */
  this.classScale;

  /** @type {?|undefined} */
  this.coordScale;

  /** @type {?|undefined} */
  this.jitter;

  /** @type {?|undefined} */
  this.bias;

  /** @type {?|undefined} */
  this.rescore;

  /** @type {?|undefined} */
  this.numClasses;

  /** @type {?|undefined} */
  this.biasMatch;

  /** @type {?|undefined} */
  this.threshold;

  /** @type {?|undefined} */
  this.trickyIter;

  /** @type {?|undefined} */
  this.useL1Loss;

  /** @type {?|undefined} */
  this.useTwiceSoftmax;

  /** @type {?|undefined} */
  this.isAnchorNormalized;

  /** @type {?|undefined} */
  this.oriEnableList;

  /** @type {?|undefined} */
  this.anchorfile;

  /** @type {?|undefined} */
  this.useSideBoxV2;

  /** @type {?|undefined} */
  this.useSideBoxV3;

  /** @type {?|undefined} */
  this.oriCycle;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.RegionParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.RegionParameter}
 */
proto.apollo.perception.inference.RegionParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.RegionParameter();
  obj.anchorboxList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.anchorboxList.map(
          proto.apollo.perception.inference.AnchorBox.fromObject));
  obj.thresholdsList != null && jspb.Message.setField(msg, 2, obj.thresholdsList);
  obj.orientationScale != null && jspb.Message.setField(msg, 14, obj.orientationScale);
  obj.dimensionScale != null && jspb.Message.setField(msg, 15, obj.dimensionScale);
  obj.frontScale != null && jspb.Message.setField(msg, 19, obj.frontScale);
  obj.rearScale != null && jspb.Message.setField(msg, 20, obj.rearScale);
  obj.objectScale != null && jspb.Message.setField(msg, 3, obj.objectScale);
  obj.noobjectScale != null && jspb.Message.setField(msg, 4, obj.noobjectScale);
  obj.classScale != null && jspb.Message.setField(msg, 5, obj.classScale);
  obj.coordScale != null && jspb.Message.setField(msg, 6, obj.coordScale);
  obj.jitter != null && jspb.Message.setField(msg, 7, obj.jitter);
  obj.bias != null && jspb.Message.setField(msg, 8, obj.bias);
  obj.rescore != null && jspb.Message.setField(msg, 9, obj.rescore);
  obj.numClasses != null && jspb.Message.setField(msg, 10, obj.numClasses);
  obj.biasMatch != null && jspb.Message.setField(msg, 11, obj.biasMatch);
  obj.threshold != null && jspb.Message.setField(msg, 12, obj.threshold);
  obj.trickyIter != null && jspb.Message.setField(msg, 13, obj.trickyIter);
  obj.useL1Loss != null && jspb.Message.setField(msg, 16, obj.useL1Loss);
  obj.useTwiceSoftmax != null && jspb.Message.setField(msg, 17, obj.useTwiceSoftmax);
  obj.isAnchorNormalized != null && jspb.Message.setField(msg, 18, obj.isAnchorNormalized);
  obj.oriEnableList != null && jspb.Message.setField(msg, 21, obj.oriEnableList);
  obj.anchorfile != null && jspb.Message.setField(msg, 22, obj.anchorfile);
  obj.useSideBoxV2 != null && jspb.Message.setField(msg, 23, obj.useSideBoxV2);
  obj.useSideBoxV3 != null && jspb.Message.setField(msg, 24, obj.useSideBoxV3);
  obj.oriCycle != null && jspb.Message.setField(msg, 25, obj.oriCycle);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.RegionParameter}
 */
proto.apollo.perception.inference.RegionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.RegionParameter;
  return proto.apollo.perception.inference.RegionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.RegionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.RegionParameter}
 */
proto.apollo.perception.inference.RegionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.inference.AnchorBox;
      reader.readMessage(value,proto.apollo.perception.inference.AnchorBox.deserializeBinaryFromReader);
      msg.addAnchorbox(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addThresholds(values[i]);
      }
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrientationScale(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDimensionScale(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFrontScale(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRearScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObjectScale(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNoobjectScale(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setClassScale(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoordScale(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setJitter(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBias(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRescore(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumClasses(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasMatch(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrickyIter(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseL1Loss(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseTwiceSoftmax(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAnchorNormalized(value);
      break;
    case 21:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOriEnable(values[i]);
      }
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchorfile(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseSideBoxV2(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseSideBoxV3(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOriCycle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.RegionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.RegionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.RegionParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.RegionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorboxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.inference.AnchorBox.serializeBinaryToWriter
    );
  }
  f = message.getThresholdsList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeFloat(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getOriEnableList();
  if (f.length > 0) {
    writer.writeRepeatedBool(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeInt32(
      25,
      f
    );
  }
};


/**
 * repeated AnchorBox anchorbox = 1;
 * @return {!Array<!proto.apollo.perception.inference.AnchorBox>}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getAnchorboxList = function() {
  return /** @type{!Array<!proto.apollo.perception.inference.AnchorBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.inference.AnchorBox, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.inference.AnchorBox>} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
*/
proto.apollo.perception.inference.RegionParameter.prototype.setAnchorboxList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.inference.AnchorBox=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.AnchorBox}
 */
proto.apollo.perception.inference.RegionParameter.prototype.addAnchorbox = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.inference.AnchorBox, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearAnchorboxList = function() {
  return this.setAnchorboxList([]);
};


/**
 * repeated float thresholds = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getThresholdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setThresholdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.addThresholds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearThresholdsList = function() {
  return this.setThresholdsList([]);
};


/**
 * optional float orientation_scale = 14;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getOrientationScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setOrientationScale = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearOrientationScale = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasOrientationScale = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float dimension_scale = 15;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getDimensionScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setDimensionScale = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearDimensionScale = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasDimensionScale = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float front_scale = 19;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getFrontScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setFrontScale = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearFrontScale = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasFrontScale = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional float rear_scale = 20;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getRearScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setRearScale = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearRearScale = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasRearScale = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional uint32 object_scale = 3;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getObjectScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setObjectScale = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearObjectScale = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasObjectScale = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 noobject_scale = 4;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getNoobjectScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setNoobjectScale = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearNoobjectScale = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasNoobjectScale = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float class_scale = 5;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getClassScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setClassScale = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearClassScale = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasClassScale = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 coord_scale = 6;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getCoordScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setCoordScale = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearCoordScale = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasCoordScale = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float jitter = 7;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getJitter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setJitter = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearJitter = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasJitter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float bias = 8;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getBias = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setBias = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearBias = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasBias = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool rescore = 9;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getRescore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setRescore = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearRescore = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasRescore = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 num_classes = 10;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getNumClasses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setNumClasses = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearNumClasses = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasNumClasses = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool bias_match = 11;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getBiasMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setBiasMatch = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearBiasMatch = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasBiasMatch = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float threshold = 12;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setThreshold = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearThreshold = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasThreshold = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 tricky_iter = 13;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getTrickyIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 400));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setTrickyIter = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearTrickyIter = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasTrickyIter = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool use_l1_loss = 16;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getUseL1Loss = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setUseL1Loss = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearUseL1Loss = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasUseL1Loss = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool use_twice_softmax = 17;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getUseTwiceSoftmax = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setUseTwiceSoftmax = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearUseTwiceSoftmax = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasUseTwiceSoftmax = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool is_anchor_normalized = 18;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getIsAnchorNormalized = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setIsAnchorNormalized = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearIsAnchorNormalized = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasIsAnchorNormalized = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * repeated bool ori_enable = 21;
 * @return {!Array<boolean>}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getOriEnableList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 21));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setOriEnableList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.addOriEnable = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearOriEnableList = function() {
  return this.setOriEnableList([]);
};


/**
 * optional string anchorfile = 22;
 * @return {string}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getAnchorfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, "anchor.txt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setAnchorfile = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearAnchorfile = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasAnchorfile = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool use_side_box_v2 = 23;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getUseSideBoxV2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setUseSideBoxV2 = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearUseSideBoxV2 = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasUseSideBoxV2 = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bool use_side_box_v3 = 24;
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getUseSideBoxV3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setUseSideBoxV3 = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearUseSideBoxV3 = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasUseSideBoxV3 = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional int32 ori_cycle = 25;
 * @return {number}
 */
proto.apollo.perception.inference.RegionParameter.prototype.getOriCycle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.setOriCycle = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.RegionParameter} returns this
 */
proto.apollo.perception.inference.RegionParameter.prototype.clearOriCycle = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.RegionParameter.prototype.hasOriCycle = function() {
  return jspb.Message.getField(this, 25) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.AnchorBox.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.AnchorBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.AnchorBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnchorBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    w: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    h: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AnchorBox as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.AnchorBox.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.w;

  /** @type {?|undefined} */
  this.h;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.AnchorBox.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.AnchorBox}
 */
proto.apollo.perception.inference.AnchorBox.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.AnchorBox();
  obj.w != null && jspb.Message.setField(msg, 1, obj.w);
  obj.h != null && jspb.Message.setField(msg, 2, obj.h);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.AnchorBox}
 */
proto.apollo.perception.inference.AnchorBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.AnchorBox;
  return proto.apollo.perception.inference.AnchorBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.AnchorBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.AnchorBox}
 */
proto.apollo.perception.inference.AnchorBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.AnchorBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.AnchorBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.AnchorBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.AnchorBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float w = 1;
 * @return {number}
 */
proto.apollo.perception.inference.AnchorBox.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.AnchorBox} returns this
 */
proto.apollo.perception.inference.AnchorBox.prototype.setW = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AnchorBox} returns this
 */
proto.apollo.perception.inference.AnchorBox.prototype.clearW = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnchorBox.prototype.hasW = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float h = 2;
 * @return {number}
 */
proto.apollo.perception.inference.AnchorBox.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.AnchorBox} returns this
 */
proto.apollo.perception.inference.AnchorBox.prototype.setH = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.AnchorBox} returns this
 */
proto.apollo.perception.inference.AnchorBox.prototype.clearH = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.AnchorBox.prototype.hasH = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.ReorgParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.ReorgParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.ReorgParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReorgParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    stride: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReorgParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.ReorgParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stride;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.ReorgParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.ReorgParameter}
 */
proto.apollo.perception.inference.ReorgParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.ReorgParameter();
  obj.stride != null && jspb.Message.setField(msg, 1, obj.stride);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.ReorgParameter}
 */
proto.apollo.perception.inference.ReorgParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.ReorgParameter;
  return proto.apollo.perception.inference.ReorgParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.ReorgParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.ReorgParameter}
 */
proto.apollo.perception.inference.ReorgParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.ReorgParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.ReorgParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.ReorgParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.ReorgParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 stride = 1;
 * @return {number}
 */
proto.apollo.perception.inference.ReorgParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.ReorgParameter} returns this
 */
proto.apollo.perception.inference.ReorgParameter.prototype.setStride = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.ReorgParameter} returns this
 */
proto.apollo.perception.inference.ReorgParameter.prototype.clearStride = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.ReorgParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.BBoxRegParameter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.BBoxRegParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.BBoxRegParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BBoxRegParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    bboxMeanList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    bboxStdList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BBoxRegParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.BBoxRegParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.bboxMeanList;

  /** @type {?|undefined} */
  this.bboxStdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.BBoxRegParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.BBoxRegParameter}
 */
proto.apollo.perception.inference.BBoxRegParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.BBoxRegParameter();
  obj.bboxMeanList != null && jspb.Message.setField(msg, 1, obj.bboxMeanList);
  obj.bboxStdList != null && jspb.Message.setField(msg, 2, obj.bboxStdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.BBoxRegParameter}
 */
proto.apollo.perception.inference.BBoxRegParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.BBoxRegParameter;
  return proto.apollo.perception.inference.BBoxRegParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.BBoxRegParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.BBoxRegParameter}
 */
proto.apollo.perception.inference.BBoxRegParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBboxMean(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBboxStd(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.BBoxRegParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.BBoxRegParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.BBoxRegParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBboxMeanList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      1,
      f
    );
  }
  f = message.getBboxStdList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
};


/**
 * repeated float bbox_mean = 1;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.getBboxMeanList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.BBoxRegParameter} returns this
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.setBboxMeanList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BBoxRegParameter} returns this
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.addBboxMean = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.BBoxRegParameter} returns this
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.clearBboxMeanList = function() {
  return this.setBboxMeanList([]);
};


/**
 * repeated float bbox_std = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.getBboxStdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.BBoxRegParameter} returns this
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.setBboxStdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.BBoxRegParameter} returns this
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.addBboxStd = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.BBoxRegParameter} returns this
 */
proto.apollo.perception.inference.BBoxRegParameter.prototype.clearBboxStdList = function() {
  return this.setBboxStdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DFMBPSROIAlignParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    heatMapA: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    outputDim: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    groupHeight: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    groupWidth: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    pooledHeight: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    pooledWidth: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    padRatio: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    samplePerPart: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    transStd: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    partHeight: jspb.Message.getFieldWithDefault(msg, 10, 0),
    partWidth: jspb.Message.getFieldWithDefault(msg, 11, 0),
    heatMapB: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DFMBPSROIAlignParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.heatMapA;

  /** @type {?|undefined} */
  this.outputDim;

  /** @type {?|undefined} */
  this.groupHeight;

  /** @type {?|undefined} */
  this.groupWidth;

  /** @type {?|undefined} */
  this.pooledHeight;

  /** @type {?|undefined} */
  this.pooledWidth;

  /** @type {?|undefined} */
  this.padRatio;

  /** @type {?|undefined} */
  this.samplePerPart;

  /** @type {?|undefined} */
  this.transStd;

  /** @type {?|undefined} */
  this.partHeight;

  /** @type {?|undefined} */
  this.partWidth;

  /** @type {?|undefined} */
  this.heatMapB;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DFMBPSROIAlignParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DFMBPSROIAlignParameter();
  obj.heatMapA != null && jspb.Message.setField(msg, 1, obj.heatMapA);
  obj.outputDim != null && jspb.Message.setField(msg, 2, obj.outputDim);
  obj.groupHeight != null && jspb.Message.setField(msg, 3, obj.groupHeight);
  obj.groupWidth != null && jspb.Message.setField(msg, 4, obj.groupWidth);
  obj.pooledHeight != null && jspb.Message.setField(msg, 5, obj.pooledHeight);
  obj.pooledWidth != null && jspb.Message.setField(msg, 6, obj.pooledWidth);
  obj.padRatio != null && jspb.Message.setField(msg, 7, obj.padRatio);
  obj.samplePerPart != null && jspb.Message.setField(msg, 8, obj.samplePerPart);
  obj.transStd != null && jspb.Message.setField(msg, 9, obj.transStd);
  obj.partHeight != null && jspb.Message.setField(msg, 10, obj.partHeight);
  obj.partWidth != null && jspb.Message.setField(msg, 11, obj.partWidth);
  obj.heatMapB != null && jspb.Message.setField(msg, 12, obj.heatMapB);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DFMBPSROIAlignParameter;
  return proto.apollo.perception.inference.DFMBPSROIAlignParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeatMapA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutputDim(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPooledHeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPooledWidth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPadRatio(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSamplePerPart(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTransStd(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartHeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartWidth(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeatMapB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DFMBPSROIAlignParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
};


/**
 * optional float heat_map_a = 1;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getHeatMapA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setHeatMapA = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearHeatMapA = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasHeatMapA = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 output_dim = 2;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getOutputDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setOutputDim = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearOutputDim = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasOutputDim = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 group_height = 3;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getGroupHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setGroupHeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearGroupHeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasGroupHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 group_width = 4;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getGroupWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setGroupWidth = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearGroupWidth = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasGroupWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 pooled_height = 5;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getPooledHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setPooledHeight = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearPooledHeight = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasPooledHeight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 pooled_width = 6;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getPooledWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setPooledWidth = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearPooledWidth = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasPooledWidth = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float pad_ratio = 7;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getPadRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setPadRatio = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearPadRatio = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasPadRatio = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 sample_per_part = 8;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getSamplePerPart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setSamplePerPart = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearSamplePerPart = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasSamplePerPart = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float trans_std = 9;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getTransStd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setTransStd = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearTransStd = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasTransStd = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 part_height = 10;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getPartHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setPartHeight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearPartHeight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasPartHeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 part_width = 11;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getPartWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setPartWidth = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearPartWidth = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasPartWidth = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float heat_map_b = 12;
 * @return {number}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.getHeatMapB = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.setHeatMapB = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DFMBPSROIAlignParameter} returns this
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.clearHeatMapB = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DFMBPSROIAlignParameter.prototype.hasHeatMapB = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.DetectionOutputSSDParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.DetectionOutputSSDParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    heatMapA: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    minSizeH: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 2.0),
    minSizeW: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 2.0),
    minSizeMode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    thresholdObjectness: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    genAnchorParam: (f = msg.getGenAnchorParam()) && proto.apollo.perception.inference.GenAnchorParameter.toObject(includeInstance, f),
    refineOutOfMapBbox: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    nmsParam: (f = msg.getNmsParam()) && proto.apollo.perception.inference.NMSSSDParameter.toObject(includeInstance, f),
    numClass: jspb.Message.getFieldWithDefault(msg, 9, 1),
    rpnProposalOutputScore: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    regressAgnostic: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    thresholdList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DetectionOutputSSDParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.heatMapA;

  /** @type {?|undefined} */
  this.minSizeH;

  /** @type {?|undefined} */
  this.minSizeW;

  /** @type {?|undefined} */
  this.minSizeMode;

  /** @type {?|undefined} */
  this.thresholdObjectness;

  /** @type {?|undefined} */
  this.genAnchorParam;

  /** @type {?|undefined} */
  this.refineOutOfMapBbox;

  /** @type {?|undefined} */
  this.nmsParam;

  /** @type {?|undefined} */
  this.numClass;

  /** @type {?|undefined} */
  this.rpnProposalOutputScore;

  /** @type {?|undefined} */
  this.regressAgnostic;

  /** @type {?|undefined} */
  this.thresholdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.DetectionOutputSSDParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.DetectionOutputSSDParameter();
  obj.heatMapA != null && jspb.Message.setField(msg, 1, obj.heatMapA);
  obj.minSizeH != null && jspb.Message.setField(msg, 2, obj.minSizeH);
  obj.minSizeW != null && jspb.Message.setField(msg, 3, obj.minSizeW);
  obj.minSizeMode != null && jspb.Message.setField(msg, 4, obj.minSizeMode);
  obj.thresholdObjectness != null && jspb.Message.setField(msg, 5, obj.thresholdObjectness);
  obj.genAnchorParam && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.perception.inference.GenAnchorParameter.fromObject(obj.genAnchorParam));
  obj.refineOutOfMapBbox != null && jspb.Message.setField(msg, 7, obj.refineOutOfMapBbox);
  obj.nmsParam && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.perception.inference.NMSSSDParameter.fromObject(obj.nmsParam));
  obj.numClass != null && jspb.Message.setField(msg, 9, obj.numClass);
  obj.rpnProposalOutputScore != null && jspb.Message.setField(msg, 10, obj.rpnProposalOutputScore);
  obj.regressAgnostic != null && jspb.Message.setField(msg, 11, obj.regressAgnostic);
  obj.thresholdList != null && jspb.Message.setField(msg, 12, obj.thresholdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.DetectionOutputSSDParameter;
  return proto.apollo.perception.inference.DetectionOutputSSDParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.DetectionOutputSSDParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeatMapA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinSizeH(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinSizeW(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE} */ (reader.readEnum());
      msg.setMinSizeMode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThresholdObjectness(value);
      break;
    case 6:
      var value = new proto.apollo.perception.inference.GenAnchorParameter;
      reader.readMessage(value,proto.apollo.perception.inference.GenAnchorParameter.deserializeBinaryFromReader);
      msg.setGenAnchorParam(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRefineOutOfMapBbox(value);
      break;
    case 8:
      var value = new proto.apollo.perception.inference.NMSSSDParameter;
      reader.readMessage(value,proto.apollo.perception.inference.NMSSSDParameter.deserializeBinaryFromReader);
      msg.setNmsParam(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumClass(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRpnProposalOutputScore(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRegressAgnostic(value);
      break;
    case 12:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addThreshold(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.DetectionOutputSSDParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.DetectionOutputSSDParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getGenAnchorParam();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.perception.inference.GenAnchorParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getNmsParam();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.perception.inference.NMSSSDParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getThresholdList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE = {
  HEIGHT_AND_WIDTH: 0,
  HEIGHT_OR_WIDTH: 1
};

/**
 * optional float heat_map_a = 1;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getHeatMapA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setHeatMapA = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearHeatMapA = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasHeatMapA = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float min_size_h = 2;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getMinSizeH = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setMinSizeH = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearMinSizeH = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasMinSizeH = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float min_size_w = 3;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getMinSizeW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setMinSizeW = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearMinSizeW = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasMinSizeW = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MIN_SIZE_MODE min_size_mode = 4;
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getMinSizeMode = function() {
  return /** @type {!proto.apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.perception.inference.DetectionOutputSSDParameter.MIN_SIZE_MODE} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setMinSizeMode = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearMinSizeMode = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasMinSizeMode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float threshold_objectness = 5;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getThresholdObjectness = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setThresholdObjectness = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearThresholdObjectness = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasThresholdObjectness = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GenAnchorParameter gen_anchor_param = 6;
 * @return {?proto.apollo.perception.inference.GenAnchorParameter}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getGenAnchorParam = function() {
  return /** @type{?proto.apollo.perception.inference.GenAnchorParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.GenAnchorParameter, 6));
};


/**
 * @param {?proto.apollo.perception.inference.GenAnchorParameter|undefined} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
*/
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setGenAnchorParam = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearGenAnchorParam = function() {
  return this.setGenAnchorParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasGenAnchorParam = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool refine_out_of_map_bbox = 7;
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getRefineOutOfMapBbox = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setRefineOutOfMapBbox = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearRefineOutOfMapBbox = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasRefineOutOfMapBbox = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NMSSSDParameter nms_param = 8;
 * @return {?proto.apollo.perception.inference.NMSSSDParameter}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getNmsParam = function() {
  return /** @type{?proto.apollo.perception.inference.NMSSSDParameter} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.inference.NMSSSDParameter, 8));
};


/**
 * @param {?proto.apollo.perception.inference.NMSSSDParameter|undefined} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
*/
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setNmsParam = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearNmsParam = function() {
  return this.setNmsParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasNmsParam = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 num_class = 9;
 * @return {number}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getNumClass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setNumClass = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearNumClass = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasNumClass = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool rpn_proposal_output_score = 10;
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getRpnProposalOutputScore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setRpnProposalOutputScore = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearRpnProposalOutputScore = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasRpnProposalOutputScore = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool regress_agnostic = 11;
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getRegressAgnostic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setRegressAgnostic = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearRegressAgnostic = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.hasRegressAgnostic = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated float threshold = 12;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.getThresholdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 12));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.setThresholdList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.addThreshold = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.DetectionOutputSSDParameter} returns this
 */
proto.apollo.perception.inference.DetectionOutputSSDParameter.prototype.clearThresholdList = function() {
  return this.setThresholdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.NMSSSDParameter.repeatedFields_ = [2,3,5,6,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.NMSSSDParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.NMSSSDParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NMSSSDParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    needNms: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    overlapRatioList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    topNList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    addScore: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    maxCandidateNList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    useSoftNmsList: (f = jspb.Message.getRepeatedBooleanField(msg, 6)) == null ? undefined : f,
    nmsAmongClasses: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    votingList: (f = jspb.Message.getRepeatedBooleanField(msg, 8)) == null ? undefined : f,
    voteIouList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f,
    forceIdentityIouThr: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 1.0),
    forceImparityIouThr: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    nmsGpuMaxNPerTime: jspb.Message.getFieldWithDefault(msg, 12, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NMSSSDParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.NMSSSDParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.needNms;

  /** @type {?|undefined} */
  this.overlapRatioList;

  /** @type {?|undefined} */
  this.topNList;

  /** @type {?|undefined} */
  this.addScore;

  /** @type {?|undefined} */
  this.maxCandidateNList;

  /** @type {?|undefined} */
  this.useSoftNmsList;

  /** @type {?|undefined} */
  this.nmsAmongClasses;

  /** @type {?|undefined} */
  this.votingList;

  /** @type {?|undefined} */
  this.voteIouList;

  /** @type {?|undefined} */
  this.forceIdentityIouThr;

  /** @type {?|undefined} */
  this.forceImparityIouThr;

  /** @type {?|undefined} */
  this.nmsGpuMaxNPerTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.NMSSSDParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter}
 */
proto.apollo.perception.inference.NMSSSDParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.NMSSSDParameter();
  obj.needNms != null && jspb.Message.setField(msg, 1, obj.needNms);
  obj.overlapRatioList != null && jspb.Message.setField(msg, 2, obj.overlapRatioList);
  obj.topNList != null && jspb.Message.setField(msg, 3, obj.topNList);
  obj.addScore != null && jspb.Message.setField(msg, 4, obj.addScore);
  obj.maxCandidateNList != null && jspb.Message.setField(msg, 5, obj.maxCandidateNList);
  obj.useSoftNmsList != null && jspb.Message.setField(msg, 6, obj.useSoftNmsList);
  obj.nmsAmongClasses != null && jspb.Message.setField(msg, 7, obj.nmsAmongClasses);
  obj.votingList != null && jspb.Message.setField(msg, 8, obj.votingList);
  obj.voteIouList != null && jspb.Message.setField(msg, 9, obj.voteIouList);
  obj.forceIdentityIouThr != null && jspb.Message.setField(msg, 10, obj.forceIdentityIouThr);
  obj.forceImparityIouThr != null && jspb.Message.setField(msg, 11, obj.forceImparityIouThr);
  obj.nmsGpuMaxNPerTime != null && jspb.Message.setField(msg, 12, obj.nmsGpuMaxNPerTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter}
 */
proto.apollo.perception.inference.NMSSSDParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.NMSSSDParameter;
  return proto.apollo.perception.inference.NMSSSDParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.NMSSSDParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter}
 */
proto.apollo.perception.inference.NMSSSDParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedNms(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOverlapRatio(values[i]);
      }
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTopN(values[i]);
      }
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAddScore(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMaxCandidateN(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addUseSoftNms(values[i]);
      }
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNmsAmongClasses(value);
      break;
    case 8:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVoting(values[i]);
      }
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVoteIou(values[i]);
      }
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setForceIdentityIouThr(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setForceImparityIouThr(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNmsGpuMaxNPerTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.NMSSSDParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.NMSSSDParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.NMSSSDParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOverlapRatioList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
  f = message.getTopNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMaxCandidateNList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      5,
      f
    );
  }
  f = message.getUseSoftNmsList();
  if (f.length > 0) {
    writer.writeRepeatedBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getVotingList();
  if (f.length > 0) {
    writer.writeRepeatedBool(
      8,
      f
    );
  }
  f = message.getVoteIouList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional bool need_nms = 1;
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getNeedNms = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setNeedNms = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearNeedNms = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.hasNeedNms = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float overlap_ratio = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getOverlapRatioList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setOverlapRatioList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.addOverlapRatio = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearOverlapRatioList = function() {
  return this.setOverlapRatioList([]);
};


/**
 * repeated uint32 top_n = 3;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getTopNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setTopNList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.addTopN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearTopNList = function() {
  return this.setTopNList([]);
};


/**
 * optional bool add_score = 4;
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getAddScore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setAddScore = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearAddScore = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.hasAddScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 max_candidate_n = 5;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getMaxCandidateNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setMaxCandidateNList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.addMaxCandidateN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearMaxCandidateNList = function() {
  return this.setMaxCandidateNList([]);
};


/**
 * repeated bool use_soft_nms = 6;
 * @return {!Array<boolean>}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getUseSoftNmsList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 6));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setUseSoftNmsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.addUseSoftNms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearUseSoftNmsList = function() {
  return this.setUseSoftNmsList([]);
};


/**
 * optional bool nms_among_classes = 7;
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getNmsAmongClasses = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setNmsAmongClasses = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearNmsAmongClasses = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.hasNmsAmongClasses = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated bool voting = 8;
 * @return {!Array<boolean>}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getVotingList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 8));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setVotingList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.addVoting = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearVotingList = function() {
  return this.setVotingList([]);
};


/**
 * repeated float vote_iou = 9;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getVoteIouList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setVoteIouList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.addVoteIou = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearVoteIouList = function() {
  return this.setVoteIouList([]);
};


/**
 * optional float force_identity_iou_thr = 10;
 * @return {number}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getForceIdentityIouThr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setForceIdentityIouThr = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearForceIdentityIouThr = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.hasForceIdentityIouThr = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float force_imparity_iou_thr = 11;
 * @return {number}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getForceImparityIouThr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setForceImparityIouThr = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearForceImparityIouThr = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.hasForceImparityIouThr = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 nms_gpu_max_n_per_time = 12;
 * @return {number}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.getNmsGpuMaxNPerTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.setNmsGpuMaxNPerTime = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.inference.NMSSSDParameter} returns this
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.clearNmsGpuMaxNPerTime = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.inference.NMSSSDParameter.prototype.hasNmsGpuMaxNPerTime = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.inference.GenAnchorParameter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.inference.GenAnchorParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.inference.GenAnchorParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.GenAnchorParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchorWidthList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    anchorHeightList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of GenAnchorParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.inference.GenAnchorParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.anchorWidthList;

  /** @type {?|undefined} */
  this.anchorHeightList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.inference.GenAnchorParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.inference.GenAnchorParameter}
 */
proto.apollo.perception.inference.GenAnchorParameter.fromObject = function(obj) {
  var msg = new proto.apollo.perception.inference.GenAnchorParameter();
  obj.anchorWidthList != null && jspb.Message.setField(msg, 1, obj.anchorWidthList);
  obj.anchorHeightList != null && jspb.Message.setField(msg, 2, obj.anchorHeightList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.inference.GenAnchorParameter}
 */
proto.apollo.perception.inference.GenAnchorParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.inference.GenAnchorParameter;
  return proto.apollo.perception.inference.GenAnchorParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.inference.GenAnchorParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.inference.GenAnchorParameter}
 */
proto.apollo.perception.inference.GenAnchorParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAnchorWidth(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAnchorHeight(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.inference.GenAnchorParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.inference.GenAnchorParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.inference.GenAnchorParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchorWidthList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      1,
      f
    );
  }
  f = message.getAnchorHeightList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
};


/**
 * repeated float anchor_width = 1;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.getAnchorWidthList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.GenAnchorParameter} returns this
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.setAnchorWidthList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.GenAnchorParameter} returns this
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.addAnchorWidth = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.GenAnchorParameter} returns this
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.clearAnchorWidthList = function() {
  return this.setAnchorWidthList([]);
};


/**
 * repeated float anchor_height = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.getAnchorHeightList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.inference.GenAnchorParameter} returns this
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.setAnchorHeightList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.inference.GenAnchorParameter} returns this
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.addAnchorHeight = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.inference.GenAnchorParameter} returns this
 */
proto.apollo.perception.inference.GenAnchorParameter.prototype.clearAnchorHeightList = function() {
  return this.setAnchorHeightList([]);
};


/**
 * @enum {number}
 */
proto.apollo.perception.inference.Phase = {
  TRAIN: 0,
  TEST: 1
};

goog.object.extend(exports, proto.apollo.perception.inference);
