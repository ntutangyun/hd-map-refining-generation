// source: modules/planning/proto/math/qp_problem.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.planning.QPMatrix', null, global);
goog.exportSymbol('proto.apollo.planning.QuadraticProgrammingProblem', null, global);
goog.exportSymbol('proto.apollo.planning.QuadraticProgrammingProblemSet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.QuadraticProgrammingProblem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.QuadraticProgrammingProblem.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.QuadraticProgrammingProblem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.QuadraticProgrammingProblem.displayName = 'proto.apollo.planning.QuadraticProgrammingProblem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.QPMatrix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.QPMatrix.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.QPMatrix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.QPMatrix.displayName = 'proto.apollo.planning.QPMatrix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.QuadraticProgrammingProblemSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.QuadraticProgrammingProblemSet.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.QuadraticProgrammingProblemSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.QuadraticProgrammingProblemSet.displayName = 'proto.apollo.planning.QuadraticProgrammingProblemSet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.QuadraticProgrammingProblem.repeatedFields_ = [3,5,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.QuadraticProgrammingProblem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.QuadraticProgrammingProblem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QuadraticProgrammingProblem.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramSize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    quadraticMatrix: (f = msg.getQuadraticMatrix()) && proto.apollo.planning.QPMatrix.toObject(includeInstance, f),
    biasList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    equalityMatrix: (f = msg.getEqualityMatrix()) && proto.apollo.planning.QPMatrix.toObject(includeInstance, f),
    equalityValueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    inequalityMatrix: (f = msg.getInequalityMatrix()) && proto.apollo.planning.QPMatrix.toObject(includeInstance, f),
    inequalityValueList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    inputMarkerList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f,
    optimalParamList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of QuadraticProgrammingProblem as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.QuadraticProgrammingProblem.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.paramSize;

  /** @type {?|undefined} */
  this.quadraticMatrix;

  /** @type {?|undefined} */
  this.biasList;

  /** @type {?|undefined} */
  this.equalityMatrix;

  /** @type {?|undefined} */
  this.equalityValueList;

  /** @type {?|undefined} */
  this.inequalityMatrix;

  /** @type {?|undefined} */
  this.inequalityValueList;

  /** @type {?|undefined} */
  this.inputMarkerList;

  /** @type {?|undefined} */
  this.optimalParamList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.QuadraticProgrammingProblem.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem}
 */
proto.apollo.planning.QuadraticProgrammingProblem.fromObject = function(obj) {
  var msg = new proto.apollo.planning.QuadraticProgrammingProblem();
  obj.paramSize != null && jspb.Message.setField(msg, 1, obj.paramSize);
  obj.quadraticMatrix && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.QPMatrix.fromObject(obj.quadraticMatrix));
  obj.biasList != null && jspb.Message.setField(msg, 3, obj.biasList);
  obj.equalityMatrix && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.QPMatrix.fromObject(obj.equalityMatrix));
  obj.equalityValueList != null && jspb.Message.setField(msg, 5, obj.equalityValueList);
  obj.inequalityMatrix && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.QPMatrix.fromObject(obj.inequalityMatrix));
  obj.inequalityValueList != null && jspb.Message.setField(msg, 7, obj.inequalityValueList);
  obj.inputMarkerList != null && jspb.Message.setField(msg, 8, obj.inputMarkerList);
  obj.optimalParamList != null && jspb.Message.setField(msg, 9, obj.optimalParamList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem}
 */
proto.apollo.planning.QuadraticProgrammingProblem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.QuadraticProgrammingProblem;
  return proto.apollo.planning.QuadraticProgrammingProblem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.QuadraticProgrammingProblem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem}
 */
proto.apollo.planning.QuadraticProgrammingProblem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParamSize(value);
      break;
    case 2:
      var value = new proto.apollo.planning.QPMatrix;
      reader.readMessage(value,proto.apollo.planning.QPMatrix.deserializeBinaryFromReader);
      msg.setQuadraticMatrix(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBias(values[i]);
      }
      break;
    case 4:
      var value = new proto.apollo.planning.QPMatrix;
      reader.readMessage(value,proto.apollo.planning.QPMatrix.deserializeBinaryFromReader);
      msg.setEqualityMatrix(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEqualityValue(values[i]);
      }
      break;
    case 6:
      var value = new proto.apollo.planning.QPMatrix;
      reader.readMessage(value,proto.apollo.planning.QPMatrix.deserializeBinaryFromReader);
      msg.setInequalityMatrix(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInequalityValue(values[i]);
      }
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInputMarker(values[i]);
      }
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOptimalParam(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.QuadraticProgrammingProblem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.QuadraticProgrammingProblem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QuadraticProgrammingProblem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getQuadraticMatrix();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.QPMatrix.serializeBinaryToWriter
    );
  }
  f = message.getBiasList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      3,
      f
    );
  }
  f = message.getEqualityMatrix();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.QPMatrix.serializeBinaryToWriter
    );
  }
  f = message.getEqualityValueList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      5,
      f
    );
  }
  f = message.getInequalityMatrix();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.QPMatrix.serializeBinaryToWriter
    );
  }
  f = message.getInequalityValueList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      7,
      f
    );
  }
  f = message.getInputMarkerList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      8,
      f
    );
  }
  f = message.getOptimalParamList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      9,
      f
    );
  }
};


/**
 * optional int32 param_size = 1;
 * @return {number}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getParamSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setParamSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearParamSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.hasParamSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QPMatrix quadratic_matrix = 2;
 * @return {?proto.apollo.planning.QPMatrix}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getQuadraticMatrix = function() {
  return /** @type{?proto.apollo.planning.QPMatrix} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.QPMatrix, 2));
};


/**
 * @param {?proto.apollo.planning.QPMatrix|undefined} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
*/
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setQuadraticMatrix = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearQuadraticMatrix = function() {
  return this.setQuadraticMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.hasQuadraticMatrix = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated double bias = 3;
 * @return {!Array<number>}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getBiasList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setBiasList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.addBias = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearBiasList = function() {
  return this.setBiasList([]);
};


/**
 * optional QPMatrix equality_matrix = 4;
 * @return {?proto.apollo.planning.QPMatrix}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getEqualityMatrix = function() {
  return /** @type{?proto.apollo.planning.QPMatrix} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.QPMatrix, 4));
};


/**
 * @param {?proto.apollo.planning.QPMatrix|undefined} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
*/
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setEqualityMatrix = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearEqualityMatrix = function() {
  return this.setEqualityMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.hasEqualityMatrix = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated double equality_value = 5;
 * @return {!Array<number>}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getEqualityValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setEqualityValueList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.addEqualityValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearEqualityValueList = function() {
  return this.setEqualityValueList([]);
};


/**
 * optional QPMatrix inequality_matrix = 6;
 * @return {?proto.apollo.planning.QPMatrix}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getInequalityMatrix = function() {
  return /** @type{?proto.apollo.planning.QPMatrix} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.QPMatrix, 6));
};


/**
 * @param {?proto.apollo.planning.QPMatrix|undefined} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
*/
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setInequalityMatrix = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearInequalityMatrix = function() {
  return this.setInequalityMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.hasInequalityMatrix = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated double inequality_value = 7;
 * @return {!Array<number>}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getInequalityValueList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setInequalityValueList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.addInequalityValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearInequalityValueList = function() {
  return this.setInequalityValueList([]);
};


/**
 * repeated double input_marker = 8;
 * @return {!Array<number>}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getInputMarkerList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setInputMarkerList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.addInputMarker = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearInputMarkerList = function() {
  return this.setInputMarkerList([]);
};


/**
 * repeated double optimal_param = 9;
 * @return {!Array<number>}
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.getOptimalParamList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.setOptimalParamList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.addOptimalParam = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblem.prototype.clearOptimalParamList = function() {
  return this.setOptimalParamList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.QPMatrix.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.QPMatrix.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.QPMatrix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.QPMatrix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QPMatrix.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowSize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    colSize: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    elementList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of QPMatrix as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.QPMatrix.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.rowSize;

  /** @type {?|undefined} */
  this.colSize;

  /** @type {?|undefined} */
  this.elementList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.QPMatrix.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.QPMatrix}
 */
proto.apollo.planning.QPMatrix.fromObject = function(obj) {
  var msg = new proto.apollo.planning.QPMatrix();
  obj.rowSize != null && jspb.Message.setField(msg, 1, obj.rowSize);
  obj.colSize != null && jspb.Message.setField(msg, 2, obj.colSize);
  obj.elementList != null && jspb.Message.setField(msg, 3, obj.elementList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.QPMatrix}
 */
proto.apollo.planning.QPMatrix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.QPMatrix;
  return proto.apollo.planning.QPMatrix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.QPMatrix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.QPMatrix}
 */
proto.apollo.planning.QPMatrix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRowSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColSize(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addElement(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.QPMatrix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.QPMatrix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.QPMatrix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QPMatrix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getElementList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      3,
      f
    );
  }
};


/**
 * optional int32 row_size = 1;
 * @return {number}
 */
proto.apollo.planning.QPMatrix.prototype.getRowSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QPMatrix} returns this
 */
proto.apollo.planning.QPMatrix.prototype.setRowSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QPMatrix} returns this
 */
proto.apollo.planning.QPMatrix.prototype.clearRowSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QPMatrix.prototype.hasRowSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 col_size = 2;
 * @return {number}
 */
proto.apollo.planning.QPMatrix.prototype.getColSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QPMatrix} returns this
 */
proto.apollo.planning.QPMatrix.prototype.setColSize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QPMatrix} returns this
 */
proto.apollo.planning.QPMatrix.prototype.clearColSize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QPMatrix.prototype.hasColSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated double element = 3;
 * @return {!Array<number>}
 */
proto.apollo.planning.QPMatrix.prototype.getElementList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.planning.QPMatrix} returns this
 */
proto.apollo.planning.QPMatrix.prototype.setElementList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.QPMatrix} returns this
 */
proto.apollo.planning.QPMatrix.prototype.addElement = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.QPMatrix} returns this
 */
proto.apollo.planning.QPMatrix.prototype.clearElementList = function() {
  return this.setElementList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.QuadraticProgrammingProblemSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.QuadraticProgrammingProblemSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    problemList: jspb.Message.toObjectList(msg.getProblemList(),
    proto.apollo.planning.QuadraticProgrammingProblem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of QuadraticProgrammingProblemSet as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.problemList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.QuadraticProgrammingProblemSet.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblemSet}
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.fromObject = function(obj) {
  var msg = new proto.apollo.planning.QuadraticProgrammingProblemSet();
  obj.problemList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.problemList.map(
          proto.apollo.planning.QuadraticProgrammingProblem.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblemSet}
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.QuadraticProgrammingProblemSet;
  return proto.apollo.planning.QuadraticProgrammingProblemSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.QuadraticProgrammingProblemSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblemSet}
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.QuadraticProgrammingProblem;
      reader.readMessage(value,proto.apollo.planning.QuadraticProgrammingProblem.deserializeBinaryFromReader);
      msg.addProblem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.QuadraticProgrammingProblemSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.QuadraticProgrammingProblemSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProblemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.QuadraticProgrammingProblem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QuadraticProgrammingProblem problem = 1;
 * @return {!Array<!proto.apollo.planning.QuadraticProgrammingProblem>}
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.prototype.getProblemList = function() {
  return /** @type{!Array<!proto.apollo.planning.QuadraticProgrammingProblem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.QuadraticProgrammingProblem, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.QuadraticProgrammingProblem>} value
 * @return {!proto.apollo.planning.QuadraticProgrammingProblemSet} returns this
*/
proto.apollo.planning.QuadraticProgrammingProblemSet.prototype.setProblemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.QuadraticProgrammingProblem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.QuadraticProgrammingProblem}
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.prototype.addProblem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.QuadraticProgrammingProblem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.QuadraticProgrammingProblemSet} returns this
 */
proto.apollo.planning.QuadraticProgrammingProblemSet.prototype.clearProblemList = function() {
  return this.setProblemList([]);
};


goog.object.extend(exports, proto.apollo.planning);
