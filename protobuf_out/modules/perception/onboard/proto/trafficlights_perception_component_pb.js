// source: modules/perception/onboard/proto/trafficlights_perception_component.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.onboard.TrafficLight', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.onboard.TrafficLight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.onboard.TrafficLight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.onboard.TrafficLight.displayName = 'proto.apollo.perception.onboard.TrafficLight';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.onboard.TrafficLight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.onboard.TrafficLight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.TrafficLight.toObject = function(includeInstance, msg) {
  var f, obj = {
    tlTf2FrameId: jspb.Message.getFieldWithDefault(msg, 1, "world"),
    tlTf2ChildFrameId: jspb.Message.getFieldWithDefault(msg, 2, "perception_localization_100hz"),
    tf2TimeoutSecond: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.01),
    cameraNames: jspb.Message.getFieldWithDefault(msg, 4, "front_6mm,front_12mm"),
    cameraChannelNames: jspb.Message.getFieldWithDefault(msg, 5, "/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm"),
    tlImageTimestampOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    maxProcessImageFps: jspb.Message.getFieldWithDefault(msg, 7, 8),
    queryTfIntervalSeconds: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.3),
    validHdmapInterval: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.5),
    imageSysTsDiffThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.5),
    syncIntervalSeconds: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.5),
    cameraTrafficLightPerceptionConfDir: jspb.Message.getFieldWithDefault(msg, 12, "conf/perception/camera"),
    cameraTrafficLightPerceptionConfFile: jspb.Message.getFieldWithDefault(msg, 13, "trafficlight.pt"),
    defaultImageBorderSize: jspb.Message.getFieldWithDefault(msg, 14, 100),
    trafficLightOutputChannelName: jspb.Message.getFieldWithDefault(msg, 15, "/apollo/perception/traffic_light"),
    simulationChannelName: jspb.Message.getFieldWithDefault(msg, 16, "/apollo/perception/traffic_light_simulation"),
    v2xTrafficlightsInputChannelName: jspb.Message.getFieldWithDefault(msg, 17, "/apollo/v2x/traffic_light"),
    v2xSyncIntervalSeconds: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.1),
    maxV2xMsgBuffSize: jspb.Message.getFieldWithDefault(msg, 19, 50),
    tlPreprocessorName: jspb.Message.getFieldWithDefault(msg, 20, "TLPreprocessor")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLight as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.onboard.TrafficLight.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.tlTf2FrameId;

  /** @type {?|undefined} */
  this.tlTf2ChildFrameId;

  /** @type {?|undefined} */
  this.tf2TimeoutSecond;

  /** @type {?|undefined} */
  this.cameraNames;

  /** @type {?|undefined} */
  this.cameraChannelNames;

  /** @type {?|undefined} */
  this.tlImageTimestampOffset;

  /** @type {?|undefined} */
  this.maxProcessImageFps;

  /** @type {?|undefined} */
  this.queryTfIntervalSeconds;

  /** @type {?|undefined} */
  this.validHdmapInterval;

  /** @type {?|undefined} */
  this.imageSysTsDiffThreshold;

  /** @type {?|undefined} */
  this.syncIntervalSeconds;

  /** @type {?|undefined} */
  this.cameraTrafficLightPerceptionConfDir;

  /** @type {?|undefined} */
  this.cameraTrafficLightPerceptionConfFile;

  /** @type {?|undefined} */
  this.defaultImageBorderSize;

  /** @type {?|undefined} */
  this.trafficLightOutputChannelName;

  /** @type {?|undefined} */
  this.simulationChannelName;

  /** @type {?|undefined} */
  this.v2xTrafficlightsInputChannelName;

  /** @type {?|undefined} */
  this.v2xSyncIntervalSeconds;

  /** @type {?|undefined} */
  this.maxV2xMsgBuffSize;

  /** @type {?|undefined} */
  this.tlPreprocessorName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.onboard.TrafficLight.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.onboard.TrafficLight}
 */
proto.apollo.perception.onboard.TrafficLight.fromObject = function(obj) {
  var msg = new proto.apollo.perception.onboard.TrafficLight();
  obj.tlTf2FrameId != null && jspb.Message.setField(msg, 1, obj.tlTf2FrameId);
  obj.tlTf2ChildFrameId != null && jspb.Message.setField(msg, 2, obj.tlTf2ChildFrameId);
  obj.tf2TimeoutSecond != null && jspb.Message.setField(msg, 3, obj.tf2TimeoutSecond);
  obj.cameraNames != null && jspb.Message.setField(msg, 4, obj.cameraNames);
  obj.cameraChannelNames != null && jspb.Message.setField(msg, 5, obj.cameraChannelNames);
  obj.tlImageTimestampOffset != null && jspb.Message.setField(msg, 6, obj.tlImageTimestampOffset);
  obj.maxProcessImageFps != null && jspb.Message.setField(msg, 7, obj.maxProcessImageFps);
  obj.queryTfIntervalSeconds != null && jspb.Message.setField(msg, 8, obj.queryTfIntervalSeconds);
  obj.validHdmapInterval != null && jspb.Message.setField(msg, 9, obj.validHdmapInterval);
  obj.imageSysTsDiffThreshold != null && jspb.Message.setField(msg, 10, obj.imageSysTsDiffThreshold);
  obj.syncIntervalSeconds != null && jspb.Message.setField(msg, 11, obj.syncIntervalSeconds);
  obj.cameraTrafficLightPerceptionConfDir != null && jspb.Message.setField(msg, 12, obj.cameraTrafficLightPerceptionConfDir);
  obj.cameraTrafficLightPerceptionConfFile != null && jspb.Message.setField(msg, 13, obj.cameraTrafficLightPerceptionConfFile);
  obj.defaultImageBorderSize != null && jspb.Message.setField(msg, 14, obj.defaultImageBorderSize);
  obj.trafficLightOutputChannelName != null && jspb.Message.setField(msg, 15, obj.trafficLightOutputChannelName);
  obj.simulationChannelName != null && jspb.Message.setField(msg, 16, obj.simulationChannelName);
  obj.v2xTrafficlightsInputChannelName != null && jspb.Message.setField(msg, 17, obj.v2xTrafficlightsInputChannelName);
  obj.v2xSyncIntervalSeconds != null && jspb.Message.setField(msg, 18, obj.v2xSyncIntervalSeconds);
  obj.maxV2xMsgBuffSize != null && jspb.Message.setField(msg, 19, obj.maxV2xMsgBuffSize);
  obj.tlPreprocessorName != null && jspb.Message.setField(msg, 20, obj.tlPreprocessorName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.onboard.TrafficLight}
 */
proto.apollo.perception.onboard.TrafficLight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.onboard.TrafficLight;
  return proto.apollo.perception.onboard.TrafficLight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.onboard.TrafficLight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.onboard.TrafficLight}
 */
proto.apollo.perception.onboard.TrafficLight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlTf2FrameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlTf2ChildFrameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTf2TimeoutSecond(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraNames(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraChannelNames(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTlImageTimestampOffset(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxProcessImageFps(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQueryTfIntervalSeconds(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValidHdmapInterval(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setImageSysTsDiffThreshold(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSyncIntervalSeconds(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraTrafficLightPerceptionConfDir(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraTrafficLightPerceptionConfFile(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultImageBorderSize(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrafficLightOutputChannelName(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSimulationChannelName(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setV2xTrafficlightsInputChannelName(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setV2xSyncIntervalSeconds(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxV2xMsgBuffSize(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlPreprocessorName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.onboard.TrafficLight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.onboard.TrafficLight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.TrafficLight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional string tl_tf2_frame_id = 1;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getTlTf2FrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "world"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setTlTf2FrameId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearTlTf2FrameId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasTlTf2FrameId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tl_tf2_child_frame_id = 2;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getTlTf2ChildFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "perception_localization_100hz"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setTlTf2ChildFrameId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearTlTf2ChildFrameId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasTlTf2ChildFrameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double tf2_timeout_second = 3;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getTf2TimeoutSecond = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.01));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setTf2TimeoutSecond = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearTf2TimeoutSecond = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasTf2TimeoutSecond = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string camera_names = 4;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getCameraNames = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "front_6mm,front_12mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setCameraNames = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearCameraNames = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasCameraNames = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string camera_channel_names = 5;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getCameraChannelNames = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "/apollo/sensor/camera/front_6mm,/apollo/sensor/camera/front_12mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setCameraChannelNames = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearCameraChannelNames = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasCameraChannelNames = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double tl_image_timestamp_offset = 6;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getTlImageTimestampOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setTlImageTimestampOffset = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearTlImageTimestampOffset = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasTlImageTimestampOffset = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 max_process_image_fps = 7;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getMaxProcessImageFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setMaxProcessImageFps = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearMaxProcessImageFps = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasMaxProcessImageFps = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double query_tf_interval_seconds = 8;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getQueryTfIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setQueryTfIntervalSeconds = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearQueryTfIntervalSeconds = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasQueryTfIntervalSeconds = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double valid_hdmap_interval = 9;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getValidHdmapInterval = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setValidHdmapInterval = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearValidHdmapInterval = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasValidHdmapInterval = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double image_sys_ts_diff_threshold = 10;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getImageSysTsDiffThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setImageSysTsDiffThreshold = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearImageSysTsDiffThreshold = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasImageSysTsDiffThreshold = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double sync_interval_seconds = 11;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getSyncIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setSyncIntervalSeconds = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearSyncIntervalSeconds = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasSyncIntervalSeconds = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string camera_traffic_light_perception_conf_dir = 12;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getCameraTrafficLightPerceptionConfDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "conf/perception/camera"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setCameraTrafficLightPerceptionConfDir = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearCameraTrafficLightPerceptionConfDir = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasCameraTrafficLightPerceptionConfDir = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string camera_traffic_light_perception_conf_file = 13;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getCameraTrafficLightPerceptionConfFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, "trafficlight.pt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setCameraTrafficLightPerceptionConfFile = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearCameraTrafficLightPerceptionConfFile = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasCameraTrafficLightPerceptionConfFile = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 default_image_border_size = 14;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getDefaultImageBorderSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 100));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setDefaultImageBorderSize = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearDefaultImageBorderSize = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasDefaultImageBorderSize = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string traffic_light_output_channel_name = 15;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getTrafficLightOutputChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, "/apollo/perception/traffic_light"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setTrafficLightOutputChannelName = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearTrafficLightOutputChannelName = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasTrafficLightOutputChannelName = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string simulation_channel_name = 16;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getSimulationChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, "/apollo/perception/traffic_light_simulation"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setSimulationChannelName = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearSimulationChannelName = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasSimulationChannelName = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string v2x_trafficlights_input_channel_name = 17;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getV2xTrafficlightsInputChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, "/apollo/v2x/traffic_light"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setV2xTrafficlightsInputChannelName = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearV2xTrafficlightsInputChannelName = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasV2xTrafficlightsInputChannelName = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double v2x_sync_interval_seconds = 18;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getV2xSyncIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setV2xSyncIntervalSeconds = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearV2xSyncIntervalSeconds = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasV2xSyncIntervalSeconds = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int32 max_v2x_msg_buff_size = 19;
 * @return {number}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getMaxV2xMsgBuffSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 50));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setMaxV2xMsgBuffSize = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearMaxV2xMsgBuffSize = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasMaxV2xMsgBuffSize = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string tl_preprocessor_name = 20;
 * @return {string}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.getTlPreprocessorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, "TLPreprocessor"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.setTlPreprocessorName = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.TrafficLight} returns this
 */
proto.apollo.perception.onboard.TrafficLight.prototype.clearTlPreprocessorName = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.TrafficLight.prototype.hasTlPreprocessorName = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.apollo.perception.onboard);
