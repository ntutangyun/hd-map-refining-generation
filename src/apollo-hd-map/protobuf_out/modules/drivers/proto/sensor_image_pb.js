// source: modules/drivers/proto/sensor_image.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
goog.exportSymbol('proto.apollo.drivers.CompressedImage', null, global);
goog.exportSymbol('proto.apollo.drivers.Image', null, global);
goog.exportSymbol('proto.apollo.drivers.PixelFormat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.Image.displayName = 'proto.apollo.drivers.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.CompressedImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.CompressedImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.CompressedImage.displayName = 'proto.apollo.drivers.CompressedImage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    frameId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    measurementTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    width: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    encoding: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    step: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Image as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.Image.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.measurementTime;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.encoding;

  /** @type {?|undefined} */
  this.step;

  /** @type {?|undefined} */
  this.data;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.Image.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.Image}
 */
proto.apollo.drivers.Image.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.Image();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.frameId != null && jspb.Message.setField(msg, 2, obj.frameId);
  obj.measurementTime != null && jspb.Message.setField(msg, 3, obj.measurementTime);
  obj.height != null && jspb.Message.setField(msg, 4, obj.height);
  obj.width != null && jspb.Message.setField(msg, 5, obj.width);
  obj.encoding != null && jspb.Message.setField(msg, 6, obj.encoding);
  obj.step != null && jspb.Message.setField(msg, 7, obj.step);
  obj.data != null && jspb.Message.setField(msg, 8, obj.data);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.Image}
 */
proto.apollo.drivers.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.Image;
  return proto.apollo.drivers.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.Image}
 */
proto.apollo.drivers.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeasurementTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoding(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStep(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.drivers.Image.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.drivers.Image} returns this
*/
proto.apollo.drivers.Image.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string frame_id = 2;
 * @return {string}
 */
proto.apollo.drivers.Image.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double measurement_time = 3;
 * @return {number}
 */
proto.apollo.drivers.Image.prototype.getMeasurementTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.setMeasurementTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearMeasurementTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasMeasurementTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 height = 4;
 * @return {number}
 */
proto.apollo.drivers.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 width = 5;
 * @return {number}
 */
proto.apollo.drivers.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string encoding = 6;
 * @return {string}
 */
proto.apollo.drivers.Image.prototype.getEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.setEncoding = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearEncoding = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasEncoding = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 step = 7;
 * @return {number}
 */
proto.apollo.drivers.Image.prototype.getStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.setStep = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearStep = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasStep = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes data = 8;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.Image.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes data = 8;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.apollo.drivers.Image.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.Image.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.setData = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.Image} returns this
 */
proto.apollo.drivers.Image.prototype.clearData = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.Image.prototype.hasData = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.CompressedImage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.CompressedImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.CompressedImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.CompressedImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    frameId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    format: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    data: msg.getData_asB64(),
    measurementTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    frameType: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CompressedImage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.CompressedImage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.format;

  /** @type {?|undefined} */
  this.data;

  /** @type {?|undefined} */
  this.measurementTime;

  /** @type {?|undefined} */
  this.frameType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.CompressedImage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.CompressedImage}
 */
proto.apollo.drivers.CompressedImage.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.CompressedImage();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.frameId != null && jspb.Message.setField(msg, 2, obj.frameId);
  obj.format != null && jspb.Message.setField(msg, 3, obj.format);
  obj.data != null && jspb.Message.setField(msg, 4, obj.data);
  obj.measurementTime != null && jspb.Message.setField(msg, 5, obj.measurementTime);
  obj.frameType != null && jspb.Message.setField(msg, 6, obj.frameType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.CompressedImage}
 */
proto.apollo.drivers.CompressedImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.CompressedImage;
  return proto.apollo.drivers.CompressedImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.CompressedImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.CompressedImage}
 */
proto.apollo.drivers.CompressedImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeasurementTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrameType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.CompressedImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.CompressedImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.CompressedImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.CompressedImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.drivers.CompressedImage.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.drivers.CompressedImage} returns this
*/
proto.apollo.drivers.CompressedImage.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.CompressedImage.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string frame_id = 2;
 * @return {string}
 */
proto.apollo.drivers.CompressedImage.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.CompressedImage.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string format = 3;
 * @return {string}
 */
proto.apollo.drivers.CompressedImage.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.setFormat = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.clearFormat = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.CompressedImage.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.CompressedImage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.apollo.drivers.CompressedImage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.CompressedImage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.setData = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.clearData = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.CompressedImage.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double measurement_time = 5;
 * @return {number}
 */
proto.apollo.drivers.CompressedImage.prototype.getMeasurementTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.setMeasurementTime = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.clearMeasurementTime = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.CompressedImage.prototype.hasMeasurementTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 frame_type = 6;
 * @return {number}
 */
proto.apollo.drivers.CompressedImage.prototype.getFrameType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.setFrameType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.CompressedImage} returns this
 */
proto.apollo.drivers.CompressedImage.prototype.clearFrameType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.CompressedImage.prototype.hasFrameType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.apollo.drivers.PixelFormat = {
  RGB8: 1001,
  RGBA8: 1002,
  RGB16: 1003,
  RGBA16: 1004,
  BGR8: 1005,
  BGRA8: 1006,
  BGR16: 1007,
  BGRA16: 1008,
  MONO8: 1009,
  MONO16: 1010,
  TYPE_8UC1: 2001,
  TYPE_8UC2: 2002,
  TYPE_8UC3: 2003,
  TYPE_8UC4: 2004,
  TYPE_8SC1: 2005,
  TYPE_8SC2: 2006,
  TYPE_8SC3: 2007,
  TYPE_8SC4: 2008,
  TYPE_16UC1: 2009,
  TYPE_16UC2: 2010,
  TYPE_16UC3: 2011,
  TYPE_16UC4: 2012,
  TYPE_16SC1: 2013,
  TYPE_16SC2: 2014,
  TYPE_16SC3: 2015,
  TYPE_16SC4: 2016,
  TYPE_32SC1: 2017,
  TYPE_32SC2: 2018,
  TYPE_32SC3: 2019,
  TYPE_32SC4: 2020,
  TYPE_32FC1: 2021,
  TYPE_32FC2: 2022,
  TYPE_32FC3: 2023,
  TYPE_32FC4: 2024,
  TYPE_64FC1: 2025,
  TYPE_64FC2: 2026,
  TYPE_64FC3: 2027,
  TYPE_64FC4: 2028,
  BAYER_RGGB8: 3001,
  BAYER_BGGR8: 3002,
  BAYER_GBRG8: 3003,
  BAYER_GRBG8: 3004,
  BAYER_RGGB16: 3005,
  BAYER_BGGR16: 3006,
  BAYER_GBRG16: 3007,
  BAYER_GRBG16: 3008,
  YUV422: 4001
};

goog.object.extend(exports, proto.apollo.drivers);
