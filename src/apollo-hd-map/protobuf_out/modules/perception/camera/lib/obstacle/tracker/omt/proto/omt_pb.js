// source: modules/perception/camera/lib/obstacle/tracker/omt/proto/omt.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.camera.omt.KalmanParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.omt.OmtParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.omt.ReferenceParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.omt.TargetParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.omt.WeightParam', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.omt.KalmanParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.omt.KalmanParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.omt.KalmanParam.displayName = 'proto.apollo.perception.camera.omt.KalmanParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.omt.TargetParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.omt.TargetParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.omt.TargetParam.displayName = 'proto.apollo.perception.camera.omt.TargetParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.omt.ReferenceParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.omt.ReferenceParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.omt.ReferenceParam.displayName = 'proto.apollo.perception.camera.omt.ReferenceParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.omt.WeightParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.omt.WeightParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.omt.WeightParam.displayName = 'proto.apollo.perception.camera.omt.WeightParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.omt.OmtParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.omt.OmtParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.omt.OmtParam.displayName = 'proto.apollo.perception.camera.omt.OmtParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.omt.KalmanParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.omt.KalmanParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.KalmanParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    initVariance: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    processVariance: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    measureVariance: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KalmanParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.omt.KalmanParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.initVariance;

  /** @type {?|undefined} */
  this.processVariance;

  /** @type {?|undefined} */
  this.measureVariance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.omt.KalmanParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.omt.KalmanParam}
 */
proto.apollo.perception.camera.omt.KalmanParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.omt.KalmanParam();
  obj.initVariance != null && jspb.Message.setField(msg, 1, obj.initVariance);
  obj.processVariance != null && jspb.Message.setField(msg, 2, obj.processVariance);
  obj.measureVariance != null && jspb.Message.setField(msg, 3, obj.measureVariance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.omt.KalmanParam}
 */
proto.apollo.perception.camera.omt.KalmanParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.omt.KalmanParam;
  return proto.apollo.perception.camera.omt.KalmanParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.omt.KalmanParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.omt.KalmanParam}
 */
proto.apollo.perception.camera.omt.KalmanParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInitVariance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProcessVariance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeasureVariance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.omt.KalmanParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.omt.KalmanParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.KalmanParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float init_variance = 1;
 * @return {number}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.getInitVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.KalmanParam} returns this
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.setInitVariance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.KalmanParam} returns this
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.clearInitVariance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.hasInitVariance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float process_variance = 2;
 * @return {number}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.getProcessVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.KalmanParam} returns this
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.setProcessVariance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.KalmanParam} returns this
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.clearProcessVariance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.hasProcessVariance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float measure_variance = 3;
 * @return {number}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.getMeasureVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.KalmanParam} returns this
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.setMeasureVariance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.KalmanParam} returns this
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.clearMeasureVariance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.KalmanParam.prototype.hasMeasureVariance = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.omt.TargetParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.omt.TargetParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.TargetParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    velocityThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 2.0),
    velocityOutputDelay: jspb.Message.getFieldWithDefault(msg, 2, 2),
    worldCenter: (f = msg.getWorldCenter()) && proto.apollo.perception.camera.omt.KalmanParam.toObject(includeInstance, f),
    imageCenter: (f = msg.getImageCenter()) && proto.apollo.perception.camera.omt.KalmanParam.toObject(includeInstance, f),
    imageWhUpdateRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    worldLhwHistory: jspb.Message.getFieldWithDefault(msg, 6, 15),
    heightDiffRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.1),
    worldStateHistory: jspb.Message.getFieldWithDefault(msg, 8, 30),
    minCachedWorldStateHistorySize: jspb.Message.getFieldWithDefault(msg, 9, 5),
    minCachedVelocitySize: jspb.Message.getFieldWithDefault(msg, 10, 10),
    minCachedPositionSize: jspb.Message.getFieldWithDefault(msg, 11, 25),
    calcAvgPositionWindowSize: jspb.Message.getFieldWithDefault(msg, 12, 7),
    staticSpeedThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.5),
    staticSpeedThresholdPed: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.3),
    minMovingAvgSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 1.0),
    minMovingAvgSpeedPed: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.5),
    abnormalAccThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 6.0),
    abnormalAccThresholdPed: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 3.0),
    abnormalVelocityHeadingAngleThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.7854),
    clappingVelocity: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    worldMeanVelocityDuration: jspb.Message.getFieldWithDefault(msg, 21, 10),
    trackedLife: jspb.Message.getFieldWithDefault(msg, 22, 3),
    typeFilterVar: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.3),
    largeVelocityRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 2.5),
    tooLargeVelocityRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 25, 1.5),
    meanFilterWindow: jspb.Message.getFieldWithDefault(msg, 26, 10),
    directionFilterRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 27, 0.7),
    displacementThetaVar: jspb.Message.getFloatingPointFieldWithDefault(msg, 28, 0.25),
    velocityThetaVar: jspb.Message.getFloatingPointFieldWithDefault(msg, 29, 0.5),
    stableMovingSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 30, 2.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TargetParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.omt.TargetParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.velocityThreshold;

  /** @type {?|undefined} */
  this.velocityOutputDelay;

  /** @type {?|undefined} */
  this.worldCenter;

  /** @type {?|undefined} */
  this.imageCenter;

  /** @type {?|undefined} */
  this.imageWhUpdateRate;

  /** @type {?|undefined} */
  this.worldLhwHistory;

  /** @type {?|undefined} */
  this.heightDiffRatio;

  /** @type {?|undefined} */
  this.worldStateHistory;

  /** @type {?|undefined} */
  this.minCachedWorldStateHistorySize;

  /** @type {?|undefined} */
  this.minCachedVelocitySize;

  /** @type {?|undefined} */
  this.minCachedPositionSize;

  /** @type {?|undefined} */
  this.calcAvgPositionWindowSize;

  /** @type {?|undefined} */
  this.staticSpeedThreshold;

  /** @type {?|undefined} */
  this.staticSpeedThresholdPed;

  /** @type {?|undefined} */
  this.minMovingAvgSpeed;

  /** @type {?|undefined} */
  this.minMovingAvgSpeedPed;

  /** @type {?|undefined} */
  this.abnormalAccThreshold;

  /** @type {?|undefined} */
  this.abnormalAccThresholdPed;

  /** @type {?|undefined} */
  this.abnormalVelocityHeadingAngleThreshold;

  /** @type {?|undefined} */
  this.clappingVelocity;

  /** @type {?|undefined} */
  this.worldMeanVelocityDuration;

  /** @type {?|undefined} */
  this.trackedLife;

  /** @type {?|undefined} */
  this.typeFilterVar;

  /** @type {?|undefined} */
  this.largeVelocityRatio;

  /** @type {?|undefined} */
  this.tooLargeVelocityRatio;

  /** @type {?|undefined} */
  this.meanFilterWindow;

  /** @type {?|undefined} */
  this.directionFilterRatio;

  /** @type {?|undefined} */
  this.displacementThetaVar;

  /** @type {?|undefined} */
  this.velocityThetaVar;

  /** @type {?|undefined} */
  this.stableMovingSpeed;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.omt.TargetParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.omt.TargetParam}
 */
proto.apollo.perception.camera.omt.TargetParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.omt.TargetParam();
  obj.velocityThreshold != null && jspb.Message.setField(msg, 1, obj.velocityThreshold);
  obj.velocityOutputDelay != null && jspb.Message.setField(msg, 2, obj.velocityOutputDelay);
  obj.worldCenter && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.perception.camera.omt.KalmanParam.fromObject(obj.worldCenter));
  obj.imageCenter && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.camera.omt.KalmanParam.fromObject(obj.imageCenter));
  obj.imageWhUpdateRate != null && jspb.Message.setField(msg, 5, obj.imageWhUpdateRate);
  obj.worldLhwHistory != null && jspb.Message.setField(msg, 6, obj.worldLhwHistory);
  obj.heightDiffRatio != null && jspb.Message.setField(msg, 7, obj.heightDiffRatio);
  obj.worldStateHistory != null && jspb.Message.setField(msg, 8, obj.worldStateHistory);
  obj.minCachedWorldStateHistorySize != null && jspb.Message.setField(msg, 9, obj.minCachedWorldStateHistorySize);
  obj.minCachedVelocitySize != null && jspb.Message.setField(msg, 10, obj.minCachedVelocitySize);
  obj.minCachedPositionSize != null && jspb.Message.setField(msg, 11, obj.minCachedPositionSize);
  obj.calcAvgPositionWindowSize != null && jspb.Message.setField(msg, 12, obj.calcAvgPositionWindowSize);
  obj.staticSpeedThreshold != null && jspb.Message.setField(msg, 13, obj.staticSpeedThreshold);
  obj.staticSpeedThresholdPed != null && jspb.Message.setField(msg, 14, obj.staticSpeedThresholdPed);
  obj.minMovingAvgSpeed != null && jspb.Message.setField(msg, 15, obj.minMovingAvgSpeed);
  obj.minMovingAvgSpeedPed != null && jspb.Message.setField(msg, 16, obj.minMovingAvgSpeedPed);
  obj.abnormalAccThreshold != null && jspb.Message.setField(msg, 17, obj.abnormalAccThreshold);
  obj.abnormalAccThresholdPed != null && jspb.Message.setField(msg, 18, obj.abnormalAccThresholdPed);
  obj.abnormalVelocityHeadingAngleThreshold != null && jspb.Message.setField(msg, 19, obj.abnormalVelocityHeadingAngleThreshold);
  obj.clappingVelocity != null && jspb.Message.setField(msg, 20, obj.clappingVelocity);
  obj.worldMeanVelocityDuration != null && jspb.Message.setField(msg, 21, obj.worldMeanVelocityDuration);
  obj.trackedLife != null && jspb.Message.setField(msg, 22, obj.trackedLife);
  obj.typeFilterVar != null && jspb.Message.setField(msg, 23, obj.typeFilterVar);
  obj.largeVelocityRatio != null && jspb.Message.setField(msg, 24, obj.largeVelocityRatio);
  obj.tooLargeVelocityRatio != null && jspb.Message.setField(msg, 25, obj.tooLargeVelocityRatio);
  obj.meanFilterWindow != null && jspb.Message.setField(msg, 26, obj.meanFilterWindow);
  obj.directionFilterRatio != null && jspb.Message.setField(msg, 27, obj.directionFilterRatio);
  obj.displacementThetaVar != null && jspb.Message.setField(msg, 28, obj.displacementThetaVar);
  obj.velocityThetaVar != null && jspb.Message.setField(msg, 29, obj.velocityThetaVar);
  obj.stableMovingSpeed != null && jspb.Message.setField(msg, 30, obj.stableMovingSpeed);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.omt.TargetParam}
 */
proto.apollo.perception.camera.omt.TargetParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.omt.TargetParam;
  return proto.apollo.perception.camera.omt.TargetParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.omt.TargetParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.omt.TargetParam}
 */
proto.apollo.perception.camera.omt.TargetParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityThreshold(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVelocityOutputDelay(value);
      break;
    case 3:
      var value = new proto.apollo.perception.camera.omt.KalmanParam;
      reader.readMessage(value,proto.apollo.perception.camera.omt.KalmanParam.deserializeBinaryFromReader);
      msg.setWorldCenter(value);
      break;
    case 4:
      var value = new proto.apollo.perception.camera.omt.KalmanParam;
      reader.readMessage(value,proto.apollo.perception.camera.omt.KalmanParam.deserializeBinaryFromReader);
      msg.setImageCenter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setImageWhUpdateRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldLhwHistory(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeightDiffRatio(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldStateHistory(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinCachedWorldStateHistorySize(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinCachedVelocitySize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinCachedPositionSize(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCalcAvgPositionWindowSize(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStaticSpeedThreshold(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStaticSpeedThresholdPed(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinMovingAvgSpeed(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinMovingAvgSpeedPed(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAbnormalAccThreshold(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAbnormalAccThresholdPed(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAbnormalVelocityHeadingAngleThreshold(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClappingVelocity(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldMeanVelocityDuration(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrackedLife(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTypeFilterVar(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLargeVelocityRatio(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTooLargeVelocityRatio(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMeanFilterWindow(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirectionFilterRatio(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDisplacementThetaVar(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityThetaVar(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStableMovingSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.omt.TargetParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.omt.TargetParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.TargetParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWorldCenter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.perception.camera.omt.KalmanParam.serializeBinaryToWriter
    );
  }
  f = message.getImageCenter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.camera.omt.KalmanParam.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeFloat(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeFloat(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeFloat(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeFloat(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeFloat(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeFloat(
      29,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeFloat(
      30,
      f
    );
  }
};


/**
 * optional float velocity_threshold = 1;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getVelocityThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setVelocityThreshold = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearVelocityThreshold = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasVelocityThreshold = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 velocity_output_delay = 2;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getVelocityOutputDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setVelocityOutputDelay = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearVelocityOutputDelay = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasVelocityOutputDelay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KalmanParam world_center = 3;
 * @return {?proto.apollo.perception.camera.omt.KalmanParam}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getWorldCenter = function() {
  return /** @type{?proto.apollo.perception.camera.omt.KalmanParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.omt.KalmanParam, 3));
};


/**
 * @param {?proto.apollo.perception.camera.omt.KalmanParam|undefined} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
*/
proto.apollo.perception.camera.omt.TargetParam.prototype.setWorldCenter = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearWorldCenter = function() {
  return this.setWorldCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasWorldCenter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional KalmanParam image_center = 4;
 * @return {?proto.apollo.perception.camera.omt.KalmanParam}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getImageCenter = function() {
  return /** @type{?proto.apollo.perception.camera.omt.KalmanParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.omt.KalmanParam, 4));
};


/**
 * @param {?proto.apollo.perception.camera.omt.KalmanParam|undefined} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
*/
proto.apollo.perception.camera.omt.TargetParam.prototype.setImageCenter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearImageCenter = function() {
  return this.setImageCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasImageCenter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float image_wh_update_rate = 5;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getImageWhUpdateRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setImageWhUpdateRate = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearImageWhUpdateRate = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasImageWhUpdateRate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 world_lhw_history = 6;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getWorldLhwHistory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 15));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setWorldLhwHistory = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearWorldLhwHistory = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasWorldLhwHistory = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float height_diff_ratio = 7;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getHeightDiffRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setHeightDiffRatio = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearHeightDiffRatio = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasHeightDiffRatio = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 world_state_history = 8;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getWorldStateHistory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 30));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setWorldStateHistory = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearWorldStateHistory = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasWorldStateHistory = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 min_cached_world_state_history_size = 9;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getMinCachedWorldStateHistorySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setMinCachedWorldStateHistorySize = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearMinCachedWorldStateHistorySize = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasMinCachedWorldStateHistorySize = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 min_cached_velocity_size = 10;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getMinCachedVelocitySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setMinCachedVelocitySize = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearMinCachedVelocitySize = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasMinCachedVelocitySize = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 min_cached_position_size = 11;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getMinCachedPositionSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 25));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setMinCachedPositionSize = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearMinCachedPositionSize = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasMinCachedPositionSize = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 calc_avg_position_window_size = 12;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getCalcAvgPositionWindowSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 7));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setCalcAvgPositionWindowSize = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearCalcAvgPositionWindowSize = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasCalcAvgPositionWindowSize = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float static_speed_threshold = 13;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getStaticSpeedThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setStaticSpeedThreshold = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearStaticSpeedThreshold = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasStaticSpeedThreshold = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float static_speed_threshold_ped = 14;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getStaticSpeedThresholdPed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setStaticSpeedThresholdPed = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearStaticSpeedThresholdPed = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasStaticSpeedThresholdPed = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float min_moving_avg_speed = 15;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getMinMovingAvgSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setMinMovingAvgSpeed = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearMinMovingAvgSpeed = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasMinMovingAvgSpeed = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float min_moving_avg_speed_ped = 16;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getMinMovingAvgSpeedPed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setMinMovingAvgSpeedPed = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearMinMovingAvgSpeedPed = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasMinMovingAvgSpeedPed = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float abnormal_acc_threshold = 17;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getAbnormalAccThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 6.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setAbnormalAccThreshold = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearAbnormalAccThreshold = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasAbnormalAccThreshold = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional float abnormal_acc_threshold_ped = 18;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getAbnormalAccThresholdPed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setAbnormalAccThresholdPed = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearAbnormalAccThresholdPed = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasAbnormalAccThresholdPed = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional float abnormal_velocity_heading_angle_threshold = 19;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getAbnormalVelocityHeadingAngleThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.7854));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setAbnormalVelocityHeadingAngleThreshold = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearAbnormalVelocityHeadingAngleThreshold = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasAbnormalVelocityHeadingAngleThreshold = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool clapping_velocity = 20;
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getClappingVelocity = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setClappingVelocity = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearClappingVelocity = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasClappingVelocity = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int32 world_mean_velocity_duration = 21;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getWorldMeanVelocityDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setWorldMeanVelocityDuration = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearWorldMeanVelocityDuration = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasWorldMeanVelocityDuration = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int32 tracked_life = 22;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getTrackedLife = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setTrackedLife = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearTrackedLife = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasTrackedLife = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional float type_filter_var = 23;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getTypeFilterVar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setTypeFilterVar = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearTypeFilterVar = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasTypeFilterVar = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional float large_velocity_ratio = 24;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getLargeVelocityRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 2.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setLargeVelocityRatio = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearLargeVelocityRatio = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasLargeVelocityRatio = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional float too_large_velocity_ratio = 25;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getTooLargeVelocityRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setTooLargeVelocityRatio = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearTooLargeVelocityRatio = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasTooLargeVelocityRatio = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional int32 mean_filter_window = 26;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getMeanFilterWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setMeanFilterWindow = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearMeanFilterWindow = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasMeanFilterWindow = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional float direction_filter_ratio = 27;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getDirectionFilterRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.7));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setDirectionFilterRatio = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearDirectionFilterRatio = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasDirectionFilterRatio = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional float displacement_theta_var = 28;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getDisplacementThetaVar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.25));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setDisplacementThetaVar = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearDisplacementThetaVar = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasDisplacementThetaVar = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional float velocity_theta_var = 29;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getVelocityThetaVar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setVelocityThetaVar = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearVelocityThetaVar = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasVelocityThetaVar = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional float stable_moving_speed = 30;
 * @return {number}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.getStableMovingSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 30, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.setStableMovingSpeed = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.TargetParam} returns this
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.clearStableMovingSpeed = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.TargetParam.prototype.hasStableMovingSpeed = function() {
  return jspb.Message.getField(this, 30) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.omt.ReferenceParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.omt.ReferenceParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.ReferenceParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    margin: jspb.Message.getFieldWithDefault(msg, 1, 2),
    minAllowHeight: jspb.Message.getFieldWithDefault(msg, 2, 50),
    areaDecay: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.99),
    downSampling: jspb.Message.getFieldWithDefault(msg, 4, 40),
    heightDiffRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReferenceParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.omt.ReferenceParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.margin;

  /** @type {?|undefined} */
  this.minAllowHeight;

  /** @type {?|undefined} */
  this.areaDecay;

  /** @type {?|undefined} */
  this.downSampling;

  /** @type {?|undefined} */
  this.heightDiffRatio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.omt.ReferenceParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam}
 */
proto.apollo.perception.camera.omt.ReferenceParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.omt.ReferenceParam();
  obj.margin != null && jspb.Message.setField(msg, 1, obj.margin);
  obj.minAllowHeight != null && jspb.Message.setField(msg, 2, obj.minAllowHeight);
  obj.areaDecay != null && jspb.Message.setField(msg, 3, obj.areaDecay);
  obj.downSampling != null && jspb.Message.setField(msg, 4, obj.downSampling);
  obj.heightDiffRatio != null && jspb.Message.setField(msg, 5, obj.heightDiffRatio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam}
 */
proto.apollo.perception.camera.omt.ReferenceParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.omt.ReferenceParam;
  return proto.apollo.perception.camera.omt.ReferenceParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.omt.ReferenceParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam}
 */
proto.apollo.perception.camera.omt.ReferenceParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMargin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinAllowHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAreaDecay(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDownSampling(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeightDiffRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.omt.ReferenceParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.omt.ReferenceParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.ReferenceParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional int32 margin = 1;
 * @return {number}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.getMargin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.setMargin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.clearMargin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.hasMargin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 min_allow_height = 2;
 * @return {number}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.getMinAllowHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 50));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.setMinAllowHeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.clearMinAllowHeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.hasMinAllowHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float area_decay = 3;
 * @return {number}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.getAreaDecay = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.99));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.setAreaDecay = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.clearAreaDecay = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.hasAreaDecay = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 down_sampling = 4;
 * @return {number}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.getDownSampling = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 40));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.setDownSampling = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.clearDownSampling = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.hasDownSampling = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float height_diff_ratio = 5;
 * @return {number}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.getHeightDiffRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.setHeightDiffRatio = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.ReferenceParam} returns this
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.clearHeightDiffRatio = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.ReferenceParam.prototype.hasHeightDiffRatio = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.omt.WeightParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.omt.WeightParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.WeightParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    appearance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    motion: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    shape: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    tracklet: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    overlap: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of WeightParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.omt.WeightParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.appearance;

  /** @type {?|undefined} */
  this.motion;

  /** @type {?|undefined} */
  this.shape;

  /** @type {?|undefined} */
  this.tracklet;

  /** @type {?|undefined} */
  this.overlap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.omt.WeightParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.omt.WeightParam}
 */
proto.apollo.perception.camera.omt.WeightParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.omt.WeightParam();
  obj.appearance != null && jspb.Message.setField(msg, 1, obj.appearance);
  obj.motion != null && jspb.Message.setField(msg, 2, obj.motion);
  obj.shape != null && jspb.Message.setField(msg, 3, obj.shape);
  obj.tracklet != null && jspb.Message.setField(msg, 4, obj.tracklet);
  obj.overlap != null && jspb.Message.setField(msg, 5, obj.overlap);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.omt.WeightParam}
 */
proto.apollo.perception.camera.omt.WeightParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.omt.WeightParam;
  return proto.apollo.perception.camera.omt.WeightParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.omt.WeightParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.omt.WeightParam}
 */
proto.apollo.perception.camera.omt.WeightParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAppearance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMotion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShape(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTracklet(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOverlap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.omt.WeightParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.omt.WeightParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.WeightParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float appearance = 1;
 * @return {number}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.getAppearance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.setAppearance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.clearAppearance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.hasAppearance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float motion = 2;
 * @return {number}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.getMotion = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.setMotion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.clearMotion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.hasMotion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float shape = 3;
 * @return {number}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.getShape = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.setShape = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.clearShape = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.hasShape = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float tracklet = 4;
 * @return {number}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.getTracklet = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.setTracklet = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.clearTracklet = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.hasTracklet = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float overlap = 5;
 * @return {number}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.getOverlap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.setOverlap = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.WeightParam} returns this
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.clearOverlap = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.WeightParam.prototype.hasOverlap = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.omt.OmtParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.omt.OmtParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.OmtParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    imgCapability: jspb.Message.getFieldWithDefault(msg, 1, 7),
    lostAge: jspb.Message.getFieldWithDefault(msg, 2, 2),
    reserveAge: jspb.Message.getFieldWithDefault(msg, 3, 3),
    weightSameCamera: (f = msg.getWeightSameCamera()) && proto.apollo.perception.camera.omt.WeightParam.toObject(includeInstance, f),
    weightDiffCamera: (f = msg.getWeightDiffCamera()) && proto.apollo.perception.camera.omt.WeightParam.toObject(includeInstance, f),
    border: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 30.0),
    targetThresh: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.65),
    correctType: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    targetParam: (f = msg.getTargetParam()) && proto.apollo.perception.camera.omt.TargetParam.toObject(includeInstance, f),
    minInitHeightRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 17.0),
    targetCombineIouThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.5),
    fusionTargetThresh: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.45),
    imageDisplacement: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 50.0),
    abnormalMovement: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.3),
    sameTsEps: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.05),
    reference: (f = msg.getReference()) && proto.apollo.perception.camera.omt.ReferenceParam.toObject(includeInstance, f),
    typeChangeCost: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OmtParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.omt.OmtParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.imgCapability;

  /** @type {?|undefined} */
  this.lostAge;

  /** @type {?|undefined} */
  this.reserveAge;

  /** @type {?|undefined} */
  this.weightSameCamera;

  /** @type {?|undefined} */
  this.weightDiffCamera;

  /** @type {?|undefined} */
  this.border;

  /** @type {?|undefined} */
  this.targetThresh;

  /** @type {?|undefined} */
  this.correctType;

  /** @type {?|undefined} */
  this.targetParam;

  /** @type {?|undefined} */
  this.minInitHeightRatio;

  /** @type {?|undefined} */
  this.targetCombineIouThreshold;

  /** @type {?|undefined} */
  this.fusionTargetThresh;

  /** @type {?|undefined} */
  this.imageDisplacement;

  /** @type {?|undefined} */
  this.abnormalMovement;

  /** @type {?|undefined} */
  this.sameTsEps;

  /** @type {?|undefined} */
  this.reference;

  /** @type {?|undefined} */
  this.typeChangeCost;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.omt.OmtParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.omt.OmtParam}
 */
proto.apollo.perception.camera.omt.OmtParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.omt.OmtParam();
  obj.imgCapability != null && jspb.Message.setField(msg, 1, obj.imgCapability);
  obj.lostAge != null && jspb.Message.setField(msg, 2, obj.lostAge);
  obj.reserveAge != null && jspb.Message.setField(msg, 3, obj.reserveAge);
  obj.weightSameCamera && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.perception.camera.omt.WeightParam.fromObject(obj.weightSameCamera));
  obj.weightDiffCamera && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.perception.camera.omt.WeightParam.fromObject(obj.weightDiffCamera));
  obj.border != null && jspb.Message.setField(msg, 9, obj.border);
  obj.targetThresh != null && jspb.Message.setField(msg, 10, obj.targetThresh);
  obj.correctType != null && jspb.Message.setField(msg, 11, obj.correctType);
  obj.targetParam && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.perception.camera.omt.TargetParam.fromObject(obj.targetParam));
  obj.minInitHeightRatio != null && jspb.Message.setField(msg, 13, obj.minInitHeightRatio);
  obj.targetCombineIouThreshold != null && jspb.Message.setField(msg, 14, obj.targetCombineIouThreshold);
  obj.fusionTargetThresh != null && jspb.Message.setField(msg, 15, obj.fusionTargetThresh);
  obj.imageDisplacement != null && jspb.Message.setField(msg, 16, obj.imageDisplacement);
  obj.abnormalMovement != null && jspb.Message.setField(msg, 17, obj.abnormalMovement);
  obj.sameTsEps != null && jspb.Message.setField(msg, 18, obj.sameTsEps);
  obj.reference && jspb.Message.setWrapperField(
      msg, 19, proto.apollo.perception.camera.omt.ReferenceParam.fromObject(obj.reference));
  obj.typeChangeCost != null && jspb.Message.setField(msg, 20, obj.typeChangeCost);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.omt.OmtParam}
 */
proto.apollo.perception.camera.omt.OmtParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.omt.OmtParam;
  return proto.apollo.perception.camera.omt.OmtParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.omt.OmtParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.omt.OmtParam}
 */
proto.apollo.perception.camera.omt.OmtParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImgCapability(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLostAge(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReserveAge(value);
      break;
    case 4:
      var value = new proto.apollo.perception.camera.omt.WeightParam;
      reader.readMessage(value,proto.apollo.perception.camera.omt.WeightParam.deserializeBinaryFromReader);
      msg.setWeightSameCamera(value);
      break;
    case 5:
      var value = new proto.apollo.perception.camera.omt.WeightParam;
      reader.readMessage(value,proto.apollo.perception.camera.omt.WeightParam.deserializeBinaryFromReader);
      msg.setWeightDiffCamera(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBorder(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetThresh(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCorrectType(value);
      break;
    case 12:
      var value = new proto.apollo.perception.camera.omt.TargetParam;
      reader.readMessage(value,proto.apollo.perception.camera.omt.TargetParam.deserializeBinaryFromReader);
      msg.setTargetParam(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinInitHeightRatio(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetCombineIouThreshold(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFusionTargetThresh(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setImageDisplacement(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAbnormalMovement(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSameTsEps(value);
      break;
    case 19:
      var value = new proto.apollo.perception.camera.omt.ReferenceParam;
      reader.readMessage(value,proto.apollo.perception.camera.omt.ReferenceParam.deserializeBinaryFromReader);
      msg.setReference(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeChangeCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.omt.OmtParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.omt.OmtParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.omt.OmtParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWeightSameCamera();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.perception.camera.omt.WeightParam.serializeBinaryToWriter
    );
  }
  f = message.getWeightDiffCamera();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.perception.camera.omt.WeightParam.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getTargetParam();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.perception.camera.omt.TargetParam.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getReference();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.apollo.perception.camera.omt.ReferenceParam.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional int32 img_capability = 1;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getImgCapability = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 7));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setImgCapability = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearImgCapability = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasImgCapability = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 lost_age = 2;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getLostAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setLostAge = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearLostAge = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasLostAge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 reserve_age = 3;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getReserveAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setReserveAge = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearReserveAge = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasReserveAge = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WeightParam weight_same_camera = 4;
 * @return {?proto.apollo.perception.camera.omt.WeightParam}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getWeightSameCamera = function() {
  return /** @type{?proto.apollo.perception.camera.omt.WeightParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.omt.WeightParam, 4));
};


/**
 * @param {?proto.apollo.perception.camera.omt.WeightParam|undefined} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
*/
proto.apollo.perception.camera.omt.OmtParam.prototype.setWeightSameCamera = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearWeightSameCamera = function() {
  return this.setWeightSameCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasWeightSameCamera = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional WeightParam weight_diff_camera = 5;
 * @return {?proto.apollo.perception.camera.omt.WeightParam}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getWeightDiffCamera = function() {
  return /** @type{?proto.apollo.perception.camera.omt.WeightParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.omt.WeightParam, 5));
};


/**
 * @param {?proto.apollo.perception.camera.omt.WeightParam|undefined} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
*/
proto.apollo.perception.camera.omt.OmtParam.prototype.setWeightDiffCamera = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearWeightDiffCamera = function() {
  return this.setWeightDiffCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasWeightDiffCamera = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float border = 9;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getBorder = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 30.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setBorder = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearBorder = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasBorder = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float target_thresh = 10;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getTargetThresh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.65));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setTargetThresh = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearTargetThresh = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasTargetThresh = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool correct_type = 11;
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getCorrectType = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setCorrectType = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearCorrectType = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasCorrectType = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional TargetParam target_param = 12;
 * @return {?proto.apollo.perception.camera.omt.TargetParam}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getTargetParam = function() {
  return /** @type{?proto.apollo.perception.camera.omt.TargetParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.omt.TargetParam, 12));
};


/**
 * @param {?proto.apollo.perception.camera.omt.TargetParam|undefined} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
*/
proto.apollo.perception.camera.omt.OmtParam.prototype.setTargetParam = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearTargetParam = function() {
  return this.setTargetParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasTargetParam = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float min_init_height_ratio = 13;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getMinInitHeightRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 17.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setMinInitHeightRatio = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearMinInitHeightRatio = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasMinInitHeightRatio = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float target_combine_iou_threshold = 14;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getTargetCombineIouThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setTargetCombineIouThreshold = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearTargetCombineIouThreshold = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasTargetCombineIouThreshold = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float fusion_target_thresh = 15;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getFusionTargetThresh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.45));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setFusionTargetThresh = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearFusionTargetThresh = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasFusionTargetThresh = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float image_displacement = 16;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getImageDisplacement = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 50.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setImageDisplacement = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearImageDisplacement = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasImageDisplacement = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float abnormal_movement = 17;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getAbnormalMovement = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setAbnormalMovement = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearAbnormalMovement = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasAbnormalMovement = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double same_ts_eps = 18;
 * @return {number}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getSameTsEps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setSameTsEps = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearSameTsEps = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasSameTsEps = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ReferenceParam reference = 19;
 * @return {?proto.apollo.perception.camera.omt.ReferenceParam}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getReference = function() {
  return /** @type{?proto.apollo.perception.camera.omt.ReferenceParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.omt.ReferenceParam, 19));
};


/**
 * @param {?proto.apollo.perception.camera.omt.ReferenceParam|undefined} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
*/
proto.apollo.perception.camera.omt.OmtParam.prototype.setReference = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearReference = function() {
  return this.setReference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasReference = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string type_change_cost = 20;
 * @return {string}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.getTypeChangeCost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.setTypeChangeCost = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.omt.OmtParam} returns this
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.clearTypeChangeCost = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.omt.OmtParam.prototype.hasTypeChangeCost = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.apollo.perception.camera.omt);
