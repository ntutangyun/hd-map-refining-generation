// source: modules/v2x/proto/v2x_obstacles.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_error_code_pb = require('../../../modules/common/proto/error_code_pb.js');
goog.object.extend(proto, modules_common_proto_error_code_pb);
var modules_perception_proto_perception_obstacle_pb = require('../../../modules/perception/proto/perception_obstacle_pb.js');
goog.object.extend(proto, modules_perception_proto_perception_obstacle_pb);
goog.exportSymbol('proto.apollo.v2x.AbnormalInformation', null, global);
goog.exportSymbol('proto.apollo.v2x.MiniAreaMap', null, global);
goog.exportSymbol('proto.apollo.v2x.Point', null, global);
goog.exportSymbol('proto.apollo.v2x.V2XInformation', null, global);
goog.exportSymbol('proto.apollo.v2x.V2XInformation.V2XType', null, global);
goog.exportSymbol('proto.apollo.v2x.V2XObstacle', null, global);
goog.exportSymbol('proto.apollo.v2x.V2XObstacles', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Point.displayName = 'proto.apollo.v2x.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.MiniAreaMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.MiniAreaMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.MiniAreaMap.displayName = 'proto.apollo.v2x.MiniAreaMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.AbnormalInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.AbnormalInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.AbnormalInformation.displayName = 'proto.apollo.v2x.AbnormalInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.V2XInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.V2XInformation.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.V2XInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.V2XInformation.displayName = 'proto.apollo.v2x.V2XInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.V2XObstacle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.V2XObstacle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.V2XObstacle.displayName = 'proto.apollo.v2x.V2XObstacle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.V2XObstacles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.V2XObstacles.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.V2XObstacles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.V2XObstacles.displayName = 'proto.apollo.v2x.V2XObstacles';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Point as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Point.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Point.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Point}
 */
proto.apollo.v2x.Point.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Point();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Point}
 */
proto.apollo.v2x.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Point;
  return proto.apollo.v2x.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Point}
 */
proto.apollo.v2x.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.apollo.v2x.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Point} returns this
 */
proto.apollo.v2x.Point.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Point} returns this
 */
proto.apollo.v2x.Point.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Point.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.apollo.v2x.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Point} returns this
 */
proto.apollo.v2x.Point.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Point} returns this
 */
proto.apollo.v2x.Point.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Point.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.apollo.v2x.Point.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Point} returns this
 */
proto.apollo.v2x.Point.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Point} returns this
 */
proto.apollo.v2x.Point.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Point.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.MiniAreaMap.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.MiniAreaMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.MiniAreaMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.MiniAreaMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    rscuId: msg.getRscuId_asB64(),
    featurePosition: (f = msg.getFeaturePosition()) && proto.apollo.v2x.Point.toObject(includeInstance, f),
    startPosition: (f = msg.getStartPosition()) && proto.apollo.v2x.Point.toObject(includeInstance, f),
    endPosition: (f = msg.getEndPosition()) && proto.apollo.v2x.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MiniAreaMap as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.MiniAreaMap.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.rscuId;

  /** @type {?|undefined} */
  this.featurePosition;

  /** @type {?|undefined} */
  this.startPosition;

  /** @type {?|undefined} */
  this.endPosition;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.MiniAreaMap.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.MiniAreaMap}
 */
proto.apollo.v2x.MiniAreaMap.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.MiniAreaMap();
  obj.rscuId != null && jspb.Message.setField(msg, 1, obj.rscuId);
  obj.featurePosition && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.v2x.Point.fromObject(obj.featurePosition));
  obj.startPosition && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.v2x.Point.fromObject(obj.startPosition));
  obj.endPosition && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.v2x.Point.fromObject(obj.endPosition));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.MiniAreaMap}
 */
proto.apollo.v2x.MiniAreaMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.MiniAreaMap;
  return proto.apollo.v2x.MiniAreaMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.MiniAreaMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.MiniAreaMap}
 */
proto.apollo.v2x.MiniAreaMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRscuId(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.Point;
      reader.readMessage(value,proto.apollo.v2x.Point.deserializeBinaryFromReader);
      msg.setFeaturePosition(value);
      break;
    case 3:
      var value = new proto.apollo.v2x.Point;
      reader.readMessage(value,proto.apollo.v2x.Point.deserializeBinaryFromReader);
      msg.setStartPosition(value);
      break;
    case 4:
      var value = new proto.apollo.v2x.Point;
      reader.readMessage(value,proto.apollo.v2x.Point.deserializeBinaryFromReader);
      msg.setEndPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.MiniAreaMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.MiniAreaMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.MiniAreaMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.MiniAreaMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFeaturePosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.v2x.Point.serializeBinaryToWriter
    );
  }
  f = message.getStartPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.v2x.Point.serializeBinaryToWriter
    );
  }
  f = message.getEndPosition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.v2x.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes rscu_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.v2x.MiniAreaMap.prototype.getRscuId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes rscu_id = 1;
 * This is a type-conversion wrapper around `getRscuId()`
 * @return {string}
 */
proto.apollo.v2x.MiniAreaMap.prototype.getRscuId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRscuId()));
};


/**
 * optional bytes rscu_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRscuId()`
 * @return {!Uint8Array}
 */
proto.apollo.v2x.MiniAreaMap.prototype.getRscuId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRscuId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
 */
proto.apollo.v2x.MiniAreaMap.prototype.setRscuId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
 */
proto.apollo.v2x.MiniAreaMap.prototype.clearRscuId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.MiniAreaMap.prototype.hasRscuId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point feature_position = 2;
 * @return {?proto.apollo.v2x.Point}
 */
proto.apollo.v2x.MiniAreaMap.prototype.getFeaturePosition = function() {
  return /** @type{?proto.apollo.v2x.Point} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Point, 2));
};


/**
 * @param {?proto.apollo.v2x.Point|undefined} value
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
*/
proto.apollo.v2x.MiniAreaMap.prototype.setFeaturePosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
 */
proto.apollo.v2x.MiniAreaMap.prototype.clearFeaturePosition = function() {
  return this.setFeaturePosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.MiniAreaMap.prototype.hasFeaturePosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point start_position = 3;
 * @return {?proto.apollo.v2x.Point}
 */
proto.apollo.v2x.MiniAreaMap.prototype.getStartPosition = function() {
  return /** @type{?proto.apollo.v2x.Point} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Point, 3));
};


/**
 * @param {?proto.apollo.v2x.Point|undefined} value
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
*/
proto.apollo.v2x.MiniAreaMap.prototype.setStartPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
 */
proto.apollo.v2x.MiniAreaMap.prototype.clearStartPosition = function() {
  return this.setStartPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.MiniAreaMap.prototype.hasStartPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Point end_position = 4;
 * @return {?proto.apollo.v2x.Point}
 */
proto.apollo.v2x.MiniAreaMap.prototype.getEndPosition = function() {
  return /** @type{?proto.apollo.v2x.Point} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Point, 4));
};


/**
 * @param {?proto.apollo.v2x.Point|undefined} value
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
*/
proto.apollo.v2x.MiniAreaMap.prototype.setEndPosition = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.MiniAreaMap} returns this
 */
proto.apollo.v2x.MiniAreaMap.prototype.clearEndPosition = function() {
  return this.setEndPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.MiniAreaMap.prototype.hasEndPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.AbnormalInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.AbnormalInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.AbnormalInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.AbnormalInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    averageSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    vehicleDensity: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AbnormalInformation as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.AbnormalInformation.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.averageSpeed;

  /** @type {?|undefined} */
  this.vehicleDensity;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.AbnormalInformation.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.AbnormalInformation}
 */
proto.apollo.v2x.AbnormalInformation.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.AbnormalInformation();
  obj.averageSpeed != null && jspb.Message.setField(msg, 1, obj.averageSpeed);
  obj.vehicleDensity != null && jspb.Message.setField(msg, 2, obj.vehicleDensity);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.AbnormalInformation}
 */
proto.apollo.v2x.AbnormalInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.AbnormalInformation;
  return proto.apollo.v2x.AbnormalInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.AbnormalInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.AbnormalInformation}
 */
proto.apollo.v2x.AbnormalInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAverageSpeed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVehicleDensity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.AbnormalInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.AbnormalInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.AbnormalInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.AbnormalInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double average_speed = 1;
 * @return {number}
 */
proto.apollo.v2x.AbnormalInformation.prototype.getAverageSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.AbnormalInformation} returns this
 */
proto.apollo.v2x.AbnormalInformation.prototype.setAverageSpeed = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.AbnormalInformation} returns this
 */
proto.apollo.v2x.AbnormalInformation.prototype.clearAverageSpeed = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.AbnormalInformation.prototype.hasAverageSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double vehicle_density = 2;
 * @return {number}
 */
proto.apollo.v2x.AbnormalInformation.prototype.getVehicleDensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.AbnormalInformation} returns this
 */
proto.apollo.v2x.AbnormalInformation.prototype.setVehicleDensity = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.AbnormalInformation} returns this
 */
proto.apollo.v2x.AbnormalInformation.prototype.clearVehicleDensity = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.AbnormalInformation.prototype.hasVehicleDensity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.V2XInformation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.V2XInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.V2XInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.V2XInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.V2XInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    v2xTypeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    trafficEventStart: (f = msg.getTrafficEventStart()) && proto.apollo.v2x.Point.toObject(includeInstance, f),
    trafficEventStartError: (f = msg.getTrafficEventStartError()) && proto.apollo.v2x.Point.toObject(includeInstance, f),
    trafficEventEnd: (f = msg.getTrafficEventEnd()) && proto.apollo.v2x.Point.toObject(includeInstance, f),
    trafficEventEndError: (f = msg.getTrafficEventEndError()) && proto.apollo.v2x.Point.toObject(includeInstance, f),
    abnormalInfo: (f = msg.getAbnormalInfo()) && proto.apollo.v2x.AbnormalInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of V2XInformation as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.V2XInformation.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.v2xTypeList;

  /** @type {?|undefined} */
  this.trafficEventStart;

  /** @type {?|undefined} */
  this.trafficEventStartError;

  /** @type {?|undefined} */
  this.trafficEventEnd;

  /** @type {?|undefined} */
  this.trafficEventEndError;

  /** @type {?|undefined} */
  this.abnormalInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.V2XInformation.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.V2XInformation}
 */
proto.apollo.v2x.V2XInformation.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.V2XInformation();
  obj.v2xTypeList != null && jspb.Message.setField(msg, 1, obj.v2xTypeList);
  obj.trafficEventStart && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.v2x.Point.fromObject(obj.trafficEventStart));
  obj.trafficEventStartError && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.v2x.Point.fromObject(obj.trafficEventStartError));
  obj.trafficEventEnd && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.v2x.Point.fromObject(obj.trafficEventEnd));
  obj.trafficEventEndError && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.v2x.Point.fromObject(obj.trafficEventEndError));
  obj.abnormalInfo && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.v2x.AbnormalInformation.fromObject(obj.abnormalInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.V2XInformation}
 */
proto.apollo.v2x.V2XInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.V2XInformation;
  return proto.apollo.v2x.V2XInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.V2XInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.V2XInformation}
 */
proto.apollo.v2x.V2XInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.apollo.v2x.V2XInformation.V2XType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addV2xType(values[i]);
      }
      break;
    case 3:
      var value = new proto.apollo.v2x.Point;
      reader.readMessage(value,proto.apollo.v2x.Point.deserializeBinaryFromReader);
      msg.setTrafficEventStart(value);
      break;
    case 4:
      var value = new proto.apollo.v2x.Point;
      reader.readMessage(value,proto.apollo.v2x.Point.deserializeBinaryFromReader);
      msg.setTrafficEventStartError(value);
      break;
    case 5:
      var value = new proto.apollo.v2x.Point;
      reader.readMessage(value,proto.apollo.v2x.Point.deserializeBinaryFromReader);
      msg.setTrafficEventEnd(value);
      break;
    case 6:
      var value = new proto.apollo.v2x.Point;
      reader.readMessage(value,proto.apollo.v2x.Point.deserializeBinaryFromReader);
      msg.setTrafficEventEndError(value);
      break;
    case 7:
      var value = new proto.apollo.v2x.AbnormalInformation;
      reader.readMessage(value,proto.apollo.v2x.AbnormalInformation.deserializeBinaryFromReader);
      msg.setAbnormalInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.V2XInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.V2XInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.V2XInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.V2XInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV2xTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1,
      f
    );
  }
  f = message.getTrafficEventStart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.v2x.Point.serializeBinaryToWriter
    );
  }
  f = message.getTrafficEventStartError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.v2x.Point.serializeBinaryToWriter
    );
  }
  f = message.getTrafficEventEnd();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.v2x.Point.serializeBinaryToWriter
    );
  }
  f = message.getTrafficEventEndError();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.v2x.Point.serializeBinaryToWriter
    );
  }
  f = message.getAbnormalInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.v2x.AbnormalInformation.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.v2x.V2XInformation.V2XType = {
  NONE: 0,
  ZOMBIES_CAR: 1,
  BLIND_ZONE: 2
};

/**
 * repeated V2XType v2x_type = 1;
 * @return {!Array<!proto.apollo.v2x.V2XInformation.V2XType>}
 */
proto.apollo.v2x.V2XInformation.prototype.getV2xTypeList = function() {
  return /** @type {!Array<!proto.apollo.v2x.V2XInformation.V2XType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.apollo.v2x.V2XInformation.V2XType>} value
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.setV2xTypeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.apollo.v2x.V2XInformation.V2XType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.addV2xType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.clearV2xTypeList = function() {
  return this.setV2xTypeList([]);
};


/**
 * optional Point traffic_event_start = 3;
 * @return {?proto.apollo.v2x.Point}
 */
proto.apollo.v2x.V2XInformation.prototype.getTrafficEventStart = function() {
  return /** @type{?proto.apollo.v2x.Point} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Point, 3));
};


/**
 * @param {?proto.apollo.v2x.Point|undefined} value
 * @return {!proto.apollo.v2x.V2XInformation} returns this
*/
proto.apollo.v2x.V2XInformation.prototype.setTrafficEventStart = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.clearTrafficEventStart = function() {
  return this.setTrafficEventStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XInformation.prototype.hasTrafficEventStart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Point traffic_event_start_error = 4;
 * @return {?proto.apollo.v2x.Point}
 */
proto.apollo.v2x.V2XInformation.prototype.getTrafficEventStartError = function() {
  return /** @type{?proto.apollo.v2x.Point} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Point, 4));
};


/**
 * @param {?proto.apollo.v2x.Point|undefined} value
 * @return {!proto.apollo.v2x.V2XInformation} returns this
*/
proto.apollo.v2x.V2XInformation.prototype.setTrafficEventStartError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.clearTrafficEventStartError = function() {
  return this.setTrafficEventStartError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XInformation.prototype.hasTrafficEventStartError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Point traffic_event_end = 5;
 * @return {?proto.apollo.v2x.Point}
 */
proto.apollo.v2x.V2XInformation.prototype.getTrafficEventEnd = function() {
  return /** @type{?proto.apollo.v2x.Point} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Point, 5));
};


/**
 * @param {?proto.apollo.v2x.Point|undefined} value
 * @return {!proto.apollo.v2x.V2XInformation} returns this
*/
proto.apollo.v2x.V2XInformation.prototype.setTrafficEventEnd = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.clearTrafficEventEnd = function() {
  return this.setTrafficEventEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XInformation.prototype.hasTrafficEventEnd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Point traffic_event_end_error = 6;
 * @return {?proto.apollo.v2x.Point}
 */
proto.apollo.v2x.V2XInformation.prototype.getTrafficEventEndError = function() {
  return /** @type{?proto.apollo.v2x.Point} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Point, 6));
};


/**
 * @param {?proto.apollo.v2x.Point|undefined} value
 * @return {!proto.apollo.v2x.V2XInformation} returns this
*/
proto.apollo.v2x.V2XInformation.prototype.setTrafficEventEndError = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.clearTrafficEventEndError = function() {
  return this.setTrafficEventEndError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XInformation.prototype.hasTrafficEventEndError = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional AbnormalInformation abnormal_info = 7;
 * @return {?proto.apollo.v2x.AbnormalInformation}
 */
proto.apollo.v2x.V2XInformation.prototype.getAbnormalInfo = function() {
  return /** @type{?proto.apollo.v2x.AbnormalInformation} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.AbnormalInformation, 7));
};


/**
 * @param {?proto.apollo.v2x.AbnormalInformation|undefined} value
 * @return {!proto.apollo.v2x.V2XInformation} returns this
*/
proto.apollo.v2x.V2XInformation.prototype.setAbnormalInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XInformation} returns this
 */
proto.apollo.v2x.V2XInformation.prototype.clearAbnormalInfo = function() {
  return this.setAbnormalInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XInformation.prototype.hasAbnormalInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.V2XObstacle.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.V2XObstacle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.V2XObstacle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.V2XObstacle.toObject = function(includeInstance, msg) {
  var f, obj = {
    perceptionObstacle: (f = msg.getPerceptionObstacle()) && modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.toObject(includeInstance, f),
    v2xInfo: (f = msg.getV2xInfo()) && proto.apollo.v2x.V2XInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of V2XObstacle as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.V2XObstacle.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.perceptionObstacle;

  /** @type {?|undefined} */
  this.v2xInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.V2XObstacle.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.V2XObstacle}
 */
proto.apollo.v2x.V2XObstacle.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.V2XObstacle();
  obj.perceptionObstacle && jspb.Message.setWrapperField(
      msg, 1, modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.fromObject(obj.perceptionObstacle));
  obj.v2xInfo && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.v2x.V2XInformation.fromObject(obj.v2xInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.V2XObstacle}
 */
proto.apollo.v2x.V2XObstacle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.V2XObstacle;
  return proto.apollo.v2x.V2XObstacle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.V2XObstacle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.V2XObstacle}
 */
proto.apollo.v2x.V2XObstacle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_perception_proto_perception_obstacle_pb.PerceptionObstacle;
      reader.readMessage(value,modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.deserializeBinaryFromReader);
      msg.setPerceptionObstacle(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.V2XInformation;
      reader.readMessage(value,proto.apollo.v2x.V2XInformation.deserializeBinaryFromReader);
      msg.setV2xInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.V2XObstacle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.V2XObstacle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.V2XObstacle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.V2XObstacle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPerceptionObstacle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_perception_proto_perception_obstacle_pb.PerceptionObstacle.serializeBinaryToWriter
    );
  }
  f = message.getV2xInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.v2x.V2XInformation.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.perception.PerceptionObstacle perception_obstacle = 1;
 * @return {?proto.apollo.perception.PerceptionObstacle}
 */
proto.apollo.v2x.V2XObstacle.prototype.getPerceptionObstacle = function() {
  return /** @type{?proto.apollo.perception.PerceptionObstacle} */ (
    jspb.Message.getWrapperField(this, modules_perception_proto_perception_obstacle_pb.PerceptionObstacle, 1));
};


/**
 * @param {?proto.apollo.perception.PerceptionObstacle|undefined} value
 * @return {!proto.apollo.v2x.V2XObstacle} returns this
*/
proto.apollo.v2x.V2XObstacle.prototype.setPerceptionObstacle = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XObstacle} returns this
 */
proto.apollo.v2x.V2XObstacle.prototype.clearPerceptionObstacle = function() {
  return this.setPerceptionObstacle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XObstacle.prototype.hasPerceptionObstacle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional V2XInformation v2x_info = 2;
 * @return {?proto.apollo.v2x.V2XInformation}
 */
proto.apollo.v2x.V2XObstacle.prototype.getV2xInfo = function() {
  return /** @type{?proto.apollo.v2x.V2XInformation} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.V2XInformation, 2));
};


/**
 * @param {?proto.apollo.v2x.V2XInformation|undefined} value
 * @return {!proto.apollo.v2x.V2XObstacle} returns this
*/
proto.apollo.v2x.V2XObstacle.prototype.setV2xInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XObstacle} returns this
 */
proto.apollo.v2x.V2XObstacle.prototype.clearV2xInfo = function() {
  return this.setV2xInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XObstacle.prototype.hasV2xInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.V2XObstacles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.V2XObstacles.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.V2XObstacles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.V2XObstacles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.V2XObstacles.toObject = function(includeInstance, msg) {
  var f, obj = {
    v2xObstacleList: jspb.Message.toObjectList(msg.getV2xObstacleList(),
    proto.apollo.v2x.V2XObstacle.toObject, includeInstance),
    areaMap: (f = msg.getAreaMap()) && proto.apollo.v2x.MiniAreaMap.toObject(includeInstance, f),
    trafficFlow: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    errorCode: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of V2XObstacles as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.V2XObstacles.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.v2xObstacleList;

  /** @type {?|undefined} */
  this.areaMap;

  /** @type {?|undefined} */
  this.trafficFlow;

  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.errorCode;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.V2XObstacles.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.V2XObstacles}
 */
proto.apollo.v2x.V2XObstacles.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.V2XObstacles();
  obj.v2xObstacleList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.v2xObstacleList.map(
          proto.apollo.v2x.V2XObstacle.fromObject));
  obj.areaMap && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.v2x.MiniAreaMap.fromObject(obj.areaMap));
  obj.trafficFlow != null && jspb.Message.setField(msg, 3, obj.trafficFlow);
  obj.header && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.errorCode != null && jspb.Message.setField(msg, 5, obj.errorCode);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.V2XObstacles}
 */
proto.apollo.v2x.V2XObstacles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.V2XObstacles;
  return proto.apollo.v2x.V2XObstacles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.V2XObstacles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.V2XObstacles}
 */
proto.apollo.v2x.V2XObstacles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.v2x.V2XObstacle;
      reader.readMessage(value,proto.apollo.v2x.V2XObstacle.deserializeBinaryFromReader);
      msg.addV2xObstacle(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.MiniAreaMap;
      reader.readMessage(value,proto.apollo.v2x.MiniAreaMap.deserializeBinaryFromReader);
      msg.setAreaMap(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrafficFlow(value);
      break;
    case 4:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.common.ErrorCode} */ (reader.readEnum());
      msg.setErrorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.V2XObstacles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.V2XObstacles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.V2XObstacles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.V2XObstacles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV2xObstacleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.v2x.V2XObstacle.serializeBinaryToWriter
    );
  }
  f = message.getAreaMap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.v2x.MiniAreaMap.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.common.ErrorCode} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * repeated V2XObstacle v2x_obstacle = 1;
 * @return {!Array<!proto.apollo.v2x.V2XObstacle>}
 */
proto.apollo.v2x.V2XObstacles.prototype.getV2xObstacleList = function() {
  return /** @type{!Array<!proto.apollo.v2x.V2XObstacle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.V2XObstacle, 1));
};


/**
 * @param {!Array<!proto.apollo.v2x.V2XObstacle>} value
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
*/
proto.apollo.v2x.V2XObstacles.prototype.setV2xObstacleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.v2x.V2XObstacle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.V2XObstacle}
 */
proto.apollo.v2x.V2XObstacles.prototype.addV2xObstacle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.v2x.V2XObstacle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
 */
proto.apollo.v2x.V2XObstacles.prototype.clearV2xObstacleList = function() {
  return this.setV2xObstacleList([]);
};


/**
 * optional MiniAreaMap area_map = 2;
 * @return {?proto.apollo.v2x.MiniAreaMap}
 */
proto.apollo.v2x.V2XObstacles.prototype.getAreaMap = function() {
  return /** @type{?proto.apollo.v2x.MiniAreaMap} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.MiniAreaMap, 2));
};


/**
 * @param {?proto.apollo.v2x.MiniAreaMap|undefined} value
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
*/
proto.apollo.v2x.V2XObstacles.prototype.setAreaMap = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
 */
proto.apollo.v2x.V2XObstacles.prototype.clearAreaMap = function() {
  return this.setAreaMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XObstacles.prototype.hasAreaMap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double traffic_flow = 3;
 * @return {number}
 */
proto.apollo.v2x.V2XObstacles.prototype.getTrafficFlow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
 */
proto.apollo.v2x.V2XObstacles.prototype.setTrafficFlow = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
 */
proto.apollo.v2x.V2XObstacles.prototype.clearTrafficFlow = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XObstacles.prototype.hasTrafficFlow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.common.Header header = 4;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.v2x.V2XObstacles.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 4));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
*/
proto.apollo.v2x.V2XObstacles.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
 */
proto.apollo.v2x.V2XObstacles.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XObstacles.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.common.ErrorCode error_code = 5;
 * @return {!proto.apollo.common.ErrorCode}
 */
proto.apollo.v2x.V2XObstacles.prototype.getErrorCode = function() {
  return /** @type {!proto.apollo.common.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.apollo.common.ErrorCode} value
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
 */
proto.apollo.v2x.V2XObstacles.prototype.setErrorCode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.V2XObstacles} returns this
 */
proto.apollo.v2x.V2XObstacles.prototype.clearErrorCode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.V2XObstacles.prototype.hasErrorCode = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.apollo.v2x);
