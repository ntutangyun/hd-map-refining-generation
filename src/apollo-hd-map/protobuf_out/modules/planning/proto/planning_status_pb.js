// source: modules/planning/proto/planning_status.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_planning_proto_planning_config_pb = require('../../../modules/planning/proto/planning_config_pb.js');
goog.object.extend(proto, modules_planning_proto_planning_config_pb);
var modules_routing_proto_routing_pb = require('../../../modules/routing/proto/routing_pb.js');
goog.object.extend(proto, modules_routing_proto_routing_pb);
goog.exportSymbol('proto.apollo.planning.BareIntersectionStatus', null, global);
goog.exportSymbol('proto.apollo.planning.ChangeLaneStatus', null, global);
goog.exportSymbol('proto.apollo.planning.ChangeLaneStatus.Status', null, global);
goog.exportSymbol('proto.apollo.planning.CreepDeciderStatus', null, global);
goog.exportSymbol('proto.apollo.planning.CrosswalkStatus', null, global);
goog.exportSymbol('proto.apollo.planning.DestinationStatus', null, global);
goog.exportSymbol('proto.apollo.planning.EmergencyStopStatus', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpaceStatus', null, global);
goog.exportSymbol('proto.apollo.planning.ParkAndGoStatus', null, global);
goog.exportSymbol('proto.apollo.planning.PathDeciderStatus', null, global);
goog.exportSymbol('proto.apollo.planning.PathDeciderStatus.LaneBorrowDirection', null, global);
goog.exportSymbol('proto.apollo.planning.PlanningStatus', null, global);
goog.exportSymbol('proto.apollo.planning.PullOverStatus', null, global);
goog.exportSymbol('proto.apollo.planning.PullOverStatus.PullOverType', null, global);
goog.exportSymbol('proto.apollo.planning.ReroutingStatus', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioStatus', null, global);
goog.exportSymbol('proto.apollo.planning.SpeedDeciderStatus', null, global);
goog.exportSymbol('proto.apollo.planning.StopSignStatus', null, global);
goog.exportSymbol('proto.apollo.planning.StopTime', null, global);
goog.exportSymbol('proto.apollo.planning.TrafficLightStatus', null, global);
goog.exportSymbol('proto.apollo.planning.YieldSignStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.BareIntersectionStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.BareIntersectionStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.BareIntersectionStatus.displayName = 'proto.apollo.planning.BareIntersectionStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ChangeLaneStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ChangeLaneStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ChangeLaneStatus.displayName = 'proto.apollo.planning.ChangeLaneStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.CreepDeciderStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.CreepDeciderStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.CreepDeciderStatus.displayName = 'proto.apollo.planning.CreepDeciderStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.StopTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.StopTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.StopTime.displayName = 'proto.apollo.planning.StopTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.CrosswalkStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.CrosswalkStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.CrosswalkStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.CrosswalkStatus.displayName = 'proto.apollo.planning.CrosswalkStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DestinationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DestinationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DestinationStatus.displayName = 'proto.apollo.planning.DestinationStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.EmergencyStopStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.EmergencyStopStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.EmergencyStopStatus.displayName = 'proto.apollo.planning.EmergencyStopStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OpenSpaceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.OpenSpaceStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.OpenSpaceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OpenSpaceStatus.displayName = 'proto.apollo.planning.OpenSpaceStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ParkAndGoStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ParkAndGoStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ParkAndGoStatus.displayName = 'proto.apollo.planning.ParkAndGoStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PathDeciderStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.PathDeciderStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.PathDeciderStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PathDeciderStatus.displayName = 'proto.apollo.planning.PathDeciderStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PullOverStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PullOverStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PullOverStatus.displayName = 'proto.apollo.planning.PullOverStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ReroutingStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ReroutingStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ReroutingStatus.displayName = 'proto.apollo.planning.ReroutingStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.SpeedDeciderStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.SpeedDeciderStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.SpeedDeciderStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.SpeedDeciderStatus.displayName = 'proto.apollo.planning.SpeedDeciderStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioStatus.displayName = 'proto.apollo.planning.ScenarioStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.StopSignStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.StopSignStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.StopSignStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.StopSignStatus.displayName = 'proto.apollo.planning.StopSignStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TrafficLightStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.TrafficLightStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.TrafficLightStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TrafficLightStatus.displayName = 'proto.apollo.planning.TrafficLightStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.YieldSignStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.YieldSignStatus.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.YieldSignStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.YieldSignStatus.displayName = 'proto.apollo.planning.YieldSignStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlanningStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PlanningStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlanningStatus.displayName = 'proto.apollo.planning.PlanningStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.BareIntersectionStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.BareIntersectionStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.BareIntersectionStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentPncJunctionOverlapId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    donePncJunctionOverlapId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    clearCounter: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of BareIntersectionStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.BareIntersectionStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.currentPncJunctionOverlapId;

  /** @type {?|undefined} */
  this.donePncJunctionOverlapId;

  /** @type {?|undefined} */
  this.clearCounter;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.BareIntersectionStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.BareIntersectionStatus}
 */
proto.apollo.planning.BareIntersectionStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.BareIntersectionStatus();
  obj.currentPncJunctionOverlapId != null && jspb.Message.setField(msg, 1, obj.currentPncJunctionOverlapId);
  obj.donePncJunctionOverlapId != null && jspb.Message.setField(msg, 2, obj.donePncJunctionOverlapId);
  obj.clearCounter != null && jspb.Message.setField(msg, 3, obj.clearCounter);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.BareIntersectionStatus}
 */
proto.apollo.planning.BareIntersectionStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.BareIntersectionStatus;
  return proto.apollo.planning.BareIntersectionStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.BareIntersectionStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.BareIntersectionStatus}
 */
proto.apollo.planning.BareIntersectionStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentPncJunctionOverlapId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDonePncJunctionOverlapId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClearCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.BareIntersectionStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.BareIntersectionStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.BareIntersectionStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string current_pnc_junction_overlap_id = 1;
 * @return {string}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.getCurrentPncJunctionOverlapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.BareIntersectionStatus} returns this
 */
proto.apollo.planning.BareIntersectionStatus.prototype.setCurrentPncJunctionOverlapId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.BareIntersectionStatus} returns this
 */
proto.apollo.planning.BareIntersectionStatus.prototype.clearCurrentPncJunctionOverlapId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.hasCurrentPncJunctionOverlapId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string done_pnc_junction_overlap_id = 2;
 * @return {string}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.getDonePncJunctionOverlapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.BareIntersectionStatus} returns this
 */
proto.apollo.planning.BareIntersectionStatus.prototype.setDonePncJunctionOverlapId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.BareIntersectionStatus} returns this
 */
proto.apollo.planning.BareIntersectionStatus.prototype.clearDonePncJunctionOverlapId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.hasDonePncJunctionOverlapId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 clear_counter = 3;
 * @return {number}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.getClearCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.BareIntersectionStatus} returns this
 */
proto.apollo.planning.BareIntersectionStatus.prototype.setClearCounter = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.BareIntersectionStatus} returns this
 */
proto.apollo.planning.BareIntersectionStatus.prototype.clearClearCounter = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.BareIntersectionStatus.prototype.hasClearCounter = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ChangeLaneStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ChangeLaneStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ChangeLaneStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    pathId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    existLaneChangeStartPosition: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    laneChangeStartPosition: (f = msg.getLaneChangeStartPosition()) && modules_common_proto_geometry_pb.Point3D.toObject(includeInstance, f),
    lastSucceedTimestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    isCurrentOptSucceed: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    isClearToChangeLane: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChangeLaneStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ChangeLaneStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.status;

  /** @type {?|undefined} */
  this.pathId;

  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.existLaneChangeStartPosition;

  /** @type {?|undefined} */
  this.laneChangeStartPosition;

  /** @type {?|undefined} */
  this.lastSucceedTimestamp;

  /** @type {?|undefined} */
  this.isCurrentOptSucceed;

  /** @type {?|undefined} */
  this.isClearToChangeLane;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ChangeLaneStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ChangeLaneStatus}
 */
proto.apollo.planning.ChangeLaneStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ChangeLaneStatus();
  obj.status != null && jspb.Message.setField(msg, 1, obj.status);
  obj.pathId != null && jspb.Message.setField(msg, 2, obj.pathId);
  obj.timestamp != null && jspb.Message.setField(msg, 3, obj.timestamp);
  obj.existLaneChangeStartPosition != null && jspb.Message.setField(msg, 4, obj.existLaneChangeStartPosition);
  obj.laneChangeStartPosition && jspb.Message.setWrapperField(
      msg, 5, modules_common_proto_geometry_pb.Point3D.fromObject(obj.laneChangeStartPosition));
  obj.lastSucceedTimestamp != null && jspb.Message.setField(msg, 6, obj.lastSucceedTimestamp);
  obj.isCurrentOptSucceed != null && jspb.Message.setField(msg, 7, obj.isCurrentOptSucceed);
  obj.isClearToChangeLane != null && jspb.Message.setField(msg, 8, obj.isClearToChangeLane);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ChangeLaneStatus}
 */
proto.apollo.planning.ChangeLaneStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ChangeLaneStatus;
  return proto.apollo.planning.ChangeLaneStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ChangeLaneStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ChangeLaneStatus}
 */
proto.apollo.planning.ChangeLaneStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.ChangeLaneStatus.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExistLaneChangeStartPosition(value);
      break;
    case 5:
      var value = new modules_common_proto_geometry_pb.Point3D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point3D.deserializeBinaryFromReader);
      msg.setLaneChangeStartPosition(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLastSucceedTimestamp(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCurrentOptSucceed(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsClearToChangeLane(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ChangeLaneStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ChangeLaneStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ChangeLaneStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.ChangeLaneStatus.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLaneChangeStartPosition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_common_proto_geometry_pb.Point3D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.ChangeLaneStatus.Status = {
  IN_CHANGE_LANE: 1,
  CHANGE_LANE_FAILED: 2,
  CHANGE_LANE_FINISHED: 3
};

/**
 * optional Status status = 1;
 * @return {!proto.apollo.planning.ChangeLaneStatus.Status}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getStatus = function() {
  return /** @type {!proto.apollo.planning.ChangeLaneStatus.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.ChangeLaneStatus.Status} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path_id = 2;
 * @return {string}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getPathId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.setPathId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearPathId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasPathId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double timestamp = 3;
 * @return {number}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool exist_lane_change_start_position = 4;
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getExistLaneChangeStartPosition = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.setExistLaneChangeStartPosition = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearExistLaneChangeStartPosition = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasExistLaneChangeStartPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.common.Point3D lane_change_start_position = 5;
 * @return {?proto.apollo.common.Point3D}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getLaneChangeStartPosition = function() {
  return /** @type{?proto.apollo.common.Point3D} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.Point3D, 5));
};


/**
 * @param {?proto.apollo.common.Point3D|undefined} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
*/
proto.apollo.planning.ChangeLaneStatus.prototype.setLaneChangeStartPosition = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearLaneChangeStartPosition = function() {
  return this.setLaneChangeStartPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasLaneChangeStartPosition = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double last_succeed_timestamp = 6;
 * @return {number}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getLastSucceedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.setLastSucceedTimestamp = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearLastSucceedTimestamp = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasLastSucceedTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_current_opt_succeed = 7;
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getIsCurrentOptSucceed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.setIsCurrentOptSucceed = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearIsCurrentOptSucceed = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasIsCurrentOptSucceed = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool is_clear_to_change_lane = 8;
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.getIsClearToChangeLane = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.setIsClearToChangeLane = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ChangeLaneStatus} returns this
 */
proto.apollo.planning.ChangeLaneStatus.prototype.clearIsClearToChangeLane = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ChangeLaneStatus.prototype.hasIsClearToChangeLane = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.CreepDeciderStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.CreepDeciderStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.CreepDeciderStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CreepDeciderStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    creepClearCounter: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CreepDeciderStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.CreepDeciderStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.creepClearCounter;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.CreepDeciderStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.CreepDeciderStatus}
 */
proto.apollo.planning.CreepDeciderStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.CreepDeciderStatus();
  obj.creepClearCounter != null && jspb.Message.setField(msg, 1, obj.creepClearCounter);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.CreepDeciderStatus}
 */
proto.apollo.planning.CreepDeciderStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.CreepDeciderStatus;
  return proto.apollo.planning.CreepDeciderStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.CreepDeciderStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.CreepDeciderStatus}
 */
proto.apollo.planning.CreepDeciderStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreepClearCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.CreepDeciderStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.CreepDeciderStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.CreepDeciderStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CreepDeciderStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 creep_clear_counter = 1;
 * @return {number}
 */
proto.apollo.planning.CreepDeciderStatus.prototype.getCreepClearCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CreepDeciderStatus} returns this
 */
proto.apollo.planning.CreepDeciderStatus.prototype.setCreepClearCounter = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CreepDeciderStatus} returns this
 */
proto.apollo.planning.CreepDeciderStatus.prototype.clearCreepClearCounter = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CreepDeciderStatus.prototype.hasCreepClearCounter = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.StopTime.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.StopTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.StopTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StopTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    obstacleId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    stopTimestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StopTime as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.StopTime.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.obstacleId;

  /** @type {?|undefined} */
  this.stopTimestampSec;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.StopTime.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.StopTime}
 */
proto.apollo.planning.StopTime.fromObject = function(obj) {
  var msg = new proto.apollo.planning.StopTime();
  obj.obstacleId != null && jspb.Message.setField(msg, 1, obj.obstacleId);
  obj.stopTimestampSec != null && jspb.Message.setField(msg, 2, obj.stopTimestampSec);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.StopTime}
 */
proto.apollo.planning.StopTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.StopTime;
  return proto.apollo.planning.StopTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.StopTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.StopTime}
 */
proto.apollo.planning.StopTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObstacleId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopTimestampSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.StopTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.StopTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.StopTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StopTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string obstacle_id = 1;
 * @return {string}
 */
proto.apollo.planning.StopTime.prototype.getObstacleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.StopTime} returns this
 */
proto.apollo.planning.StopTime.prototype.setObstacleId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StopTime} returns this
 */
proto.apollo.planning.StopTime.prototype.clearObstacleId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StopTime.prototype.hasObstacleId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double stop_timestamp_sec = 2;
 * @return {number}
 */
proto.apollo.planning.StopTime.prototype.getStopTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.StopTime} returns this
 */
proto.apollo.planning.StopTime.prototype.setStopTimestampSec = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StopTime} returns this
 */
proto.apollo.planning.StopTime.prototype.clearStopTimestampSec = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StopTime.prototype.hasStopTimestampSec = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.CrosswalkStatus.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.CrosswalkStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.CrosswalkStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.CrosswalkStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CrosswalkStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    crosswalkId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    stopTimeList: jspb.Message.toObjectList(msg.getStopTimeList(),
    proto.apollo.planning.StopTime.toObject, includeInstance),
    finishedCrosswalkList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CrosswalkStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.CrosswalkStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.crosswalkId;

  /** @type {?|undefined} */
  this.stopTimeList;

  /** @type {?|undefined} */
  this.finishedCrosswalkList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.CrosswalkStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.CrosswalkStatus}
 */
proto.apollo.planning.CrosswalkStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.CrosswalkStatus();
  obj.crosswalkId != null && jspb.Message.setField(msg, 1, obj.crosswalkId);
  obj.stopTimeList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.stopTimeList.map(
          proto.apollo.planning.StopTime.fromObject));
  obj.finishedCrosswalkList != null && jspb.Message.setField(msg, 3, obj.finishedCrosswalkList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.CrosswalkStatus}
 */
proto.apollo.planning.CrosswalkStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.CrosswalkStatus;
  return proto.apollo.planning.CrosswalkStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.CrosswalkStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.CrosswalkStatus}
 */
proto.apollo.planning.CrosswalkStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrosswalkId(value);
      break;
    case 2:
      var value = new proto.apollo.planning.StopTime;
      reader.readMessage(value,proto.apollo.planning.StopTime.deserializeBinaryFromReader);
      msg.addStopTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFinishedCrosswalk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.CrosswalkStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.CrosswalkStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.CrosswalkStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CrosswalkStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStopTimeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.planning.StopTime.serializeBinaryToWriter
    );
  }
  f = message.getFinishedCrosswalkList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string crosswalk_id = 1;
 * @return {string}
 */
proto.apollo.planning.CrosswalkStatus.prototype.getCrosswalkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.CrosswalkStatus} returns this
 */
proto.apollo.planning.CrosswalkStatus.prototype.setCrosswalkId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CrosswalkStatus} returns this
 */
proto.apollo.planning.CrosswalkStatus.prototype.clearCrosswalkId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CrosswalkStatus.prototype.hasCrosswalkId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StopTime stop_time = 2;
 * @return {!Array<!proto.apollo.planning.StopTime>}
 */
proto.apollo.planning.CrosswalkStatus.prototype.getStopTimeList = function() {
  return /** @type{!Array<!proto.apollo.planning.StopTime>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.StopTime, 2));
};


/**
 * @param {!Array<!proto.apollo.planning.StopTime>} value
 * @return {!proto.apollo.planning.CrosswalkStatus} returns this
*/
proto.apollo.planning.CrosswalkStatus.prototype.setStopTimeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.planning.StopTime=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.StopTime}
 */
proto.apollo.planning.CrosswalkStatus.prototype.addStopTime = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.planning.StopTime, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.CrosswalkStatus} returns this
 */
proto.apollo.planning.CrosswalkStatus.prototype.clearStopTimeList = function() {
  return this.setStopTimeList([]);
};


/**
 * repeated string finished_crosswalk = 3;
 * @return {!Array<string>}
 */
proto.apollo.planning.CrosswalkStatus.prototype.getFinishedCrosswalkList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.CrosswalkStatus} returns this
 */
proto.apollo.planning.CrosswalkStatus.prototype.setFinishedCrosswalkList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.CrosswalkStatus} returns this
 */
proto.apollo.planning.CrosswalkStatus.prototype.addFinishedCrosswalk = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.CrosswalkStatus} returns this
 */
proto.apollo.planning.CrosswalkStatus.prototype.clearFinishedCrosswalkList = function() {
  return this.setFinishedCrosswalkList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DestinationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DestinationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DestinationStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DestinationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasPassedDestination: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DestinationStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DestinationStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.hasPassedDestination;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DestinationStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DestinationStatus}
 */
proto.apollo.planning.DestinationStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DestinationStatus();
  obj.hasPassedDestination != null && jspb.Message.setField(msg, 1, obj.hasPassedDestination);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DestinationStatus}
 */
proto.apollo.planning.DestinationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DestinationStatus;
  return proto.apollo.planning.DestinationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DestinationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DestinationStatus}
 */
proto.apollo.planning.DestinationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasPassedDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DestinationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DestinationStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DestinationStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DestinationStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool has_passed_destination = 1;
 * @return {boolean}
 */
proto.apollo.planning.DestinationStatus.prototype.getHasPassedDestination = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DestinationStatus} returns this
 */
proto.apollo.planning.DestinationStatus.prototype.setHasPassedDestination = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DestinationStatus} returns this
 */
proto.apollo.planning.DestinationStatus.prototype.clearHasPassedDestination = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DestinationStatus.prototype.hasHasPassedDestination = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.EmergencyStopStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.EmergencyStopStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.EmergencyStopStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EmergencyStopStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopFencePoint: (f = msg.getStopFencePoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EmergencyStopStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.EmergencyStopStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopFencePoint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.EmergencyStopStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.EmergencyStopStatus}
 */
proto.apollo.planning.EmergencyStopStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.EmergencyStopStatus();
  obj.stopFencePoint && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_geometry_pb.PointENU.fromObject(obj.stopFencePoint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.EmergencyStopStatus}
 */
proto.apollo.planning.EmergencyStopStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.EmergencyStopStatus;
  return proto.apollo.planning.EmergencyStopStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.EmergencyStopStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.EmergencyStopStatus}
 */
proto.apollo.planning.EmergencyStopStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setStopFencePoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.EmergencyStopStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.EmergencyStopStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.EmergencyStopStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EmergencyStopStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStopFencePoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.PointENU stop_fence_point = 1;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.EmergencyStopStatus.prototype.getStopFencePoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 1));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.EmergencyStopStatus} returns this
*/
proto.apollo.planning.EmergencyStopStatus.prototype.setStopFencePoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.EmergencyStopStatus} returns this
 */
proto.apollo.planning.EmergencyStopStatus.prototype.clearStopFencePoint = function() {
  return this.setStopFencePoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.EmergencyStopStatus.prototype.hasStopFencePoint = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.OpenSpaceStatus.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OpenSpaceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OpenSpaceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OpenSpaceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    partitionedTrajectoriesIndexHistoryList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    positionInit: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OpenSpaceStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OpenSpaceStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.partitionedTrajectoriesIndexHistoryList;

  /** @type {?|undefined} */
  this.positionInit;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OpenSpaceStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OpenSpaceStatus}
 */
proto.apollo.planning.OpenSpaceStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OpenSpaceStatus();
  obj.partitionedTrajectoriesIndexHistoryList != null && jspb.Message.setField(msg, 1, obj.partitionedTrajectoriesIndexHistoryList);
  obj.positionInit != null && jspb.Message.setField(msg, 2, obj.positionInit);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OpenSpaceStatus}
 */
proto.apollo.planning.OpenSpaceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OpenSpaceStatus;
  return proto.apollo.planning.OpenSpaceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OpenSpaceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OpenSpaceStatus}
 */
proto.apollo.planning.OpenSpaceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPartitionedTrajectoriesIndexHistory(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPositionInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OpenSpaceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OpenSpaceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OpenSpaceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartitionedTrajectoriesIndexHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string partitioned_trajectories_index_history = 1;
 * @return {!Array<string>}
 */
proto.apollo.planning.OpenSpaceStatus.prototype.getPartitionedTrajectoriesIndexHistoryList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.OpenSpaceStatus} returns this
 */
proto.apollo.planning.OpenSpaceStatus.prototype.setPartitionedTrajectoriesIndexHistoryList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.OpenSpaceStatus} returns this
 */
proto.apollo.planning.OpenSpaceStatus.prototype.addPartitionedTrajectoriesIndexHistory = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.OpenSpaceStatus} returns this
 */
proto.apollo.planning.OpenSpaceStatus.prototype.clearPartitionedTrajectoriesIndexHistoryList = function() {
  return this.setPartitionedTrajectoriesIndexHistoryList([]);
};


/**
 * optional bool position_init = 2;
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceStatus.prototype.getPositionInit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.OpenSpaceStatus} returns this
 */
proto.apollo.planning.OpenSpaceStatus.prototype.setPositionInit = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceStatus} returns this
 */
proto.apollo.planning.OpenSpaceStatus.prototype.clearPositionInit = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceStatus.prototype.hasPositionInit = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ParkAndGoStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ParkAndGoStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ParkAndGoStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    adcInitPosition: (f = msg.getAdcInitPosition()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    adcInitHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    inCheckStage: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    adcAdjustEndPose: (f = msg.getAdcAdjustEndPose()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ParkAndGoStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ParkAndGoStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.adcInitPosition;

  /** @type {?|undefined} */
  this.adcInitHeading;

  /** @type {?|undefined} */
  this.inCheckStage;

  /** @type {?|undefined} */
  this.adcAdjustEndPose;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ParkAndGoStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ParkAndGoStatus}
 */
proto.apollo.planning.ParkAndGoStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ParkAndGoStatus();
  obj.adcInitPosition && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_geometry_pb.PointENU.fromObject(obj.adcInitPosition));
  obj.adcInitHeading != null && jspb.Message.setField(msg, 2, obj.adcInitHeading);
  obj.inCheckStage != null && jspb.Message.setField(msg, 3, obj.inCheckStage);
  obj.adcAdjustEndPose && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_geometry_pb.PointENU.fromObject(obj.adcAdjustEndPose));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ParkAndGoStatus}
 */
proto.apollo.planning.ParkAndGoStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ParkAndGoStatus;
  return proto.apollo.planning.ParkAndGoStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ParkAndGoStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ParkAndGoStatus}
 */
proto.apollo.planning.ParkAndGoStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setAdcInitPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdcInitHeading(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInCheckStage(value);
      break;
    case 4:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setAdcAdjustEndPose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ParkAndGoStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ParkAndGoStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ParkAndGoStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdcInitPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAdcAdjustEndPose();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.PointENU adc_init_position = 1;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.getAdcInitPosition = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 1));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
*/
proto.apollo.planning.ParkAndGoStatus.prototype.setAdcInitPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
 */
proto.apollo.planning.ParkAndGoStatus.prototype.clearAdcInitPosition = function() {
  return this.setAdcInitPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.hasAdcInitPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double adc_init_heading = 2;
 * @return {number}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.getAdcInitHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
 */
proto.apollo.planning.ParkAndGoStatus.prototype.setAdcInitHeading = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
 */
proto.apollo.planning.ParkAndGoStatus.prototype.clearAdcInitHeading = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.hasAdcInitHeading = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool in_check_stage = 3;
 * @return {boolean}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.getInCheckStage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
 */
proto.apollo.planning.ParkAndGoStatus.prototype.setInCheckStage = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
 */
proto.apollo.planning.ParkAndGoStatus.prototype.clearInCheckStage = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.hasInCheckStage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.common.PointENU adc_adjust_end_pose = 4;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.getAdcAdjustEndPose = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 4));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
*/
proto.apollo.planning.ParkAndGoStatus.prototype.setAdcAdjustEndPose = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ParkAndGoStatus} returns this
 */
proto.apollo.planning.ParkAndGoStatus.prototype.clearAdcAdjustEndPose = function() {
  return this.setAdcAdjustEndPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ParkAndGoStatus.prototype.hasAdcAdjustEndPose = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.PathDeciderStatus.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PathDeciderStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PathDeciderStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PathDeciderStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathDeciderStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontStaticObstacleCycleCounter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ableToUseSelfLaneCounter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    isInPathLaneBorrowScenario: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    frontStaticObstacleId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    decidedSidePassDirectionList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathDeciderStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PathDeciderStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.frontStaticObstacleCycleCounter;

  /** @type {?|undefined} */
  this.ableToUseSelfLaneCounter;

  /** @type {?|undefined} */
  this.isInPathLaneBorrowScenario;

  /** @type {?|undefined} */
  this.frontStaticObstacleId;

  /** @type {?|undefined} */
  this.decidedSidePassDirectionList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PathDeciderStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PathDeciderStatus}
 */
proto.apollo.planning.PathDeciderStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PathDeciderStatus();
  obj.frontStaticObstacleCycleCounter != null && jspb.Message.setField(msg, 1, obj.frontStaticObstacleCycleCounter);
  obj.ableToUseSelfLaneCounter != null && jspb.Message.setField(msg, 2, obj.ableToUseSelfLaneCounter);
  obj.isInPathLaneBorrowScenario != null && jspb.Message.setField(msg, 3, obj.isInPathLaneBorrowScenario);
  obj.frontStaticObstacleId != null && jspb.Message.setField(msg, 4, obj.frontStaticObstacleId);
  obj.decidedSidePassDirectionList != null && jspb.Message.setField(msg, 5, obj.decidedSidePassDirectionList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PathDeciderStatus}
 */
proto.apollo.planning.PathDeciderStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PathDeciderStatus;
  return proto.apollo.planning.PathDeciderStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PathDeciderStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PathDeciderStatus}
 */
proto.apollo.planning.PathDeciderStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrontStaticObstacleCycleCounter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbleToUseSelfLaneCounter(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInPathLaneBorrowScenario(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrontStaticObstacleId(value);
      break;
    case 5:
      var values = /** @type {!Array<!proto.apollo.planning.PathDeciderStatus.LaneBorrowDirection>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDecidedSidePassDirection(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PathDeciderStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PathDeciderStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PathDeciderStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathDeciderStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDecidedSidePassDirectionList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.PathDeciderStatus.LaneBorrowDirection = {
  LEFT_BORROW: 1,
  RIGHT_BORROW: 2
};

/**
 * optional int32 front_static_obstacle_cycle_counter = 1;
 * @return {number}
 */
proto.apollo.planning.PathDeciderStatus.prototype.getFrontStaticObstacleCycleCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.setFrontStaticObstacleCycleCounter = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.clearFrontStaticObstacleCycleCounter = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathDeciderStatus.prototype.hasFrontStaticObstacleCycleCounter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 able_to_use_self_lane_counter = 2;
 * @return {number}
 */
proto.apollo.planning.PathDeciderStatus.prototype.getAbleToUseSelfLaneCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.setAbleToUseSelfLaneCounter = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.clearAbleToUseSelfLaneCounter = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathDeciderStatus.prototype.hasAbleToUseSelfLaneCounter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_in_path_lane_borrow_scenario = 3;
 * @return {boolean}
 */
proto.apollo.planning.PathDeciderStatus.prototype.getIsInPathLaneBorrowScenario = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.setIsInPathLaneBorrowScenario = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.clearIsInPathLaneBorrowScenario = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathDeciderStatus.prototype.hasIsInPathLaneBorrowScenario = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string front_static_obstacle_id = 4;
 * @return {string}
 */
proto.apollo.planning.PathDeciderStatus.prototype.getFrontStaticObstacleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.setFrontStaticObstacleId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.clearFrontStaticObstacleId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathDeciderStatus.prototype.hasFrontStaticObstacleId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated LaneBorrowDirection decided_side_pass_direction = 5;
 * @return {!Array<!proto.apollo.planning.PathDeciderStatus.LaneBorrowDirection>}
 */
proto.apollo.planning.PathDeciderStatus.prototype.getDecidedSidePassDirectionList = function() {
  return /** @type {!Array<!proto.apollo.planning.PathDeciderStatus.LaneBorrowDirection>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.apollo.planning.PathDeciderStatus.LaneBorrowDirection>} value
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.setDecidedSidePassDirectionList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.apollo.planning.PathDeciderStatus.LaneBorrowDirection} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.addDecidedSidePassDirection = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.PathDeciderStatus} returns this
 */
proto.apollo.planning.PathDeciderStatus.prototype.clearDecidedSidePassDirectionList = function() {
  return this.setDecidedSidePassDirectionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PullOverStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PullOverStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PullOverStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PullOverStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    pullOverType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    planPullOverPath: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    position: (f = msg.getPosition()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    theta: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    lengthFront: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    lengthBack: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    widthLeft: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    widthRight: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PullOverStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PullOverStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pullOverType;

  /** @type {?|undefined} */
  this.planPullOverPath;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.theta;

  /** @type {?|undefined} */
  this.lengthFront;

  /** @type {?|undefined} */
  this.lengthBack;

  /** @type {?|undefined} */
  this.widthLeft;

  /** @type {?|undefined} */
  this.widthRight;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PullOverStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PullOverStatus}
 */
proto.apollo.planning.PullOverStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PullOverStatus();
  obj.pullOverType != null && jspb.Message.setField(msg, 1, obj.pullOverType);
  obj.planPullOverPath != null && jspb.Message.setField(msg, 2, obj.planPullOverPath);
  obj.position && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_geometry_pb.PointENU.fromObject(obj.position));
  obj.theta != null && jspb.Message.setField(msg, 4, obj.theta);
  obj.lengthFront != null && jspb.Message.setField(msg, 5, obj.lengthFront);
  obj.lengthBack != null && jspb.Message.setField(msg, 6, obj.lengthBack);
  obj.widthLeft != null && jspb.Message.setField(msg, 7, obj.widthLeft);
  obj.widthRight != null && jspb.Message.setField(msg, 8, obj.widthRight);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PullOverStatus}
 */
proto.apollo.planning.PullOverStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PullOverStatus;
  return proto.apollo.planning.PullOverStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PullOverStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PullOverStatus}
 */
proto.apollo.planning.PullOverStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.PullOverStatus.PullOverType} */ (reader.readEnum());
      msg.setPullOverType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlanPullOverPath(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLengthFront(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLengthBack(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidthLeft(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidthRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PullOverStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PullOverStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PullOverStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PullOverStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.PullOverStatus.PullOverType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.PullOverStatus.PullOverType = {
  PULL_OVER: 1,
  EMERGENCY_PULL_OVER: 2
};

/**
 * optional PullOverType pull_over_type = 1;
 * @return {!proto.apollo.planning.PullOverStatus.PullOverType}
 */
proto.apollo.planning.PullOverStatus.prototype.getPullOverType = function() {
  return /** @type {!proto.apollo.planning.PullOverStatus.PullOverType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.PullOverStatus.PullOverType} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.setPullOverType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearPullOverType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasPullOverType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool plan_pull_over_path = 2;
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.getPlanPullOverPath = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.setPlanPullOverPath = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearPlanPullOverPath = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasPlanPullOverPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.PointENU position = 3;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.planning.PullOverStatus.prototype.getPosition = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 3));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
*/
proto.apollo.planning.PullOverStatus.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double theta = 4;
 * @return {number}
 */
proto.apollo.planning.PullOverStatus.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.setTheta = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearTheta = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasTheta = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double length_front = 5;
 * @return {number}
 */
proto.apollo.planning.PullOverStatus.prototype.getLengthFront = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.setLengthFront = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearLengthFront = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasLengthFront = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double length_back = 6;
 * @return {number}
 */
proto.apollo.planning.PullOverStatus.prototype.getLengthBack = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.setLengthBack = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearLengthBack = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasLengthBack = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double width_left = 7;
 * @return {number}
 */
proto.apollo.planning.PullOverStatus.prototype.getWidthLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.setWidthLeft = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearWidthLeft = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasWidthLeft = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double width_right = 8;
 * @return {number}
 */
proto.apollo.planning.PullOverStatus.prototype.getWidthRight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.setWidthRight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PullOverStatus} returns this
 */
proto.apollo.planning.PullOverStatus.prototype.clearWidthRight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PullOverStatus.prototype.hasWidthRight = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ReroutingStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ReroutingStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ReroutingStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReroutingStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastReroutingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    needRerouting: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    routingRequest: (f = msg.getRoutingRequest()) && modules_routing_proto_routing_pb.RoutingRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReroutingStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ReroutingStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lastReroutingTime;

  /** @type {?|undefined} */
  this.needRerouting;

  /** @type {?|undefined} */
  this.routingRequest;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ReroutingStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ReroutingStatus}
 */
proto.apollo.planning.ReroutingStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ReroutingStatus();
  obj.lastReroutingTime != null && jspb.Message.setField(msg, 1, obj.lastReroutingTime);
  obj.needRerouting != null && jspb.Message.setField(msg, 2, obj.needRerouting);
  obj.routingRequest && jspb.Message.setWrapperField(
      msg, 3, modules_routing_proto_routing_pb.RoutingRequest.fromObject(obj.routingRequest));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ReroutingStatus}
 */
proto.apollo.planning.ReroutingStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ReroutingStatus;
  return proto.apollo.planning.ReroutingStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ReroutingStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ReroutingStatus}
 */
proto.apollo.planning.ReroutingStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLastReroutingTime(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedRerouting(value);
      break;
    case 3:
      var value = new modules_routing_proto_routing_pb.RoutingRequest;
      reader.readMessage(value,modules_routing_proto_routing_pb.RoutingRequest.deserializeBinaryFromReader);
      msg.setRoutingRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ReroutingStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ReroutingStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ReroutingStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReroutingStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRoutingRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_routing_proto_routing_pb.RoutingRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional double last_rerouting_time = 1;
 * @return {number}
 */
proto.apollo.planning.ReroutingStatus.prototype.getLastReroutingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReroutingStatus} returns this
 */
proto.apollo.planning.ReroutingStatus.prototype.setLastReroutingTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReroutingStatus} returns this
 */
proto.apollo.planning.ReroutingStatus.prototype.clearLastReroutingTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReroutingStatus.prototype.hasLastReroutingTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool need_rerouting = 2;
 * @return {boolean}
 */
proto.apollo.planning.ReroutingStatus.prototype.getNeedRerouting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ReroutingStatus} returns this
 */
proto.apollo.planning.ReroutingStatus.prototype.setNeedRerouting = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReroutingStatus} returns this
 */
proto.apollo.planning.ReroutingStatus.prototype.clearNeedRerouting = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReroutingStatus.prototype.hasNeedRerouting = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.routing.RoutingRequest routing_request = 3;
 * @return {?proto.apollo.routing.RoutingRequest}
 */
proto.apollo.planning.ReroutingStatus.prototype.getRoutingRequest = function() {
  return /** @type{?proto.apollo.routing.RoutingRequest} */ (
    jspb.Message.getWrapperField(this, modules_routing_proto_routing_pb.RoutingRequest, 3));
};


/**
 * @param {?proto.apollo.routing.RoutingRequest|undefined} value
 * @return {!proto.apollo.planning.ReroutingStatus} returns this
*/
proto.apollo.planning.ReroutingStatus.prototype.setRoutingRequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ReroutingStatus} returns this
 */
proto.apollo.planning.ReroutingStatus.prototype.clearRoutingRequest = function() {
  return this.setRoutingRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReroutingStatus.prototype.hasRoutingRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.SpeedDeciderStatus.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.SpeedDeciderStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.SpeedDeciderStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.SpeedDeciderStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpeedDeciderStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    pedestrianStopTimeList: jspb.Message.toObjectList(msg.getPedestrianStopTimeList(),
    proto.apollo.planning.StopTime.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpeedDeciderStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.SpeedDeciderStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pedestrianStopTimeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.SpeedDeciderStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.SpeedDeciderStatus}
 */
proto.apollo.planning.SpeedDeciderStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.SpeedDeciderStatus();
  obj.pedestrianStopTimeList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.pedestrianStopTimeList.map(
          proto.apollo.planning.StopTime.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.SpeedDeciderStatus}
 */
proto.apollo.planning.SpeedDeciderStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.SpeedDeciderStatus;
  return proto.apollo.planning.SpeedDeciderStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.SpeedDeciderStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.SpeedDeciderStatus}
 */
proto.apollo.planning.SpeedDeciderStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.StopTime;
      reader.readMessage(value,proto.apollo.planning.StopTime.deserializeBinaryFromReader);
      msg.addPedestrianStopTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.SpeedDeciderStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.SpeedDeciderStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.SpeedDeciderStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpeedDeciderStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPedestrianStopTimeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.StopTime.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StopTime pedestrian_stop_time = 1;
 * @return {!Array<!proto.apollo.planning.StopTime>}
 */
proto.apollo.planning.SpeedDeciderStatus.prototype.getPedestrianStopTimeList = function() {
  return /** @type{!Array<!proto.apollo.planning.StopTime>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.StopTime, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.StopTime>} value
 * @return {!proto.apollo.planning.SpeedDeciderStatus} returns this
*/
proto.apollo.planning.SpeedDeciderStatus.prototype.setPedestrianStopTimeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.StopTime=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.StopTime}
 */
proto.apollo.planning.SpeedDeciderStatus.prototype.addPedestrianStopTime = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.StopTime, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.SpeedDeciderStatus} returns this
 */
proto.apollo.planning.SpeedDeciderStatus.prototype.clearPedestrianStopTimeList = function() {
  return this.setPedestrianStopTimeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    scenarioType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    stageType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.scenarioType;

  /** @type {?|undefined} */
  this.stageType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioStatus}
 */
proto.apollo.planning.ScenarioStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioStatus();
  obj.scenarioType != null && jspb.Message.setField(msg, 1, obj.scenarioType);
  obj.stageType != null && jspb.Message.setField(msg, 2, obj.stageType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioStatus}
 */
proto.apollo.planning.ScenarioStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioStatus;
  return proto.apollo.planning.ScenarioStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioStatus}
 */
proto.apollo.planning.ScenarioStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.ScenarioConfig.ScenarioType} */ (reader.readEnum());
      msg.setScenarioType(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.planning.ScenarioConfig.StageType} */ (reader.readEnum());
      msg.setStageType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.ScenarioConfig.ScenarioType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.planning.ScenarioConfig.StageType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional ScenarioConfig.ScenarioType scenario_type = 1;
 * @return {!proto.apollo.planning.ScenarioConfig.ScenarioType}
 */
proto.apollo.planning.ScenarioStatus.prototype.getScenarioType = function() {
  return /** @type {!proto.apollo.planning.ScenarioConfig.ScenarioType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.planning.ScenarioConfig.ScenarioType} value
 * @return {!proto.apollo.planning.ScenarioStatus} returns this
 */
proto.apollo.planning.ScenarioStatus.prototype.setScenarioType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStatus} returns this
 */
proto.apollo.planning.ScenarioStatus.prototype.clearScenarioType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStatus.prototype.hasScenarioType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ScenarioConfig.StageType stage_type = 2;
 * @return {!proto.apollo.planning.ScenarioConfig.StageType}
 */
proto.apollo.planning.ScenarioStatus.prototype.getStageType = function() {
  return /** @type {!proto.apollo.planning.ScenarioConfig.StageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.planning.ScenarioConfig.StageType} value
 * @return {!proto.apollo.planning.ScenarioStatus} returns this
 */
proto.apollo.planning.ScenarioStatus.prototype.setStageType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStatus} returns this
 */
proto.apollo.planning.ScenarioStatus.prototype.clearStageType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStatus.prototype.hasStageType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.StopSignStatus.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.StopSignStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.StopSignStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.StopSignStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StopSignStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentStopSignOverlapId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    doneStopSignOverlapId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    waitForObstacleIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StopSignStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.StopSignStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.currentStopSignOverlapId;

  /** @type {?|undefined} */
  this.doneStopSignOverlapId;

  /** @type {?|undefined} */
  this.waitForObstacleIdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.StopSignStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.StopSignStatus}
 */
proto.apollo.planning.StopSignStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.StopSignStatus();
  obj.currentStopSignOverlapId != null && jspb.Message.setField(msg, 1, obj.currentStopSignOverlapId);
  obj.doneStopSignOverlapId != null && jspb.Message.setField(msg, 2, obj.doneStopSignOverlapId);
  obj.waitForObstacleIdList != null && jspb.Message.setField(msg, 3, obj.waitForObstacleIdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.StopSignStatus}
 */
proto.apollo.planning.StopSignStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.StopSignStatus;
  return proto.apollo.planning.StopSignStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.StopSignStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.StopSignStatus}
 */
proto.apollo.planning.StopSignStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentStopSignOverlapId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoneStopSignOverlapId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addWaitForObstacleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.StopSignStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.StopSignStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.StopSignStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StopSignStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWaitForObstacleIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string current_stop_sign_overlap_id = 1;
 * @return {string}
 */
proto.apollo.planning.StopSignStatus.prototype.getCurrentStopSignOverlapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.StopSignStatus} returns this
 */
proto.apollo.planning.StopSignStatus.prototype.setCurrentStopSignOverlapId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StopSignStatus} returns this
 */
proto.apollo.planning.StopSignStatus.prototype.clearCurrentStopSignOverlapId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StopSignStatus.prototype.hasCurrentStopSignOverlapId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string done_stop_sign_overlap_id = 2;
 * @return {string}
 */
proto.apollo.planning.StopSignStatus.prototype.getDoneStopSignOverlapId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.StopSignStatus} returns this
 */
proto.apollo.planning.StopSignStatus.prototype.setDoneStopSignOverlapId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.StopSignStatus} returns this
 */
proto.apollo.planning.StopSignStatus.prototype.clearDoneStopSignOverlapId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StopSignStatus.prototype.hasDoneStopSignOverlapId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string wait_for_obstacle_id = 3;
 * @return {!Array<string>}
 */
proto.apollo.planning.StopSignStatus.prototype.getWaitForObstacleIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.StopSignStatus} returns this
 */
proto.apollo.planning.StopSignStatus.prototype.setWaitForObstacleIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.StopSignStatus} returns this
 */
proto.apollo.planning.StopSignStatus.prototype.addWaitForObstacleId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.StopSignStatus} returns this
 */
proto.apollo.planning.StopSignStatus.prototype.clearWaitForObstacleIdList = function() {
  return this.setWaitForObstacleIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.TrafficLightStatus.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TrafficLightStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TrafficLightStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TrafficLightStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentTrafficLightOverlapIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    doneTrafficLightOverlapIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrafficLightStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TrafficLightStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.currentTrafficLightOverlapIdList;

  /** @type {?|undefined} */
  this.doneTrafficLightOverlapIdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TrafficLightStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TrafficLightStatus}
 */
proto.apollo.planning.TrafficLightStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TrafficLightStatus();
  obj.currentTrafficLightOverlapIdList != null && jspb.Message.setField(msg, 1, obj.currentTrafficLightOverlapIdList);
  obj.doneTrafficLightOverlapIdList != null && jspb.Message.setField(msg, 2, obj.doneTrafficLightOverlapIdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TrafficLightStatus}
 */
proto.apollo.planning.TrafficLightStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TrafficLightStatus;
  return proto.apollo.planning.TrafficLightStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TrafficLightStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TrafficLightStatus}
 */
proto.apollo.planning.TrafficLightStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCurrentTrafficLightOverlapId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDoneTrafficLightOverlapId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TrafficLightStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TrafficLightStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TrafficLightStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TrafficLightStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentTrafficLightOverlapIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDoneTrafficLightOverlapIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string current_traffic_light_overlap_id = 1;
 * @return {!Array<string>}
 */
proto.apollo.planning.TrafficLightStatus.prototype.getCurrentTrafficLightOverlapIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.TrafficLightStatus} returns this
 */
proto.apollo.planning.TrafficLightStatus.prototype.setCurrentTrafficLightOverlapIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TrafficLightStatus} returns this
 */
proto.apollo.planning.TrafficLightStatus.prototype.addCurrentTrafficLightOverlapId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.TrafficLightStatus} returns this
 */
proto.apollo.planning.TrafficLightStatus.prototype.clearCurrentTrafficLightOverlapIdList = function() {
  return this.setCurrentTrafficLightOverlapIdList([]);
};


/**
 * repeated string done_traffic_light_overlap_id = 2;
 * @return {!Array<string>}
 */
proto.apollo.planning.TrafficLightStatus.prototype.getDoneTrafficLightOverlapIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.TrafficLightStatus} returns this
 */
proto.apollo.planning.TrafficLightStatus.prototype.setDoneTrafficLightOverlapIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TrafficLightStatus} returns this
 */
proto.apollo.planning.TrafficLightStatus.prototype.addDoneTrafficLightOverlapId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.TrafficLightStatus} returns this
 */
proto.apollo.planning.TrafficLightStatus.prototype.clearDoneTrafficLightOverlapIdList = function() {
  return this.setDoneTrafficLightOverlapIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.YieldSignStatus.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.YieldSignStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.YieldSignStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.YieldSignStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.YieldSignStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentYieldSignOverlapIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    doneYieldSignOverlapIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    waitForObstacleIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of YieldSignStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.YieldSignStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.currentYieldSignOverlapIdList;

  /** @type {?|undefined} */
  this.doneYieldSignOverlapIdList;

  /** @type {?|undefined} */
  this.waitForObstacleIdList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.YieldSignStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.YieldSignStatus}
 */
proto.apollo.planning.YieldSignStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.YieldSignStatus();
  obj.currentYieldSignOverlapIdList != null && jspb.Message.setField(msg, 1, obj.currentYieldSignOverlapIdList);
  obj.doneYieldSignOverlapIdList != null && jspb.Message.setField(msg, 2, obj.doneYieldSignOverlapIdList);
  obj.waitForObstacleIdList != null && jspb.Message.setField(msg, 3, obj.waitForObstacleIdList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.YieldSignStatus}
 */
proto.apollo.planning.YieldSignStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.YieldSignStatus;
  return proto.apollo.planning.YieldSignStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.YieldSignStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.YieldSignStatus}
 */
proto.apollo.planning.YieldSignStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCurrentYieldSignOverlapId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDoneYieldSignOverlapId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addWaitForObstacleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.YieldSignStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.YieldSignStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.YieldSignStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.YieldSignStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentYieldSignOverlapIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDoneYieldSignOverlapIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getWaitForObstacleIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string current_yield_sign_overlap_id = 1;
 * @return {!Array<string>}
 */
proto.apollo.planning.YieldSignStatus.prototype.getCurrentYieldSignOverlapIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.setCurrentYieldSignOverlapIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.addCurrentYieldSignOverlapId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.clearCurrentYieldSignOverlapIdList = function() {
  return this.setCurrentYieldSignOverlapIdList([]);
};


/**
 * repeated string done_yield_sign_overlap_id = 2;
 * @return {!Array<string>}
 */
proto.apollo.planning.YieldSignStatus.prototype.getDoneYieldSignOverlapIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.setDoneYieldSignOverlapIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.addDoneYieldSignOverlapId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.clearDoneYieldSignOverlapIdList = function() {
  return this.setDoneYieldSignOverlapIdList([]);
};


/**
 * repeated string wait_for_obstacle_id = 3;
 * @return {!Array<string>}
 */
proto.apollo.planning.YieldSignStatus.prototype.getWaitForObstacleIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.setWaitForObstacleIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.addWaitForObstacleId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.YieldSignStatus} returns this
 */
proto.apollo.planning.YieldSignStatus.prototype.clearWaitForObstacleIdList = function() {
  return this.setWaitForObstacleIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlanningStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlanningStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlanningStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    bareIntersection: (f = msg.getBareIntersection()) && proto.apollo.planning.BareIntersectionStatus.toObject(includeInstance, f),
    changeLane: (f = msg.getChangeLane()) && proto.apollo.planning.ChangeLaneStatus.toObject(includeInstance, f),
    creepDecider: (f = msg.getCreepDecider()) && proto.apollo.planning.CreepDeciderStatus.toObject(includeInstance, f),
    crosswalk: (f = msg.getCrosswalk()) && proto.apollo.planning.CrosswalkStatus.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && proto.apollo.planning.DestinationStatus.toObject(includeInstance, f),
    emergencyStop: (f = msg.getEmergencyStop()) && proto.apollo.planning.EmergencyStopStatus.toObject(includeInstance, f),
    openSpace: (f = msg.getOpenSpace()) && proto.apollo.planning.OpenSpaceStatus.toObject(includeInstance, f),
    parkAndGo: (f = msg.getParkAndGo()) && proto.apollo.planning.ParkAndGoStatus.toObject(includeInstance, f),
    pathDecider: (f = msg.getPathDecider()) && proto.apollo.planning.PathDeciderStatus.toObject(includeInstance, f),
    pullOver: (f = msg.getPullOver()) && proto.apollo.planning.PullOverStatus.toObject(includeInstance, f),
    rerouting: (f = msg.getRerouting()) && proto.apollo.planning.ReroutingStatus.toObject(includeInstance, f),
    scenario: (f = msg.getScenario()) && proto.apollo.planning.ScenarioStatus.toObject(includeInstance, f),
    speedDecider: (f = msg.getSpeedDecider()) && proto.apollo.planning.SpeedDeciderStatus.toObject(includeInstance, f),
    stopSign: (f = msg.getStopSign()) && proto.apollo.planning.StopSignStatus.toObject(includeInstance, f),
    trafficLight: (f = msg.getTrafficLight()) && proto.apollo.planning.TrafficLightStatus.toObject(includeInstance, f),
    yieldSign: (f = msg.getYieldSign()) && proto.apollo.planning.YieldSignStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlanningStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlanningStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.bareIntersection;

  /** @type {?|undefined} */
  this.changeLane;

  /** @type {?|undefined} */
  this.creepDecider;

  /** @type {?|undefined} */
  this.crosswalk;

  /** @type {?|undefined} */
  this.destination;

  /** @type {?|undefined} */
  this.emergencyStop;

  /** @type {?|undefined} */
  this.openSpace;

  /** @type {?|undefined} */
  this.parkAndGo;

  /** @type {?|undefined} */
  this.pathDecider;

  /** @type {?|undefined} */
  this.pullOver;

  /** @type {?|undefined} */
  this.rerouting;

  /** @type {?|undefined} */
  this.scenario;

  /** @type {?|undefined} */
  this.speedDecider;

  /** @type {?|undefined} */
  this.stopSign;

  /** @type {?|undefined} */
  this.trafficLight;

  /** @type {?|undefined} */
  this.yieldSign;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlanningStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlanningStatus}
 */
proto.apollo.planning.PlanningStatus.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlanningStatus();
  obj.bareIntersection && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.BareIntersectionStatus.fromObject(obj.bareIntersection));
  obj.changeLane && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.ChangeLaneStatus.fromObject(obj.changeLane));
  obj.creepDecider && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.CreepDeciderStatus.fromObject(obj.creepDecider));
  obj.crosswalk && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.CrosswalkStatus.fromObject(obj.crosswalk));
  obj.destination && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.DestinationStatus.fromObject(obj.destination));
  obj.emergencyStop && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.EmergencyStopStatus.fromObject(obj.emergencyStop));
  obj.openSpace && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.OpenSpaceStatus.fromObject(obj.openSpace));
  obj.parkAndGo && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.planning.ParkAndGoStatus.fromObject(obj.parkAndGo));
  obj.pathDecider && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.planning.PathDeciderStatus.fromObject(obj.pathDecider));
  obj.pullOver && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.planning.PullOverStatus.fromObject(obj.pullOver));
  obj.rerouting && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.planning.ReroutingStatus.fromObject(obj.rerouting));
  obj.scenario && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.planning.ScenarioStatus.fromObject(obj.scenario));
  obj.speedDecider && jspb.Message.setWrapperField(
      msg, 13, proto.apollo.planning.SpeedDeciderStatus.fromObject(obj.speedDecider));
  obj.stopSign && jspb.Message.setWrapperField(
      msg, 14, proto.apollo.planning.StopSignStatus.fromObject(obj.stopSign));
  obj.trafficLight && jspb.Message.setWrapperField(
      msg, 15, proto.apollo.planning.TrafficLightStatus.fromObject(obj.trafficLight));
  obj.yieldSign && jspb.Message.setWrapperField(
      msg, 16, proto.apollo.planning.YieldSignStatus.fromObject(obj.yieldSign));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlanningStatus}
 */
proto.apollo.planning.PlanningStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlanningStatus;
  return proto.apollo.planning.PlanningStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlanningStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlanningStatus}
 */
proto.apollo.planning.PlanningStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.BareIntersectionStatus;
      reader.readMessage(value,proto.apollo.planning.BareIntersectionStatus.deserializeBinaryFromReader);
      msg.setBareIntersection(value);
      break;
    case 2:
      var value = new proto.apollo.planning.ChangeLaneStatus;
      reader.readMessage(value,proto.apollo.planning.ChangeLaneStatus.deserializeBinaryFromReader);
      msg.setChangeLane(value);
      break;
    case 3:
      var value = new proto.apollo.planning.CreepDeciderStatus;
      reader.readMessage(value,proto.apollo.planning.CreepDeciderStatus.deserializeBinaryFromReader);
      msg.setCreepDecider(value);
      break;
    case 4:
      var value = new proto.apollo.planning.CrosswalkStatus;
      reader.readMessage(value,proto.apollo.planning.CrosswalkStatus.deserializeBinaryFromReader);
      msg.setCrosswalk(value);
      break;
    case 5:
      var value = new proto.apollo.planning.DestinationStatus;
      reader.readMessage(value,proto.apollo.planning.DestinationStatus.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 6:
      var value = new proto.apollo.planning.EmergencyStopStatus;
      reader.readMessage(value,proto.apollo.planning.EmergencyStopStatus.deserializeBinaryFromReader);
      msg.setEmergencyStop(value);
      break;
    case 7:
      var value = new proto.apollo.planning.OpenSpaceStatus;
      reader.readMessage(value,proto.apollo.planning.OpenSpaceStatus.deserializeBinaryFromReader);
      msg.setOpenSpace(value);
      break;
    case 8:
      var value = new proto.apollo.planning.ParkAndGoStatus;
      reader.readMessage(value,proto.apollo.planning.ParkAndGoStatus.deserializeBinaryFromReader);
      msg.setParkAndGo(value);
      break;
    case 9:
      var value = new proto.apollo.planning.PathDeciderStatus;
      reader.readMessage(value,proto.apollo.planning.PathDeciderStatus.deserializeBinaryFromReader);
      msg.setPathDecider(value);
      break;
    case 10:
      var value = new proto.apollo.planning.PullOverStatus;
      reader.readMessage(value,proto.apollo.planning.PullOverStatus.deserializeBinaryFromReader);
      msg.setPullOver(value);
      break;
    case 11:
      var value = new proto.apollo.planning.ReroutingStatus;
      reader.readMessage(value,proto.apollo.planning.ReroutingStatus.deserializeBinaryFromReader);
      msg.setRerouting(value);
      break;
    case 12:
      var value = new proto.apollo.planning.ScenarioStatus;
      reader.readMessage(value,proto.apollo.planning.ScenarioStatus.deserializeBinaryFromReader);
      msg.setScenario(value);
      break;
    case 13:
      var value = new proto.apollo.planning.SpeedDeciderStatus;
      reader.readMessage(value,proto.apollo.planning.SpeedDeciderStatus.deserializeBinaryFromReader);
      msg.setSpeedDecider(value);
      break;
    case 14:
      var value = new proto.apollo.planning.StopSignStatus;
      reader.readMessage(value,proto.apollo.planning.StopSignStatus.deserializeBinaryFromReader);
      msg.setStopSign(value);
      break;
    case 15:
      var value = new proto.apollo.planning.TrafficLightStatus;
      reader.readMessage(value,proto.apollo.planning.TrafficLightStatus.deserializeBinaryFromReader);
      msg.setTrafficLight(value);
      break;
    case 16:
      var value = new proto.apollo.planning.YieldSignStatus;
      reader.readMessage(value,proto.apollo.planning.YieldSignStatus.deserializeBinaryFromReader);
      msg.setYieldSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlanningStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlanningStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlanningStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBareIntersection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.BareIntersectionStatus.serializeBinaryToWriter
    );
  }
  f = message.getChangeLane();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.ChangeLaneStatus.serializeBinaryToWriter
    );
  }
  f = message.getCreepDecider();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.CreepDeciderStatus.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalk();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.CrosswalkStatus.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.DestinationStatus.serializeBinaryToWriter
    );
  }
  f = message.getEmergencyStop();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.EmergencyStopStatus.serializeBinaryToWriter
    );
  }
  f = message.getOpenSpace();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.OpenSpaceStatus.serializeBinaryToWriter
    );
  }
  f = message.getParkAndGo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.planning.ParkAndGoStatus.serializeBinaryToWriter
    );
  }
  f = message.getPathDecider();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.planning.PathDeciderStatus.serializeBinaryToWriter
    );
  }
  f = message.getPullOver();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.planning.PullOverStatus.serializeBinaryToWriter
    );
  }
  f = message.getRerouting();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.planning.ReroutingStatus.serializeBinaryToWriter
    );
  }
  f = message.getScenario();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.planning.ScenarioStatus.serializeBinaryToWriter
    );
  }
  f = message.getSpeedDecider();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.apollo.planning.SpeedDeciderStatus.serializeBinaryToWriter
    );
  }
  f = message.getStopSign();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.apollo.planning.StopSignStatus.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLight();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.apollo.planning.TrafficLightStatus.serializeBinaryToWriter
    );
  }
  f = message.getYieldSign();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.apollo.planning.YieldSignStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional BareIntersectionStatus bare_intersection = 1;
 * @return {?proto.apollo.planning.BareIntersectionStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getBareIntersection = function() {
  return /** @type{?proto.apollo.planning.BareIntersectionStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.BareIntersectionStatus, 1));
};


/**
 * @param {?proto.apollo.planning.BareIntersectionStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setBareIntersection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearBareIntersection = function() {
  return this.setBareIntersection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasBareIntersection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChangeLaneStatus change_lane = 2;
 * @return {?proto.apollo.planning.ChangeLaneStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getChangeLane = function() {
  return /** @type{?proto.apollo.planning.ChangeLaneStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ChangeLaneStatus, 2));
};


/**
 * @param {?proto.apollo.planning.ChangeLaneStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setChangeLane = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearChangeLane = function() {
  return this.setChangeLane(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasChangeLane = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CreepDeciderStatus creep_decider = 3;
 * @return {?proto.apollo.planning.CreepDeciderStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getCreepDecider = function() {
  return /** @type{?proto.apollo.planning.CreepDeciderStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.CreepDeciderStatus, 3));
};


/**
 * @param {?proto.apollo.planning.CreepDeciderStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setCreepDecider = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearCreepDecider = function() {
  return this.setCreepDecider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasCreepDecider = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CrosswalkStatus crosswalk = 4;
 * @return {?proto.apollo.planning.CrosswalkStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getCrosswalk = function() {
  return /** @type{?proto.apollo.planning.CrosswalkStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.CrosswalkStatus, 4));
};


/**
 * @param {?proto.apollo.planning.CrosswalkStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setCrosswalk = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearCrosswalk = function() {
  return this.setCrosswalk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasCrosswalk = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DestinationStatus destination = 5;
 * @return {?proto.apollo.planning.DestinationStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getDestination = function() {
  return /** @type{?proto.apollo.planning.DestinationStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DestinationStatus, 5));
};


/**
 * @param {?proto.apollo.planning.DestinationStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EmergencyStopStatus emergency_stop = 6;
 * @return {?proto.apollo.planning.EmergencyStopStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getEmergencyStop = function() {
  return /** @type{?proto.apollo.planning.EmergencyStopStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.EmergencyStopStatus, 6));
};


/**
 * @param {?proto.apollo.planning.EmergencyStopStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setEmergencyStop = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearEmergencyStop = function() {
  return this.setEmergencyStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasEmergencyStop = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OpenSpaceStatus open_space = 7;
 * @return {?proto.apollo.planning.OpenSpaceStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getOpenSpace = function() {
  return /** @type{?proto.apollo.planning.OpenSpaceStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OpenSpaceStatus, 7));
};


/**
 * @param {?proto.apollo.planning.OpenSpaceStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setOpenSpace = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearOpenSpace = function() {
  return this.setOpenSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasOpenSpace = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ParkAndGoStatus park_and_go = 8;
 * @return {?proto.apollo.planning.ParkAndGoStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getParkAndGo = function() {
  return /** @type{?proto.apollo.planning.ParkAndGoStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ParkAndGoStatus, 8));
};


/**
 * @param {?proto.apollo.planning.ParkAndGoStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setParkAndGo = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearParkAndGo = function() {
  return this.setParkAndGo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasParkAndGo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PathDeciderStatus path_decider = 9;
 * @return {?proto.apollo.planning.PathDeciderStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getPathDecider = function() {
  return /** @type{?proto.apollo.planning.PathDeciderStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PathDeciderStatus, 9));
};


/**
 * @param {?proto.apollo.planning.PathDeciderStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setPathDecider = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearPathDecider = function() {
  return this.setPathDecider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasPathDecider = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PullOverStatus pull_over = 10;
 * @return {?proto.apollo.planning.PullOverStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getPullOver = function() {
  return /** @type{?proto.apollo.planning.PullOverStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PullOverStatus, 10));
};


/**
 * @param {?proto.apollo.planning.PullOverStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setPullOver = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearPullOver = function() {
  return this.setPullOver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasPullOver = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ReroutingStatus rerouting = 11;
 * @return {?proto.apollo.planning.ReroutingStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getRerouting = function() {
  return /** @type{?proto.apollo.planning.ReroutingStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ReroutingStatus, 11));
};


/**
 * @param {?proto.apollo.planning.ReroutingStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setRerouting = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearRerouting = function() {
  return this.setRerouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasRerouting = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ScenarioStatus scenario = 12;
 * @return {?proto.apollo.planning.ScenarioStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getScenario = function() {
  return /** @type{?proto.apollo.planning.ScenarioStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioStatus, 12));
};


/**
 * @param {?proto.apollo.planning.ScenarioStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setScenario = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearScenario = function() {
  return this.setScenario(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasScenario = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional SpeedDeciderStatus speed_decider = 13;
 * @return {?proto.apollo.planning.SpeedDeciderStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getSpeedDecider = function() {
  return /** @type{?proto.apollo.planning.SpeedDeciderStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.SpeedDeciderStatus, 13));
};


/**
 * @param {?proto.apollo.planning.SpeedDeciderStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setSpeedDecider = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearSpeedDecider = function() {
  return this.setSpeedDecider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasSpeedDecider = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional StopSignStatus stop_sign = 14;
 * @return {?proto.apollo.planning.StopSignStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getStopSign = function() {
  return /** @type{?proto.apollo.planning.StopSignStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StopSignStatus, 14));
};


/**
 * @param {?proto.apollo.planning.StopSignStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setStopSign = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearStopSign = function() {
  return this.setStopSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasStopSign = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional TrafficLightStatus traffic_light = 15;
 * @return {?proto.apollo.planning.TrafficLightStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getTrafficLight = function() {
  return /** @type{?proto.apollo.planning.TrafficLightStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.TrafficLightStatus, 15));
};


/**
 * @param {?proto.apollo.planning.TrafficLightStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setTrafficLight = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearTrafficLight = function() {
  return this.setTrafficLight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasTrafficLight = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional YieldSignStatus yield_sign = 16;
 * @return {?proto.apollo.planning.YieldSignStatus}
 */
proto.apollo.planning.PlanningStatus.prototype.getYieldSign = function() {
  return /** @type{?proto.apollo.planning.YieldSignStatus} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.YieldSignStatus, 16));
};


/**
 * @param {?proto.apollo.planning.YieldSignStatus|undefined} value
 * @return {!proto.apollo.planning.PlanningStatus} returns this
*/
proto.apollo.planning.PlanningStatus.prototype.setYieldSign = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningStatus} returns this
 */
proto.apollo.planning.PlanningStatus.prototype.clearYieldSign = function() {
  return this.setYieldSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningStatus.prototype.hasYieldSign = function() {
  return jspb.Message.getField(this, 16) != null;
};


goog.object.extend(exports, proto.apollo.planning);
