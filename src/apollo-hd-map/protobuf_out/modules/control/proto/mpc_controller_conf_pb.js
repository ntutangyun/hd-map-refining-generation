// source: modules/control/proto/mpc_controller_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_control_proto_calibration_table_pb = require('../../../modules/control/proto/calibration_table_pb.js');
goog.object.extend(proto, modules_control_proto_calibration_table_pb);
var modules_control_proto_gain_scheduler_conf_pb = require('../../../modules/control/proto/gain_scheduler_conf_pb.js');
goog.object.extend(proto, modules_control_proto_gain_scheduler_conf_pb);
goog.exportSymbol('proto.apollo.control.MPCControllerConf', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.MPCControllerConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.control.MPCControllerConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.control.MPCControllerConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.MPCControllerConf.displayName = 'proto.apollo.control.MPCControllerConf';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.control.MPCControllerConf.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.MPCControllerConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.MPCControllerConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.MPCControllerConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MPCControllerConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    cf: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    cr: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    massFl: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    massFr: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    massRl: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    massRr: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    eps: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    matrixQList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 9)) == null ? undefined : f,
    matrixRList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f,
    cutoffFreq: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    meanFilterWindowSize: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    maxIteration: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    maxLateralAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    standstillAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    brakeMinimumAction: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    throttleMinimumAction: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    latErrGainScheduler: (f = msg.getLatErrGainScheduler()) && modules_control_proto_gain_scheduler_conf_pb.GainScheduler.toObject(includeInstance, f),
    headingErrGainScheduler: (f = msg.getHeadingErrGainScheduler()) && modules_control_proto_gain_scheduler_conf_pb.GainScheduler.toObject(includeInstance, f),
    steerWeightGainScheduler: (f = msg.getSteerWeightGainScheduler()) && modules_control_proto_gain_scheduler_conf_pb.GainScheduler.toObject(includeInstance, f),
    feedforwardtermGainScheduler: (f = msg.getFeedforwardtermGainScheduler()) && modules_control_proto_gain_scheduler_conf_pb.GainScheduler.toObject(includeInstance, f),
    calibrationTable: (f = msg.getCalibrationTable()) && modules_control_proto_calibration_table_pb.ControlCalibrationTable.toObject(includeInstance, f),
    enableMpcFeedforwardCompensation: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
    unconstrainedControlDiffLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MPCControllerConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.MPCControllerConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ts;

  /** @type {?|undefined} */
  this.cf;

  /** @type {?|undefined} */
  this.cr;

  /** @type {?|undefined} */
  this.massFl;

  /** @type {?|undefined} */
  this.massFr;

  /** @type {?|undefined} */
  this.massRl;

  /** @type {?|undefined} */
  this.massRr;

  /** @type {?|undefined} */
  this.eps;

  /** @type {?|undefined} */
  this.matrixQList;

  /** @type {?|undefined} */
  this.matrixRList;

  /** @type {?|undefined} */
  this.cutoffFreq;

  /** @type {?|undefined} */
  this.meanFilterWindowSize;

  /** @type {?|undefined} */
  this.maxIteration;

  /** @type {?|undefined} */
  this.maxLateralAcceleration;

  /** @type {?|undefined} */
  this.standstillAcceleration;

  /** @type {?|undefined} */
  this.brakeMinimumAction;

  /** @type {?|undefined} */
  this.throttleMinimumAction;

  /** @type {?|undefined} */
  this.latErrGainScheduler;

  /** @type {?|undefined} */
  this.headingErrGainScheduler;

  /** @type {?|undefined} */
  this.steerWeightGainScheduler;

  /** @type {?|undefined} */
  this.feedforwardtermGainScheduler;

  /** @type {?|undefined} */
  this.calibrationTable;

  /** @type {?|undefined} */
  this.enableMpcFeedforwardCompensation;

  /** @type {?|undefined} */
  this.unconstrainedControlDiffLimit;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.MPCControllerConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.MPCControllerConf}
 */
proto.apollo.control.MPCControllerConf.fromObject = function(obj) {
  var msg = new proto.apollo.control.MPCControllerConf();
  obj.ts != null && jspb.Message.setField(msg, 1, obj.ts);
  obj.cf != null && jspb.Message.setField(msg, 2, obj.cf);
  obj.cr != null && jspb.Message.setField(msg, 3, obj.cr);
  obj.massFl != null && jspb.Message.setField(msg, 4, obj.massFl);
  obj.massFr != null && jspb.Message.setField(msg, 5, obj.massFr);
  obj.massRl != null && jspb.Message.setField(msg, 6, obj.massRl);
  obj.massRr != null && jspb.Message.setField(msg, 7, obj.massRr);
  obj.eps != null && jspb.Message.setField(msg, 8, obj.eps);
  obj.matrixQList != null && jspb.Message.setField(msg, 9, obj.matrixQList);
  obj.matrixRList != null && jspb.Message.setField(msg, 10, obj.matrixRList);
  obj.cutoffFreq != null && jspb.Message.setField(msg, 11, obj.cutoffFreq);
  obj.meanFilterWindowSize != null && jspb.Message.setField(msg, 12, obj.meanFilterWindowSize);
  obj.maxIteration != null && jspb.Message.setField(msg, 13, obj.maxIteration);
  obj.maxLateralAcceleration != null && jspb.Message.setField(msg, 14, obj.maxLateralAcceleration);
  obj.standstillAcceleration != null && jspb.Message.setField(msg, 15, obj.standstillAcceleration);
  obj.brakeMinimumAction != null && jspb.Message.setField(msg, 16, obj.brakeMinimumAction);
  obj.throttleMinimumAction != null && jspb.Message.setField(msg, 17, obj.throttleMinimumAction);
  obj.latErrGainScheduler && jspb.Message.setWrapperField(
      msg, 18, modules_control_proto_gain_scheduler_conf_pb.GainScheduler.fromObject(obj.latErrGainScheduler));
  obj.headingErrGainScheduler && jspb.Message.setWrapperField(
      msg, 19, modules_control_proto_gain_scheduler_conf_pb.GainScheduler.fromObject(obj.headingErrGainScheduler));
  obj.steerWeightGainScheduler && jspb.Message.setWrapperField(
      msg, 20, modules_control_proto_gain_scheduler_conf_pb.GainScheduler.fromObject(obj.steerWeightGainScheduler));
  obj.feedforwardtermGainScheduler && jspb.Message.setWrapperField(
      msg, 21, modules_control_proto_gain_scheduler_conf_pb.GainScheduler.fromObject(obj.feedforwardtermGainScheduler));
  obj.calibrationTable && jspb.Message.setWrapperField(
      msg, 22, modules_control_proto_calibration_table_pb.ControlCalibrationTable.fromObject(obj.calibrationTable));
  obj.enableMpcFeedforwardCompensation != null && jspb.Message.setField(msg, 23, obj.enableMpcFeedforwardCompensation);
  obj.unconstrainedControlDiffLimit != null && jspb.Message.setField(msg, 24, obj.unconstrainedControlDiffLimit);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.MPCControllerConf}
 */
proto.apollo.control.MPCControllerConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.MPCControllerConf;
  return proto.apollo.control.MPCControllerConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.MPCControllerConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.MPCControllerConf}
 */
proto.apollo.control.MPCControllerConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCf(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMassFl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMassFr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMassRl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMassRr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEps(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatrixQ(values[i]);
      }
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addMatrixR(values[i]);
      }
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCutoffFreq(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMeanFilterWindowSize(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxIteration(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxLateralAcceleration(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStandstillAcceleration(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakeMinimumAction(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottleMinimumAction(value);
      break;
    case 18:
      var value = new modules_control_proto_gain_scheduler_conf_pb.GainScheduler;
      reader.readMessage(value,modules_control_proto_gain_scheduler_conf_pb.GainScheduler.deserializeBinaryFromReader);
      msg.setLatErrGainScheduler(value);
      break;
    case 19:
      var value = new modules_control_proto_gain_scheduler_conf_pb.GainScheduler;
      reader.readMessage(value,modules_control_proto_gain_scheduler_conf_pb.GainScheduler.deserializeBinaryFromReader);
      msg.setHeadingErrGainScheduler(value);
      break;
    case 20:
      var value = new modules_control_proto_gain_scheduler_conf_pb.GainScheduler;
      reader.readMessage(value,modules_control_proto_gain_scheduler_conf_pb.GainScheduler.deserializeBinaryFromReader);
      msg.setSteerWeightGainScheduler(value);
      break;
    case 21:
      var value = new modules_control_proto_gain_scheduler_conf_pb.GainScheduler;
      reader.readMessage(value,modules_control_proto_gain_scheduler_conf_pb.GainScheduler.deserializeBinaryFromReader);
      msg.setFeedforwardtermGainScheduler(value);
      break;
    case 22:
      var value = new modules_control_proto_calibration_table_pb.ControlCalibrationTable;
      reader.readMessage(value,modules_control_proto_calibration_table_pb.ControlCalibrationTable.deserializeBinaryFromReader);
      msg.setCalibrationTable(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableMpcFeedforwardCompensation(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnconstrainedControlDiffLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.MPCControllerConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.MPCControllerConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.MPCControllerConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MPCControllerConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMatrixQList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      9,
      f
    );
  }
  f = message.getMatrixRList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getLatErrGainScheduler();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      modules_control_proto_gain_scheduler_conf_pb.GainScheduler.serializeBinaryToWriter
    );
  }
  f = message.getHeadingErrGainScheduler();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      modules_control_proto_gain_scheduler_conf_pb.GainScheduler.serializeBinaryToWriter
    );
  }
  f = message.getSteerWeightGainScheduler();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      modules_control_proto_gain_scheduler_conf_pb.GainScheduler.serializeBinaryToWriter
    );
  }
  f = message.getFeedforwardtermGainScheduler();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      modules_control_proto_gain_scheduler_conf_pb.GainScheduler.serializeBinaryToWriter
    );
  }
  f = message.getCalibrationTable();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      modules_control_proto_calibration_table_pb.ControlCalibrationTable.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
};


/**
 * optional double ts = 1;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setTs = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearTs = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasTs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double cf = 2;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getCf = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setCf = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearCf = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasCf = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double cr = 3;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getCr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setCr = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearCr = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasCr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 mass_fl = 4;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getMassFl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMassFl = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMassFl = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasMassFl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 mass_fr = 5;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getMassFr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMassFr = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMassFr = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasMassFr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 mass_rl = 6;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getMassRl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMassRl = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMassRl = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasMassRl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 mass_rr = 7;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getMassRr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMassRr = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMassRr = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasMassRr = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double eps = 8;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getEps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setEps = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearEps = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasEps = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated double matrix_q = 9;
 * @return {!Array<number>}
 */
proto.apollo.control.MPCControllerConf.prototype.getMatrixQList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMatrixQList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.addMatrixQ = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMatrixQList = function() {
  return this.setMatrixQList([]);
};


/**
 * repeated double matrix_r = 10;
 * @return {!Array<number>}
 */
proto.apollo.control.MPCControllerConf.prototype.getMatrixRList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMatrixRList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.addMatrixR = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMatrixRList = function() {
  return this.setMatrixRList([]);
};


/**
 * optional int32 cutoff_freq = 11;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getCutoffFreq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setCutoffFreq = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearCutoffFreq = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasCutoffFreq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 mean_filter_window_size = 12;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getMeanFilterWindowSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMeanFilterWindowSize = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMeanFilterWindowSize = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasMeanFilterWindowSize = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 max_iteration = 13;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getMaxIteration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMaxIteration = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMaxIteration = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasMaxIteration = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double max_lateral_acceleration = 14;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getMaxLateralAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setMaxLateralAcceleration = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearMaxLateralAcceleration = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasMaxLateralAcceleration = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double standstill_acceleration = 15;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getStandstillAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setStandstillAcceleration = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearStandstillAcceleration = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasStandstillAcceleration = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double brake_minimum_action = 16;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getBrakeMinimumAction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setBrakeMinimumAction = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearBrakeMinimumAction = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasBrakeMinimumAction = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double throttle_minimum_action = 17;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getThrottleMinimumAction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setThrottleMinimumAction = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearThrottleMinimumAction = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasThrottleMinimumAction = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional GainScheduler lat_err_gain_scheduler = 18;
 * @return {?proto.apollo.control.GainScheduler}
 */
proto.apollo.control.MPCControllerConf.prototype.getLatErrGainScheduler = function() {
  return /** @type{?proto.apollo.control.GainScheduler} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_gain_scheduler_conf_pb.GainScheduler, 18));
};


/**
 * @param {?proto.apollo.control.GainScheduler|undefined} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
*/
proto.apollo.control.MPCControllerConf.prototype.setLatErrGainScheduler = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearLatErrGainScheduler = function() {
  return this.setLatErrGainScheduler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasLatErrGainScheduler = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional GainScheduler heading_err_gain_scheduler = 19;
 * @return {?proto.apollo.control.GainScheduler}
 */
proto.apollo.control.MPCControllerConf.prototype.getHeadingErrGainScheduler = function() {
  return /** @type{?proto.apollo.control.GainScheduler} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_gain_scheduler_conf_pb.GainScheduler, 19));
};


/**
 * @param {?proto.apollo.control.GainScheduler|undefined} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
*/
proto.apollo.control.MPCControllerConf.prototype.setHeadingErrGainScheduler = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearHeadingErrGainScheduler = function() {
  return this.setHeadingErrGainScheduler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasHeadingErrGainScheduler = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional GainScheduler steer_weight_gain_scheduler = 20;
 * @return {?proto.apollo.control.GainScheduler}
 */
proto.apollo.control.MPCControllerConf.prototype.getSteerWeightGainScheduler = function() {
  return /** @type{?proto.apollo.control.GainScheduler} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_gain_scheduler_conf_pb.GainScheduler, 20));
};


/**
 * @param {?proto.apollo.control.GainScheduler|undefined} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
*/
proto.apollo.control.MPCControllerConf.prototype.setSteerWeightGainScheduler = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearSteerWeightGainScheduler = function() {
  return this.setSteerWeightGainScheduler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasSteerWeightGainScheduler = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional GainScheduler feedforwardterm_gain_scheduler = 21;
 * @return {?proto.apollo.control.GainScheduler}
 */
proto.apollo.control.MPCControllerConf.prototype.getFeedforwardtermGainScheduler = function() {
  return /** @type{?proto.apollo.control.GainScheduler} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_gain_scheduler_conf_pb.GainScheduler, 21));
};


/**
 * @param {?proto.apollo.control.GainScheduler|undefined} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
*/
proto.apollo.control.MPCControllerConf.prototype.setFeedforwardtermGainScheduler = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearFeedforwardtermGainScheduler = function() {
  return this.setFeedforwardtermGainScheduler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasFeedforwardtermGainScheduler = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional calibrationtable.ControlCalibrationTable calibration_table = 22;
 * @return {?proto.apollo.control.calibrationtable.ControlCalibrationTable}
 */
proto.apollo.control.MPCControllerConf.prototype.getCalibrationTable = function() {
  return /** @type{?proto.apollo.control.calibrationtable.ControlCalibrationTable} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_calibration_table_pb.ControlCalibrationTable, 22));
};


/**
 * @param {?proto.apollo.control.calibrationtable.ControlCalibrationTable|undefined} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
*/
proto.apollo.control.MPCControllerConf.prototype.setCalibrationTable = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearCalibrationTable = function() {
  return this.setCalibrationTable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasCalibrationTable = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool enable_mpc_feedforward_compensation = 23;
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.getEnableMpcFeedforwardCompensation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setEnableMpcFeedforwardCompensation = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearEnableMpcFeedforwardCompensation = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasEnableMpcFeedforwardCompensation = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double unconstrained_control_diff_limit = 24;
 * @return {number}
 */
proto.apollo.control.MPCControllerConf.prototype.getUnconstrainedControlDiffLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.setUnconstrainedControlDiffLimit = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MPCControllerConf} returns this
 */
proto.apollo.control.MPCControllerConf.prototype.clearUnconstrainedControlDiffLimit = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MPCControllerConf.prototype.hasUnconstrainedControlDiffLimit = function() {
  return jspb.Message.getField(this, 24) != null;
};


goog.object.extend(exports, proto.apollo.control);
