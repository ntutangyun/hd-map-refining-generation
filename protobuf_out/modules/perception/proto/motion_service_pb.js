// source: modules/perception/proto/motion_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
goog.exportSymbol('proto.apollo.perception.MotionType', null, global);
goog.exportSymbol('proto.apollo.perception.Motion_Service', null, global);
goog.exportSymbol('proto.apollo.perception.VehicleStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.MotionType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.MotionType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.MotionType.displayName = 'proto.apollo.perception.MotionType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.VehicleStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.VehicleStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.VehicleStatus.displayName = 'proto.apollo.perception.VehicleStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.Motion_Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.Motion_Service.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.Motion_Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.Motion_Service.displayName = 'proto.apollo.perception.Motion_Service';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.MotionType.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.MotionType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.MotionType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.MotionType.toObject = function(includeInstance, msg) {
  var f, obj = {
    m00: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    m01: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    m02: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    m03: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    m10: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    m11: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    m12: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    m13: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    m20: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    m21: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    m22: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    m23: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    m30: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    m31: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    m32: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    m33: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MotionType as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.MotionType.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.m00;

  /** @type {?|undefined} */
  this.m01;

  /** @type {?|undefined} */
  this.m02;

  /** @type {?|undefined} */
  this.m03;

  /** @type {?|undefined} */
  this.m10;

  /** @type {?|undefined} */
  this.m11;

  /** @type {?|undefined} */
  this.m12;

  /** @type {?|undefined} */
  this.m13;

  /** @type {?|undefined} */
  this.m20;

  /** @type {?|undefined} */
  this.m21;

  /** @type {?|undefined} */
  this.m22;

  /** @type {?|undefined} */
  this.m23;

  /** @type {?|undefined} */
  this.m30;

  /** @type {?|undefined} */
  this.m31;

  /** @type {?|undefined} */
  this.m32;

  /** @type {?|undefined} */
  this.m33;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.MotionType.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.MotionType}
 */
proto.apollo.perception.MotionType.fromObject = function(obj) {
  var msg = new proto.apollo.perception.MotionType();
  obj.m00 != null && jspb.Message.setField(msg, 1, obj.m00);
  obj.m01 != null && jspb.Message.setField(msg, 2, obj.m01);
  obj.m02 != null && jspb.Message.setField(msg, 3, obj.m02);
  obj.m03 != null && jspb.Message.setField(msg, 4, obj.m03);
  obj.m10 != null && jspb.Message.setField(msg, 5, obj.m10);
  obj.m11 != null && jspb.Message.setField(msg, 6, obj.m11);
  obj.m12 != null && jspb.Message.setField(msg, 7, obj.m12);
  obj.m13 != null && jspb.Message.setField(msg, 8, obj.m13);
  obj.m20 != null && jspb.Message.setField(msg, 9, obj.m20);
  obj.m21 != null && jspb.Message.setField(msg, 10, obj.m21);
  obj.m22 != null && jspb.Message.setField(msg, 11, obj.m22);
  obj.m23 != null && jspb.Message.setField(msg, 12, obj.m23);
  obj.m30 != null && jspb.Message.setField(msg, 13, obj.m30);
  obj.m31 != null && jspb.Message.setField(msg, 14, obj.m31);
  obj.m32 != null && jspb.Message.setField(msg, 15, obj.m32);
  obj.m33 != null && jspb.Message.setField(msg, 16, obj.m33);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.MotionType}
 */
proto.apollo.perception.MotionType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.MotionType;
  return proto.apollo.perception.MotionType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.MotionType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.MotionType}
 */
proto.apollo.perception.MotionType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM00(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM01(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM02(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM03(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM10(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM11(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM12(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM13(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM20(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM21(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM22(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM23(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM30(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM31(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM32(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM33(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.MotionType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.MotionType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.MotionType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.MotionType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
};


/**
 * optional float m00 = 1;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM00 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM00 = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM00 = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM00 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float m01 = 2;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM01 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM01 = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM01 = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM01 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float m02 = 3;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM02 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM02 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM02 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM02 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float m03 = 4;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM03 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM03 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM03 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM03 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float m10 = 5;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM10 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM10 = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM10 = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM10 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float m11 = 6;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM11 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM11 = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM11 = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM11 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float m12 = 7;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM12 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM12 = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM12 = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM12 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float m13 = 8;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM13 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM13 = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM13 = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM13 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float m20 = 9;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM20 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM20 = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM20 = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM20 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float m21 = 10;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM21 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM21 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM21 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM21 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float m22 = 11;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM22 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM22 = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM22 = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM22 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float m23 = 12;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM23 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM23 = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM23 = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM23 = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float m30 = 13;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM30 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM30 = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM30 = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM30 = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float m31 = 14;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM31 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM31 = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM31 = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM31 = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float m32 = 15;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM32 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM32 = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM32 = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM32 = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float m33 = 16;
 * @return {number}
 */
proto.apollo.perception.MotionType.prototype.getM33 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.setM33 = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.MotionType} returns this
 */
proto.apollo.perception.MotionType.prototype.clearM33 = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.MotionType.prototype.hasM33 = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.VehicleStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.VehicleStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.VehicleStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.VehicleStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    pitchRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    yawRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    velocity: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    velocityX: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    velocityY: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    velocityZ: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    timeTs: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    timeD: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    motion: (f = msg.getMotion()) && proto.apollo.perception.MotionType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VehicleStatus as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.VehicleStatus.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.rollRate;

  /** @type {?|undefined} */
  this.pitchRate;

  /** @type {?|undefined} */
  this.yawRate;

  /** @type {?|undefined} */
  this.velocity;

  /** @type {?|undefined} */
  this.velocityX;

  /** @type {?|undefined} */
  this.velocityY;

  /** @type {?|undefined} */
  this.velocityZ;

  /** @type {?|undefined} */
  this.timeTs;

  /** @type {?|undefined} */
  this.timeD;

  /** @type {?|undefined} */
  this.motion;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.VehicleStatus.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.VehicleStatus}
 */
proto.apollo.perception.VehicleStatus.fromObject = function(obj) {
  var msg = new proto.apollo.perception.VehicleStatus();
  obj.rollRate != null && jspb.Message.setField(msg, 1, obj.rollRate);
  obj.pitchRate != null && jspb.Message.setField(msg, 2, obj.pitchRate);
  obj.yawRate != null && jspb.Message.setField(msg, 3, obj.yawRate);
  obj.velocity != null && jspb.Message.setField(msg, 4, obj.velocity);
  obj.velocityX != null && jspb.Message.setField(msg, 5, obj.velocityX);
  obj.velocityY != null && jspb.Message.setField(msg, 6, obj.velocityY);
  obj.velocityZ != null && jspb.Message.setField(msg, 7, obj.velocityZ);
  obj.timeTs != null && jspb.Message.setField(msg, 8, obj.timeTs);
  obj.timeD != null && jspb.Message.setField(msg, 9, obj.timeD);
  obj.motion && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.perception.MotionType.fromObject(obj.motion));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.VehicleStatus}
 */
proto.apollo.perception.VehicleStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.VehicleStatus;
  return proto.apollo.perception.VehicleStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.VehicleStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.VehicleStatus}
 */
proto.apollo.perception.VehicleStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRollRate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitchRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYawRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVelocityZ(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeTs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeD(value);
      break;
    case 10:
      var value = new proto.apollo.perception.MotionType;
      reader.readMessage(value,proto.apollo.perception.MotionType.deserializeBinaryFromReader);
      msg.setMotion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.VehicleStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.VehicleStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.VehicleStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.VehicleStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getMotion();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.perception.MotionType.serializeBinaryToWriter
    );
  }
};


/**
 * optional float roll_rate = 1;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getRollRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setRollRate = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearRollRate = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasRollRate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float pitch_rate = 2;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getPitchRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setPitchRate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearPitchRate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasPitchRate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float yaw_rate = 3;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getYawRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setYawRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearYawRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasYawRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float velocity = 4;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getVelocity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setVelocity = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearVelocity = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float velocity_x = 5;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getVelocityX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setVelocityX = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearVelocityX = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasVelocityX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float velocity_y = 6;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getVelocityY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setVelocityY = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearVelocityY = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasVelocityY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float velocity_z = 7;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getVelocityZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setVelocityZ = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearVelocityZ = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasVelocityZ = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double time_ts = 8;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getTimeTs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setTimeTs = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearTimeTs = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasTimeTs = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double time_d = 9;
 * @return {number}
 */
proto.apollo.perception.VehicleStatus.prototype.getTimeD = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.setTimeD = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearTimeD = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasTimeD = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MotionType motion = 10;
 * @return {?proto.apollo.perception.MotionType}
 */
proto.apollo.perception.VehicleStatus.prototype.getMotion = function() {
  return /** @type{?proto.apollo.perception.MotionType} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.MotionType, 10));
};


/**
 * @param {?proto.apollo.perception.MotionType|undefined} value
 * @return {!proto.apollo.perception.VehicleStatus} returns this
*/
proto.apollo.perception.VehicleStatus.prototype.setMotion = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.VehicleStatus} returns this
 */
proto.apollo.perception.VehicleStatus.prototype.clearMotion = function() {
  return this.setMotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.VehicleStatus.prototype.hasMotion = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.Motion_Service.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.Motion_Service.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.Motion_Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.Motion_Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.Motion_Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehicleStatusList: jspb.Message.toObjectList(msg.getVehicleStatusList(),
    proto.apollo.perception.VehicleStatus.toObject, includeInstance),
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Motion_Service as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.Motion_Service.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.vehicleStatusList;

  /** @type {?|undefined} */
  this.header;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.Motion_Service.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.Motion_Service}
 */
proto.apollo.perception.Motion_Service.fromObject = function(obj) {
  var msg = new proto.apollo.perception.Motion_Service();
  obj.vehicleStatusList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.vehicleStatusList.map(
          proto.apollo.perception.VehicleStatus.fromObject));
  obj.header && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_header_pb.Header.fromObject(obj.header));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.Motion_Service}
 */
proto.apollo.perception.Motion_Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.Motion_Service;
  return proto.apollo.perception.Motion_Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.Motion_Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.Motion_Service}
 */
proto.apollo.perception.Motion_Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.VehicleStatus;
      reader.readMessage(value,proto.apollo.perception.VehicleStatus.deserializeBinaryFromReader);
      msg.addVehicleStatus(value);
      break;
    case 2:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.Motion_Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.Motion_Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.Motion_Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.Motion_Service.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehicleStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.VehicleStatus.serializeBinaryToWriter
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VehicleStatus vehicle_status = 1;
 * @return {!Array<!proto.apollo.perception.VehicleStatus>}
 */
proto.apollo.perception.Motion_Service.prototype.getVehicleStatusList = function() {
  return /** @type{!Array<!proto.apollo.perception.VehicleStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.VehicleStatus, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.VehicleStatus>} value
 * @return {!proto.apollo.perception.Motion_Service} returns this
*/
proto.apollo.perception.Motion_Service.prototype.setVehicleStatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.VehicleStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.VehicleStatus}
 */
proto.apollo.perception.Motion_Service.prototype.addVehicleStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.VehicleStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.Motion_Service} returns this
 */
proto.apollo.perception.Motion_Service.prototype.clearVehicleStatusList = function() {
  return this.setVehicleStatusList([]);
};


/**
 * optional apollo.common.Header header = 2;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.perception.Motion_Service.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 2));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.perception.Motion_Service} returns this
*/
proto.apollo.perception.Motion_Service.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.Motion_Service} returns this
 */
proto.apollo.perception.Motion_Service.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.Motion_Service.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.apollo.perception);
