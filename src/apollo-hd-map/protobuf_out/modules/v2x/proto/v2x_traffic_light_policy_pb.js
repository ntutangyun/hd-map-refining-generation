// source: modules/v2x/proto/v2x_traffic_light_policy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.v2x.Connection', null, global);
goog.exportSymbol('proto.apollo.v2x.Connection.Type', null, global);
goog.exportSymbol('proto.apollo.v2x.Intersection', null, global);
goog.exportSymbol('proto.apollo.v2x.IntersectionState', null, global);
goog.exportSymbol('proto.apollo.v2x.Lane', null, global);
goog.exportSymbol('proto.apollo.v2x.Map', null, global);
goog.exportSymbol('proto.apollo.v2x.Phase', null, global);
goog.exportSymbol('proto.apollo.v2x.Phase.Color', null, global);
goog.exportSymbol('proto.apollo.v2x.PolicyData', null, global);
goog.exportSymbol('proto.apollo.v2x.Position2D', null, global);
goog.exportSymbol('proto.apollo.v2x.Road', null, global);
goog.exportSymbol('proto.apollo.v2x.Spat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Position2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.Position2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Position2D.displayName = 'proto.apollo.v2x.Position2D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Connection.displayName = 'proto.apollo.v2x.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Lane = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.Lane.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.Lane, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Lane.displayName = 'proto.apollo.v2x.Lane';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Road = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.Road.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.Road, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Road.displayName = 'proto.apollo.v2x.Road';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Intersection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.Intersection.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.Intersection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Intersection.displayName = 'proto.apollo.v2x.Intersection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.Map.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Map.displayName = 'proto.apollo.v2x.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Phase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.Phase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Phase.displayName = 'proto.apollo.v2x.Phase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.IntersectionState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.IntersectionState.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.IntersectionState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.IntersectionState.displayName = 'proto.apollo.v2x.IntersectionState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.Spat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.v2x.Spat.repeatedFields_, null);
};
goog.inherits(proto.apollo.v2x.Spat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.Spat.displayName = 'proto.apollo.v2x.Spat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.v2x.PolicyData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.v2x.PolicyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.v2x.PolicyData.displayName = 'proto.apollo.v2x.PolicyData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Position2D.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Position2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Position2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Position2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Position2D as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Position2D.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Position2D.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Position2D}
 */
proto.apollo.v2x.Position2D.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Position2D();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Position2D}
 */
proto.apollo.v2x.Position2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Position2D;
  return proto.apollo.v2x.Position2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Position2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Position2D}
 */
proto.apollo.v2x.Position2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Position2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Position2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Position2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Position2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.apollo.v2x.Position2D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Position2D} returns this
 */
proto.apollo.v2x.Position2D.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Position2D} returns this
 */
proto.apollo.v2x.Position2D.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Position2D.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.apollo.v2x.Position2D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Position2D} returns this
 */
proto.apollo.v2x.Position2D.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Position2D} returns this
 */
proto.apollo.v2x.Position2D.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Position2D.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowDrivingBehavior: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    phaseId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Connection as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Connection.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.allowDrivingBehavior;

  /** @type {?|undefined} */
  this.phaseId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Connection.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Connection}
 */
proto.apollo.v2x.Connection.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Connection();
  obj.allowDrivingBehavior != null && jspb.Message.setField(msg, 1, obj.allowDrivingBehavior);
  obj.phaseId != null && jspb.Message.setField(msg, 2, obj.phaseId);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Connection}
 */
proto.apollo.v2x.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Connection;
  return proto.apollo.v2x.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Connection}
 */
proto.apollo.v2x.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.v2x.Connection.Type} */ (reader.readEnum());
      msg.setAllowDrivingBehavior(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhaseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.v2x.Connection.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.v2x.Connection.Type = {
  STRAIGHT: 0,
  LEFT: 1,
  RIGHT: 2,
  U_TURN: 3
};

/**
 * optional Type allow_driving_behavior = 1;
 * @return {!proto.apollo.v2x.Connection.Type}
 */
proto.apollo.v2x.Connection.prototype.getAllowDrivingBehavior = function() {
  return /** @type {!proto.apollo.v2x.Connection.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.v2x.Connection.Type} value
 * @return {!proto.apollo.v2x.Connection} returns this
 */
proto.apollo.v2x.Connection.prototype.setAllowDrivingBehavior = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Connection} returns this
 */
proto.apollo.v2x.Connection.prototype.clearAllowDrivingBehavior = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Connection.prototype.hasAllowDrivingBehavior = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 phase_id = 2;
 * @return {number}
 */
proto.apollo.v2x.Connection.prototype.getPhaseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Connection} returns this
 */
proto.apollo.v2x.Connection.prototype.setPhaseId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Connection} returns this
 */
proto.apollo.v2x.Connection.prototype.clearPhaseId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Connection.prototype.hasPhaseId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.Lane.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Lane.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Lane.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Lane} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Lane.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    positionOffsetList: jspb.Message.toObjectList(msg.getPositionOffsetList(),
    proto.apollo.v2x.Position2D.toObject, includeInstance),
    connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(),
    proto.apollo.v2x.Connection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Lane as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Lane.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneId;

  /** @type {?|undefined} */
  this.positionOffsetList;

  /** @type {?|undefined} */
  this.connectionsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Lane.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Lane}
 */
proto.apollo.v2x.Lane.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Lane();
  obj.laneId != null && jspb.Message.setField(msg, 1, obj.laneId);
  obj.positionOffsetList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.positionOffsetList.map(
          proto.apollo.v2x.Position2D.fromObject));
  obj.connectionsList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.connectionsList.map(
          proto.apollo.v2x.Connection.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Lane}
 */
proto.apollo.v2x.Lane.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Lane;
  return proto.apollo.v2x.Lane.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Lane} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Lane}
 */
proto.apollo.v2x.Lane.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLaneId(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.Position2D;
      reader.readMessage(value,proto.apollo.v2x.Position2D.deserializeBinaryFromReader);
      msg.addPositionOffset(value);
      break;
    case 3:
      var value = new proto.apollo.v2x.Connection;
      reader.readMessage(value,proto.apollo.v2x.Connection.deserializeBinaryFromReader);
      msg.addConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Lane.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Lane.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Lane} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Lane.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPositionOffsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.v2x.Position2D.serializeBinaryToWriter
    );
  }
  f = message.getConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.v2x.Connection.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 lane_id = 1;
 * @return {number}
 */
proto.apollo.v2x.Lane.prototype.getLaneId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Lane} returns this
 */
proto.apollo.v2x.Lane.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Lane} returns this
 */
proto.apollo.v2x.Lane.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Lane.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Position2D position_offset = 2;
 * @return {!Array<!proto.apollo.v2x.Position2D>}
 */
proto.apollo.v2x.Lane.prototype.getPositionOffsetList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Position2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Position2D, 2));
};


/**
 * @param {!Array<!proto.apollo.v2x.Position2D>} value
 * @return {!proto.apollo.v2x.Lane} returns this
*/
proto.apollo.v2x.Lane.prototype.setPositionOffsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.v2x.Position2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Position2D}
 */
proto.apollo.v2x.Lane.prototype.addPositionOffset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.v2x.Position2D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Lane} returns this
 */
proto.apollo.v2x.Lane.prototype.clearPositionOffsetList = function() {
  return this.setPositionOffsetList([]);
};


/**
 * repeated Connection connections = 3;
 * @return {!Array<!proto.apollo.v2x.Connection>}
 */
proto.apollo.v2x.Lane.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Connection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Connection, 3));
};


/**
 * @param {!Array<!proto.apollo.v2x.Connection>} value
 * @return {!proto.apollo.v2x.Lane} returns this
*/
proto.apollo.v2x.Lane.prototype.setConnectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.v2x.Connection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Connection}
 */
proto.apollo.v2x.Lane.prototype.addConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.v2x.Connection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Lane} returns this
 */
proto.apollo.v2x.Lane.prototype.clearConnectionsList = function() {
  return this.setConnectionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.Road.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Road.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Road.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Road} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Road.toObject = function(includeInstance, msg) {
  var f, obj = {
    upstreamNodeId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    points: (f = msg.getPoints()) && proto.apollo.v2x.Position2D.toObject(includeInstance, f),
    lanesList: jspb.Message.toObjectList(msg.getLanesList(),
    proto.apollo.v2x.Lane.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Road as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Road.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.upstreamNodeId;

  /** @type {?|undefined} */
  this.points;

  /** @type {?|undefined} */
  this.lanesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Road.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Road}
 */
proto.apollo.v2x.Road.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Road();
  obj.upstreamNodeId != null && jspb.Message.setField(msg, 1, obj.upstreamNodeId);
  obj.points && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.v2x.Position2D.fromObject(obj.points));
  obj.lanesList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.lanesList.map(
          proto.apollo.v2x.Lane.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Road}
 */
proto.apollo.v2x.Road.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Road;
  return proto.apollo.v2x.Road.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Road} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Road}
 */
proto.apollo.v2x.Road.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpstreamNodeId(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.Position2D;
      reader.readMessage(value,proto.apollo.v2x.Position2D.deserializeBinaryFromReader);
      msg.setPoints(value);
      break;
    case 3:
      var value = new proto.apollo.v2x.Lane;
      reader.readMessage(value,proto.apollo.v2x.Lane.deserializeBinaryFromReader);
      msg.addLanes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Road.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Road.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Road} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Road.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPoints();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.v2x.Position2D.serializeBinaryToWriter
    );
  }
  f = message.getLanesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.v2x.Lane.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 upstream_node_id = 1;
 * @return {number}
 */
proto.apollo.v2x.Road.prototype.getUpstreamNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Road} returns this
 */
proto.apollo.v2x.Road.prototype.setUpstreamNodeId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Road} returns this
 */
proto.apollo.v2x.Road.prototype.clearUpstreamNodeId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Road.prototype.hasUpstreamNodeId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Position2D points = 2;
 * @return {?proto.apollo.v2x.Position2D}
 */
proto.apollo.v2x.Road.prototype.getPoints = function() {
  return /** @type{?proto.apollo.v2x.Position2D} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Position2D, 2));
};


/**
 * @param {?proto.apollo.v2x.Position2D|undefined} value
 * @return {!proto.apollo.v2x.Road} returns this
*/
proto.apollo.v2x.Road.prototype.setPoints = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.Road} returns this
 */
proto.apollo.v2x.Road.prototype.clearPoints = function() {
  return this.setPoints(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Road.prototype.hasPoints = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Lane lanes = 3;
 * @return {!Array<!proto.apollo.v2x.Lane>}
 */
proto.apollo.v2x.Road.prototype.getLanesList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Lane>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Lane, 3));
};


/**
 * @param {!Array<!proto.apollo.v2x.Lane>} value
 * @return {!proto.apollo.v2x.Road} returns this
*/
proto.apollo.v2x.Road.prototype.setLanesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.v2x.Lane=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Lane}
 */
proto.apollo.v2x.Road.prototype.addLanes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.v2x.Lane, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Road} returns this
 */
proto.apollo.v2x.Road.prototype.clearLanesList = function() {
  return this.setLanesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.Intersection.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Intersection.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Intersection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Intersection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Intersection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    position: (f = msg.getPosition()) && proto.apollo.v2x.Position2D.toObject(includeInstance, f),
    roadsList: jspb.Message.toObjectList(msg.getRoadsList(),
    proto.apollo.v2x.Road.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Intersection as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Intersection.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.position;

  /** @type {?|undefined} */
  this.roadsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Intersection.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Intersection}
 */
proto.apollo.v2x.Intersection.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Intersection();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.position && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.v2x.Position2D.fromObject(obj.position));
  obj.roadsList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.roadsList.map(
          proto.apollo.v2x.Road.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Intersection}
 */
proto.apollo.v2x.Intersection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Intersection;
  return proto.apollo.v2x.Intersection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Intersection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Intersection}
 */
proto.apollo.v2x.Intersection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.Position2D;
      reader.readMessage(value,proto.apollo.v2x.Position2D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new proto.apollo.v2x.Road;
      reader.readMessage(value,proto.apollo.v2x.Road.deserializeBinaryFromReader);
      msg.addRoads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Intersection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Intersection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Intersection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Intersection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.v2x.Position2D.serializeBinaryToWriter
    );
  }
  f = message.getRoadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.v2x.Road.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.v2x.Intersection.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Intersection} returns this
 */
proto.apollo.v2x.Intersection.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Intersection} returns this
 */
proto.apollo.v2x.Intersection.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Intersection.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Position2D position = 2;
 * @return {?proto.apollo.v2x.Position2D}
 */
proto.apollo.v2x.Intersection.prototype.getPosition = function() {
  return /** @type{?proto.apollo.v2x.Position2D} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Position2D, 2));
};


/**
 * @param {?proto.apollo.v2x.Position2D|undefined} value
 * @return {!proto.apollo.v2x.Intersection} returns this
*/
proto.apollo.v2x.Intersection.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.Intersection} returns this
 */
proto.apollo.v2x.Intersection.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Intersection.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Road roads = 3;
 * @return {!Array<!proto.apollo.v2x.Road>}
 */
proto.apollo.v2x.Intersection.prototype.getRoadsList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Road>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Road, 3));
};


/**
 * @param {!Array<!proto.apollo.v2x.Road>} value
 * @return {!proto.apollo.v2x.Intersection} returns this
*/
proto.apollo.v2x.Intersection.prototype.setRoadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.v2x.Road=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Road}
 */
proto.apollo.v2x.Intersection.prototype.addRoads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.v2x.Road, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Intersection} returns this
 */
proto.apollo.v2x.Intersection.prototype.clearRoadsList = function() {
  return this.setRoadsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.Map.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeStamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    msgCnt: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    intersectionsList: jspb.Message.toObjectList(msg.getIntersectionsList(),
    proto.apollo.v2x.Intersection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Map as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Map.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timeStamp;

  /** @type {?|undefined} */
  this.msgCnt;

  /** @type {?|undefined} */
  this.intersectionsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Map.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Map}
 */
proto.apollo.v2x.Map.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Map();
  obj.timeStamp != null && jspb.Message.setField(msg, 1, obj.timeStamp);
  obj.msgCnt != null && jspb.Message.setField(msg, 2, obj.msgCnt);
  obj.intersectionsList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.intersectionsList.map(
          proto.apollo.v2x.Intersection.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Map}
 */
proto.apollo.v2x.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Map;
  return proto.apollo.v2x.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Map}
 */
proto.apollo.v2x.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeStamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgCnt(value);
      break;
    case 3:
      var value = new proto.apollo.v2x.Intersection;
      reader.readMessage(value,proto.apollo.v2x.Intersection.deserializeBinaryFromReader);
      msg.addIntersections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIntersectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.v2x.Intersection.serializeBinaryToWriter
    );
  }
};


/**
 * optional double time_stamp = 1;
 * @return {number}
 */
proto.apollo.v2x.Map.prototype.getTimeStamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Map} returns this
 */
proto.apollo.v2x.Map.prototype.setTimeStamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Map} returns this
 */
proto.apollo.v2x.Map.prototype.clearTimeStamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Map.prototype.hasTimeStamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 msg_cnt = 2;
 * @return {number}
 */
proto.apollo.v2x.Map.prototype.getMsgCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Map} returns this
 */
proto.apollo.v2x.Map.prototype.setMsgCnt = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Map} returns this
 */
proto.apollo.v2x.Map.prototype.clearMsgCnt = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Map.prototype.hasMsgCnt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Intersection intersections = 3;
 * @return {!Array<!proto.apollo.v2x.Intersection>}
 */
proto.apollo.v2x.Map.prototype.getIntersectionsList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Intersection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Intersection, 3));
};


/**
 * @param {!Array<!proto.apollo.v2x.Intersection>} value
 * @return {!proto.apollo.v2x.Map} returns this
*/
proto.apollo.v2x.Map.prototype.setIntersectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.v2x.Intersection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Intersection}
 */
proto.apollo.v2x.Map.prototype.addIntersections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.v2x.Intersection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Map} returns this
 */
proto.apollo.v2x.Map.prototype.clearIntersectionsList = function() {
  return this.setIntersectionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Phase.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Phase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Phase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Phase.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    color: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    colorRemainingTimeS: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Phase as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Phase.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.color;

  /** @type {?|undefined} */
  this.colorRemainingTimeS;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Phase.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Phase}
 */
proto.apollo.v2x.Phase.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Phase();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.color != null && jspb.Message.setField(msg, 2, obj.color);
  obj.colorRemainingTimeS != null && jspb.Message.setField(msg, 3, obj.colorRemainingTimeS);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Phase}
 */
proto.apollo.v2x.Phase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Phase;
  return proto.apollo.v2x.Phase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Phase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Phase}
 */
proto.apollo.v2x.Phase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.v2x.Phase.Color} */ (reader.readEnum());
      msg.setColor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColorRemainingTimeS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Phase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Phase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Phase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Phase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.v2x.Phase.Color} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.v2x.Phase.Color = {
  UNKNOWN: 0,
  RED: 1,
  YELLOW: 2,
  GREEN: 3,
  BLACK: 4,
  FLASH_GREEN: 5
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.v2x.Phase.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Phase} returns this
 */
proto.apollo.v2x.Phase.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Phase} returns this
 */
proto.apollo.v2x.Phase.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Phase.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Color color = 2;
 * @return {!proto.apollo.v2x.Phase.Color}
 */
proto.apollo.v2x.Phase.prototype.getColor = function() {
  return /** @type {!proto.apollo.v2x.Phase.Color} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.v2x.Phase.Color} value
 * @return {!proto.apollo.v2x.Phase} returns this
 */
proto.apollo.v2x.Phase.prototype.setColor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Phase} returns this
 */
proto.apollo.v2x.Phase.prototype.clearColor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Phase.prototype.hasColor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 color_remaining_time_s = 3;
 * @return {number}
 */
proto.apollo.v2x.Phase.prototype.getColorRemainingTimeS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Phase} returns this
 */
proto.apollo.v2x.Phase.prototype.setColorRemainingTimeS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Phase} returns this
 */
proto.apollo.v2x.Phase.prototype.clearColorRemainingTimeS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Phase.prototype.hasColorRemainingTimeS = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.IntersectionState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.IntersectionState.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.IntersectionState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.IntersectionState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.IntersectionState.toObject = function(includeInstance, msg) {
  var f, obj = {
    intersectionId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    phasesList: jspb.Message.toObjectList(msg.getPhasesList(),
    proto.apollo.v2x.Phase.toObject, includeInstance),
    moy: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    timeStampDsecond: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of IntersectionState as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.IntersectionState.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.intersectionId;

  /** @type {?|undefined} */
  this.phasesList;

  /** @type {?|undefined} */
  this.moy;

  /** @type {?|undefined} */
  this.timeStampDsecond;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.IntersectionState.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.IntersectionState}
 */
proto.apollo.v2x.IntersectionState.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.IntersectionState();
  obj.intersectionId != null && jspb.Message.setField(msg, 1, obj.intersectionId);
  obj.phasesList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.phasesList.map(
          proto.apollo.v2x.Phase.fromObject));
  obj.moy != null && jspb.Message.setField(msg, 3, obj.moy);
  obj.timeStampDsecond != null && jspb.Message.setField(msg, 4, obj.timeStampDsecond);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.IntersectionState}
 */
proto.apollo.v2x.IntersectionState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.IntersectionState;
  return proto.apollo.v2x.IntersectionState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.IntersectionState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.IntersectionState}
 */
proto.apollo.v2x.IntersectionState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntersectionId(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.Phase;
      reader.readMessage(value,proto.apollo.v2x.Phase.deserializeBinaryFromReader);
      msg.addPhases(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeStampDsecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.IntersectionState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.IntersectionState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.IntersectionState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.IntersectionState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPhasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.v2x.Phase.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 intersection_id = 1;
 * @return {number}
 */
proto.apollo.v2x.IntersectionState.prototype.getIntersectionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.IntersectionState} returns this
 */
proto.apollo.v2x.IntersectionState.prototype.setIntersectionId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.IntersectionState} returns this
 */
proto.apollo.v2x.IntersectionState.prototype.clearIntersectionId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.IntersectionState.prototype.hasIntersectionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Phase Phases = 2;
 * @return {!Array<!proto.apollo.v2x.Phase>}
 */
proto.apollo.v2x.IntersectionState.prototype.getPhasesList = function() {
  return /** @type{!Array<!proto.apollo.v2x.Phase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.Phase, 2));
};


/**
 * @param {!Array<!proto.apollo.v2x.Phase>} value
 * @return {!proto.apollo.v2x.IntersectionState} returns this
*/
proto.apollo.v2x.IntersectionState.prototype.setPhasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.v2x.Phase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.Phase}
 */
proto.apollo.v2x.IntersectionState.prototype.addPhases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.v2x.Phase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.IntersectionState} returns this
 */
proto.apollo.v2x.IntersectionState.prototype.clearPhasesList = function() {
  return this.setPhasesList([]);
};


/**
 * optional int32 moy = 3;
 * @return {number}
 */
proto.apollo.v2x.IntersectionState.prototype.getMoy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.IntersectionState} returns this
 */
proto.apollo.v2x.IntersectionState.prototype.setMoy = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.IntersectionState} returns this
 */
proto.apollo.v2x.IntersectionState.prototype.clearMoy = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.IntersectionState.prototype.hasMoy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 time_stamp_dsecond = 4;
 * @return {number}
 */
proto.apollo.v2x.IntersectionState.prototype.getTimeStampDsecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.IntersectionState} returns this
 */
proto.apollo.v2x.IntersectionState.prototype.setTimeStampDsecond = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.IntersectionState} returns this
 */
proto.apollo.v2x.IntersectionState.prototype.clearTimeStampDsecond = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.IntersectionState.prototype.hasTimeStampDsecond = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.v2x.Spat.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.Spat.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.Spat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.Spat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Spat.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeStamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    msgCnt: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    intersectionsList: jspb.Message.toObjectList(msg.getIntersectionsList(),
    proto.apollo.v2x.IntersectionState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Spat as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.Spat.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timeStamp;

  /** @type {?|undefined} */
  this.msgCnt;

  /** @type {?|undefined} */
  this.intersectionsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.Spat.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.Spat}
 */
proto.apollo.v2x.Spat.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.Spat();
  obj.timeStamp != null && jspb.Message.setField(msg, 1, obj.timeStamp);
  obj.msgCnt != null && jspb.Message.setField(msg, 2, obj.msgCnt);
  obj.intersectionsList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.intersectionsList.map(
          proto.apollo.v2x.IntersectionState.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.Spat}
 */
proto.apollo.v2x.Spat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.Spat;
  return proto.apollo.v2x.Spat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.Spat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.Spat}
 */
proto.apollo.v2x.Spat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeStamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgCnt(value);
      break;
    case 3:
      var value = new proto.apollo.v2x.IntersectionState;
      reader.readMessage(value,proto.apollo.v2x.IntersectionState.deserializeBinaryFromReader);
      msg.addIntersections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.Spat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.Spat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.Spat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.Spat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIntersectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.v2x.IntersectionState.serializeBinaryToWriter
    );
  }
};


/**
 * optional double time_stamp = 1;
 * @return {number}
 */
proto.apollo.v2x.Spat.prototype.getTimeStamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Spat} returns this
 */
proto.apollo.v2x.Spat.prototype.setTimeStamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Spat} returns this
 */
proto.apollo.v2x.Spat.prototype.clearTimeStamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Spat.prototype.hasTimeStamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 msg_cnt = 2;
 * @return {number}
 */
proto.apollo.v2x.Spat.prototype.getMsgCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.v2x.Spat} returns this
 */
proto.apollo.v2x.Spat.prototype.setMsgCnt = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.v2x.Spat} returns this
 */
proto.apollo.v2x.Spat.prototype.clearMsgCnt = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.Spat.prototype.hasMsgCnt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated IntersectionState intersections = 3;
 * @return {!Array<!proto.apollo.v2x.IntersectionState>}
 */
proto.apollo.v2x.Spat.prototype.getIntersectionsList = function() {
  return /** @type{!Array<!proto.apollo.v2x.IntersectionState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.v2x.IntersectionState, 3));
};


/**
 * @param {!Array<!proto.apollo.v2x.IntersectionState>} value
 * @return {!proto.apollo.v2x.Spat} returns this
*/
proto.apollo.v2x.Spat.prototype.setIntersectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.v2x.IntersectionState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.v2x.IntersectionState}
 */
proto.apollo.v2x.Spat.prototype.addIntersections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.v2x.IntersectionState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.v2x.Spat} returns this
 */
proto.apollo.v2x.Spat.prototype.clearIntersectionsList = function() {
  return this.setIntersectionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.v2x.PolicyData.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.v2x.PolicyData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.v2x.PolicyData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.PolicyData.toObject = function(includeInstance, msg) {
  var f, obj = {
    map: (f = msg.getMap()) && proto.apollo.v2x.Map.toObject(includeInstance, f),
    spat: (f = msg.getSpat()) && proto.apollo.v2x.Spat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PolicyData as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.v2x.PolicyData.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.map;

  /** @type {?|undefined} */
  this.spat;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.v2x.PolicyData.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.v2x.PolicyData}
 */
proto.apollo.v2x.PolicyData.fromObject = function(obj) {
  var msg = new proto.apollo.v2x.PolicyData();
  obj.map && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.v2x.Map.fromObject(obj.map));
  obj.spat && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.v2x.Spat.fromObject(obj.spat));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.v2x.PolicyData}
 */
proto.apollo.v2x.PolicyData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.v2x.PolicyData;
  return proto.apollo.v2x.PolicyData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.v2x.PolicyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.v2x.PolicyData}
 */
proto.apollo.v2x.PolicyData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.v2x.Map;
      reader.readMessage(value,proto.apollo.v2x.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 2:
      var value = new proto.apollo.v2x.Spat;
      reader.readMessage(value,proto.apollo.v2x.Spat.deserializeBinaryFromReader);
      msg.setSpat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.v2x.PolicyData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.v2x.PolicyData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.v2x.PolicyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.v2x.PolicyData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.v2x.Map.serializeBinaryToWriter
    );
  }
  f = message.getSpat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.v2x.Spat.serializeBinaryToWriter
    );
  }
};


/**
 * optional Map map = 1;
 * @return {?proto.apollo.v2x.Map}
 */
proto.apollo.v2x.PolicyData.prototype.getMap = function() {
  return /** @type{?proto.apollo.v2x.Map} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Map, 1));
};


/**
 * @param {?proto.apollo.v2x.Map|undefined} value
 * @return {!proto.apollo.v2x.PolicyData} returns this
*/
proto.apollo.v2x.PolicyData.prototype.setMap = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.PolicyData} returns this
 */
proto.apollo.v2x.PolicyData.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.PolicyData.prototype.hasMap = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Spat spat = 2;
 * @return {?proto.apollo.v2x.Spat}
 */
proto.apollo.v2x.PolicyData.prototype.getSpat = function() {
  return /** @type{?proto.apollo.v2x.Spat} */ (
    jspb.Message.getWrapperField(this, proto.apollo.v2x.Spat, 2));
};


/**
 * @param {?proto.apollo.v2x.Spat|undefined} value
 * @return {!proto.apollo.v2x.PolicyData} returns this
*/
proto.apollo.v2x.PolicyData.prototype.setSpat = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.v2x.PolicyData} returns this
 */
proto.apollo.v2x.PolicyData.prototype.clearSpat = function() {
  return this.setSpat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.v2x.PolicyData.prototype.hasSpat = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.apollo.v2x);
