// source: modules/dreamview/proto/simulation_world.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_canbus_proto_chassis_pb = require('../../../modules/canbus/proto/chassis_pb.js');
goog.object.extend(proto, modules_canbus_proto_chassis_pb);
var modules_common_monitor_log_proto_monitor_log_pb = require('../../../modules/common/monitor_log/proto/monitor_log_pb.js');
goog.object.extend(proto, modules_common_monitor_log_proto_monitor_log_pb);
var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_perception_proto_perception_obstacle_pb = require('../../../modules/perception/proto/perception_obstacle_pb.js');
goog.object.extend(proto, modules_perception_proto_perception_obstacle_pb);
var modules_planning_proto_planning_internal_pb = require('../../../modules/planning/proto/planning_internal_pb.js');
goog.object.extend(proto, modules_planning_proto_planning_internal_pb);
var modules_prediction_proto_feature_pb = require('../../../modules/prediction/proto/feature_pb.js');
goog.object.extend(proto, modules_prediction_proto_feature_pb);
var modules_routing_proto_routing_pb = require('../../../modules/routing/proto/routing_pb.js');
goog.object.extend(proto, modules_routing_proto_routing_pb);
goog.exportSymbol('proto.apollo.dreamview.ControlData', null, global);
goog.exportSymbol('proto.apollo.dreamview.Decision', null, global);
goog.exportSymbol('proto.apollo.dreamview.Decision.StopReasonCode', null, global);
goog.exportSymbol('proto.apollo.dreamview.Decision.Type', null, global);
goog.exportSymbol('proto.apollo.dreamview.DelaysInMs', null, global);
goog.exportSymbol('proto.apollo.dreamview.Latency', null, global);
goog.exportSymbol('proto.apollo.dreamview.MapElementIds', null, global);
goog.exportSymbol('proto.apollo.dreamview.Notification', null, global);
goog.exportSymbol('proto.apollo.dreamview.Object', null, global);
goog.exportSymbol('proto.apollo.dreamview.Object.DisengageType', null, global);
goog.exportSymbol('proto.apollo.dreamview.Object.Type', null, global);
goog.exportSymbol('proto.apollo.dreamview.PolygonPoint', null, global);
goog.exportSymbol('proto.apollo.dreamview.Prediction', null, global);
goog.exportSymbol('proto.apollo.dreamview.RoutePath', null, global);
goog.exportSymbol('proto.apollo.dreamview.SensorMeasurements', null, global);
goog.exportSymbol('proto.apollo.dreamview.SimulationWorld', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.PolygonPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.PolygonPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.PolygonPoint.displayName = 'proto.apollo.dreamview.PolygonPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Prediction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Prediction.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Prediction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Prediction.displayName = 'proto.apollo.dreamview.Prediction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Decision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Decision.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Decision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Decision.displayName = 'proto.apollo.dreamview.Decision';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Object.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Object.displayName = 'proto.apollo.dreamview.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.DelaysInMs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.DelaysInMs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.DelaysInMs.displayName = 'proto.apollo.dreamview.DelaysInMs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.RoutePath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.RoutePath.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.RoutePath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.RoutePath.displayName = 'proto.apollo.dreamview.RoutePath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Latency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Latency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Latency.displayName = 'proto.apollo.dreamview.Latency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.MapElementIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.MapElementIds.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.MapElementIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.MapElementIds.displayName = 'proto.apollo.dreamview.MapElementIds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.ControlData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.ControlData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.ControlData.displayName = 'proto.apollo.dreamview.ControlData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Notification.displayName = 'proto.apollo.dreamview.Notification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.SensorMeasurements = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.SensorMeasurements.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.SensorMeasurements, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.SensorMeasurements.displayName = 'proto.apollo.dreamview.SensorMeasurements';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.SimulationWorld = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.SimulationWorld.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.SimulationWorld, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.SimulationWorld.displayName = 'proto.apollo.dreamview.SimulationWorld';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.PolygonPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.PolygonPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.PolygonPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.PolygonPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    gaussianInfo: (f = msg.getGaussianInfo()) && modules_common_proto_pnc_point_pb.GaussianInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PolygonPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.PolygonPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.gaussianInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.PolygonPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.PolygonPoint.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.PolygonPoint();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  obj.gaussianInfo && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_pnc_point_pb.GaussianInfo.fromObject(obj.gaussianInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.PolygonPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.PolygonPoint;
  return proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.PolygonPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = new modules_common_proto_pnc_point_pb.GaussianInfo;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.GaussianInfo.deserializeBinaryFromReader);
      msg.setGaussianInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.PolygonPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.PolygonPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getGaussianInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_pnc_point_pb.GaussianInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.apollo.dreamview.PolygonPoint.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
 */
proto.apollo.dreamview.PolygonPoint.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
 */
proto.apollo.dreamview.PolygonPoint.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.PolygonPoint.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.apollo.dreamview.PolygonPoint.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
 */
proto.apollo.dreamview.PolygonPoint.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
 */
proto.apollo.dreamview.PolygonPoint.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.PolygonPoint.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.apollo.dreamview.PolygonPoint.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
 */
proto.apollo.dreamview.PolygonPoint.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
 */
proto.apollo.dreamview.PolygonPoint.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.PolygonPoint.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.common.GaussianInfo gaussian_info = 4;
 * @return {?proto.apollo.common.GaussianInfo}
 */
proto.apollo.dreamview.PolygonPoint.prototype.getGaussianInfo = function() {
  return /** @type{?proto.apollo.common.GaussianInfo} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.GaussianInfo, 4));
};


/**
 * @param {?proto.apollo.common.GaussianInfo|undefined} value
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
*/
proto.apollo.dreamview.PolygonPoint.prototype.setGaussianInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.PolygonPoint} returns this
 */
proto.apollo.dreamview.PolygonPoint.prototype.clearGaussianInfo = function() {
  return this.setGaussianInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.PolygonPoint.prototype.hasGaussianInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Prediction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Prediction.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Prediction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Prediction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Prediction.toObject = function(includeInstance, msg) {
  var f, obj = {
    probability: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    predictedTrajectoryList: jspb.Message.toObjectList(msg.getPredictedTrajectoryList(),
    proto.apollo.dreamview.PolygonPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Prediction as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Prediction.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.probability;

  /** @type {?|undefined} */
  this.predictedTrajectoryList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Prediction.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Prediction}
 */
proto.apollo.dreamview.Prediction.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Prediction();
  obj.probability != null && jspb.Message.setField(msg, 1, obj.probability);
  obj.predictedTrajectoryList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.predictedTrajectoryList.map(
          proto.apollo.dreamview.PolygonPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Prediction}
 */
proto.apollo.dreamview.Prediction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Prediction;
  return proto.apollo.dreamview.Prediction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Prediction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Prediction}
 */
proto.apollo.dreamview.Prediction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.PolygonPoint;
      reader.readMessage(value,proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader);
      msg.addPredictedTrajectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Prediction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Prediction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Prediction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Prediction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPredictedTrajectoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional double probability = 1;
 * @return {number}
 */
proto.apollo.dreamview.Prediction.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Prediction} returns this
 */
proto.apollo.dreamview.Prediction.prototype.setProbability = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Prediction} returns this
 */
proto.apollo.dreamview.Prediction.prototype.clearProbability = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Prediction.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PolygonPoint predicted_trajectory = 2;
 * @return {!Array<!proto.apollo.dreamview.PolygonPoint>}
 */
proto.apollo.dreamview.Prediction.prototype.getPredictedTrajectoryList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.PolygonPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.PolygonPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.dreamview.PolygonPoint>} value
 * @return {!proto.apollo.dreamview.Prediction} returns this
*/
proto.apollo.dreamview.Prediction.prototype.setPredictedTrajectoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.dreamview.PolygonPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.Prediction.prototype.addPredictedTrajectory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.dreamview.PolygonPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Prediction} returns this
 */
proto.apollo.dreamview.Prediction.prototype.clearPredictedTrajectoryList = function() {
  return this.setPredictedTrajectoryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Decision.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Decision.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Decision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Decision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Decision.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    polygonPointList: jspb.Message.toObjectList(msg.getPolygonPointList(),
    proto.apollo.dreamview.PolygonPoint.toObject, includeInstance),
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    positionX: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    positionY: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    length: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 2.8),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.4),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 1.8),
    stopreason: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    changeLaneType: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Decision as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Decision.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.polygonPointList;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.latitude;

  /** @type {?|undefined} */
  this.longitude;

  /** @type {?|undefined} */
  this.positionX;

  /** @type {?|undefined} */
  this.positionY;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.stopreason;

  /** @type {?|undefined} */
  this.changeLaneType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Decision.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Decision.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Decision();
  obj.type != null && jspb.Message.setField(msg, 1, obj.type);
  obj.polygonPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.polygonPointList.map(
          proto.apollo.dreamview.PolygonPoint.fromObject));
  obj.heading != null && jspb.Message.setField(msg, 3, obj.heading);
  obj.latitude != null && jspb.Message.setField(msg, 4, obj.latitude);
  obj.longitude != null && jspb.Message.setField(msg, 5, obj.longitude);
  obj.positionX != null && jspb.Message.setField(msg, 6, obj.positionX);
  obj.positionY != null && jspb.Message.setField(msg, 7, obj.positionY);
  obj.length != null && jspb.Message.setField(msg, 8, obj.length);
  obj.width != null && jspb.Message.setField(msg, 9, obj.width);
  obj.height != null && jspb.Message.setField(msg, 10, obj.height);
  obj.stopreason != null && jspb.Message.setField(msg, 11, obj.stopreason);
  obj.changeLaneType != null && jspb.Message.setField(msg, 12, obj.changeLaneType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Decision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Decision;
  return proto.apollo.dreamview.Decision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Decision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Decision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.dreamview.Decision.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.PolygonPoint;
      reader.readMessage(value,proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader);
      msg.addPolygonPoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 11:
      var value = /** @type {!proto.apollo.dreamview.Decision.StopReasonCode} */ (reader.readEnum());
      msg.setStopreason(value);
      break;
    case 12:
      var value = /** @type {!proto.apollo.routing.ChangeLaneType} */ (reader.readEnum());
      msg.setChangeLaneType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Decision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Decision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Decision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Decision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.dreamview.Decision.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPolygonPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {!proto.apollo.dreamview.Decision.StopReasonCode} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.dreamview.Decision.Type = {
  IGNORE: 0,
  STOP: 1,
  NUDGE: 2,
  YIELD: 3,
  OVERTAKE: 4,
  FOLLOW: 5,
  SIDEPASS: 6
};

/**
 * @enum {number}
 */
proto.apollo.dreamview.Decision.StopReasonCode = {
  STOP_REASON_HEAD_VEHICLE: 1,
  STOP_REASON_DESTINATION: 2,
  STOP_REASON_PEDESTRIAN: 3,
  STOP_REASON_OBSTACLE: 4,
  STOP_REASON_SIGNAL: 100,
  STOP_REASON_STOP_SIGN: 101,
  STOP_REASON_YIELD_SIGN: 102,
  STOP_REASON_CLEAR_ZONE: 103,
  STOP_REASON_CROSSWALK: 104,
  STOP_REASON_EMERGENCY: 105,
  STOP_REASON_NOT_READY: 106,
  STOP_REASON_PULL_OVER: 107
};

/**
 * optional Type type = 1;
 * @return {!proto.apollo.dreamview.Decision.Type}
 */
proto.apollo.dreamview.Decision.prototype.getType = function() {
  return /** @type {!proto.apollo.dreamview.Decision.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.dreamview.Decision.Type} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PolygonPoint polygon_point = 2;
 * @return {!Array<!proto.apollo.dreamview.PolygonPoint>}
 */
proto.apollo.dreamview.Decision.prototype.getPolygonPointList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.PolygonPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.PolygonPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.dreamview.PolygonPoint>} value
 * @return {!proto.apollo.dreamview.Decision} returns this
*/
proto.apollo.dreamview.Decision.prototype.setPolygonPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.dreamview.PolygonPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.Decision.prototype.addPolygonPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.dreamview.PolygonPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearPolygonPointList = function() {
  return this.setPolygonPointList([]);
};


/**
 * optional double heading = 3;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double latitude = 4;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double longitude = 5;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double position_x = 6;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getPositionX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setPositionX = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearPositionX = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasPositionX = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double position_y = 7;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getPositionY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setPositionY = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearPositionY = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasPositionY = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double length = 8;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 2.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearLength = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasLength = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double width = 9;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double height = 10;
 * @return {number}
 */
proto.apollo.dreamview.Decision.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 1.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional StopReasonCode stopReason = 11;
 * @return {!proto.apollo.dreamview.Decision.StopReasonCode}
 */
proto.apollo.dreamview.Decision.prototype.getStopreason = function() {
  return /** @type {!proto.apollo.dreamview.Decision.StopReasonCode} */ (jspb.Message.getFieldWithDefault(this, 11, 1));
};


/**
 * @param {!proto.apollo.dreamview.Decision.StopReasonCode} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setStopreason = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearStopreason = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasStopreason = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional apollo.routing.ChangeLaneType change_lane_type = 12;
 * @return {!proto.apollo.routing.ChangeLaneType}
 */
proto.apollo.dreamview.Decision.prototype.getChangeLaneType = function() {
  return /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.apollo.routing.ChangeLaneType} value
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.setChangeLaneType = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Decision} returns this
 */
proto.apollo.dreamview.Decision.prototype.clearChangeLaneType = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Decision.prototype.hasChangeLaneType = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Object.repeatedFields_ = [2,19,22,30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    polygonPointList: jspb.Message.toObjectList(msg.getPolygonPointList(),
    proto.apollo.dreamview.PolygonPoint.toObject, includeInstance),
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    latitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    longitude: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    positionX: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    positionY: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    length: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 2.8),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.4),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 1.8),
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    speedAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    speedJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    spin: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    spinAcceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 15)) == null ? undefined : f,
    spinJerk: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    speedHeading: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    kappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    dkappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 35)) == null ? undefined : f,
    signalSetList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f,
    currentSignal: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    decisionList: jspb.Message.toObjectList(msg.getDecisionList(),
    proto.apollo.dreamview.Decision.toObject, includeInstance),
    yieldedObstacle: jspb.Message.getBooleanFieldWithDefault(msg, 32, false),
    throttlePercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 23)) == null ? undefined : f,
    brakePercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    steeringPercentage: (f = jspb.Message.getOptionalFloatingPointField(msg, 25)) == null ? undefined : f,
    steeringAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 26)) == null ? undefined : f,
    steeringRatio: (f = jspb.Message.getOptionalFloatingPointField(msg, 27)) == null ? undefined : f,
    batteryPercentage: (f = jspb.Message.getField(msg, 38)) == null ? undefined : f,
    gearLocation: (f = jspb.Message.getField(msg, 39)) == null ? undefined : f,
    disengageType: (f = jspb.Message.getField(msg, 28)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 29)) == null ? undefined : f,
    subType: (f = jspb.Message.getField(msg, 34)) == null ? undefined : f,
    predictionList: jspb.Message.toObjectList(msg.getPredictionList(),
    proto.apollo.dreamview.Prediction.toObject, includeInstance),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 31, 1.0),
    obstaclePriority: (f = msg.getObstaclePriority()) && modules_prediction_proto_feature_pb.ObstaclePriority.toObject(includeInstance, f),
    interactiveTag: (f = msg.getInteractiveTag()) && modules_prediction_proto_feature_pb.ObstacleInteractiveTag.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 36, 0),
    v2xInfo: (f = msg.getV2xInfo()) && modules_perception_proto_perception_obstacle_pb.V2XInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Object as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Object.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.polygonPointList;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.latitude;

  /** @type {?|undefined} */
  this.longitude;

  /** @type {?|undefined} */
  this.positionX;

  /** @type {?|undefined} */
  this.positionY;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.speed;

  /** @type {?|undefined} */
  this.speedAcceleration;

  /** @type {?|undefined} */
  this.speedJerk;

  /** @type {?|undefined} */
  this.spin;

  /** @type {?|undefined} */
  this.spinAcceleration;

  /** @type {?|undefined} */
  this.spinJerk;

  /** @type {?|undefined} */
  this.speedHeading;

  /** @type {?|undefined} */
  this.kappa;

  /** @type {?|undefined} */
  this.dkappa;

  /** @type {?|undefined} */
  this.signalSetList;

  /** @type {?|undefined} */
  this.currentSignal;

  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.decisionList;

  /** @type {?|undefined} */
  this.yieldedObstacle;

  /** @type {?|undefined} */
  this.throttlePercentage;

  /** @type {?|undefined} */
  this.brakePercentage;

  /** @type {?|undefined} */
  this.steeringPercentage;

  /** @type {?|undefined} */
  this.steeringAngle;

  /** @type {?|undefined} */
  this.steeringRatio;

  /** @type {?|undefined} */
  this.batteryPercentage;

  /** @type {?|undefined} */
  this.gearLocation;

  /** @type {?|undefined} */
  this.disengageType;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.subType;

  /** @type {?|undefined} */
  this.predictionList;

  /** @type {?|undefined} */
  this.confidence;

  /** @type {?|undefined} */
  this.obstaclePriority;

  /** @type {?|undefined} */
  this.interactiveTag;

  /** @type {?|undefined} */
  this.source;

  /** @type {?|undefined} */
  this.v2xInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Object.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.Object.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Object();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.polygonPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.polygonPointList.map(
          proto.apollo.dreamview.PolygonPoint.fromObject));
  obj.heading != null && jspb.Message.setField(msg, 3, obj.heading);
  obj.latitude != null && jspb.Message.setField(msg, 4, obj.latitude);
  obj.longitude != null && jspb.Message.setField(msg, 5, obj.longitude);
  obj.positionX != null && jspb.Message.setField(msg, 6, obj.positionX);
  obj.positionY != null && jspb.Message.setField(msg, 7, obj.positionY);
  obj.length != null && jspb.Message.setField(msg, 8, obj.length);
  obj.width != null && jspb.Message.setField(msg, 9, obj.width);
  obj.height != null && jspb.Message.setField(msg, 10, obj.height);
  obj.speed != null && jspb.Message.setField(msg, 11, obj.speed);
  obj.speedAcceleration != null && jspb.Message.setField(msg, 12, obj.speedAcceleration);
  obj.speedJerk != null && jspb.Message.setField(msg, 13, obj.speedJerk);
  obj.spin != null && jspb.Message.setField(msg, 14, obj.spin);
  obj.spinAcceleration != null && jspb.Message.setField(msg, 15, obj.spinAcceleration);
  obj.spinJerk != null && jspb.Message.setField(msg, 16, obj.spinJerk);
  obj.speedHeading != null && jspb.Message.setField(msg, 17, obj.speedHeading);
  obj.kappa != null && jspb.Message.setField(msg, 18, obj.kappa);
  obj.dkappa != null && jspb.Message.setField(msg, 35, obj.dkappa);
  obj.signalSetList != null && jspb.Message.setField(msg, 19, obj.signalSetList);
  obj.currentSignal != null && jspb.Message.setField(msg, 20, obj.currentSignal);
  obj.timestampSec != null && jspb.Message.setField(msg, 21, obj.timestampSec);
  obj.decisionList && jspb.Message.setRepeatedWrapperField(
      msg, 22, obj.decisionList.map(
          proto.apollo.dreamview.Decision.fromObject));
  obj.yieldedObstacle != null && jspb.Message.setField(msg, 32, obj.yieldedObstacle);
  obj.throttlePercentage != null && jspb.Message.setField(msg, 23, obj.throttlePercentage);
  obj.brakePercentage != null && jspb.Message.setField(msg, 24, obj.brakePercentage);
  obj.steeringPercentage != null && jspb.Message.setField(msg, 25, obj.steeringPercentage);
  obj.steeringAngle != null && jspb.Message.setField(msg, 26, obj.steeringAngle);
  obj.steeringRatio != null && jspb.Message.setField(msg, 27, obj.steeringRatio);
  obj.batteryPercentage != null && jspb.Message.setField(msg, 38, obj.batteryPercentage);
  obj.gearLocation != null && jspb.Message.setField(msg, 39, obj.gearLocation);
  obj.disengageType != null && jspb.Message.setField(msg, 28, obj.disengageType);
  obj.type != null && jspb.Message.setField(msg, 29, obj.type);
  obj.subType != null && jspb.Message.setField(msg, 34, obj.subType);
  obj.predictionList && jspb.Message.setRepeatedWrapperField(
      msg, 30, obj.predictionList.map(
          proto.apollo.dreamview.Prediction.fromObject));
  obj.confidence != null && jspb.Message.setField(msg, 31, obj.confidence);
  obj.obstaclePriority && jspb.Message.setWrapperField(
      msg, 33, modules_prediction_proto_feature_pb.ObstaclePriority.fromObject(obj.obstaclePriority));
  obj.interactiveTag && jspb.Message.setWrapperField(
      msg, 40, modules_prediction_proto_feature_pb.ObstacleInteractiveTag.fromObject(obj.interactiveTag));
  obj.source != null && jspb.Message.setField(msg, 36, obj.source);
  obj.v2xInfo && jspb.Message.setWrapperField(
      msg, 37, modules_perception_proto_perception_obstacle_pb.V2XInformation.fromObject(obj.v2xInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Object;
  return proto.apollo.dreamview.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.PolygonPoint;
      reader.readMessage(value,proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader);
      msg.addPolygonPoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedAcceleration(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedJerk(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpinAcceleration(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpinJerk(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedHeading(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappa(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDkappa(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignalSet(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentSignal(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 22:
      var value = new proto.apollo.dreamview.Decision;
      reader.readMessage(value,proto.apollo.dreamview.Decision.deserializeBinaryFromReader);
      msg.addDecision(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setYieldedObstacle(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThrottlePercentage(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBrakePercentage(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringPercentage(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringAngle(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteeringRatio(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatteryPercentage(value);
      break;
    case 39:
      var value = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (reader.readEnum());
      msg.setGearLocation(value);
      break;
    case 28:
      var value = /** @type {!proto.apollo.dreamview.Object.DisengageType} */ (reader.readEnum());
      msg.setDisengageType(value);
      break;
    case 29:
      var value = /** @type {!proto.apollo.dreamview.Object.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 34:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (reader.readEnum());
      msg.setSubType(value);
      break;
    case 30:
      var value = new proto.apollo.dreamview.Prediction;
      reader.readMessage(value,proto.apollo.dreamview.Prediction.deserializeBinaryFromReader);
      msg.addPrediction(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 33:
      var value = new modules_prediction_proto_feature_pb.ObstaclePriority;
      reader.readMessage(value,modules_prediction_proto_feature_pb.ObstaclePriority.deserializeBinaryFromReader);
      msg.setObstaclePriority(value);
      break;
    case 40:
      var value = new modules_prediction_proto_feature_pb.ObstacleInteractiveTag;
      reader.readMessage(value,modules_prediction_proto_feature_pb.ObstacleInteractiveTag.deserializeBinaryFromReader);
      msg.setInteractiveTag(value);
      break;
    case 36:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (reader.readEnum());
      msg.setSource(value);
      break;
    case 37:
      var value = new modules_perception_proto_perception_obstacle_pb.V2XInformation;
      reader.readMessage(value,modules_perception_proto_perception_obstacle_pb.V2XInformation.deserializeBinaryFromReader);
      msg.setV2xInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPolygonPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeDouble(
      35,
      f
    );
  }
  f = message.getSignalSetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getDecisionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.apollo.dreamview.Decision.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeBool(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeInt32(
      38,
      f
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeEnum(
      39,
      f
    );
  }
  f = /** @type {!proto.apollo.dreamview.Object.DisengageType} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeEnum(
      28,
      f
    );
  }
  f = /** @type {!proto.apollo.dreamview.Object.Type} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeEnum(
      29,
      f
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getField(message, 34));
  if (f != null) {
    writer.writeEnum(
      34,
      f
    );
  }
  f = message.getPredictionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.apollo.dreamview.Prediction.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getObstaclePriority();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      modules_prediction_proto_feature_pb.ObstaclePriority.serializeBinaryToWriter
    );
  }
  f = message.getInteractiveTag();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      modules_prediction_proto_feature_pb.ObstacleInteractiveTag.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeEnum(
      36,
      f
    );
  }
  f = message.getV2xInfo();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      modules_perception_proto_perception_obstacle_pb.V2XInformation.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.dreamview.Object.DisengageType = {
  DISENGAGE_NONE: 0,
  DISENGAGE_UNKNOWN: 1,
  DISENGAGE_MANUAL: 2,
  DISENGAGE_EMERGENCY: 3,
  DISENGAGE_AUTO_STEER_ONLY: 4,
  DISENGAGE_AUTO_SPEED_ONLY: 5,
  DISENGAGE_CHASSIS_ERROR: 6
};

/**
 * @enum {number}
 */
proto.apollo.dreamview.Object.Type = {
  UNKNOWN: 0,
  UNKNOWN_MOVABLE: 1,
  UNKNOWN_UNMOVABLE: 2,
  PEDESTRIAN: 3,
  BICYCLE: 4,
  VEHICLE: 5,
  VIRTUAL: 6,
  CIPV: 7
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.dreamview.Object.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PolygonPoint polygon_point = 2;
 * @return {!Array<!proto.apollo.dreamview.PolygonPoint>}
 */
proto.apollo.dreamview.Object.prototype.getPolygonPointList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.PolygonPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.PolygonPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.dreamview.PolygonPoint>} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setPolygonPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.dreamview.PolygonPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.Object.prototype.addPolygonPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.dreamview.PolygonPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPolygonPointList = function() {
  return this.setPolygonPointList([]);
};


/**
 * optional double heading = 3;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double latitude = 4;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setLatitude = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearLatitude = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double longitude = 5;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setLongitude = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearLongitude = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double position_x = 6;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getPositionX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setPositionX = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPositionX = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasPositionX = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double position_y = 7;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getPositionY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setPositionY = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPositionY = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasPositionY = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double length = 8;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 2.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearLength = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasLength = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double width = 9;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double height = 10;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 1.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double speed = 11;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double speed_acceleration = 12;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeedAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeedAcceleration = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeedAcceleration = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeedAcceleration = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double speed_jerk = 13;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeedJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeedJerk = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeedJerk = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeedJerk = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double spin = 14;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpin = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpin = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpin = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double spin_acceleration = 15;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpinAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpinAcceleration = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpinAcceleration = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpinAcceleration = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double spin_jerk = 16;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpinJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpinJerk = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpinJerk = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpinJerk = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double speed_heading = 17;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSpeedHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSpeedHeading = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSpeedHeading = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSpeedHeading = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double kappa = 18;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getKappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setKappa = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearKappa = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasKappa = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double dkappa = 35;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getDkappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 35, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setDkappa = function(value) {
  return jspb.Message.setField(this, 35, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearDkappa = function() {
  return jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasDkappa = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * repeated string signal_set = 19;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.Object.prototype.getSignalSetList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSignalSetList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.addSignalSet = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSignalSetList = function() {
  return this.setSignalSetList([]);
};


/**
 * optional string current_signal = 20;
 * @return {string}
 */
proto.apollo.dreamview.Object.prototype.getCurrentSignal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setCurrentSignal = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearCurrentSignal = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasCurrentSignal = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double timestamp_sec = 21;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated Decision decision = 22;
 * @return {!Array<!proto.apollo.dreamview.Decision>}
 */
proto.apollo.dreamview.Object.prototype.getDecisionList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Decision>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Decision, 22));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Decision>} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setDecisionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.apollo.dreamview.Decision=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Decision}
 */
proto.apollo.dreamview.Object.prototype.addDecision = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.apollo.dreamview.Decision, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearDecisionList = function() {
  return this.setDecisionList([]);
};


/**
 * optional bool yielded_obstacle = 32;
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.getYieldedObstacle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 32, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setYieldedObstacle = function(value) {
  return jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearYieldedObstacle = function() {
  return jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasYieldedObstacle = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional double throttle_percentage = 23;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getThrottlePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setThrottlePercentage = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearThrottlePercentage = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasThrottlePercentage = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double brake_percentage = 24;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getBrakePercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setBrakePercentage = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearBrakePercentage = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasBrakePercentage = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional double steering_percentage = 25;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSteeringPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSteeringPercentage = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSteeringPercentage = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSteeringPercentage = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional double steering_angle = 26;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSteeringAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSteeringAngle = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSteeringAngle = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSteeringAngle = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional double steering_ratio = 27;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getSteeringRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSteeringRatio = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSteeringRatio = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSteeringRatio = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional int32 battery_percentage = 38;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getBatteryPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setBatteryPercentage = function(value) {
  return jspb.Message.setField(this, 38, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearBatteryPercentage = function() {
  return jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasBatteryPercentage = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional apollo.canbus.Chassis.GearPosition gear_location = 39;
 * @return {!proto.apollo.canbus.Chassis.GearPosition}
 */
proto.apollo.dreamview.Object.prototype.getGearLocation = function() {
  return /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.GearPosition} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setGearLocation = function(value) {
  return jspb.Message.setField(this, 39, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearGearLocation = function() {
  return jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasGearLocation = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional DisengageType disengage_type = 28;
 * @return {!proto.apollo.dreamview.Object.DisengageType}
 */
proto.apollo.dreamview.Object.prototype.getDisengageType = function() {
  return /** @type {!proto.apollo.dreamview.Object.DisengageType} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {!proto.apollo.dreamview.Object.DisengageType} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setDisengageType = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearDisengageType = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasDisengageType = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional Type type = 29;
 * @return {!proto.apollo.dreamview.Object.Type}
 */
proto.apollo.dreamview.Object.prototype.getType = function() {
  return /** @type {!proto.apollo.dreamview.Object.Type} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {!proto.apollo.dreamview.Object.Type} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setType = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearType = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasType = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional apollo.perception.PerceptionObstacle.SubType sub_type = 34;
 * @return {!proto.apollo.perception.PerceptionObstacle.SubType}
 */
proto.apollo.dreamview.Object.prototype.getSubType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.SubType} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.SubType} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSubType = function(value) {
  return jspb.Message.setField(this, 34, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSubType = function() {
  return jspb.Message.setField(this, 34, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSubType = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * repeated Prediction prediction = 30;
 * @return {!Array<!proto.apollo.dreamview.Prediction>}
 */
proto.apollo.dreamview.Object.prototype.getPredictionList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Prediction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Prediction, 30));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Prediction>} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setPredictionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.apollo.dreamview.Prediction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Prediction}
 */
proto.apollo.dreamview.Object.prototype.addPrediction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.apollo.dreamview.Prediction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearPredictionList = function() {
  return this.setPredictionList([]);
};


/**
 * optional double confidence = 31;
 * @return {number}
 */
proto.apollo.dreamview.Object.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional apollo.prediction.ObstaclePriority obstacle_priority = 33;
 * @return {?proto.apollo.prediction.ObstaclePriority}
 */
proto.apollo.dreamview.Object.prototype.getObstaclePriority = function() {
  return /** @type{?proto.apollo.prediction.ObstaclePriority} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_feature_pb.ObstaclePriority, 33));
};


/**
 * @param {?proto.apollo.prediction.ObstaclePriority|undefined} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setObstaclePriority = function(value) {
  return jspb.Message.setWrapperField(this, 33, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearObstaclePriority = function() {
  return this.setObstaclePriority(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasObstaclePriority = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
 * @return {?proto.apollo.prediction.ObstacleInteractiveTag}
 */
proto.apollo.dreamview.Object.prototype.getInteractiveTag = function() {
  return /** @type{?proto.apollo.prediction.ObstacleInteractiveTag} */ (
    jspb.Message.getWrapperField(this, modules_prediction_proto_feature_pb.ObstacleInteractiveTag, 40));
};


/**
 * @param {?proto.apollo.prediction.ObstacleInteractiveTag|undefined} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setInteractiveTag = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearInteractiveTag = function() {
  return this.setInteractiveTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasInteractiveTag = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional apollo.perception.PerceptionObstacle.Source source = 36;
 * @return {!proto.apollo.perception.PerceptionObstacle.Source}
 */
proto.apollo.dreamview.Object.prototype.getSource = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Source} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Source} value
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 36, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearSource = function() {
  return jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasSource = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional apollo.perception.V2XInformation v2x_info = 37;
 * @return {?proto.apollo.perception.V2XInformation}
 */
proto.apollo.dreamview.Object.prototype.getV2xInfo = function() {
  return /** @type{?proto.apollo.perception.V2XInformation} */ (
    jspb.Message.getWrapperField(this, modules_perception_proto_perception_obstacle_pb.V2XInformation, 37));
};


/**
 * @param {?proto.apollo.perception.V2XInformation|undefined} value
 * @return {!proto.apollo.dreamview.Object} returns this
*/
proto.apollo.dreamview.Object.prototype.setV2xInfo = function(value) {
  return jspb.Message.setWrapperField(this, 37, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Object} returns this
 */
proto.apollo.dreamview.Object.prototype.clearV2xInfo = function() {
  return this.setV2xInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Object.prototype.hasV2xInfo = function() {
  return jspb.Message.getField(this, 37) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.DelaysInMs.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.DelaysInMs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.DelaysInMs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.DelaysInMs.toObject = function(includeInstance, msg) {
  var f, obj = {
    chassis: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    localization: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    perceptionObstacle: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    planning: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    prediction: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    trafficLight: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    control: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DelaysInMs as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.DelaysInMs.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.chassis;

  /** @type {?|undefined} */
  this.localization;

  /** @type {?|undefined} */
  this.perceptionObstacle;

  /** @type {?|undefined} */
  this.planning;

  /** @type {?|undefined} */
  this.prediction;

  /** @type {?|undefined} */
  this.trafficLight;

  /** @type {?|undefined} */
  this.control;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.DelaysInMs.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.DelaysInMs}
 */
proto.apollo.dreamview.DelaysInMs.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.DelaysInMs();
  obj.chassis != null && jspb.Message.setField(msg, 1, obj.chassis);
  obj.localization != null && jspb.Message.setField(msg, 3, obj.localization);
  obj.perceptionObstacle != null && jspb.Message.setField(msg, 4, obj.perceptionObstacle);
  obj.planning != null && jspb.Message.setField(msg, 5, obj.planning);
  obj.prediction != null && jspb.Message.setField(msg, 7, obj.prediction);
  obj.trafficLight != null && jspb.Message.setField(msg, 8, obj.trafficLight);
  obj.control != null && jspb.Message.setField(msg, 9, obj.control);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.DelaysInMs}
 */
proto.apollo.dreamview.DelaysInMs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.DelaysInMs;
  return proto.apollo.dreamview.DelaysInMs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.DelaysInMs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.DelaysInMs}
 */
proto.apollo.dreamview.DelaysInMs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChassis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLocalization(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPerceptionObstacle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPlanning(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrediction(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrafficLight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setControl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.DelaysInMs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.DelaysInMs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.DelaysInMs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.DelaysInMs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional double chassis = 1;
 * @return {number}
 */
proto.apollo.dreamview.DelaysInMs.prototype.getChassis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.setChassis = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.clearChassis = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.DelaysInMs.prototype.hasChassis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double localization = 3;
 * @return {number}
 */
proto.apollo.dreamview.DelaysInMs.prototype.getLocalization = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.setLocalization = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.clearLocalization = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.DelaysInMs.prototype.hasLocalization = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double perception_obstacle = 4;
 * @return {number}
 */
proto.apollo.dreamview.DelaysInMs.prototype.getPerceptionObstacle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.setPerceptionObstacle = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.clearPerceptionObstacle = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.DelaysInMs.prototype.hasPerceptionObstacle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double planning = 5;
 * @return {number}
 */
proto.apollo.dreamview.DelaysInMs.prototype.getPlanning = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.setPlanning = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.clearPlanning = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.DelaysInMs.prototype.hasPlanning = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double prediction = 7;
 * @return {number}
 */
proto.apollo.dreamview.DelaysInMs.prototype.getPrediction = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.setPrediction = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.clearPrediction = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.DelaysInMs.prototype.hasPrediction = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double traffic_light = 8;
 * @return {number}
 */
proto.apollo.dreamview.DelaysInMs.prototype.getTrafficLight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.setTrafficLight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.clearTrafficLight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.DelaysInMs.prototype.hasTrafficLight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double control = 9;
 * @return {number}
 */
proto.apollo.dreamview.DelaysInMs.prototype.getControl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.setControl = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.DelaysInMs} returns this
 */
proto.apollo.dreamview.DelaysInMs.prototype.clearControl = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.DelaysInMs.prototype.hasControl = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.RoutePath.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.RoutePath.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.RoutePath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.RoutePath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.RoutePath.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    proto.apollo.dreamview.PolygonPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RoutePath as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.RoutePath.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.RoutePath.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.RoutePath}
 */
proto.apollo.dreamview.RoutePath.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.RoutePath();
  obj.pointList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.pointList.map(
          proto.apollo.dreamview.PolygonPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.RoutePath}
 */
proto.apollo.dreamview.RoutePath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.RoutePath;
  return proto.apollo.dreamview.RoutePath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.RoutePath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.RoutePath}
 */
proto.apollo.dreamview.RoutePath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dreamview.PolygonPoint;
      reader.readMessage(value,proto.apollo.dreamview.PolygonPoint.deserializeBinaryFromReader);
      msg.addPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.RoutePath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.RoutePath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.RoutePath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.RoutePath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.dreamview.PolygonPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PolygonPoint point = 1;
 * @return {!Array<!proto.apollo.dreamview.PolygonPoint>}
 */
proto.apollo.dreamview.RoutePath.prototype.getPointList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.PolygonPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.PolygonPoint, 1));
};


/**
 * @param {!Array<!proto.apollo.dreamview.PolygonPoint>} value
 * @return {!proto.apollo.dreamview.RoutePath} returns this
*/
proto.apollo.dreamview.RoutePath.prototype.setPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.dreamview.PolygonPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.PolygonPoint}
 */
proto.apollo.dreamview.RoutePath.prototype.addPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.dreamview.PolygonPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.RoutePath} returns this
 */
proto.apollo.dreamview.RoutePath.prototype.clearPointList = function() {
  return this.setPointList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Latency.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Latency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Latency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Latency.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    totalTimeMs: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Latency as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Latency.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.totalTimeMs;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Latency.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Latency}
 */
proto.apollo.dreamview.Latency.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Latency();
  obj.timestampSec != null && jspb.Message.setField(msg, 1, obj.timestampSec);
  obj.totalTimeMs != null && jspb.Message.setField(msg, 2, obj.totalTimeMs);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Latency}
 */
proto.apollo.dreamview.Latency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Latency;
  return proto.apollo.dreamview.Latency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Latency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Latency}
 */
proto.apollo.dreamview.Latency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalTimeMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Latency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Latency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Latency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Latency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.dreamview.Latency.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Latency} returns this
 */
proto.apollo.dreamview.Latency.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Latency} returns this
 */
proto.apollo.dreamview.Latency.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Latency.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double total_time_ms = 2;
 * @return {number}
 */
proto.apollo.dreamview.Latency.prototype.getTotalTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Latency} returns this
 */
proto.apollo.dreamview.Latency.prototype.setTotalTimeMs = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Latency} returns this
 */
proto.apollo.dreamview.Latency.prototype.clearTotalTimeMs = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Latency.prototype.hasTotalTimeMs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.MapElementIds.repeatedFields_ = [1,2,3,4,5,6,7,8,9,10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.MapElementIds.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.MapElementIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.MapElementIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.MapElementIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    crosswalkList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    junctionList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    signalList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    stopSignList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    yieldList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    overlapList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    roadList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    clearAreaList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    parkingSpaceList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    speedBumpList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    pncJunctionList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MapElementIds as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.MapElementIds.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneList;

  /** @type {?|undefined} */
  this.crosswalkList;

  /** @type {?|undefined} */
  this.junctionList;

  /** @type {?|undefined} */
  this.signalList;

  /** @type {?|undefined} */
  this.stopSignList;

  /** @type {?|undefined} */
  this.yieldList;

  /** @type {?|undefined} */
  this.overlapList;

  /** @type {?|undefined} */
  this.roadList;

  /** @type {?|undefined} */
  this.clearAreaList;

  /** @type {?|undefined} */
  this.parkingSpaceList;

  /** @type {?|undefined} */
  this.speedBumpList;

  /** @type {?|undefined} */
  this.pncJunctionList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.MapElementIds.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.MapElementIds}
 */
proto.apollo.dreamview.MapElementIds.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.MapElementIds();
  obj.laneList != null && jspb.Message.setField(msg, 1, obj.laneList);
  obj.crosswalkList != null && jspb.Message.setField(msg, 2, obj.crosswalkList);
  obj.junctionList != null && jspb.Message.setField(msg, 3, obj.junctionList);
  obj.signalList != null && jspb.Message.setField(msg, 4, obj.signalList);
  obj.stopSignList != null && jspb.Message.setField(msg, 5, obj.stopSignList);
  obj.yieldList != null && jspb.Message.setField(msg, 6, obj.yieldList);
  obj.overlapList != null && jspb.Message.setField(msg, 7, obj.overlapList);
  obj.roadList != null && jspb.Message.setField(msg, 8, obj.roadList);
  obj.clearAreaList != null && jspb.Message.setField(msg, 9, obj.clearAreaList);
  obj.parkingSpaceList != null && jspb.Message.setField(msg, 10, obj.parkingSpaceList);
  obj.speedBumpList != null && jspb.Message.setField(msg, 11, obj.speedBumpList);
  obj.pncJunctionList != null && jspb.Message.setField(msg, 12, obj.pncJunctionList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.MapElementIds}
 */
proto.apollo.dreamview.MapElementIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.MapElementIds;
  return proto.apollo.dreamview.MapElementIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.MapElementIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.MapElementIds}
 */
proto.apollo.dreamview.MapElementIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLane(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCrosswalk(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addJunction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSignal(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addStopSign(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addYield(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addOverlap(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoad(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addClearArea(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addParkingSpace(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addSpeedBump(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addPncJunction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.MapElementIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.MapElementIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.MapElementIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.MapElementIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaneList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getCrosswalkList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getJunctionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getSignalList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getStopSignList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getYieldList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getOverlapList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getRoadList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getClearAreaList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getParkingSpaceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getSpeedBumpList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getPncJunctionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
};


/**
 * repeated string lane = 1;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getLaneList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setLaneList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addLane = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearLaneList = function() {
  return this.setLaneList([]);
};


/**
 * repeated string crosswalk = 2;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getCrosswalkList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setCrosswalkList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addCrosswalk = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearCrosswalkList = function() {
  return this.setCrosswalkList([]);
};


/**
 * repeated string junction = 3;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getJunctionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setJunctionList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addJunction = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearJunctionList = function() {
  return this.setJunctionList([]);
};


/**
 * repeated string signal = 4;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getSignalList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setSignalList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addSignal = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearSignalList = function() {
  return this.setSignalList([]);
};


/**
 * repeated string stop_sign = 5;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getStopSignList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setStopSignList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addStopSign = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearStopSignList = function() {
  return this.setStopSignList([]);
};


/**
 * repeated string yield = 6;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getYieldList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setYieldList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addYield = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearYieldList = function() {
  return this.setYieldList([]);
};


/**
 * repeated string overlap = 7;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getOverlapList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setOverlapList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addOverlap = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearOverlapList = function() {
  return this.setOverlapList([]);
};


/**
 * repeated string road = 8;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getRoadList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setRoadList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addRoad = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearRoadList = function() {
  return this.setRoadList([]);
};


/**
 * repeated string clear_area = 9;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getClearAreaList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setClearAreaList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addClearArea = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearClearAreaList = function() {
  return this.setClearAreaList([]);
};


/**
 * repeated string parking_space = 10;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getParkingSpaceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setParkingSpaceList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addParkingSpace = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearParkingSpaceList = function() {
  return this.setParkingSpaceList([]);
};


/**
 * repeated string speed_bump = 11;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getSpeedBumpList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setSpeedBumpList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addSpeedBump = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearSpeedBumpList = function() {
  return this.setSpeedBumpList([]);
};


/**
 * repeated string pnc_junction = 12;
 * @return {!Array<string>}
 */
proto.apollo.dreamview.MapElementIds.prototype.getPncJunctionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.setPncJunctionList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.addPncJunction = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.MapElementIds} returns this
 */
proto.apollo.dreamview.MapElementIds.prototype.clearPncJunctionList = function() {
  return this.setPncJunctionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.ControlData.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.ControlData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.ControlData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ControlData.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    stationError: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    lateralError: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    headingError: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    currentTargetPoint: (f = msg.getCurrentTargetPoint()) && modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ControlData as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.ControlData.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.stationError;

  /** @type {?|undefined} */
  this.lateralError;

  /** @type {?|undefined} */
  this.headingError;

  /** @type {?|undefined} */
  this.currentTargetPoint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.ControlData.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.ControlData}
 */
proto.apollo.dreamview.ControlData.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.ControlData();
  obj.timestampSec != null && jspb.Message.setField(msg, 1, obj.timestampSec);
  obj.stationError != null && jspb.Message.setField(msg, 2, obj.stationError);
  obj.lateralError != null && jspb.Message.setField(msg, 3, obj.lateralError);
  obj.headingError != null && jspb.Message.setField(msg, 4, obj.headingError);
  obj.currentTargetPoint && jspb.Message.setWrapperField(
      msg, 5, modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject(obj.currentTargetPoint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.ControlData}
 */
proto.apollo.dreamview.ControlData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.ControlData;
  return proto.apollo.dreamview.ControlData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.ControlData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.ControlData}
 */
proto.apollo.dreamview.ControlData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStationError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralError(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingError(value);
      break;
    case 5:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.setCurrentTargetPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.ControlData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.ControlData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.ControlData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.ControlData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrentTargetPoint();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional double timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.dreamview.ControlData.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ControlData.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double station_error = 2;
 * @return {number}
 */
proto.apollo.dreamview.ControlData.prototype.getStationError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.setStationError = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.clearStationError = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ControlData.prototype.hasStationError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double lateral_error = 3;
 * @return {number}
 */
proto.apollo.dreamview.ControlData.prototype.getLateralError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.setLateralError = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.clearLateralError = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ControlData.prototype.hasLateralError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double heading_error = 4;
 * @return {number}
 */
proto.apollo.dreamview.ControlData.prototype.getHeadingError = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.setHeadingError = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.clearHeadingError = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ControlData.prototype.hasHeadingError = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.common.TrajectoryPoint current_target_point = 5;
 * @return {?proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.dreamview.ControlData.prototype.getCurrentTargetPoint = function() {
  return /** @type{?proto.apollo.common.TrajectoryPoint} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 5));
};


/**
 * @param {?proto.apollo.common.TrajectoryPoint|undefined} value
 * @return {!proto.apollo.dreamview.ControlData} returns this
*/
proto.apollo.dreamview.ControlData.prototype.setCurrentTargetPoint = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.ControlData} returns this
 */
proto.apollo.dreamview.ControlData.prototype.clearCurrentTargetPoint = function() {
  return this.setCurrentTargetPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.ControlData.prototype.hasCurrentTargetPoint = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    item: (f = msg.getItem()) && modules_common_monitor_log_proto_monitor_log_pb.MonitorMessageItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Notification as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Notification.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestampSec;

  /** @type {?|undefined} */
  this.item;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Notification.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Notification}
 */
proto.apollo.dreamview.Notification.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Notification();
  obj.timestampSec != null && jspb.Message.setField(msg, 1, obj.timestampSec);
  obj.item && jspb.Message.setWrapperField(
      msg, 2, modules_common_monitor_log_proto_monitor_log_pb.MonitorMessageItem.fromObject(obj.item));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Notification}
 */
proto.apollo.dreamview.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Notification;
  return proto.apollo.dreamview.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Notification}
 */
proto.apollo.dreamview.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampSec(value);
      break;
    case 2:
      var value = new modules_common_monitor_log_proto_monitor_log_pb.MonitorMessageItem;
      reader.readMessage(value,modules_common_monitor_log_proto_monitor_log_pb.MonitorMessageItem.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_monitor_log_proto_monitor_log_pb.MonitorMessageItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional double timestamp_sec = 1;
 * @return {number}
 */
proto.apollo.dreamview.Notification.prototype.getTimestampSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Notification} returns this
 */
proto.apollo.dreamview.Notification.prototype.setTimestampSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Notification} returns this
 */
proto.apollo.dreamview.Notification.prototype.clearTimestampSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Notification.prototype.hasTimestampSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.monitor.MonitorMessageItem item = 2;
 * @return {?proto.apollo.common.monitor.MonitorMessageItem}
 */
proto.apollo.dreamview.Notification.prototype.getItem = function() {
  return /** @type{?proto.apollo.common.monitor.MonitorMessageItem} */ (
    jspb.Message.getWrapperField(this, modules_common_monitor_log_proto_monitor_log_pb.MonitorMessageItem, 2));
};


/**
 * @param {?proto.apollo.common.monitor.MonitorMessageItem|undefined} value
 * @return {!proto.apollo.dreamview.Notification} returns this
*/
proto.apollo.dreamview.Notification.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Notification} returns this
 */
proto.apollo.dreamview.Notification.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Notification.prototype.hasItem = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.SensorMeasurements.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.SensorMeasurements.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.SensorMeasurements.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.SensorMeasurements} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.SensorMeasurements.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorMeasurementList: jspb.Message.toObjectList(msg.getSensorMeasurementList(),
    proto.apollo.dreamview.Object.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SensorMeasurements as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.SensorMeasurements.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sensorMeasurementList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.SensorMeasurements.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.SensorMeasurements}
 */
proto.apollo.dreamview.SensorMeasurements.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.SensorMeasurements();
  obj.sensorMeasurementList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.sensorMeasurementList.map(
          proto.apollo.dreamview.Object.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.SensorMeasurements}
 */
proto.apollo.dreamview.SensorMeasurements.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.SensorMeasurements;
  return proto.apollo.dreamview.SensorMeasurements.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.SensorMeasurements} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.SensorMeasurements}
 */
proto.apollo.dreamview.SensorMeasurements.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.addSensorMeasurement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.SensorMeasurements.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.SensorMeasurements.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.SensorMeasurements} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.SensorMeasurements.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorMeasurementList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Object sensor_measurement = 1;
 * @return {!Array<!proto.apollo.dreamview.Object>}
 */
proto.apollo.dreamview.SensorMeasurements.prototype.getSensorMeasurementList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Object, 1));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Object>} value
 * @return {!proto.apollo.dreamview.SensorMeasurements} returns this
*/
proto.apollo.dreamview.SensorMeasurements.prototype.setSensorMeasurementList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.dreamview.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SensorMeasurements.prototype.addSensorMeasurement = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.dreamview.Object, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.SensorMeasurements} returns this
 */
proto.apollo.dreamview.SensorMeasurements.prototype.clearSensorMeasurementList = function() {
  return this.setSensorMeasurementList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.SimulationWorld.repeatedFields_ = [3,6,8,14,24,27];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.SimulationWorld.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.SimulationWorld} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.SimulationWorld.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    sequenceNum: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    objectList: jspb.Message.toObjectList(msg.getObjectList(),
    proto.apollo.dreamview.Object.toObject, includeInstance),
    autoDrivingCar: (f = msg.getAutoDrivingCar()) && proto.apollo.dreamview.Object.toObject(includeInstance, f),
    trafficSignal: (f = msg.getTrafficSignal()) && proto.apollo.dreamview.Object.toObject(includeInstance, f),
    routePathList: jspb.Message.toObjectList(msg.getRoutePathList(),
    proto.apollo.dreamview.RoutePath.toObject, includeInstance),
    routingTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    planningTrajectoryList: jspb.Message.toObjectList(msg.getPlanningTrajectoryList(),
    proto.apollo.dreamview.Object.toObject, includeInstance),
    mainStop: (f = msg.getMainStop()) && proto.apollo.dreamview.Object.toObject(includeInstance, f),
    mainDecision: (f = msg.getMainDecision()) && proto.apollo.dreamview.Object.toObject(includeInstance, f),
    speedLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    delay: (f = msg.getDelay()) && proto.apollo.dreamview.DelaysInMs.toObject(includeInstance, f),
    monitor: (f = msg.getMonitor()) && modules_common_monitor_log_proto_monitor_log_pb.MonitorMessage.toObject(includeInstance, f),
    notificationList: jspb.Message.toObjectList(msg.getNotificationList(),
    proto.apollo.dreamview.Notification.toObject, includeInstance),
    engageAdvice: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    latencyMap: (f = msg.getLatencyMap()) ? f.toObject(includeInstance, proto.apollo.dreamview.Latency.toObject) : [],
    mapElementIds: (f = msg.getMapElementIds()) && proto.apollo.dreamview.MapElementIds.toObject(includeInstance, f),
    mapHash: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
    mapRadius: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    planningData: (f = msg.getPlanningData()) && modules_planning_proto_planning_internal_pb.PlanningData.toObject(includeInstance, f),
    gps: (f = msg.getGps()) && proto.apollo.dreamview.Object.toObject(includeInstance, f),
    laneMarker: (f = msg.getLaneMarker()) && modules_perception_proto_perception_obstacle_pb.LaneMarkers.toObject(includeInstance, f),
    controlData: (f = msg.getControlData()) && proto.apollo.dreamview.ControlData.toObject(includeInstance, f),
    navigationPathList: jspb.Message.toObjectList(msg.getNavigationPathList(),
    modules_common_proto_pnc_point_pb.Path.toObject, includeInstance),
    isRssSafe: jspb.Message.getBooleanFieldWithDefault(msg, 25, true),
    shadowLocalization: (f = msg.getShadowLocalization()) && proto.apollo.dreamview.Object.toObject(includeInstance, f),
    perceivedSignalList: jspb.Message.toObjectList(msg.getPerceivedSignalList(),
    proto.apollo.dreamview.Object.toObject, includeInstance),
    storiesMap: (f = msg.getStoriesMap()) ? f.toObject(includeInstance, undefined) : [],
    sensorMeasurementsMap: (f = msg.getSensorMeasurementsMap()) ? f.toObject(includeInstance, proto.apollo.dreamview.SensorMeasurements.toObject) : [],
    isSirenOn: jspb.Message.getBooleanFieldWithDefault(msg, 30, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SimulationWorld as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.SimulationWorld.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.timestamp;

  /** @type {?|undefined} */
  this.sequenceNum;

  /** @type {?|undefined} */
  this.objectList;

  /** @type {?|undefined} */
  this.autoDrivingCar;

  /** @type {?|undefined} */
  this.trafficSignal;

  /** @type {?|undefined} */
  this.routePathList;

  /** @type {?|undefined} */
  this.routingTime;

  /** @type {?|undefined} */
  this.planningTrajectoryList;

  /** @type {?|undefined} */
  this.mainStop;

  /** @type {?|undefined} */
  this.mainDecision;

  /** @type {?|undefined} */
  this.speedLimit;

  /** @type {?|undefined} */
  this.delay;

  /** @type {?|undefined} */
  this.monitor;

  /** @type {?|undefined} */
  this.notificationList;

  /** @type {?|undefined} */
  this.engageAdvice;

  /** @type {?|undefined} */
  this.latencyMap;

  /** @type {?|undefined} */
  this.mapElementIds;

  /** @type {?|undefined} */
  this.mapHash;

  /** @type {?|undefined} */
  this.mapRadius;

  /** @type {?|undefined} */
  this.planningData;

  /** @type {?|undefined} */
  this.gps;

  /** @type {?|undefined} */
  this.laneMarker;

  /** @type {?|undefined} */
  this.controlData;

  /** @type {?|undefined} */
  this.navigationPathList;

  /** @type {?|undefined} */
  this.isRssSafe;

  /** @type {?|undefined} */
  this.shadowLocalization;

  /** @type {?|undefined} */
  this.perceivedSignalList;

  /** @type {?|undefined} */
  this.storiesMap;

  /** @type {?|undefined} */
  this.sensorMeasurementsMap;

  /** @type {?|undefined} */
  this.isSirenOn;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.SimulationWorld.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.SimulationWorld}
 */
proto.apollo.dreamview.SimulationWorld.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.SimulationWorld();
  obj.timestamp != null && jspb.Message.setField(msg, 1, obj.timestamp);
  obj.sequenceNum != null && jspb.Message.setField(msg, 2, obj.sequenceNum);
  obj.objectList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.objectList.map(
          proto.apollo.dreamview.Object.fromObject));
  obj.autoDrivingCar && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.dreamview.Object.fromObject(obj.autoDrivingCar));
  obj.trafficSignal && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.dreamview.Object.fromObject(obj.trafficSignal));
  obj.routePathList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.routePathList.map(
          proto.apollo.dreamview.RoutePath.fromObject));
  obj.routingTime != null && jspb.Message.setField(msg, 7, obj.routingTime);
  obj.planningTrajectoryList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.planningTrajectoryList.map(
          proto.apollo.dreamview.Object.fromObject));
  obj.mainStop && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.dreamview.Object.fromObject(obj.mainStop));
  obj.mainDecision && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.dreamview.Object.fromObject(obj.mainDecision));
  obj.speedLimit != null && jspb.Message.setField(msg, 11, obj.speedLimit);
  obj.delay && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.dreamview.DelaysInMs.fromObject(obj.delay));
  obj.monitor && jspb.Message.setWrapperField(
      msg, 13, modules_common_monitor_log_proto_monitor_log_pb.MonitorMessage.fromObject(obj.monitor));
  obj.notificationList && jspb.Message.setRepeatedWrapperField(
      msg, 14, obj.notificationList.map(
          proto.apollo.dreamview.Notification.fromObject));
  obj.engageAdvice != null && jspb.Message.setField(msg, 15, obj.engageAdvice);
  obj.latencyMap && jspb.Message.setWrapperField(
      msg, 16, jspb.Map.fromObject(obj.latencyMap, proto.apollo.dreamview.Latency, proto.apollo.dreamview.Latency.fromObject));
  obj.mapElementIds && jspb.Message.setWrapperField(
      msg, 17, proto.apollo.dreamview.MapElementIds.fromObject(obj.mapElementIds));
  obj.mapHash != null && jspb.Message.setField(msg, 18, obj.mapHash);
  obj.mapRadius != null && jspb.Message.setField(msg, 19, obj.mapRadius);
  obj.planningData && jspb.Message.setWrapperField(
      msg, 20, modules_planning_proto_planning_internal_pb.PlanningData.fromObject(obj.planningData));
  obj.gps && jspb.Message.setWrapperField(
      msg, 21, proto.apollo.dreamview.Object.fromObject(obj.gps));
  obj.laneMarker && jspb.Message.setWrapperField(
      msg, 22, modules_perception_proto_perception_obstacle_pb.LaneMarkers.fromObject(obj.laneMarker));
  obj.controlData && jspb.Message.setWrapperField(
      msg, 23, proto.apollo.dreamview.ControlData.fromObject(obj.controlData));
  obj.navigationPathList && jspb.Message.setRepeatedWrapperField(
      msg, 24, obj.navigationPathList.map(
          modules_common_proto_pnc_point_pb.Path.fromObject));
  obj.isRssSafe != null && jspb.Message.setField(msg, 25, obj.isRssSafe);
  obj.shadowLocalization && jspb.Message.setWrapperField(
      msg, 26, proto.apollo.dreamview.Object.fromObject(obj.shadowLocalization));
  obj.perceivedSignalList && jspb.Message.setRepeatedWrapperField(
      msg, 27, obj.perceivedSignalList.map(
          proto.apollo.dreamview.Object.fromObject));
  obj.storiesMap && jspb.Message.setField(msg, 28, obj.storiesMap);
  obj.sensorMeasurementsMap && jspb.Message.setWrapperField(
      msg, 29, jspb.Map.fromObject(obj.sensorMeasurementsMap, proto.apollo.dreamview.SensorMeasurements, proto.apollo.dreamview.SensorMeasurements.fromObject));
  obj.isSirenOn != null && jspb.Message.setField(msg, 30, obj.isSirenOn);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.SimulationWorld}
 */
proto.apollo.dreamview.SimulationWorld.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.SimulationWorld;
  return proto.apollo.dreamview.SimulationWorld.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.SimulationWorld} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.SimulationWorld}
 */
proto.apollo.dreamview.SimulationWorld.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequenceNum(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.addObject(value);
      break;
    case 4:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.setAutoDrivingCar(value);
      break;
    case 5:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.setTrafficSignal(value);
      break;
    case 6:
      var value = new proto.apollo.dreamview.RoutePath;
      reader.readMessage(value,proto.apollo.dreamview.RoutePath.deserializeBinaryFromReader);
      msg.addRoutePath(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoutingTime(value);
      break;
    case 8:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.addPlanningTrajectory(value);
      break;
    case 9:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.setMainStop(value);
      break;
    case 10:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.setMainDecision(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLimit(value);
      break;
    case 12:
      var value = new proto.apollo.dreamview.DelaysInMs;
      reader.readMessage(value,proto.apollo.dreamview.DelaysInMs.deserializeBinaryFromReader);
      msg.setDelay(value);
      break;
    case 13:
      var value = new modules_common_monitor_log_proto_monitor_log_pb.MonitorMessage;
      reader.readMessage(value,modules_common_monitor_log_proto_monitor_log_pb.MonitorMessage.deserializeBinaryFromReader);
      msg.setMonitor(value);
      break;
    case 14:
      var value = new proto.apollo.dreamview.Notification;
      reader.readMessage(value,proto.apollo.dreamview.Notification.deserializeBinaryFromReader);
      msg.addNotification(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setEngageAdvice(value);
      break;
    case 16:
      var value = msg.getLatencyMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.dreamview.Latency.deserializeBinaryFromReader, "", new proto.apollo.dreamview.Latency());
         });
      break;
    case 17:
      var value = new proto.apollo.dreamview.MapElementIds;
      reader.readMessage(value,proto.apollo.dreamview.MapElementIds.deserializeBinaryFromReader);
      msg.setMapElementIds(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMapHash(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMapRadius(value);
      break;
    case 20:
      var value = new modules_planning_proto_planning_internal_pb.PlanningData;
      reader.readMessage(value,modules_planning_proto_planning_internal_pb.PlanningData.deserializeBinaryFromReader);
      msg.setPlanningData(value);
      break;
    case 21:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.setGps(value);
      break;
    case 22:
      var value = new modules_perception_proto_perception_obstacle_pb.LaneMarkers;
      reader.readMessage(value,modules_perception_proto_perception_obstacle_pb.LaneMarkers.deserializeBinaryFromReader);
      msg.setLaneMarker(value);
      break;
    case 23:
      var value = new proto.apollo.dreamview.ControlData;
      reader.readMessage(value,proto.apollo.dreamview.ControlData.deserializeBinaryFromReader);
      msg.setControlData(value);
      break;
    case 24:
      var value = new modules_common_proto_pnc_point_pb.Path;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.Path.deserializeBinaryFromReader);
      msg.addNavigationPath(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRssSafe(value);
      break;
    case 26:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.setShadowLocalization(value);
      break;
    case 27:
      var value = new proto.apollo.dreamview.Object;
      reader.readMessage(value,proto.apollo.dreamview.Object.deserializeBinaryFromReader);
      msg.addPerceivedSignal(value);
      break;
    case 28:
      var value = msg.getStoriesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 29:
      var value = msg.getSensorMeasurementsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.apollo.dreamview.SensorMeasurements.deserializeBinaryFromReader, "", new proto.apollo.dreamview.SensorMeasurements());
         });
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSirenOn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.SimulationWorld.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.SimulationWorld.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.SimulationWorld} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.SimulationWorld.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getObjectList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getAutoDrivingCar();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getTrafficSignal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getRoutePathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.dreamview.RoutePath.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getPlanningTrajectoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getMainStop();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getMainDecision();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getDelay();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.dreamview.DelaysInMs.serializeBinaryToWriter
    );
  }
  f = message.getMonitor();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      modules_common_monitor_log_proto_monitor_log_pb.MonitorMessage.serializeBinaryToWriter
    );
  }
  f = message.getNotificationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.apollo.dreamview.Notification.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLatencyMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(16, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.dreamview.Latency.serializeBinaryToWriter);
  }
  f = message.getMapElementIds();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.apollo.dreamview.MapElementIds.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getPlanningData();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      modules_planning_proto_planning_internal_pb.PlanningData.serializeBinaryToWriter
    );
  }
  f = message.getGps();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getLaneMarker();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      modules_perception_proto_perception_obstacle_pb.LaneMarkers.serializeBinaryToWriter
    );
  }
  f = message.getControlData();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.apollo.dreamview.ControlData.serializeBinaryToWriter
    );
  }
  f = message.getNavigationPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      24,
      f,
      modules_common_proto_pnc_point_pb.Path.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
  f = message.getShadowLocalization();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getPerceivedSignalList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      27,
      f,
      proto.apollo.dreamview.Object.serializeBinaryToWriter
    );
  }
  f = message.getStoriesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(28, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getSensorMeasurementsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(29, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.apollo.dreamview.SensorMeasurements.serializeBinaryToWriter);
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeBool(
      30,
      f
    );
  }
};


/**
 * optional double timestamp = 1;
 * @return {number}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 sequence_num = 2;
 * @return {number}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getSequenceNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setSequenceNum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearSequenceNum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasSequenceNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Object object = 3;
 * @return {!Array<!proto.apollo.dreamview.Object>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getObjectList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Object, 3));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Object>} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setObjectList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.dreamview.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.addObject = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.dreamview.Object, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearObjectList = function() {
  return this.setObjectList([]);
};


/**
 * optional Object auto_driving_car = 4;
 * @return {?proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getAutoDrivingCar = function() {
  return /** @type{?proto.apollo.dreamview.Object} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Object, 4));
};


/**
 * @param {?proto.apollo.dreamview.Object|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setAutoDrivingCar = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearAutoDrivingCar = function() {
  return this.setAutoDrivingCar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasAutoDrivingCar = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Object traffic_signal = 5;
 * @return {?proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getTrafficSignal = function() {
  return /** @type{?proto.apollo.dreamview.Object} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Object, 5));
};


/**
 * @param {?proto.apollo.dreamview.Object|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setTrafficSignal = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearTrafficSignal = function() {
  return this.setTrafficSignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasTrafficSignal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated RoutePath route_path = 6;
 * @return {!Array<!proto.apollo.dreamview.RoutePath>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getRoutePathList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.RoutePath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.RoutePath, 6));
};


/**
 * @param {!Array<!proto.apollo.dreamview.RoutePath>} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setRoutePathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.dreamview.RoutePath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.RoutePath}
 */
proto.apollo.dreamview.SimulationWorld.prototype.addRoutePath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.dreamview.RoutePath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearRoutePathList = function() {
  return this.setRoutePathList([]);
};


/**
 * optional double routing_time = 7;
 * @return {number}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getRoutingTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setRoutingTime = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearRoutingTime = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasRoutingTime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated Object planning_trajectory = 8;
 * @return {!Array<!proto.apollo.dreamview.Object>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getPlanningTrajectoryList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Object, 8));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Object>} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setPlanningTrajectoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.dreamview.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.addPlanningTrajectory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.dreamview.Object, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearPlanningTrajectoryList = function() {
  return this.setPlanningTrajectoryList([]);
};


/**
 * optional Object main_stop = 9;
 * @return {?proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getMainStop = function() {
  return /** @type{?proto.apollo.dreamview.Object} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Object, 9));
};


/**
 * @param {?proto.apollo.dreamview.Object|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setMainStop = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearMainStop = function() {
  return this.setMainStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasMainStop = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Object main_decision = 10;
 * @return {?proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getMainDecision = function() {
  return /** @type{?proto.apollo.dreamview.Object} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Object, 10));
};


/**
 * @param {?proto.apollo.dreamview.Object|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setMainDecision = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearMainDecision = function() {
  return this.setMainDecision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasMainDecision = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double speed_limit = 11;
 * @return {number}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setSpeedLimit = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearSpeedLimit = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasSpeedLimit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DelaysInMs delay = 12;
 * @return {?proto.apollo.dreamview.DelaysInMs}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getDelay = function() {
  return /** @type{?proto.apollo.dreamview.DelaysInMs} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.DelaysInMs, 12));
};


/**
 * @param {?proto.apollo.dreamview.DelaysInMs|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setDelay = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearDelay = function() {
  return this.setDelay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasDelay = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional apollo.common.monitor.MonitorMessage monitor = 13;
 * @return {?proto.apollo.common.monitor.MonitorMessage}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getMonitor = function() {
  return /** @type{?proto.apollo.common.monitor.MonitorMessage} */ (
    jspb.Message.getWrapperField(this, modules_common_monitor_log_proto_monitor_log_pb.MonitorMessage, 13));
};


/**
 * @param {?proto.apollo.common.monitor.MonitorMessage|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setMonitor = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearMonitor = function() {
  return this.setMonitor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasMonitor = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated Notification notification = 14;
 * @return {!Array<!proto.apollo.dreamview.Notification>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getNotificationList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Notification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Notification, 14));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Notification>} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setNotificationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.apollo.dreamview.Notification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Notification}
 */
proto.apollo.dreamview.SimulationWorld.prototype.addNotification = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.apollo.dreamview.Notification, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearNotificationList = function() {
  return this.setNotificationList([]);
};


/**
 * optional string engage_advice = 15;
 * @return {string}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getEngageAdvice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setEngageAdvice = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearEngageAdvice = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasEngageAdvice = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * map<string, Latency> latency = 16;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.dreamview.Latency>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getLatencyMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.dreamview.Latency>} */ (
      jspb.Message.getMapField(this, 16, opt_noLazyCreate,
      proto.apollo.dreamview.Latency));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearLatencyMap = function() {
  this.getLatencyMap().clear();
  return this;};


/**
 * optional MapElementIds map_element_ids = 17;
 * @return {?proto.apollo.dreamview.MapElementIds}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getMapElementIds = function() {
  return /** @type{?proto.apollo.dreamview.MapElementIds} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.MapElementIds, 17));
};


/**
 * @param {?proto.apollo.dreamview.MapElementIds|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setMapElementIds = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearMapElementIds = function() {
  return this.setMapElementIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasMapElementIds = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional uint64 map_hash = 18;
 * @return {number}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getMapHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setMapHash = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearMapHash = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasMapHash = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double map_radius = 19;
 * @return {number}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getMapRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setMapRadius = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearMapRadius = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasMapRadius = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional apollo.planning_internal.PlanningData planning_data = 20;
 * @return {?proto.apollo.planning_internal.PlanningData}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getPlanningData = function() {
  return /** @type{?proto.apollo.planning_internal.PlanningData} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_planning_internal_pb.PlanningData, 20));
};


/**
 * @param {?proto.apollo.planning_internal.PlanningData|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setPlanningData = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearPlanningData = function() {
  return this.setPlanningData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasPlanningData = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Object gps = 21;
 * @return {?proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getGps = function() {
  return /** @type{?proto.apollo.dreamview.Object} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Object, 21));
};


/**
 * @param {?proto.apollo.dreamview.Object|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setGps = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearGps = function() {
  return this.setGps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasGps = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional apollo.perception.LaneMarkers lane_marker = 22;
 * @return {?proto.apollo.perception.LaneMarkers}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getLaneMarker = function() {
  return /** @type{?proto.apollo.perception.LaneMarkers} */ (
    jspb.Message.getWrapperField(this, modules_perception_proto_perception_obstacle_pb.LaneMarkers, 22));
};


/**
 * @param {?proto.apollo.perception.LaneMarkers|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setLaneMarker = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearLaneMarker = function() {
  return this.setLaneMarker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasLaneMarker = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional ControlData control_data = 23;
 * @return {?proto.apollo.dreamview.ControlData}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getControlData = function() {
  return /** @type{?proto.apollo.dreamview.ControlData} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.ControlData, 23));
};


/**
 * @param {?proto.apollo.dreamview.ControlData|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setControlData = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearControlData = function() {
  return this.setControlData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasControlData = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * repeated apollo.common.Path navigation_path = 24;
 * @return {!Array<!proto.apollo.common.Path>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getNavigationPathList = function() {
  return /** @type{!Array<!proto.apollo.common.Path>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.Path, 24));
};


/**
 * @param {!Array<!proto.apollo.common.Path>} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setNavigationPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 24, value);
};


/**
 * @param {!proto.apollo.common.Path=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Path}
 */
proto.apollo.dreamview.SimulationWorld.prototype.addNavigationPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 24, opt_value, proto.apollo.common.Path, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearNavigationPathList = function() {
  return this.setNavigationPathList([]);
};


/**
 * optional bool is_rss_safe = 25;
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getIsRssSafe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setIsRssSafe = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearIsRssSafe = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasIsRssSafe = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional Object shadow_localization = 26;
 * @return {?proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getShadowLocalization = function() {
  return /** @type{?proto.apollo.dreamview.Object} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Object, 26));
};


/**
 * @param {?proto.apollo.dreamview.Object|undefined} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setShadowLocalization = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearShadowLocalization = function() {
  return this.setShadowLocalization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasShadowLocalization = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * repeated Object perceived_signal = 27;
 * @return {!Array<!proto.apollo.dreamview.Object>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getPerceivedSignalList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Object, 27));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Object>} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
*/
proto.apollo.dreamview.SimulationWorld.prototype.setPerceivedSignalList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 27, value);
};


/**
 * @param {!proto.apollo.dreamview.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Object}
 */
proto.apollo.dreamview.SimulationWorld.prototype.addPerceivedSignal = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 27, opt_value, proto.apollo.dreamview.Object, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearPerceivedSignalList = function() {
  return this.setPerceivedSignalList([]);
};


/**
 * map<string, bool> stories = 28;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getStoriesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 28, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearStoriesMap = function() {
  this.getStoriesMap().clear();
  return this;};


/**
 * map<string, SensorMeasurements> sensor_measurements = 29;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.apollo.dreamview.SensorMeasurements>}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getSensorMeasurementsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.apollo.dreamview.SensorMeasurements>} */ (
      jspb.Message.getMapField(this, 29, opt_noLazyCreate,
      proto.apollo.dreamview.SensorMeasurements));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearSensorMeasurementsMap = function() {
  this.getSensorMeasurementsMap().clear();
  return this;};


/**
 * optional bool is_siren_on = 30;
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.getIsSirenOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 30, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.setIsSirenOn = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.SimulationWorld} returns this
 */
proto.apollo.dreamview.SimulationWorld.prototype.clearIsSirenOn = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.SimulationWorld.prototype.hasIsSirenOn = function() {
  return jspb.Message.getField(this, 30) != null;
};


goog.object.extend(exports, proto.apollo.dreamview);
