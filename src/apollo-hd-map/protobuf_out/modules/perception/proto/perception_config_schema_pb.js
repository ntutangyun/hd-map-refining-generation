// source: modules/perception/proto/perception_config_schema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.KeyValueArrayBool', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueArrayDouble', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueArrayFloat', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueArrayInt', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueArrayString', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueBool', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueDouble', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueFloat', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueInt', null, global);
goog.exportSymbol('proto.apollo.perception.KeyValueString', null, global);
goog.exportSymbol('proto.apollo.perception.ModelConfigFileListProto', null, global);
goog.exportSymbol('proto.apollo.perception.ModelConfigProto', null, global);
goog.exportSymbol('proto.apollo.perception.MultiModelConfigProto', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueInt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.KeyValueInt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueInt.displayName = 'proto.apollo.perception.KeyValueInt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.KeyValueString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueString.displayName = 'proto.apollo.perception.KeyValueString';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueDouble = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.KeyValueDouble, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueDouble.displayName = 'proto.apollo.perception.KeyValueDouble';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueFloat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.KeyValueFloat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueFloat.displayName = 'proto.apollo.perception.KeyValueFloat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueBool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.KeyValueBool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueBool.displayName = 'proto.apollo.perception.KeyValueBool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueArrayInt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.KeyValueArrayInt.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.KeyValueArrayInt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueArrayInt.displayName = 'proto.apollo.perception.KeyValueArrayInt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueArrayString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.KeyValueArrayString.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.KeyValueArrayString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueArrayString.displayName = 'proto.apollo.perception.KeyValueArrayString';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueArrayDouble = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.KeyValueArrayDouble.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.KeyValueArrayDouble, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueArrayDouble.displayName = 'proto.apollo.perception.KeyValueArrayDouble';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueArrayFloat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.KeyValueArrayFloat.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.KeyValueArrayFloat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueArrayFloat.displayName = 'proto.apollo.perception.KeyValueArrayFloat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.KeyValueArrayBool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.KeyValueArrayBool.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.KeyValueArrayBool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.KeyValueArrayBool.displayName = 'proto.apollo.perception.KeyValueArrayBool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.ModelConfigProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.ModelConfigProto.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.ModelConfigProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.ModelConfigProto.displayName = 'proto.apollo.perception.ModelConfigProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.MultiModelConfigProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.MultiModelConfigProto.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.MultiModelConfigProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.MultiModelConfigProto.displayName = 'proto.apollo.perception.MultiModelConfigProto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.ModelConfigFileListProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.ModelConfigFileListProto.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.ModelConfigFileListProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.ModelConfigFileListProto.displayName = 'proto.apollo.perception.ModelConfigFileListProto';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueInt.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueInt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueInt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueInt.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueInt as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueInt.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueInt.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueInt}
 */
proto.apollo.perception.KeyValueInt.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueInt();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.value != null && jspb.Message.setField(msg, 2, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueInt}
 */
proto.apollo.perception.KeyValueInt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueInt;
  return proto.apollo.perception.KeyValueInt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueInt}
 */
proto.apollo.perception.KeyValueInt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueInt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueInt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueInt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueInt.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueInt} returns this
 */
proto.apollo.perception.KeyValueInt.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueInt} returns this
 */
proto.apollo.perception.KeyValueInt.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueInt.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.apollo.perception.KeyValueInt.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.KeyValueInt} returns this
 */
proto.apollo.perception.KeyValueInt.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueInt} returns this
 */
proto.apollo.perception.KeyValueInt.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueInt.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueString.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueString.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueString as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueString.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueString.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueString}
 */
proto.apollo.perception.KeyValueString.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueString();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.value != null && jspb.Message.setField(msg, 2, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueString}
 */
proto.apollo.perception.KeyValueString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueString;
  return proto.apollo.perception.KeyValueString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueString}
 */
proto.apollo.perception.KeyValueString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueString.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueString} returns this
 */
proto.apollo.perception.KeyValueString.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueString} returns this
 */
proto.apollo.perception.KeyValueString.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueString.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.perception.KeyValueString.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.apollo.perception.KeyValueString.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueString.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.perception.KeyValueString} returns this
 */
proto.apollo.perception.KeyValueString.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueString} returns this
 */
proto.apollo.perception.KeyValueString.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueString.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueDouble.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueDouble.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueDouble} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueDouble.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueDouble as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueDouble.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueDouble.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueDouble}
 */
proto.apollo.perception.KeyValueDouble.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueDouble();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.value != null && jspb.Message.setField(msg, 2, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueDouble}
 */
proto.apollo.perception.KeyValueDouble.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueDouble;
  return proto.apollo.perception.KeyValueDouble.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueDouble} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueDouble}
 */
proto.apollo.perception.KeyValueDouble.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueDouble.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueDouble.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueDouble} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueDouble.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueDouble.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueDouble} returns this
 */
proto.apollo.perception.KeyValueDouble.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueDouble} returns this
 */
proto.apollo.perception.KeyValueDouble.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueDouble.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.apollo.perception.KeyValueDouble.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.KeyValueDouble} returns this
 */
proto.apollo.perception.KeyValueDouble.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueDouble} returns this
 */
proto.apollo.perception.KeyValueDouble.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueDouble.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueFloat.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueFloat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueFloat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueFloat.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueFloat as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueFloat.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueFloat.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueFloat}
 */
proto.apollo.perception.KeyValueFloat.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueFloat();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.value != null && jspb.Message.setField(msg, 2, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueFloat}
 */
proto.apollo.perception.KeyValueFloat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueFloat;
  return proto.apollo.perception.KeyValueFloat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueFloat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueFloat}
 */
proto.apollo.perception.KeyValueFloat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueFloat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueFloat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueFloat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueFloat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueFloat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueFloat} returns this
 */
proto.apollo.perception.KeyValueFloat.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueFloat} returns this
 */
proto.apollo.perception.KeyValueFloat.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueFloat.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.apollo.perception.KeyValueFloat.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.KeyValueFloat} returns this
 */
proto.apollo.perception.KeyValueFloat.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueFloat} returns this
 */
proto.apollo.perception.KeyValueFloat.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueFloat.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueBool.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueBool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueBool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueBool.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueBool as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueBool.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.value;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueBool.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueBool}
 */
proto.apollo.perception.KeyValueBool.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueBool();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.value != null && jspb.Message.setField(msg, 2, obj.value);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueBool}
 */
proto.apollo.perception.KeyValueBool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueBool;
  return proto.apollo.perception.KeyValueBool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueBool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueBool}
 */
proto.apollo.perception.KeyValueBool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueBool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueBool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueBool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueBool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueBool.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueBool} returns this
 */
proto.apollo.perception.KeyValueBool.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueBool} returns this
 */
proto.apollo.perception.KeyValueBool.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueBool.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool value = 2;
 * @return {boolean}
 */
proto.apollo.perception.KeyValueBool.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.KeyValueBool} returns this
 */
proto.apollo.perception.KeyValueBool.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueBool} returns this
 */
proto.apollo.perception.KeyValueBool.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueBool.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.KeyValueArrayInt.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueArrayInt.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueArrayInt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueArrayInt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayInt.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    valuesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueArrayInt as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueArrayInt.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.valuesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueArrayInt.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueArrayInt}
 */
proto.apollo.perception.KeyValueArrayInt.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueArrayInt();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.valuesList != null && jspb.Message.setField(msg, 2, obj.valuesList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueArrayInt}
 */
proto.apollo.perception.KeyValueArrayInt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueArrayInt;
  return proto.apollo.perception.KeyValueArrayInt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueArrayInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueArrayInt}
 */
proto.apollo.perception.KeyValueArrayInt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueArrayInt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueArrayInt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueArrayInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayInt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueArrayInt.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueArrayInt} returns this
 */
proto.apollo.perception.KeyValueArrayInt.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueArrayInt} returns this
 */
proto.apollo.perception.KeyValueArrayInt.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueArrayInt.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 values = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.KeyValueArrayInt.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.KeyValueArrayInt} returns this
 */
proto.apollo.perception.KeyValueArrayInt.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayInt} returns this
 */
proto.apollo.perception.KeyValueArrayInt.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.KeyValueArrayInt} returns this
 */
proto.apollo.perception.KeyValueArrayInt.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.KeyValueArrayString.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueArrayString.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueArrayString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueArrayString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayString.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    valuesList: msg.getValuesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueArrayString as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueArrayString.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.valuesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueArrayString.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueArrayString}
 */
proto.apollo.perception.KeyValueArrayString.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueArrayString();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.valuesList != null && jspb.Message.setField(msg, 2, obj.valuesList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueArrayString}
 */
proto.apollo.perception.KeyValueArrayString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueArrayString;
  return proto.apollo.perception.KeyValueArrayString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueArrayString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueArrayString}
 */
proto.apollo.perception.KeyValueArrayString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueArrayString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueArrayString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueArrayString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueArrayString.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueArrayString} returns this
 */
proto.apollo.perception.KeyValueArrayString.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueArrayString} returns this
 */
proto.apollo.perception.KeyValueArrayString.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueArrayString.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes values = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.apollo.perception.KeyValueArrayString.prototype.getValuesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes values = 2;
 * This is a type-conversion wrapper around `getValuesList()`
 * @return {!Array<string>}
 */
proto.apollo.perception.KeyValueArrayString.prototype.getValuesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getValuesList()));
};


/**
 * repeated bytes values = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValuesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.apollo.perception.KeyValueArrayString.prototype.getValuesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getValuesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.apollo.perception.KeyValueArrayString} returns this
 */
proto.apollo.perception.KeyValueArrayString.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayString} returns this
 */
proto.apollo.perception.KeyValueArrayString.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.KeyValueArrayString} returns this
 */
proto.apollo.perception.KeyValueArrayString.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.KeyValueArrayDouble.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueArrayDouble.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueArrayDouble} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayDouble.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueArrayDouble as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueArrayDouble.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.valuesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueArrayDouble.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueArrayDouble}
 */
proto.apollo.perception.KeyValueArrayDouble.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueArrayDouble();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.valuesList != null && jspb.Message.setField(msg, 2, obj.valuesList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueArrayDouble}
 */
proto.apollo.perception.KeyValueArrayDouble.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueArrayDouble;
  return proto.apollo.perception.KeyValueArrayDouble.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueArrayDouble} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueArrayDouble}
 */
proto.apollo.perception.KeyValueArrayDouble.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueArrayDouble.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueArrayDouble} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayDouble.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueArrayDouble} returns this
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueArrayDouble} returns this
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated double values = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.KeyValueArrayDouble} returns this
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayDouble} returns this
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.KeyValueArrayDouble} returns this
 */
proto.apollo.perception.KeyValueArrayDouble.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.KeyValueArrayFloat.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueArrayFloat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueArrayFloat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayFloat.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueArrayFloat as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueArrayFloat.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.valuesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueArrayFloat.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueArrayFloat}
 */
proto.apollo.perception.KeyValueArrayFloat.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueArrayFloat();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.valuesList != null && jspb.Message.setField(msg, 2, obj.valuesList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueArrayFloat}
 */
proto.apollo.perception.KeyValueArrayFloat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueArrayFloat;
  return proto.apollo.perception.KeyValueArrayFloat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueArrayFloat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueArrayFloat}
 */
proto.apollo.perception.KeyValueArrayFloat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueArrayFloat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueArrayFloat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayFloat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueArrayFloat} returns this
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueArrayFloat} returns this
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float values = 2;
 * @return {!Array<number>}
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.perception.KeyValueArrayFloat} returns this
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayFloat} returns this
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.KeyValueArrayFloat} returns this
 */
proto.apollo.perception.KeyValueArrayFloat.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.KeyValueArrayBool.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.KeyValueArrayBool.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.KeyValueArrayBool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.KeyValueArrayBool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayBool.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    valuesList: (f = jspb.Message.getRepeatedBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of KeyValueArrayBool as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.KeyValueArrayBool.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.valuesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.KeyValueArrayBool.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.KeyValueArrayBool}
 */
proto.apollo.perception.KeyValueArrayBool.fromObject = function(obj) {
  var msg = new proto.apollo.perception.KeyValueArrayBool();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.valuesList != null && jspb.Message.setField(msg, 2, obj.valuesList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.KeyValueArrayBool}
 */
proto.apollo.perception.KeyValueArrayBool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.KeyValueArrayBool;
  return proto.apollo.perception.KeyValueArrayBool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.KeyValueArrayBool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.KeyValueArrayBool}
 */
proto.apollo.perception.KeyValueArrayBool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addValues(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.KeyValueArrayBool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.KeyValueArrayBool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.KeyValueArrayBool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.KeyValueArrayBool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.KeyValueArrayBool.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.KeyValueArrayBool} returns this
 */
proto.apollo.perception.KeyValueArrayBool.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.KeyValueArrayBool} returns this
 */
proto.apollo.perception.KeyValueArrayBool.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.KeyValueArrayBool.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bool values = 2;
 * @return {!Array<boolean>}
 */
proto.apollo.perception.KeyValueArrayBool.prototype.getValuesList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 2));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.apollo.perception.KeyValueArrayBool} returns this
 */
proto.apollo.perception.KeyValueArrayBool.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayBool} returns this
 */
proto.apollo.perception.KeyValueArrayBool.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.KeyValueArrayBool} returns this
 */
proto.apollo.perception.KeyValueArrayBool.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.ModelConfigProto.repeatedFields_ = [3,4,5,6,7,8,9,10,11,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.ModelConfigProto.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.ModelConfigProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.ModelConfigProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.ModelConfigProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    version: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    integerParamsList: jspb.Message.toObjectList(msg.getIntegerParamsList(),
    proto.apollo.perception.KeyValueInt.toObject, includeInstance),
    stringParamsList: jspb.Message.toObjectList(msg.getStringParamsList(),
    proto.apollo.perception.KeyValueString.toObject, includeInstance),
    doubleParamsList: jspb.Message.toObjectList(msg.getDoubleParamsList(),
    proto.apollo.perception.KeyValueDouble.toObject, includeInstance),
    floatParamsList: jspb.Message.toObjectList(msg.getFloatParamsList(),
    proto.apollo.perception.KeyValueFloat.toObject, includeInstance),
    boolParamsList: jspb.Message.toObjectList(msg.getBoolParamsList(),
    proto.apollo.perception.KeyValueBool.toObject, includeInstance),
    arrayIntegerParamsList: jspb.Message.toObjectList(msg.getArrayIntegerParamsList(),
    proto.apollo.perception.KeyValueArrayInt.toObject, includeInstance),
    arrayStringParamsList: jspb.Message.toObjectList(msg.getArrayStringParamsList(),
    proto.apollo.perception.KeyValueArrayString.toObject, includeInstance),
    arrayDoubleParamsList: jspb.Message.toObjectList(msg.getArrayDoubleParamsList(),
    proto.apollo.perception.KeyValueArrayDouble.toObject, includeInstance),
    arrayFloatParamsList: jspb.Message.toObjectList(msg.getArrayFloatParamsList(),
    proto.apollo.perception.KeyValueArrayFloat.toObject, includeInstance),
    arrayBoolParamsList: jspb.Message.toObjectList(msg.getArrayBoolParamsList(),
    proto.apollo.perception.KeyValueArrayBool.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ModelConfigProto as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.ModelConfigProto.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.version;

  /** @type {?|undefined} */
  this.integerParamsList;

  /** @type {?|undefined} */
  this.stringParamsList;

  /** @type {?|undefined} */
  this.doubleParamsList;

  /** @type {?|undefined} */
  this.floatParamsList;

  /** @type {?|undefined} */
  this.boolParamsList;

  /** @type {?|undefined} */
  this.arrayIntegerParamsList;

  /** @type {?|undefined} */
  this.arrayStringParamsList;

  /** @type {?|undefined} */
  this.arrayDoubleParamsList;

  /** @type {?|undefined} */
  this.arrayFloatParamsList;

  /** @type {?|undefined} */
  this.arrayBoolParamsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.ModelConfigProto.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.ModelConfigProto}
 */
proto.apollo.perception.ModelConfigProto.fromObject = function(obj) {
  var msg = new proto.apollo.perception.ModelConfigProto();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.version != null && jspb.Message.setField(msg, 2, obj.version);
  obj.integerParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.integerParamsList.map(
          proto.apollo.perception.KeyValueInt.fromObject));
  obj.stringParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.stringParamsList.map(
          proto.apollo.perception.KeyValueString.fromObject));
  obj.doubleParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.doubleParamsList.map(
          proto.apollo.perception.KeyValueDouble.fromObject));
  obj.floatParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.floatParamsList.map(
          proto.apollo.perception.KeyValueFloat.fromObject));
  obj.boolParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.boolParamsList.map(
          proto.apollo.perception.KeyValueBool.fromObject));
  obj.arrayIntegerParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.arrayIntegerParamsList.map(
          proto.apollo.perception.KeyValueArrayInt.fromObject));
  obj.arrayStringParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 9, obj.arrayStringParamsList.map(
          proto.apollo.perception.KeyValueArrayString.fromObject));
  obj.arrayDoubleParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.arrayDoubleParamsList.map(
          proto.apollo.perception.KeyValueArrayDouble.fromObject));
  obj.arrayFloatParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.arrayFloatParamsList.map(
          proto.apollo.perception.KeyValueArrayFloat.fromObject));
  obj.arrayBoolParamsList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.arrayBoolParamsList.map(
          proto.apollo.perception.KeyValueArrayBool.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.ModelConfigProto}
 */
proto.apollo.perception.ModelConfigProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.ModelConfigProto;
  return proto.apollo.perception.ModelConfigProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.ModelConfigProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.ModelConfigProto}
 */
proto.apollo.perception.ModelConfigProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.apollo.perception.KeyValueInt;
      reader.readMessage(value,proto.apollo.perception.KeyValueInt.deserializeBinaryFromReader);
      msg.addIntegerParams(value);
      break;
    case 4:
      var value = new proto.apollo.perception.KeyValueString;
      reader.readMessage(value,proto.apollo.perception.KeyValueString.deserializeBinaryFromReader);
      msg.addStringParams(value);
      break;
    case 5:
      var value = new proto.apollo.perception.KeyValueDouble;
      reader.readMessage(value,proto.apollo.perception.KeyValueDouble.deserializeBinaryFromReader);
      msg.addDoubleParams(value);
      break;
    case 6:
      var value = new proto.apollo.perception.KeyValueFloat;
      reader.readMessage(value,proto.apollo.perception.KeyValueFloat.deserializeBinaryFromReader);
      msg.addFloatParams(value);
      break;
    case 7:
      var value = new proto.apollo.perception.KeyValueBool;
      reader.readMessage(value,proto.apollo.perception.KeyValueBool.deserializeBinaryFromReader);
      msg.addBoolParams(value);
      break;
    case 8:
      var value = new proto.apollo.perception.KeyValueArrayInt;
      reader.readMessage(value,proto.apollo.perception.KeyValueArrayInt.deserializeBinaryFromReader);
      msg.addArrayIntegerParams(value);
      break;
    case 9:
      var value = new proto.apollo.perception.KeyValueArrayString;
      reader.readMessage(value,proto.apollo.perception.KeyValueArrayString.deserializeBinaryFromReader);
      msg.addArrayStringParams(value);
      break;
    case 10:
      var value = new proto.apollo.perception.KeyValueArrayDouble;
      reader.readMessage(value,proto.apollo.perception.KeyValueArrayDouble.deserializeBinaryFromReader);
      msg.addArrayDoubleParams(value);
      break;
    case 11:
      var value = new proto.apollo.perception.KeyValueArrayFloat;
      reader.readMessage(value,proto.apollo.perception.KeyValueArrayFloat.deserializeBinaryFromReader);
      msg.addArrayFloatParams(value);
      break;
    case 12:
      var value = new proto.apollo.perception.KeyValueArrayBool;
      reader.readMessage(value,proto.apollo.perception.KeyValueArrayBool.deserializeBinaryFromReader);
      msg.addArrayBoolParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.ModelConfigProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.ModelConfigProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.ModelConfigProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.ModelConfigProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIntegerParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.perception.KeyValueInt.serializeBinaryToWriter
    );
  }
  f = message.getStringParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.perception.KeyValueString.serializeBinaryToWriter
    );
  }
  f = message.getDoubleParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.perception.KeyValueDouble.serializeBinaryToWriter
    );
  }
  f = message.getFloatParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.perception.KeyValueFloat.serializeBinaryToWriter
    );
  }
  f = message.getBoolParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.perception.KeyValueBool.serializeBinaryToWriter
    );
  }
  f = message.getArrayIntegerParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.perception.KeyValueArrayInt.serializeBinaryToWriter
    );
  }
  f = message.getArrayStringParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.apollo.perception.KeyValueArrayString.serializeBinaryToWriter
    );
  }
  f = message.getArrayDoubleParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.apollo.perception.KeyValueArrayDouble.serializeBinaryToWriter
    );
  }
  f = message.getArrayFloatParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.perception.KeyValueArrayFloat.serializeBinaryToWriter
    );
  }
  f = message.getArrayBoolParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.apollo.perception.KeyValueArrayBool.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.perception.ModelConfigProto.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.ModelConfigProto.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.apollo.perception.ModelConfigProto.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.ModelConfigProto.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated KeyValueInt integer_params = 3;
 * @return {!Array<!proto.apollo.perception.KeyValueInt>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getIntegerParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueInt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueInt, 3));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueInt>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setIntegerParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueInt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueInt}
 */
proto.apollo.perception.ModelConfigProto.prototype.addIntegerParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.perception.KeyValueInt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearIntegerParamsList = function() {
  return this.setIntegerParamsList([]);
};


/**
 * repeated KeyValueString string_params = 4;
 * @return {!Array<!proto.apollo.perception.KeyValueString>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getStringParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueString>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueString, 4));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueString>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setStringParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueString=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueString}
 */
proto.apollo.perception.ModelConfigProto.prototype.addStringParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.perception.KeyValueString, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearStringParamsList = function() {
  return this.setStringParamsList([]);
};


/**
 * repeated KeyValueDouble double_params = 5;
 * @return {!Array<!proto.apollo.perception.KeyValueDouble>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getDoubleParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueDouble>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueDouble, 5));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueDouble>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setDoubleParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueDouble=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueDouble}
 */
proto.apollo.perception.ModelConfigProto.prototype.addDoubleParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.perception.KeyValueDouble, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearDoubleParamsList = function() {
  return this.setDoubleParamsList([]);
};


/**
 * repeated KeyValueFloat float_params = 6;
 * @return {!Array<!proto.apollo.perception.KeyValueFloat>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getFloatParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueFloat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueFloat, 6));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueFloat>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setFloatParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueFloat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueFloat}
 */
proto.apollo.perception.ModelConfigProto.prototype.addFloatParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.perception.KeyValueFloat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearFloatParamsList = function() {
  return this.setFloatParamsList([]);
};


/**
 * repeated KeyValueBool bool_params = 7;
 * @return {!Array<!proto.apollo.perception.KeyValueBool>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getBoolParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueBool>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueBool, 7));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueBool>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setBoolParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueBool=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueBool}
 */
proto.apollo.perception.ModelConfigProto.prototype.addBoolParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.perception.KeyValueBool, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearBoolParamsList = function() {
  return this.setBoolParamsList([]);
};


/**
 * repeated KeyValueArrayInt array_integer_params = 8;
 * @return {!Array<!proto.apollo.perception.KeyValueArrayInt>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getArrayIntegerParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueArrayInt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueArrayInt, 8));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueArrayInt>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setArrayIntegerParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueArrayInt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayInt}
 */
proto.apollo.perception.ModelConfigProto.prototype.addArrayIntegerParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.perception.KeyValueArrayInt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearArrayIntegerParamsList = function() {
  return this.setArrayIntegerParamsList([]);
};


/**
 * repeated KeyValueArrayString array_string_params = 9;
 * @return {!Array<!proto.apollo.perception.KeyValueArrayString>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getArrayStringParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueArrayString>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueArrayString, 9));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueArrayString>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setArrayStringParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueArrayString=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayString}
 */
proto.apollo.perception.ModelConfigProto.prototype.addArrayStringParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.apollo.perception.KeyValueArrayString, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearArrayStringParamsList = function() {
  return this.setArrayStringParamsList([]);
};


/**
 * repeated KeyValueArrayDouble array_double_params = 10;
 * @return {!Array<!proto.apollo.perception.KeyValueArrayDouble>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getArrayDoubleParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueArrayDouble>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueArrayDouble, 10));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueArrayDouble>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setArrayDoubleParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueArrayDouble=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayDouble}
 */
proto.apollo.perception.ModelConfigProto.prototype.addArrayDoubleParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.perception.KeyValueArrayDouble, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearArrayDoubleParamsList = function() {
  return this.setArrayDoubleParamsList([]);
};


/**
 * repeated KeyValueArrayFloat array_float_params = 11;
 * @return {!Array<!proto.apollo.perception.KeyValueArrayFloat>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getArrayFloatParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueArrayFloat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueArrayFloat, 11));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueArrayFloat>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setArrayFloatParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueArrayFloat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayFloat}
 */
proto.apollo.perception.ModelConfigProto.prototype.addArrayFloatParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.perception.KeyValueArrayFloat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearArrayFloatParamsList = function() {
  return this.setArrayFloatParamsList([]);
};


/**
 * repeated KeyValueArrayBool array_bool_params = 12;
 * @return {!Array<!proto.apollo.perception.KeyValueArrayBool>}
 */
proto.apollo.perception.ModelConfigProto.prototype.getArrayBoolParamsList = function() {
  return /** @type{!Array<!proto.apollo.perception.KeyValueArrayBool>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.KeyValueArrayBool, 12));
};


/**
 * @param {!Array<!proto.apollo.perception.KeyValueArrayBool>} value
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
*/
proto.apollo.perception.ModelConfigProto.prototype.setArrayBoolParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.perception.KeyValueArrayBool=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.KeyValueArrayBool}
 */
proto.apollo.perception.ModelConfigProto.prototype.addArrayBoolParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.perception.KeyValueArrayBool, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigProto} returns this
 */
proto.apollo.perception.ModelConfigProto.prototype.clearArrayBoolParamsList = function() {
  return this.setArrayBoolParamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.MultiModelConfigProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.MultiModelConfigProto.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.MultiModelConfigProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.MultiModelConfigProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.MultiModelConfigProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelConfigsList: jspb.Message.toObjectList(msg.getModelConfigsList(),
    proto.apollo.perception.ModelConfigProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MultiModelConfigProto as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.MultiModelConfigProto.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.modelConfigsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.MultiModelConfigProto.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.MultiModelConfigProto}
 */
proto.apollo.perception.MultiModelConfigProto.fromObject = function(obj) {
  var msg = new proto.apollo.perception.MultiModelConfigProto();
  obj.modelConfigsList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.modelConfigsList.map(
          proto.apollo.perception.ModelConfigProto.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.MultiModelConfigProto}
 */
proto.apollo.perception.MultiModelConfigProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.MultiModelConfigProto;
  return proto.apollo.perception.MultiModelConfigProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.MultiModelConfigProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.MultiModelConfigProto}
 */
proto.apollo.perception.MultiModelConfigProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.ModelConfigProto;
      reader.readMessage(value,proto.apollo.perception.ModelConfigProto.deserializeBinaryFromReader);
      msg.addModelConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.MultiModelConfigProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.MultiModelConfigProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.MultiModelConfigProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.MultiModelConfigProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.ModelConfigProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ModelConfigProto model_configs = 1;
 * @return {!Array<!proto.apollo.perception.ModelConfigProto>}
 */
proto.apollo.perception.MultiModelConfigProto.prototype.getModelConfigsList = function() {
  return /** @type{!Array<!proto.apollo.perception.ModelConfigProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.ModelConfigProto, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.ModelConfigProto>} value
 * @return {!proto.apollo.perception.MultiModelConfigProto} returns this
*/
proto.apollo.perception.MultiModelConfigProto.prototype.setModelConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.ModelConfigProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.ModelConfigProto}
 */
proto.apollo.perception.MultiModelConfigProto.prototype.addModelConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.ModelConfigProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.MultiModelConfigProto} returns this
 */
proto.apollo.perception.MultiModelConfigProto.prototype.clearModelConfigsList = function() {
  return this.setModelConfigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.ModelConfigFileListProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.ModelConfigFileListProto.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.ModelConfigFileListProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.ModelConfigFileListProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.ModelConfigFileListProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelConfigPathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ModelConfigFileListProto as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.ModelConfigFileListProto.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.modelConfigPathList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.ModelConfigFileListProto.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.ModelConfigFileListProto}
 */
proto.apollo.perception.ModelConfigFileListProto.fromObject = function(obj) {
  var msg = new proto.apollo.perception.ModelConfigFileListProto();
  obj.modelConfigPathList != null && jspb.Message.setField(msg, 1, obj.modelConfigPathList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.ModelConfigFileListProto}
 */
proto.apollo.perception.ModelConfigFileListProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.ModelConfigFileListProto;
  return proto.apollo.perception.ModelConfigFileListProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.ModelConfigFileListProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.ModelConfigFileListProto}
 */
proto.apollo.perception.ModelConfigFileListProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addModelConfigPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.ModelConfigFileListProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.ModelConfigFileListProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.ModelConfigFileListProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.ModelConfigFileListProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelConfigPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string model_config_path = 1;
 * @return {!Array<string>}
 */
proto.apollo.perception.ModelConfigFileListProto.prototype.getModelConfigPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.ModelConfigFileListProto} returns this
 */
proto.apollo.perception.ModelConfigFileListProto.prototype.setModelConfigPathList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.ModelConfigFileListProto} returns this
 */
proto.apollo.perception.ModelConfigFileListProto.prototype.addModelConfigPath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.ModelConfigFileListProto} returns this
 */
proto.apollo.perception.ModelConfigFileListProto.prototype.clearModelConfigPathList = function() {
  return this.setModelConfigPathList([]);
};


goog.object.extend(exports, proto.apollo.perception);
