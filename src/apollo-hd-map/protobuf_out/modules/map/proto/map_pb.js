// source: modules/map/proto/map.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_map_proto_map_clear_area_pb = require('../../../modules/map/proto/map_clear_area_pb.js');
goog.object.extend(proto, modules_map_proto_map_clear_area_pb);
var modules_map_proto_map_crosswalk_pb = require('../../../modules/map/proto/map_crosswalk_pb.js');
goog.object.extend(proto, modules_map_proto_map_crosswalk_pb);
var modules_map_proto_map_junction_pb = require('../../../modules/map/proto/map_junction_pb.js');
goog.object.extend(proto, modules_map_proto_map_junction_pb);
var modules_map_proto_map_lane_pb = require('../../../modules/map/proto/map_lane_pb.js');
goog.object.extend(proto, modules_map_proto_map_lane_pb);
var modules_map_proto_map_overlap_pb = require('../../../modules/map/proto/map_overlap_pb.js');
goog.object.extend(proto, modules_map_proto_map_overlap_pb);
var modules_map_proto_map_signal_pb = require('../../../modules/map/proto/map_signal_pb.js');
goog.object.extend(proto, modules_map_proto_map_signal_pb);
var modules_map_proto_map_speed_bump_pb = require('../../../modules/map/proto/map_speed_bump_pb.js');
goog.object.extend(proto, modules_map_proto_map_speed_bump_pb);
var modules_map_proto_map_stop_sign_pb = require('../../../modules/map/proto/map_stop_sign_pb.js');
goog.object.extend(proto, modules_map_proto_map_stop_sign_pb);
var modules_map_proto_map_yield_sign_pb = require('../../../modules/map/proto/map_yield_sign_pb.js');
goog.object.extend(proto, modules_map_proto_map_yield_sign_pb);
var modules_map_proto_map_road_pb = require('../../../modules/map/proto/map_road_pb.js');
goog.object.extend(proto, modules_map_proto_map_road_pb);
var modules_map_proto_map_parking_space_pb = require('../../../modules/map/proto/map_parking_space_pb.js');
goog.object.extend(proto, modules_map_proto_map_parking_space_pb);
var modules_map_proto_map_pnc_junction_pb = require('../../../modules/map/proto/map_pnc_junction_pb.js');
goog.object.extend(proto, modules_map_proto_map_pnc_junction_pb);
var modules_map_proto_map_rsu_pb = require('../../../modules/map/proto/map_rsu_pb.js');
goog.object.extend(proto, modules_map_proto_map_rsu_pb);
goog.exportSymbol('proto.apollo.hdmap.Header', null, global);
goog.exportSymbol('proto.apollo.hdmap.Map', null, global);
goog.exportSymbol('proto.apollo.hdmap.Projection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.Projection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.Projection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.Projection.displayName = 'proto.apollo.hdmap.Projection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.Header.displayName = 'proto.apollo.hdmap.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.Map.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.Map.displayName = 'proto.apollo.hdmap.Map';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.Projection.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.Projection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.Projection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Projection.toObject = function(includeInstance, msg) {
  var f, obj = {
    proj: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Projection as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.Projection.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.proj;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.Projection.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.Projection}
 */
proto.apollo.hdmap.Projection.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.Projection();
  obj.proj != null && jspb.Message.setField(msg, 1, obj.proj);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.Projection}
 */
proto.apollo.hdmap.Projection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.Projection;
  return proto.apollo.hdmap.Projection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.Projection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.Projection}
 */
proto.apollo.hdmap.Projection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProj(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Projection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.Projection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.Projection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Projection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string proj = 1;
 * @return {string}
 */
proto.apollo.hdmap.Projection.prototype.getProj = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.hdmap.Projection} returns this
 */
proto.apollo.hdmap.Projection.prototype.setProj = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Projection} returns this
 */
proto.apollo.hdmap.Projection.prototype.clearProj = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Projection.prototype.hasProj = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: msg.getVersion_asB64(),
    date: msg.getDate_asB64(),
    projection: (f = msg.getProjection()) && proto.apollo.hdmap.Projection.toObject(includeInstance, f),
    district: msg.getDistrict_asB64(),
    generation: msg.getGeneration_asB64(),
    revMajor: msg.getRevMajor_asB64(),
    revMinor: msg.getRevMinor_asB64(),
    left: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    top: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    right: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    bottom: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    vendor: msg.getVendor_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Header as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.Header.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.version;

  /** @type {?|undefined} */
  this.date;

  /** @type {?|undefined} */
  this.projection;

  /** @type {?|undefined} */
  this.district;

  /** @type {?|undefined} */
  this.generation;

  /** @type {?|undefined} */
  this.revMajor;

  /** @type {?|undefined} */
  this.revMinor;

  /** @type {?|undefined} */
  this.left;

  /** @type {?|undefined} */
  this.top;

  /** @type {?|undefined} */
  this.right;

  /** @type {?|undefined} */
  this.bottom;

  /** @type {?|undefined} */
  this.vendor;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.Header.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.Header}
 */
proto.apollo.hdmap.Header.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.Header();
  obj.version != null && jspb.Message.setField(msg, 1, obj.version);
  obj.date != null && jspb.Message.setField(msg, 2, obj.date);
  obj.projection && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.hdmap.Projection.fromObject(obj.projection));
  obj.district != null && jspb.Message.setField(msg, 4, obj.district);
  obj.generation != null && jspb.Message.setField(msg, 5, obj.generation);
  obj.revMajor != null && jspb.Message.setField(msg, 6, obj.revMajor);
  obj.revMinor != null && jspb.Message.setField(msg, 7, obj.revMinor);
  obj.left != null && jspb.Message.setField(msg, 8, obj.left);
  obj.top != null && jspb.Message.setField(msg, 9, obj.top);
  obj.right != null && jspb.Message.setField(msg, 10, obj.right);
  obj.bottom != null && jspb.Message.setField(msg, 11, obj.bottom);
  obj.vendor != null && jspb.Message.setField(msg, 12, obj.vendor);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.Header}
 */
proto.apollo.hdmap.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.Header;
  return proto.apollo.hdmap.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.Header}
 */
proto.apollo.hdmap.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDate(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.Projection;
      reader.readMessage(value,proto.apollo.hdmap.Projection.deserializeBinaryFromReader);
      msg.setProjection(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDistrict(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeneration(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRevMajor(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRevMinor(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeft(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTop(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBottom(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVendor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProjection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.hdmap.Projection.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional bytes version = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.hdmap.Header.prototype.getVersion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes version = 1;
 * This is a type-conversion wrapper around `getVersion()`
 * @return {string}
 */
proto.apollo.hdmap.Header.prototype.getVersion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVersion()));
};


/**
 * optional bytes version = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersion()`
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.getVersion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVersion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes date = 2;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.hdmap.Header.prototype.getDate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes date = 2;
 * This is a type-conversion wrapper around `getDate()`
 * @return {string}
 */
proto.apollo.hdmap.Header.prototype.getDate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDate()));
};


/**
 * optional bytes date = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDate()`
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.getDate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setDate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearDate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Projection projection = 3;
 * @return {?proto.apollo.hdmap.Projection}
 */
proto.apollo.hdmap.Header.prototype.getProjection = function() {
  return /** @type{?proto.apollo.hdmap.Projection} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.Projection, 3));
};


/**
 * @param {?proto.apollo.hdmap.Projection|undefined} value
 * @return {!proto.apollo.hdmap.Header} returns this
*/
proto.apollo.hdmap.Header.prototype.setProjection = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearProjection = function() {
  return this.setProjection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasProjection = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes district = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.hdmap.Header.prototype.getDistrict = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes district = 4;
 * This is a type-conversion wrapper around `getDistrict()`
 * @return {string}
 */
proto.apollo.hdmap.Header.prototype.getDistrict_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDistrict()));
};


/**
 * optional bytes district = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDistrict()`
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.getDistrict_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDistrict()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setDistrict = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearDistrict = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasDistrict = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes generation = 5;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.hdmap.Header.prototype.getGeneration = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes generation = 5;
 * This is a type-conversion wrapper around `getGeneration()`
 * @return {string}
 */
proto.apollo.hdmap.Header.prototype.getGeneration_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeneration()));
};


/**
 * optional bytes generation = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeneration()`
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.getGeneration_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeneration()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setGeneration = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearGeneration = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasGeneration = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes rev_major = 6;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.hdmap.Header.prototype.getRevMajor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes rev_major = 6;
 * This is a type-conversion wrapper around `getRevMajor()`
 * @return {string}
 */
proto.apollo.hdmap.Header.prototype.getRevMajor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRevMajor()));
};


/**
 * optional bytes rev_major = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRevMajor()`
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.getRevMajor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRevMajor()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setRevMajor = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearRevMajor = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasRevMajor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes rev_minor = 7;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.hdmap.Header.prototype.getRevMinor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes rev_minor = 7;
 * This is a type-conversion wrapper around `getRevMinor()`
 * @return {string}
 */
proto.apollo.hdmap.Header.prototype.getRevMinor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRevMinor()));
};


/**
 * optional bytes rev_minor = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRevMinor()`
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.getRevMinor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRevMinor()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setRevMinor = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearRevMinor = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasRevMinor = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double left = 8;
 * @return {number}
 */
proto.apollo.hdmap.Header.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setLeft = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearLeft = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double top = 9;
 * @return {number}
 */
proto.apollo.hdmap.Header.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setTop = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearTop = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasTop = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double right = 10;
 * @return {number}
 */
proto.apollo.hdmap.Header.prototype.getRight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setRight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearRight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasRight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double bottom = 11;
 * @return {number}
 */
proto.apollo.hdmap.Header.prototype.getBottom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setBottom = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearBottom = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasBottom = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bytes vendor = 12;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.hdmap.Header.prototype.getVendor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes vendor = 12;
 * This is a type-conversion wrapper around `getVendor()`
 * @return {string}
 */
proto.apollo.hdmap.Header.prototype.getVendor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVendor()));
};


/**
 * optional bytes vendor = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVendor()`
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Header.prototype.getVendor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVendor()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.setVendor = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Header} returns this
 */
proto.apollo.hdmap.Header.prototype.clearVendor = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Header.prototype.hasVendor = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.Map.repeatedFields_ = [2,3,4,5,6,7,8,9,10,11,12,13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.apollo.hdmap.Header.toObject(includeInstance, f),
    crosswalkList: jspb.Message.toObjectList(msg.getCrosswalkList(),
    modules_map_proto_map_crosswalk_pb.Crosswalk.toObject, includeInstance),
    junctionList: jspb.Message.toObjectList(msg.getJunctionList(),
    modules_map_proto_map_junction_pb.Junction.toObject, includeInstance),
    laneList: jspb.Message.toObjectList(msg.getLaneList(),
    modules_map_proto_map_lane_pb.Lane.toObject, includeInstance),
    stopSignList: jspb.Message.toObjectList(msg.getStopSignList(),
    modules_map_proto_map_stop_sign_pb.StopSign.toObject, includeInstance),
    signalList: jspb.Message.toObjectList(msg.getSignalList(),
    modules_map_proto_map_signal_pb.Signal.toObject, includeInstance),
    yieldList: jspb.Message.toObjectList(msg.getYieldList(),
    modules_map_proto_map_yield_sign_pb.YieldSign.toObject, includeInstance),
    overlapList: jspb.Message.toObjectList(msg.getOverlapList(),
    modules_map_proto_map_overlap_pb.Overlap.toObject, includeInstance),
    clearAreaList: jspb.Message.toObjectList(msg.getClearAreaList(),
    modules_map_proto_map_clear_area_pb.ClearArea.toObject, includeInstance),
    speedBumpList: jspb.Message.toObjectList(msg.getSpeedBumpList(),
    modules_map_proto_map_speed_bump_pb.SpeedBump.toObject, includeInstance),
    roadList: jspb.Message.toObjectList(msg.getRoadList(),
    modules_map_proto_map_road_pb.Road.toObject, includeInstance),
    parkingSpaceList: jspb.Message.toObjectList(msg.getParkingSpaceList(),
    modules_map_proto_map_parking_space_pb.ParkingSpace.toObject, includeInstance),
    pncJunctionList: jspb.Message.toObjectList(msg.getPncJunctionList(),
    modules_map_proto_map_pnc_junction_pb.PNCJunction.toObject, includeInstance),
    rsuList: jspb.Message.toObjectList(msg.getRsuList(),
    modules_map_proto_map_rsu_pb.RSU.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Map as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.Map.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.crosswalkList;

  /** @type {?|undefined} */
  this.junctionList;

  /** @type {?|undefined} */
  this.laneList;

  /** @type {?|undefined} */
  this.stopSignList;

  /** @type {?|undefined} */
  this.signalList;

  /** @type {?|undefined} */
  this.yieldList;

  /** @type {?|undefined} */
  this.overlapList;

  /** @type {?|undefined} */
  this.clearAreaList;

  /** @type {?|undefined} */
  this.speedBumpList;

  /** @type {?|undefined} */
  this.roadList;

  /** @type {?|undefined} */
  this.parkingSpaceList;

  /** @type {?|undefined} */
  this.pncJunctionList;

  /** @type {?|undefined} */
  this.rsuList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.Map.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.Map}
 */
proto.apollo.hdmap.Map.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.Map();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.hdmap.Header.fromObject(obj.header));
  obj.crosswalkList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.crosswalkList.map(
          modules_map_proto_map_crosswalk_pb.Crosswalk.fromObject));
  obj.junctionList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.junctionList.map(
          modules_map_proto_map_junction_pb.Junction.fromObject));
  obj.laneList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.laneList.map(
          modules_map_proto_map_lane_pb.Lane.fromObject));
  obj.stopSignList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.stopSignList.map(
          modules_map_proto_map_stop_sign_pb.StopSign.fromObject));
  obj.signalList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.signalList.map(
          modules_map_proto_map_signal_pb.Signal.fromObject));
  obj.yieldList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.yieldList.map(
          modules_map_proto_map_yield_sign_pb.YieldSign.fromObject));
  obj.overlapList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.overlapList.map(
          modules_map_proto_map_overlap_pb.Overlap.fromObject));
  obj.clearAreaList && jspb.Message.setRepeatedWrapperField(
      msg, 9, obj.clearAreaList.map(
          modules_map_proto_map_clear_area_pb.ClearArea.fromObject));
  obj.speedBumpList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.speedBumpList.map(
          modules_map_proto_map_speed_bump_pb.SpeedBump.fromObject));
  obj.roadList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.roadList.map(
          modules_map_proto_map_road_pb.Road.fromObject));
  obj.parkingSpaceList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.parkingSpaceList.map(
          modules_map_proto_map_parking_space_pb.ParkingSpace.fromObject));
  obj.pncJunctionList && jspb.Message.setRepeatedWrapperField(
      msg, 13, obj.pncJunctionList.map(
          modules_map_proto_map_pnc_junction_pb.PNCJunction.fromObject));
  obj.rsuList && jspb.Message.setRepeatedWrapperField(
      msg, 14, obj.rsuList.map(
          modules_map_proto_map_rsu_pb.RSU.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.Map}
 */
proto.apollo.hdmap.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.Map;
  return proto.apollo.hdmap.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.Map}
 */
proto.apollo.hdmap.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.hdmap.Header;
      reader.readMessage(value,proto.apollo.hdmap.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new modules_map_proto_map_crosswalk_pb.Crosswalk;
      reader.readMessage(value,modules_map_proto_map_crosswalk_pb.Crosswalk.deserializeBinaryFromReader);
      msg.addCrosswalk(value);
      break;
    case 3:
      var value = new modules_map_proto_map_junction_pb.Junction;
      reader.readMessage(value,modules_map_proto_map_junction_pb.Junction.deserializeBinaryFromReader);
      msg.addJunction(value);
      break;
    case 4:
      var value = new modules_map_proto_map_lane_pb.Lane;
      reader.readMessage(value,modules_map_proto_map_lane_pb.Lane.deserializeBinaryFromReader);
      msg.addLane(value);
      break;
    case 5:
      var value = new modules_map_proto_map_stop_sign_pb.StopSign;
      reader.readMessage(value,modules_map_proto_map_stop_sign_pb.StopSign.deserializeBinaryFromReader);
      msg.addStopSign(value);
      break;
    case 6:
      var value = new modules_map_proto_map_signal_pb.Signal;
      reader.readMessage(value,modules_map_proto_map_signal_pb.Signal.deserializeBinaryFromReader);
      msg.addSignal(value);
      break;
    case 7:
      var value = new modules_map_proto_map_yield_sign_pb.YieldSign;
      reader.readMessage(value,modules_map_proto_map_yield_sign_pb.YieldSign.deserializeBinaryFromReader);
      msg.addYield(value);
      break;
    case 8:
      var value = new modules_map_proto_map_overlap_pb.Overlap;
      reader.readMessage(value,modules_map_proto_map_overlap_pb.Overlap.deserializeBinaryFromReader);
      msg.addOverlap(value);
      break;
    case 9:
      var value = new modules_map_proto_map_clear_area_pb.ClearArea;
      reader.readMessage(value,modules_map_proto_map_clear_area_pb.ClearArea.deserializeBinaryFromReader);
      msg.addClearArea(value);
      break;
    case 10:
      var value = new modules_map_proto_map_speed_bump_pb.SpeedBump;
      reader.readMessage(value,modules_map_proto_map_speed_bump_pb.SpeedBump.deserializeBinaryFromReader);
      msg.addSpeedBump(value);
      break;
    case 11:
      var value = new modules_map_proto_map_road_pb.Road;
      reader.readMessage(value,modules_map_proto_map_road_pb.Road.deserializeBinaryFromReader);
      msg.addRoad(value);
      break;
    case 12:
      var value = new modules_map_proto_map_parking_space_pb.ParkingSpace;
      reader.readMessage(value,modules_map_proto_map_parking_space_pb.ParkingSpace.deserializeBinaryFromReader);
      msg.addParkingSpace(value);
      break;
    case 13:
      var value = new modules_map_proto_map_pnc_junction_pb.PNCJunction;
      reader.readMessage(value,modules_map_proto_map_pnc_junction_pb.PNCJunction.deserializeBinaryFromReader);
      msg.addPncJunction(value);
      break;
    case 14:
      var value = new modules_map_proto_map_rsu_pb.RSU;
      reader.readMessage(value,modules_map_proto_map_rsu_pb.RSU.deserializeBinaryFromReader);
      msg.addRsu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.hdmap.Header.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      modules_map_proto_map_crosswalk_pb.Crosswalk.serializeBinaryToWriter
    );
  }
  f = message.getJunctionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      modules_map_proto_map_junction_pb.Junction.serializeBinaryToWriter
    );
  }
  f = message.getLaneList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      modules_map_proto_map_lane_pb.Lane.serializeBinaryToWriter
    );
  }
  f = message.getStopSignList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      modules_map_proto_map_stop_sign_pb.StopSign.serializeBinaryToWriter
    );
  }
  f = message.getSignalList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      modules_map_proto_map_signal_pb.Signal.serializeBinaryToWriter
    );
  }
  f = message.getYieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      modules_map_proto_map_yield_sign_pb.YieldSign.serializeBinaryToWriter
    );
  }
  f = message.getOverlapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      modules_map_proto_map_overlap_pb.Overlap.serializeBinaryToWriter
    );
  }
  f = message.getClearAreaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      modules_map_proto_map_clear_area_pb.ClearArea.serializeBinaryToWriter
    );
  }
  f = message.getSpeedBumpList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      modules_map_proto_map_speed_bump_pb.SpeedBump.serializeBinaryToWriter
    );
  }
  f = message.getRoadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      modules_map_proto_map_road_pb.Road.serializeBinaryToWriter
    );
  }
  f = message.getParkingSpaceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      modules_map_proto_map_parking_space_pb.ParkingSpace.serializeBinaryToWriter
    );
  }
  f = message.getPncJunctionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      modules_map_proto_map_pnc_junction_pb.PNCJunction.serializeBinaryToWriter
    );
  }
  f = message.getRsuList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      modules_map_proto_map_rsu_pb.RSU.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.apollo.hdmap.Header}
 */
proto.apollo.hdmap.Map.prototype.getHeader = function() {
  return /** @type{?proto.apollo.hdmap.Header} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.Header, 1));
};


/**
 * @param {?proto.apollo.hdmap.Header|undefined} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Map.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Crosswalk crosswalk = 2;
 * @return {!Array<!proto.apollo.hdmap.Crosswalk>}
 */
proto.apollo.hdmap.Map.prototype.getCrosswalkList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Crosswalk>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_crosswalk_pb.Crosswalk, 2));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Crosswalk>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setCrosswalkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.hdmap.Crosswalk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Crosswalk}
 */
proto.apollo.hdmap.Map.prototype.addCrosswalk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.hdmap.Crosswalk, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearCrosswalkList = function() {
  return this.setCrosswalkList([]);
};


/**
 * repeated Junction junction = 3;
 * @return {!Array<!proto.apollo.hdmap.Junction>}
 */
proto.apollo.hdmap.Map.prototype.getJunctionList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Junction>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_junction_pb.Junction, 3));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Junction>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setJunctionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.hdmap.Junction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Junction}
 */
proto.apollo.hdmap.Map.prototype.addJunction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.hdmap.Junction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearJunctionList = function() {
  return this.setJunctionList([]);
};


/**
 * repeated Lane lane = 4;
 * @return {!Array<!proto.apollo.hdmap.Lane>}
 */
proto.apollo.hdmap.Map.prototype.getLaneList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Lane>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_lane_pb.Lane, 4));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Lane>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setLaneList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.hdmap.Lane=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Lane}
 */
proto.apollo.hdmap.Map.prototype.addLane = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.hdmap.Lane, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearLaneList = function() {
  return this.setLaneList([]);
};


/**
 * repeated StopSign stop_sign = 5;
 * @return {!Array<!proto.apollo.hdmap.StopSign>}
 */
proto.apollo.hdmap.Map.prototype.getStopSignList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.StopSign>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_stop_sign_pb.StopSign, 5));
};


/**
 * @param {!Array<!proto.apollo.hdmap.StopSign>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setStopSignList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.hdmap.StopSign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.StopSign}
 */
proto.apollo.hdmap.Map.prototype.addStopSign = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.hdmap.StopSign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearStopSignList = function() {
  return this.setStopSignList([]);
};


/**
 * repeated Signal signal = 6;
 * @return {!Array<!proto.apollo.hdmap.Signal>}
 */
proto.apollo.hdmap.Map.prototype.getSignalList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Signal>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_signal_pb.Signal, 6));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Signal>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setSignalList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.hdmap.Signal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Signal}
 */
proto.apollo.hdmap.Map.prototype.addSignal = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.hdmap.Signal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearSignalList = function() {
  return this.setSignalList([]);
};


/**
 * repeated YieldSign yield = 7;
 * @return {!Array<!proto.apollo.hdmap.YieldSign>}
 */
proto.apollo.hdmap.Map.prototype.getYieldList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.YieldSign>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_yield_sign_pb.YieldSign, 7));
};


/**
 * @param {!Array<!proto.apollo.hdmap.YieldSign>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setYieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.hdmap.YieldSign=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.YieldSign}
 */
proto.apollo.hdmap.Map.prototype.addYield = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.hdmap.YieldSign, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearYieldList = function() {
  return this.setYieldList([]);
};


/**
 * repeated Overlap overlap = 8;
 * @return {!Array<!proto.apollo.hdmap.Overlap>}
 */
proto.apollo.hdmap.Map.prototype.getOverlapList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Overlap>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_overlap_pb.Overlap, 8));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Overlap>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setOverlapList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.hdmap.Overlap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Overlap}
 */
proto.apollo.hdmap.Map.prototype.addOverlap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.hdmap.Overlap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearOverlapList = function() {
  return this.setOverlapList([]);
};


/**
 * repeated ClearArea clear_area = 9;
 * @return {!Array<!proto.apollo.hdmap.ClearArea>}
 */
proto.apollo.hdmap.Map.prototype.getClearAreaList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.ClearArea>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_clear_area_pb.ClearArea, 9));
};


/**
 * @param {!Array<!proto.apollo.hdmap.ClearArea>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setClearAreaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.apollo.hdmap.ClearArea=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.ClearArea}
 */
proto.apollo.hdmap.Map.prototype.addClearArea = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.apollo.hdmap.ClearArea, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearClearAreaList = function() {
  return this.setClearAreaList([]);
};


/**
 * repeated SpeedBump speed_bump = 10;
 * @return {!Array<!proto.apollo.hdmap.SpeedBump>}
 */
proto.apollo.hdmap.Map.prototype.getSpeedBumpList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.SpeedBump>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_speed_bump_pb.SpeedBump, 10));
};


/**
 * @param {!Array<!proto.apollo.hdmap.SpeedBump>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setSpeedBumpList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.hdmap.SpeedBump=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.SpeedBump}
 */
proto.apollo.hdmap.Map.prototype.addSpeedBump = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.hdmap.SpeedBump, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearSpeedBumpList = function() {
  return this.setSpeedBumpList([]);
};


/**
 * repeated Road road = 11;
 * @return {!Array<!proto.apollo.hdmap.Road>}
 */
proto.apollo.hdmap.Map.prototype.getRoadList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Road>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_road_pb.Road, 11));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Road>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setRoadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.hdmap.Road=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Road}
 */
proto.apollo.hdmap.Map.prototype.addRoad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.hdmap.Road, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearRoadList = function() {
  return this.setRoadList([]);
};


/**
 * repeated ParkingSpace parking_space = 12;
 * @return {!Array<!proto.apollo.hdmap.ParkingSpace>}
 */
proto.apollo.hdmap.Map.prototype.getParkingSpaceList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.ParkingSpace>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_parking_space_pb.ParkingSpace, 12));
};


/**
 * @param {!Array<!proto.apollo.hdmap.ParkingSpace>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setParkingSpaceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.hdmap.ParkingSpace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.ParkingSpace}
 */
proto.apollo.hdmap.Map.prototype.addParkingSpace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.hdmap.ParkingSpace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearParkingSpaceList = function() {
  return this.setParkingSpaceList([]);
};


/**
 * repeated PNCJunction pnc_junction = 13;
 * @return {!Array<!proto.apollo.hdmap.PNCJunction>}
 */
proto.apollo.hdmap.Map.prototype.getPncJunctionList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.PNCJunction>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_pnc_junction_pb.PNCJunction, 13));
};


/**
 * @param {!Array<!proto.apollo.hdmap.PNCJunction>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setPncJunctionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.apollo.hdmap.PNCJunction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.PNCJunction}
 */
proto.apollo.hdmap.Map.prototype.addPncJunction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.apollo.hdmap.PNCJunction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearPncJunctionList = function() {
  return this.setPncJunctionList([]);
};


/**
 * repeated RSU rsu = 14;
 * @return {!Array<!proto.apollo.hdmap.RSU>}
 */
proto.apollo.hdmap.Map.prototype.getRsuList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.RSU>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_rsu_pb.RSU, 14));
};


/**
 * @param {!Array<!proto.apollo.hdmap.RSU>} value
 * @return {!proto.apollo.hdmap.Map} returns this
*/
proto.apollo.hdmap.Map.prototype.setRsuList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.apollo.hdmap.RSU=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.RSU}
 */
proto.apollo.hdmap.Map.prototype.addRsu = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.apollo.hdmap.RSU, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Map} returns this
 */
proto.apollo.hdmap.Map.prototype.clearRsuList = function() {
  return this.setRsuList([]);
};


goog.object.extend(exports, proto.apollo.hdmap);
