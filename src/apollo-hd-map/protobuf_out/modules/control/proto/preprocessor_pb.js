// source: modules/control/proto/preprocessor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_drive_state_pb = require('../../../modules/common/proto/drive_state_pb.js');
goog.object.extend(proto, modules_common_proto_drive_state_pb);
var modules_control_proto_input_debug_pb = require('../../../modules/control/proto/input_debug_pb.js');
goog.object.extend(proto, modules_control_proto_input_debug_pb);
var modules_control_proto_local_view_pb = require('../../../modules/control/proto/local_view_pb.js');
goog.object.extend(proto, modules_control_proto_local_view_pb);
goog.exportSymbol('proto.apollo.control.Preprocessor', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.Preprocessor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.Preprocessor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.Preprocessor.displayName = 'proto.apollo.control.Preprocessor';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.Preprocessor.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.Preprocessor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.Preprocessor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.Preprocessor.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    localView: (f = msg.getLocalView()) && modules_control_proto_local_view_pb.LocalView.toObject(includeInstance, f),
    engageAdvice: (f = msg.getEngageAdvice()) && modules_common_proto_drive_state_pb.EngageAdvice.toObject(includeInstance, f),
    inputDebug: (f = msg.getInputDebug()) && modules_control_proto_input_debug_pb.InputDebug.toObject(includeInstance, f),
    receivedPadMsg: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    estop: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    estopReason: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Preprocessor as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.Preprocessor.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.localView;

  /** @type {?|undefined} */
  this.engageAdvice;

  /** @type {?|undefined} */
  this.inputDebug;

  /** @type {?|undefined} */
  this.receivedPadMsg;

  /** @type {?|undefined} */
  this.estop;

  /** @type {?|undefined} */
  this.estopReason;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.Preprocessor.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.Preprocessor}
 */
proto.apollo.control.Preprocessor.fromObject = function(obj) {
  var msg = new proto.apollo.control.Preprocessor();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.localView && jspb.Message.setWrapperField(
      msg, 2, modules_control_proto_local_view_pb.LocalView.fromObject(obj.localView));
  obj.engageAdvice && jspb.Message.setWrapperField(
      msg, 4, modules_common_proto_drive_state_pb.EngageAdvice.fromObject(obj.engageAdvice));
  obj.inputDebug && jspb.Message.setWrapperField(
      msg, 5, modules_control_proto_input_debug_pb.InputDebug.fromObject(obj.inputDebug));
  obj.receivedPadMsg != null && jspb.Message.setField(msg, 6, obj.receivedPadMsg);
  obj.estop != null && jspb.Message.setField(msg, 7, obj.estop);
  obj.estopReason != null && jspb.Message.setField(msg, 8, obj.estopReason);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.Preprocessor}
 */
proto.apollo.control.Preprocessor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.Preprocessor;
  return proto.apollo.control.Preprocessor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.Preprocessor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.Preprocessor}
 */
proto.apollo.control.Preprocessor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new modules_control_proto_local_view_pb.LocalView;
      reader.readMessage(value,modules_control_proto_local_view_pb.LocalView.deserializeBinaryFromReader);
      msg.setLocalView(value);
      break;
    case 4:
      var value = new modules_common_proto_drive_state_pb.EngageAdvice;
      reader.readMessage(value,modules_common_proto_drive_state_pb.EngageAdvice.deserializeBinaryFromReader);
      msg.setEngageAdvice(value);
      break;
    case 5:
      var value = new modules_control_proto_input_debug_pb.InputDebug;
      reader.readMessage(value,modules_control_proto_input_debug_pb.InputDebug.deserializeBinaryFromReader);
      msg.setInputDebug(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceivedPadMsg(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEstop(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEstopReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.Preprocessor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.Preprocessor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.Preprocessor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.Preprocessor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getLocalView();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_control_proto_local_view_pb.LocalView.serializeBinaryToWriter
    );
  }
  f = message.getEngageAdvice();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_common_proto_drive_state_pb.EngageAdvice.serializeBinaryToWriter
    );
  }
  f = message.getInputDebug();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_control_proto_input_debug_pb.InputDebug.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.control.Preprocessor.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.control.Preprocessor} returns this
*/
proto.apollo.control.Preprocessor.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LocalView local_view = 2;
 * @return {?proto.apollo.control.LocalView}
 */
proto.apollo.control.Preprocessor.prototype.getLocalView = function() {
  return /** @type{?proto.apollo.control.LocalView} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_local_view_pb.LocalView, 2));
};


/**
 * @param {?proto.apollo.control.LocalView|undefined} value
 * @return {!proto.apollo.control.Preprocessor} returns this
*/
proto.apollo.control.Preprocessor.prototype.setLocalView = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.clearLocalView = function() {
  return this.setLocalView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.hasLocalView = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.EngageAdvice engage_advice = 4;
 * @return {?proto.apollo.common.EngageAdvice}
 */
proto.apollo.control.Preprocessor.prototype.getEngageAdvice = function() {
  return /** @type{?proto.apollo.common.EngageAdvice} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_drive_state_pb.EngageAdvice, 4));
};


/**
 * @param {?proto.apollo.common.EngageAdvice|undefined} value
 * @return {!proto.apollo.control.Preprocessor} returns this
*/
proto.apollo.control.Preprocessor.prototype.setEngageAdvice = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.clearEngageAdvice = function() {
  return this.setEngageAdvice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.hasEngageAdvice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InputDebug input_debug = 5;
 * @return {?proto.apollo.control.InputDebug}
 */
proto.apollo.control.Preprocessor.prototype.getInputDebug = function() {
  return /** @type{?proto.apollo.control.InputDebug} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_input_debug_pb.InputDebug, 5));
};


/**
 * @param {?proto.apollo.control.InputDebug|undefined} value
 * @return {!proto.apollo.control.Preprocessor} returns this
*/
proto.apollo.control.Preprocessor.prototype.setInputDebug = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.clearInputDebug = function() {
  return this.setInputDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.hasInputDebug = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool received_pad_msg = 6;
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.getReceivedPadMsg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.setReceivedPadMsg = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.clearReceivedPadMsg = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.hasReceivedPadMsg = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool estop = 7;
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.getEstop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.setEstop = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.clearEstop = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.hasEstop = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string estop_reason = 8;
 * @return {string}
 */
proto.apollo.control.Preprocessor.prototype.getEstopReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.setEstopReason = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.Preprocessor} returns this
 */
proto.apollo.control.Preprocessor.prototype.clearEstopReason = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.Preprocessor.prototype.hasEstopReason = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.apollo.control);
