// source: modules/data/proto/static_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_canbus_proto_canbus_conf_pb = require('../../../modules/canbus/proto/canbus_conf_pb.js');
goog.object.extend(proto, modules_canbus_proto_canbus_conf_pb);
var modules_canbus_proto_chassis_pb = require('../../../modules/canbus/proto/chassis_pb.js');
goog.object.extend(proto, modules_canbus_proto_chassis_pb);
var modules_common_configs_proto_vehicle_config_pb = require('../../../modules/common/configs/proto/vehicle_config_pb.js');
goog.object.extend(proto, modules_common_configs_proto_vehicle_config_pb);
var modules_control_proto_control_conf_pb = require('../../../modules/control/proto/control_conf_pb.js');
goog.object.extend(proto, modules_control_proto_control_conf_pb);
var modules_routing_proto_routing_pb = require('../../../modules/routing/proto/routing_pb.js');
goog.object.extend(proto, modules_routing_proto_routing_pb);
goog.exportSymbol('proto.apollo.data.EnvironmentInfo', null, global);
goog.exportSymbol('proto.apollo.data.HardwareInfo', null, global);
goog.exportSymbol('proto.apollo.data.SoftwareInfo', null, global);
goog.exportSymbol('proto.apollo.data.StaticInfo', null, global);
goog.exportSymbol('proto.apollo.data.StaticInfoConf', null, global);
goog.exportSymbol('proto.apollo.data.UserInfo', null, global);
goog.exportSymbol('proto.apollo.data.VehicleInfo', null, global);
goog.exportSymbol('proto.apollo.data.VehicleInfo.Brand', null, global);
goog.exportSymbol('proto.apollo.data.VehicleInfo.Model', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.data.VehicleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.data.VehicleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.data.VehicleInfo.displayName = 'proto.apollo.data.VehicleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.data.EnvironmentInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.data.EnvironmentInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.data.EnvironmentInfo.displayName = 'proto.apollo.data.EnvironmentInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.data.HardwareInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.data.HardwareInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.data.HardwareInfo.displayName = 'proto.apollo.data.HardwareInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.data.SoftwareInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.data.SoftwareInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.data.SoftwareInfo.displayName = 'proto.apollo.data.SoftwareInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.data.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.data.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.data.UserInfo.displayName = 'proto.apollo.data.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.data.StaticInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.data.StaticInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.data.StaticInfo.displayName = 'proto.apollo.data.StaticInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.data.StaticInfoConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.data.StaticInfoConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.data.StaticInfoConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.data.StaticInfoConf.displayName = 'proto.apollo.data.StaticInfoConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.data.VehicleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.data.VehicleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.data.VehicleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.VehicleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    brand: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    model: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    license: (f = msg.getLicense()) && modules_canbus_proto_chassis_pb.License.toObject(includeInstance, f),
    canbusConf: (f = msg.getCanbusConf()) && modules_canbus_proto_canbus_conf_pb.CanbusConf.toObject(includeInstance, f),
    vehicleConfig: (f = msg.getVehicleConfig()) && modules_common_configs_proto_vehicle_config_pb.VehicleConfig.toObject(includeInstance, f),
    controlConfig: (f = msg.getControlConfig()) && modules_control_proto_control_conf_pb.ControlConf.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VehicleInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.data.VehicleInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.brand;

  /** @type {?|undefined} */
  this.model;

  /** @type {?|undefined} */
  this.license;

  /** @type {?|undefined} */
  this.canbusConf;

  /** @type {?|undefined} */
  this.vehicleConfig;

  /** @type {?|undefined} */
  this.controlConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.data.VehicleInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.data.VehicleInfo}
 */
proto.apollo.data.VehicleInfo.fromObject = function(obj) {
  var msg = new proto.apollo.data.VehicleInfo();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.brand != null && jspb.Message.setField(msg, 2, obj.brand);
  obj.model != null && jspb.Message.setField(msg, 3, obj.model);
  obj.license && jspb.Message.setWrapperField(
      msg, 4, modules_canbus_proto_chassis_pb.License.fromObject(obj.license));
  obj.canbusConf && jspb.Message.setWrapperField(
      msg, 5, modules_canbus_proto_canbus_conf_pb.CanbusConf.fromObject(obj.canbusConf));
  obj.vehicleConfig && jspb.Message.setWrapperField(
      msg, 6, modules_common_configs_proto_vehicle_config_pb.VehicleConfig.fromObject(obj.vehicleConfig));
  obj.controlConfig && jspb.Message.setWrapperField(
      msg, 7, modules_control_proto_control_conf_pb.ControlConf.fromObject(obj.controlConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.data.VehicleInfo}
 */
proto.apollo.data.VehicleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.data.VehicleInfo;
  return proto.apollo.data.VehicleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.data.VehicleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.data.VehicleInfo}
 */
proto.apollo.data.VehicleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.data.VehicleInfo.Brand} */ (reader.readEnum());
      msg.setBrand(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.data.VehicleInfo.Model} */ (reader.readEnum());
      msg.setModel(value);
      break;
    case 4:
      var value = new modules_canbus_proto_chassis_pb.License;
      reader.readMessage(value,modules_canbus_proto_chassis_pb.License.deserializeBinaryFromReader);
      msg.setLicense(value);
      break;
    case 5:
      var value = new modules_canbus_proto_canbus_conf_pb.CanbusConf;
      reader.readMessage(value,modules_canbus_proto_canbus_conf_pb.CanbusConf.deserializeBinaryFromReader);
      msg.setCanbusConf(value);
      break;
    case 6:
      var value = new modules_common_configs_proto_vehicle_config_pb.VehicleConfig;
      reader.readMessage(value,modules_common_configs_proto_vehicle_config_pb.VehicleConfig.deserializeBinaryFromReader);
      msg.setVehicleConfig(value);
      break;
    case 7:
      var value = new modules_control_proto_control_conf_pb.ControlConf;
      reader.readMessage(value,modules_control_proto_control_conf_pb.ControlConf.deserializeBinaryFromReader);
      msg.setControlConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.data.VehicleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.data.VehicleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.data.VehicleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.VehicleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.data.VehicleInfo.Brand} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.data.VehicleInfo.Model} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLicense();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_canbus_proto_chassis_pb.License.serializeBinaryToWriter
    );
  }
  f = message.getCanbusConf();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_canbus_proto_canbus_conf_pb.CanbusConf.serializeBinaryToWriter
    );
  }
  f = message.getVehicleConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      modules_common_configs_proto_vehicle_config_pb.VehicleConfig.serializeBinaryToWriter
    );
  }
  f = message.getControlConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      modules_control_proto_control_conf_pb.ControlConf.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.data.VehicleInfo.Brand = {
  LINCOLN: 1,
  FORD: 2,
  LEXUS: 3
};

/**
 * @enum {number}
 */
proto.apollo.data.VehicleInfo.Model = {
  MKZ: 1,
  TRANSIT: 2,
  RX450H: 3
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.data.VehicleInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.VehicleInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Brand brand = 2;
 * @return {!proto.apollo.data.VehicleInfo.Brand}
 */
proto.apollo.data.VehicleInfo.prototype.getBrand = function() {
  return /** @type {!proto.apollo.data.VehicleInfo.Brand} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.apollo.data.VehicleInfo.Brand} value
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.setBrand = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.clearBrand = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.VehicleInfo.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Model model = 3;
 * @return {!proto.apollo.data.VehicleInfo.Model}
 */
proto.apollo.data.VehicleInfo.prototype.getModel = function() {
  return /** @type {!proto.apollo.data.VehicleInfo.Model} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {!proto.apollo.data.VehicleInfo.Model} value
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.setModel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.clearModel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.VehicleInfo.prototype.hasModel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.canbus.License license = 4;
 * @return {?proto.apollo.canbus.License}
 */
proto.apollo.data.VehicleInfo.prototype.getLicense = function() {
  return /** @type{?proto.apollo.canbus.License} */ (
    jspb.Message.getWrapperField(this, modules_canbus_proto_chassis_pb.License, 4));
};


/**
 * @param {?proto.apollo.canbus.License|undefined} value
 * @return {!proto.apollo.data.VehicleInfo} returns this
*/
proto.apollo.data.VehicleInfo.prototype.setLicense = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.clearLicense = function() {
  return this.setLicense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.VehicleInfo.prototype.hasLicense = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional apollo.canbus.CanbusConf canbus_conf = 5;
 * @return {?proto.apollo.canbus.CanbusConf}
 */
proto.apollo.data.VehicleInfo.prototype.getCanbusConf = function() {
  return /** @type{?proto.apollo.canbus.CanbusConf} */ (
    jspb.Message.getWrapperField(this, modules_canbus_proto_canbus_conf_pb.CanbusConf, 5));
};


/**
 * @param {?proto.apollo.canbus.CanbusConf|undefined} value
 * @return {!proto.apollo.data.VehicleInfo} returns this
*/
proto.apollo.data.VehicleInfo.prototype.setCanbusConf = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.clearCanbusConf = function() {
  return this.setCanbusConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.VehicleInfo.prototype.hasCanbusConf = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional apollo.common.VehicleConfig vehicle_config = 6;
 * @return {?proto.apollo.common.VehicleConfig}
 */
proto.apollo.data.VehicleInfo.prototype.getVehicleConfig = function() {
  return /** @type{?proto.apollo.common.VehicleConfig} */ (
    jspb.Message.getWrapperField(this, modules_common_configs_proto_vehicle_config_pb.VehicleConfig, 6));
};


/**
 * @param {?proto.apollo.common.VehicleConfig|undefined} value
 * @return {!proto.apollo.data.VehicleInfo} returns this
*/
proto.apollo.data.VehicleInfo.prototype.setVehicleConfig = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.clearVehicleConfig = function() {
  return this.setVehicleConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.VehicleInfo.prototype.hasVehicleConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional apollo.control.ControlConf control_config = 7;
 * @return {?proto.apollo.control.ControlConf}
 */
proto.apollo.data.VehicleInfo.prototype.getControlConfig = function() {
  return /** @type{?proto.apollo.control.ControlConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_control_conf_pb.ControlConf, 7));
};


/**
 * @param {?proto.apollo.control.ControlConf|undefined} value
 * @return {!proto.apollo.data.VehicleInfo} returns this
*/
proto.apollo.data.VehicleInfo.prototype.setControlConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.VehicleInfo} returns this
 */
proto.apollo.data.VehicleInfo.prototype.clearControlConfig = function() {
  return this.setControlConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.VehicleInfo.prototype.hasControlConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.data.EnvironmentInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.data.EnvironmentInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.data.EnvironmentInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.EnvironmentInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    temperature: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EnvironmentInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.data.EnvironmentInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.mapName;

  /** @type {?|undefined} */
  this.temperature;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.data.EnvironmentInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.data.EnvironmentInfo}
 */
proto.apollo.data.EnvironmentInfo.fromObject = function(obj) {
  var msg = new proto.apollo.data.EnvironmentInfo();
  obj.mapName != null && jspb.Message.setField(msg, 1, obj.mapName);
  obj.temperature != null && jspb.Message.setField(msg, 2, obj.temperature);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.data.EnvironmentInfo}
 */
proto.apollo.data.EnvironmentInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.data.EnvironmentInfo;
  return proto.apollo.data.EnvironmentInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.data.EnvironmentInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.data.EnvironmentInfo}
 */
proto.apollo.data.EnvironmentInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.data.EnvironmentInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.data.EnvironmentInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.data.EnvironmentInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.EnvironmentInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string map_name = 1;
 * @return {string}
 */
proto.apollo.data.EnvironmentInfo.prototype.getMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.EnvironmentInfo} returns this
 */
proto.apollo.data.EnvironmentInfo.prototype.setMapName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.EnvironmentInfo} returns this
 */
proto.apollo.data.EnvironmentInfo.prototype.clearMapName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.EnvironmentInfo.prototype.hasMapName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float temperature = 2;
 * @return {number}
 */
proto.apollo.data.EnvironmentInfo.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.data.EnvironmentInfo} returns this
 */
proto.apollo.data.EnvironmentInfo.prototype.setTemperature = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.EnvironmentInfo} returns this
 */
proto.apollo.data.EnvironmentInfo.prototype.clearTemperature = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.EnvironmentInfo.prototype.hasTemperature = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.data.HardwareInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.data.HardwareInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.data.HardwareInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.HardwareInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    configsMap: (f = msg.getConfigsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of HardwareInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.data.HardwareInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.configsMap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.data.HardwareInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.data.HardwareInfo}
 */
proto.apollo.data.HardwareInfo.fromObject = function(obj) {
  var msg = new proto.apollo.data.HardwareInfo();
  obj.configsMap && jspb.Message.setField(msg, 1, obj.configsMap);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.data.HardwareInfo}
 */
proto.apollo.data.HardwareInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.data.HardwareInfo;
  return proto.apollo.data.HardwareInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.data.HardwareInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.data.HardwareInfo}
 */
proto.apollo.data.HardwareInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getConfigsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.data.HardwareInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.data.HardwareInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.data.HardwareInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.HardwareInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> configs = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.apollo.data.HardwareInfo.prototype.getConfigsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.data.HardwareInfo} returns this
 */
proto.apollo.data.HardwareInfo.prototype.clearConfigsMap = function() {
  this.getConfigsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.data.SoftwareInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.data.SoftwareInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.data.SoftwareInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.SoftwareInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    dockerImage: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    commitId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    mode: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    configsMap: (f = msg.getConfigsMap()) ? f.toObject(includeInstance, undefined) : [],
    latestRoutingRequest: (f = msg.getLatestRoutingRequest()) && modules_routing_proto_routing_pb.RoutingRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SoftwareInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.data.SoftwareInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dockerImage;

  /** @type {?|undefined} */
  this.commitId;

  /** @type {?|undefined} */
  this.mode;

  /** @type {?|undefined} */
  this.configsMap;

  /** @type {?|undefined} */
  this.latestRoutingRequest;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.data.SoftwareInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.data.SoftwareInfo}
 */
proto.apollo.data.SoftwareInfo.fromObject = function(obj) {
  var msg = new proto.apollo.data.SoftwareInfo();
  obj.dockerImage != null && jspb.Message.setField(msg, 1, obj.dockerImage);
  obj.commitId != null && jspb.Message.setField(msg, 2, obj.commitId);
  obj.mode != null && jspb.Message.setField(msg, 3, obj.mode);
  obj.configsMap && jspb.Message.setField(msg, 4, obj.configsMap);
  obj.latestRoutingRequest && jspb.Message.setWrapperField(
      msg, 5, modules_routing_proto_routing_pb.RoutingRequest.fromObject(obj.latestRoutingRequest));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.data.SoftwareInfo}
 */
proto.apollo.data.SoftwareInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.data.SoftwareInfo;
  return proto.apollo.data.SoftwareInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.data.SoftwareInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.data.SoftwareInfo}
 */
proto.apollo.data.SoftwareInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDockerImage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 4:
      var value = msg.getConfigsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = new modules_routing_proto_routing_pb.RoutingRequest;
      reader.readMessage(value,modules_routing_proto_routing_pb.RoutingRequest.deserializeBinaryFromReader);
      msg.setLatestRoutingRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.data.SoftwareInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.data.SoftwareInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.data.SoftwareInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.SoftwareInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConfigsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLatestRoutingRequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_routing_proto_routing_pb.RoutingRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string docker_image = 1;
 * @return {string}
 */
proto.apollo.data.SoftwareInfo.prototype.getDockerImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.setDockerImage = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.clearDockerImage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.SoftwareInfo.prototype.hasDockerImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string commit_id = 2;
 * @return {string}
 */
proto.apollo.data.SoftwareInfo.prototype.getCommitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.setCommitId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.clearCommitId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.SoftwareInfo.prototype.hasCommitId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mode = 3;
 * @return {string}
 */
proto.apollo.data.SoftwareInfo.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.clearMode = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.SoftwareInfo.prototype.hasMode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> configs = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.apollo.data.SoftwareInfo.prototype.getConfigsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.clearConfigsMap = function() {
  this.getConfigsMap().clear();
  return this;};


/**
 * optional apollo.routing.RoutingRequest latest_routing_request = 5;
 * @return {?proto.apollo.routing.RoutingRequest}
 */
proto.apollo.data.SoftwareInfo.prototype.getLatestRoutingRequest = function() {
  return /** @type{?proto.apollo.routing.RoutingRequest} */ (
    jspb.Message.getWrapperField(this, modules_routing_proto_routing_pb.RoutingRequest, 5));
};


/**
 * @param {?proto.apollo.routing.RoutingRequest|undefined} value
 * @return {!proto.apollo.data.SoftwareInfo} returns this
*/
proto.apollo.data.SoftwareInfo.prototype.setLatestRoutingRequest = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.SoftwareInfo} returns this
 */
proto.apollo.data.SoftwareInfo.prototype.clearLatestRoutingRequest = function() {
  return this.setLatestRoutingRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.SoftwareInfo.prototype.hasLatestRoutingRequest = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.data.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.data.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.data.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    driver: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    coDriver: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of UserInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.data.UserInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.entity;

  /** @type {?|undefined} */
  this.driver;

  /** @type {?|undefined} */
  this.coDriver;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.data.UserInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.data.UserInfo}
 */
proto.apollo.data.UserInfo.fromObject = function(obj) {
  var msg = new proto.apollo.data.UserInfo();
  obj.entity != null && jspb.Message.setField(msg, 1, obj.entity);
  obj.driver != null && jspb.Message.setField(msg, 2, obj.driver);
  obj.coDriver != null && jspb.Message.setField(msg, 3, obj.coDriver);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.data.UserInfo}
 */
proto.apollo.data.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.data.UserInfo;
  return proto.apollo.data.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.data.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.data.UserInfo}
 */
proto.apollo.data.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriver(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoDriver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.data.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.data.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.data.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string entity = 1;
 * @return {string}
 */
proto.apollo.data.UserInfo.prototype.getEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.UserInfo} returns this
 */
proto.apollo.data.UserInfo.prototype.setEntity = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.UserInfo} returns this
 */
proto.apollo.data.UserInfo.prototype.clearEntity = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.UserInfo.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string driver = 2;
 * @return {string}
 */
proto.apollo.data.UserInfo.prototype.getDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.UserInfo} returns this
 */
proto.apollo.data.UserInfo.prototype.setDriver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.UserInfo} returns this
 */
proto.apollo.data.UserInfo.prototype.clearDriver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.UserInfo.prototype.hasDriver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string co_driver = 3;
 * @return {string}
 */
proto.apollo.data.UserInfo.prototype.getCoDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.data.UserInfo} returns this
 */
proto.apollo.data.UserInfo.prototype.setCoDriver = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.data.UserInfo} returns this
 */
proto.apollo.data.UserInfo.prototype.clearCoDriver = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.UserInfo.prototype.hasCoDriver = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.data.StaticInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.data.StaticInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.data.StaticInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.StaticInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehicle: (f = msg.getVehicle()) && proto.apollo.data.VehicleInfo.toObject(includeInstance, f),
    environment: (f = msg.getEnvironment()) && proto.apollo.data.EnvironmentInfo.toObject(includeInstance, f),
    hardware: (f = msg.getHardware()) && proto.apollo.data.HardwareInfo.toObject(includeInstance, f),
    software: (f = msg.getSoftware()) && proto.apollo.data.SoftwareInfo.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.apollo.data.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StaticInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.data.StaticInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.vehicle;

  /** @type {?|undefined} */
  this.environment;

  /** @type {?|undefined} */
  this.hardware;

  /** @type {?|undefined} */
  this.software;

  /** @type {?|undefined} */
  this.user;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.data.StaticInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.data.StaticInfo}
 */
proto.apollo.data.StaticInfo.fromObject = function(obj) {
  var msg = new proto.apollo.data.StaticInfo();
  obj.vehicle && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.data.VehicleInfo.fromObject(obj.vehicle));
  obj.environment && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.data.EnvironmentInfo.fromObject(obj.environment));
  obj.hardware && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.data.HardwareInfo.fromObject(obj.hardware));
  obj.software && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.data.SoftwareInfo.fromObject(obj.software));
  obj.user && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.data.UserInfo.fromObject(obj.user));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.data.StaticInfo}
 */
proto.apollo.data.StaticInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.data.StaticInfo;
  return proto.apollo.data.StaticInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.data.StaticInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.data.StaticInfo}
 */
proto.apollo.data.StaticInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.data.VehicleInfo;
      reader.readMessage(value,proto.apollo.data.VehicleInfo.deserializeBinaryFromReader);
      msg.setVehicle(value);
      break;
    case 2:
      var value = new proto.apollo.data.EnvironmentInfo;
      reader.readMessage(value,proto.apollo.data.EnvironmentInfo.deserializeBinaryFromReader);
      msg.setEnvironment(value);
      break;
    case 3:
      var value = new proto.apollo.data.HardwareInfo;
      reader.readMessage(value,proto.apollo.data.HardwareInfo.deserializeBinaryFromReader);
      msg.setHardware(value);
      break;
    case 4:
      var value = new proto.apollo.data.SoftwareInfo;
      reader.readMessage(value,proto.apollo.data.SoftwareInfo.deserializeBinaryFromReader);
      msg.setSoftware(value);
      break;
    case 5:
      var value = new proto.apollo.data.UserInfo;
      reader.readMessage(value,proto.apollo.data.UserInfo.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.data.StaticInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.data.StaticInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.data.StaticInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.StaticInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehicle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.data.VehicleInfo.serializeBinaryToWriter
    );
  }
  f = message.getEnvironment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.data.EnvironmentInfo.serializeBinaryToWriter
    );
  }
  f = message.getHardware();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.data.HardwareInfo.serializeBinaryToWriter
    );
  }
  f = message.getSoftware();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.data.SoftwareInfo.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.data.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional VehicleInfo vehicle = 1;
 * @return {?proto.apollo.data.VehicleInfo}
 */
proto.apollo.data.StaticInfo.prototype.getVehicle = function() {
  return /** @type{?proto.apollo.data.VehicleInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.data.VehicleInfo, 1));
};


/**
 * @param {?proto.apollo.data.VehicleInfo|undefined} value
 * @return {!proto.apollo.data.StaticInfo} returns this
*/
proto.apollo.data.StaticInfo.prototype.setVehicle = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.StaticInfo} returns this
 */
proto.apollo.data.StaticInfo.prototype.clearVehicle = function() {
  return this.setVehicle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.StaticInfo.prototype.hasVehicle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EnvironmentInfo environment = 2;
 * @return {?proto.apollo.data.EnvironmentInfo}
 */
proto.apollo.data.StaticInfo.prototype.getEnvironment = function() {
  return /** @type{?proto.apollo.data.EnvironmentInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.data.EnvironmentInfo, 2));
};


/**
 * @param {?proto.apollo.data.EnvironmentInfo|undefined} value
 * @return {!proto.apollo.data.StaticInfo} returns this
*/
proto.apollo.data.StaticInfo.prototype.setEnvironment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.StaticInfo} returns this
 */
proto.apollo.data.StaticInfo.prototype.clearEnvironment = function() {
  return this.setEnvironment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.StaticInfo.prototype.hasEnvironment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HardwareInfo hardware = 3;
 * @return {?proto.apollo.data.HardwareInfo}
 */
proto.apollo.data.StaticInfo.prototype.getHardware = function() {
  return /** @type{?proto.apollo.data.HardwareInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.data.HardwareInfo, 3));
};


/**
 * @param {?proto.apollo.data.HardwareInfo|undefined} value
 * @return {!proto.apollo.data.StaticInfo} returns this
*/
proto.apollo.data.StaticInfo.prototype.setHardware = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.StaticInfo} returns this
 */
proto.apollo.data.StaticInfo.prototype.clearHardware = function() {
  return this.setHardware(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.StaticInfo.prototype.hasHardware = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SoftwareInfo software = 4;
 * @return {?proto.apollo.data.SoftwareInfo}
 */
proto.apollo.data.StaticInfo.prototype.getSoftware = function() {
  return /** @type{?proto.apollo.data.SoftwareInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.data.SoftwareInfo, 4));
};


/**
 * @param {?proto.apollo.data.SoftwareInfo|undefined} value
 * @return {!proto.apollo.data.StaticInfo} returns this
*/
proto.apollo.data.StaticInfo.prototype.setSoftware = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.StaticInfo} returns this
 */
proto.apollo.data.StaticInfo.prototype.clearSoftware = function() {
  return this.setSoftware(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.StaticInfo.prototype.hasSoftware = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UserInfo user = 5;
 * @return {?proto.apollo.data.UserInfo}
 */
proto.apollo.data.StaticInfo.prototype.getUser = function() {
  return /** @type{?proto.apollo.data.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.data.UserInfo, 5));
};


/**
 * @param {?proto.apollo.data.UserInfo|undefined} value
 * @return {!proto.apollo.data.StaticInfo} returns this
*/
proto.apollo.data.StaticInfo.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.data.StaticInfo} returns this
 */
proto.apollo.data.StaticInfo.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.data.StaticInfo.prototype.hasUser = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.data.StaticInfoConf.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.data.StaticInfoConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.data.StaticInfoConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.data.StaticInfoConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.StaticInfoConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    hardwareConfigsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    softwareConfigsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StaticInfoConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.data.StaticInfoConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.hardwareConfigsList;

  /** @type {?|undefined} */
  this.softwareConfigsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.data.StaticInfoConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.data.StaticInfoConf}
 */
proto.apollo.data.StaticInfoConf.fromObject = function(obj) {
  var msg = new proto.apollo.data.StaticInfoConf();
  obj.hardwareConfigsList != null && jspb.Message.setField(msg, 1, obj.hardwareConfigsList);
  obj.softwareConfigsList != null && jspb.Message.setField(msg, 2, obj.softwareConfigsList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.data.StaticInfoConf}
 */
proto.apollo.data.StaticInfoConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.data.StaticInfoConf;
  return proto.apollo.data.StaticInfoConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.data.StaticInfoConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.data.StaticInfoConf}
 */
proto.apollo.data.StaticInfoConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addHardwareConfigs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSoftwareConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.data.StaticInfoConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.data.StaticInfoConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.data.StaticInfoConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.data.StaticInfoConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHardwareConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSoftwareConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string hardware_configs = 1;
 * @return {!Array<string>}
 */
proto.apollo.data.StaticInfoConf.prototype.getHardwareConfigsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.data.StaticInfoConf} returns this
 */
proto.apollo.data.StaticInfoConf.prototype.setHardwareConfigsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.data.StaticInfoConf} returns this
 */
proto.apollo.data.StaticInfoConf.prototype.addHardwareConfigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.data.StaticInfoConf} returns this
 */
proto.apollo.data.StaticInfoConf.prototype.clearHardwareConfigsList = function() {
  return this.setHardwareConfigsList([]);
};


/**
 * repeated string software_configs = 2;
 * @return {!Array<string>}
 */
proto.apollo.data.StaticInfoConf.prototype.getSoftwareConfigsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.data.StaticInfoConf} returns this
 */
proto.apollo.data.StaticInfoConf.prototype.setSoftwareConfigsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.data.StaticInfoConf} returns this
 */
proto.apollo.data.StaticInfoConf.prototype.addSoftwareConfigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.data.StaticInfoConf} returns this
 */
proto.apollo.data.StaticInfoConf.prototype.clearSoftwareConfigsList = function() {
  return this.setSoftwareConfigsList([]);
};


goog.object.extend(exports, proto.apollo.data);
