// source: modules/tools/prediction/data_pipelines/proto/cruise_model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ActivationParameter', null, global);
goog.exportSymbol('proto.AvgPool1dParameter', null, global);
goog.exportSymbol('proto.ClassifyParameter', null, global);
goog.exportSymbol('proto.Conv1dParameter', null, global);
goog.exportSymbol('proto.CruiseModelParameter', null, global);
goog.exportSymbol('proto.DenseParameter', null, global);
goog.exportSymbol('proto.InputParameter', null, global);
goog.exportSymbol('proto.LaneFeatureConvParameter', null, global);
goog.exportSymbol('proto.MaxPool1dParameter', null, global);
goog.exportSymbol('proto.ObsFeatureFCParameter', null, global);
goog.exportSymbol('proto.RegressParameter', null, global);
goog.exportSymbol('proto.TensorParameter', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TensorParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TensorParameter.repeatedFields_, null);
};
goog.inherits(proto.TensorParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TensorParameter.displayName = 'proto.TensorParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InputParameter.repeatedFields_, null);
};
goog.inherits(proto.InputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InputParameter.displayName = 'proto.InputParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Conv1dParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Conv1dParameter.repeatedFields_, null);
};
goog.inherits(proto.Conv1dParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Conv1dParameter.displayName = 'proto.Conv1dParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DenseParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DenseParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DenseParameter.displayName = 'proto.DenseParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActivationParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ActivationParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ActivationParameter.displayName = 'proto.ActivationParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MaxPool1dParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MaxPool1dParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MaxPool1dParameter.displayName = 'proto.MaxPool1dParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AvgPool1dParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AvgPool1dParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AvgPool1dParameter.displayName = 'proto.AvgPool1dParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LaneFeatureConvParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LaneFeatureConvParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LaneFeatureConvParameter.displayName = 'proto.LaneFeatureConvParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ObsFeatureFCParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ObsFeatureFCParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ObsFeatureFCParameter.displayName = 'proto.ObsFeatureFCParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClassifyParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClassifyParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ClassifyParameter.displayName = 'proto.ClassifyParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegressParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegressParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RegressParameter.displayName = 'proto.RegressParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CruiseModelParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CruiseModelParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CruiseModelParameter.displayName = 'proto.CruiseModelParameter';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TensorParameter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TensorParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.TensorParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TensorParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TensorParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    shapeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TensorParameter as accepted by the `fromObject` method.
 * @record
 */
proto.TensorParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dataList;

  /** @type {?|undefined} */
  this.shapeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.TensorParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.TensorParameter}
 */
proto.TensorParameter.fromObject = function(obj) {
  var msg = new proto.TensorParameter();
  obj.dataList != null && jspb.Message.setField(msg, 1, obj.dataList);
  obj.shapeList != null && jspb.Message.setField(msg, 2, obj.shapeList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TensorParameter}
 */
proto.TensorParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TensorParameter;
  return proto.TensorParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TensorParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TensorParameter}
 */
proto.TensorParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addData(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addShape(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TensorParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TensorParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TensorParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TensorParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * repeated float data = 1;
 * @return {!Array<number>}
 */
proto.TensorParameter.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TensorParameter} returns this
 */
proto.TensorParameter.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TensorParameter} returns this
 */
proto.TensorParameter.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TensorParameter} returns this
 */
proto.TensorParameter.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * repeated int32 shape = 2;
 * @return {!Array<number>}
 */
proto.TensorParameter.prototype.getShapeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.TensorParameter} returns this
 */
proto.TensorParameter.prototype.setShapeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.TensorParameter} returns this
 */
proto.TensorParameter.prototype.addShape = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TensorParameter} returns this
 */
proto.TensorParameter.prototype.clearShapeList = function() {
  return this.setShapeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InputParameter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.InputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InputParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputShapeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    dtype: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    sparse: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of InputParameter as accepted by the `fromObject` method.
 * @record
 */
proto.InputParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.inputShapeList;

  /** @type {?|undefined} */
  this.dtype;

  /** @type {?|undefined} */
  this.sparse;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.InputParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.InputParameter}
 */
proto.InputParameter.fromObject = function(obj) {
  var msg = new proto.InputParameter();
  obj.inputShapeList != null && jspb.Message.setField(msg, 1, obj.inputShapeList);
  obj.dtype != null && jspb.Message.setField(msg, 2, obj.dtype);
  obj.sparse != null && jspb.Message.setField(msg, 3, obj.sparse);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InputParameter}
 */
proto.InputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InputParameter;
  return proto.InputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InputParameter}
 */
proto.InputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInputShape(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDtype(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSparse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InputParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputShapeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated int32 input_shape = 1;
 * @return {!Array<number>}
 */
proto.InputParameter.prototype.getInputShapeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.InputParameter} returns this
 */
proto.InputParameter.prototype.setInputShapeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.InputParameter} returns this
 */
proto.InputParameter.prototype.addInputShape = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.InputParameter} returns this
 */
proto.InputParameter.prototype.clearInputShapeList = function() {
  return this.setInputShapeList([]);
};


/**
 * optional string dtype = 2;
 * @return {string}
 */
proto.InputParameter.prototype.getDtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.InputParameter} returns this
 */
proto.InputParameter.prototype.setDtype = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.InputParameter} returns this
 */
proto.InputParameter.prototype.clearDtype = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InputParameter.prototype.hasDtype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool sparse = 3;
 * @return {boolean}
 */
proto.InputParameter.prototype.getSparse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.InputParameter} returns this
 */
proto.InputParameter.prototype.setSparse = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.InputParameter} returns this
 */
proto.InputParameter.prototype.clearSparse = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InputParameter.prototype.hasSparse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Conv1dParameter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Conv1dParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.Conv1dParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Conv1dParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Conv1dParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shapeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    useBias: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    kernel: (f = msg.getKernel()) && proto.TensorParameter.toObject(includeInstance, f),
    bias: (f = msg.getBias()) && proto.TensorParameter.toObject(includeInstance, f),
    stride: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Conv1dParameter as accepted by the `fromObject` method.
 * @record
 */
proto.Conv1dParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.shapeList;

  /** @type {?|undefined} */
  this.useBias;

  /** @type {?|undefined} */
  this.kernel;

  /** @type {?|undefined} */
  this.bias;

  /** @type {?|undefined} */
  this.stride;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Conv1dParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Conv1dParameter}
 */
proto.Conv1dParameter.fromObject = function(obj) {
  var msg = new proto.Conv1dParameter();
  obj.shapeList != null && jspb.Message.setField(msg, 1, obj.shapeList);
  obj.useBias != null && jspb.Message.setField(msg, 2, obj.useBias);
  obj.kernel && jspb.Message.setWrapperField(
      msg, 3, proto.TensorParameter.fromObject(obj.kernel));
  obj.bias && jspb.Message.setWrapperField(
      msg, 4, proto.TensorParameter.fromObject(obj.bias));
  obj.stride != null && jspb.Message.setField(msg, 5, obj.stride);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Conv1dParameter}
 */
proto.Conv1dParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Conv1dParameter;
  return proto.Conv1dParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Conv1dParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Conv1dParameter}
 */
proto.Conv1dParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addShape(values[i]);
      }
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseBias(value);
      break;
    case 3:
      var value = new proto.TensorParameter;
      reader.readMessage(value,proto.TensorParameter.deserializeBinaryFromReader);
      msg.setKernel(value);
      break;
    case 4:
      var value = new proto.TensorParameter;
      reader.readMessage(value,proto.TensorParameter.deserializeBinaryFromReader);
      msg.setBias(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Conv1dParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Conv1dParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Conv1dParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Conv1dParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getKernel();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TensorParameter.serializeBinaryToWriter
    );
  }
  f = message.getBias();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TensorParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * repeated int32 shape = 1;
 * @return {!Array<number>}
 */
proto.Conv1dParameter.prototype.getShapeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.setShapeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.addShape = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.clearShapeList = function() {
  return this.setShapeList([]);
};


/**
 * optional bool use_bias = 2;
 * @return {boolean}
 */
proto.Conv1dParameter.prototype.getUseBias = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.setUseBias = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.clearUseBias = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Conv1dParameter.prototype.hasUseBias = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TensorParameter kernel = 3;
 * @return {?proto.TensorParameter}
 */
proto.Conv1dParameter.prototype.getKernel = function() {
  return /** @type{?proto.TensorParameter} */ (
    jspb.Message.getWrapperField(this, proto.TensorParameter, 3));
};


/**
 * @param {?proto.TensorParameter|undefined} value
 * @return {!proto.Conv1dParameter} returns this
*/
proto.Conv1dParameter.prototype.setKernel = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.clearKernel = function() {
  return this.setKernel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Conv1dParameter.prototype.hasKernel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TensorParameter bias = 4;
 * @return {?proto.TensorParameter}
 */
proto.Conv1dParameter.prototype.getBias = function() {
  return /** @type{?proto.TensorParameter} */ (
    jspb.Message.getWrapperField(this, proto.TensorParameter, 4));
};


/**
 * @param {?proto.TensorParameter|undefined} value
 * @return {!proto.Conv1dParameter} returns this
*/
proto.Conv1dParameter.prototype.setBias = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.clearBias = function() {
  return this.setBias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Conv1dParameter.prototype.hasBias = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 stride = 5;
 * @return {number}
 */
proto.Conv1dParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.setStride = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Conv1dParameter} returns this
 */
proto.Conv1dParameter.prototype.clearStride = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Conv1dParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DenseParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.DenseParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DenseParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DenseParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    units: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    activation: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    useBias: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    weights: (f = msg.getWeights()) && proto.TensorParameter.toObject(includeInstance, f),
    bias: (f = msg.getBias()) && proto.TensorParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DenseParameter as accepted by the `fromObject` method.
 * @record
 */
proto.DenseParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.units;

  /** @type {?|undefined} */
  this.activation;

  /** @type {?|undefined} */
  this.useBias;

  /** @type {?|undefined} */
  this.weights;

  /** @type {?|undefined} */
  this.bias;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.DenseParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.DenseParameter}
 */
proto.DenseParameter.fromObject = function(obj) {
  var msg = new proto.DenseParameter();
  obj.units != null && jspb.Message.setField(msg, 1, obj.units);
  obj.activation != null && jspb.Message.setField(msg, 2, obj.activation);
  obj.useBias != null && jspb.Message.setField(msg, 3, obj.useBias);
  obj.weights && jspb.Message.setWrapperField(
      msg, 4, proto.TensorParameter.fromObject(obj.weights));
  obj.bias && jspb.Message.setWrapperField(
      msg, 5, proto.TensorParameter.fromObject(obj.bias));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DenseParameter}
 */
proto.DenseParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DenseParameter;
  return proto.DenseParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DenseParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DenseParameter}
 */
proto.DenseParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnits(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivation(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseBias(value);
      break;
    case 4:
      var value = new proto.TensorParameter;
      reader.readMessage(value,proto.TensorParameter.deserializeBinaryFromReader);
      msg.setWeights(value);
      break;
    case 5:
      var value = new proto.TensorParameter;
      reader.readMessage(value,proto.TensorParameter.deserializeBinaryFromReader);
      msg.setBias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DenseParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DenseParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DenseParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DenseParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getWeights();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TensorParameter.serializeBinaryToWriter
    );
  }
  f = message.getBias();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.TensorParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 units = 1;
 * @return {number}
 */
proto.DenseParameter.prototype.getUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.setUnits = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.clearUnits = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DenseParameter.prototype.hasUnits = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string activation = 2;
 * @return {string}
 */
proto.DenseParameter.prototype.getActivation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.setActivation = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.clearActivation = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DenseParameter.prototype.hasActivation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool use_bias = 3;
 * @return {boolean}
 */
proto.DenseParameter.prototype.getUseBias = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.setUseBias = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.clearUseBias = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DenseParameter.prototype.hasUseBias = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TensorParameter weights = 4;
 * @return {?proto.TensorParameter}
 */
proto.DenseParameter.prototype.getWeights = function() {
  return /** @type{?proto.TensorParameter} */ (
    jspb.Message.getWrapperField(this, proto.TensorParameter, 4));
};


/**
 * @param {?proto.TensorParameter|undefined} value
 * @return {!proto.DenseParameter} returns this
*/
proto.DenseParameter.prototype.setWeights = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.clearWeights = function() {
  return this.setWeights(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DenseParameter.prototype.hasWeights = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TensorParameter bias = 5;
 * @return {?proto.TensorParameter}
 */
proto.DenseParameter.prototype.getBias = function() {
  return /** @type{?proto.TensorParameter} */ (
    jspb.Message.getWrapperField(this, proto.TensorParameter, 5));
};


/**
 * @param {?proto.TensorParameter|undefined} value
 * @return {!proto.DenseParameter} returns this
*/
proto.DenseParameter.prototype.setBias = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DenseParameter} returns this
 */
proto.DenseParameter.prototype.clearBias = function() {
  return this.setBias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DenseParameter.prototype.hasBias = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActivationParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.ActivationParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActivationParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActivationParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    activation: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ActivationParameter as accepted by the `fromObject` method.
 * @record
 */
proto.ActivationParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.activation;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.ActivationParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.ActivationParameter}
 */
proto.ActivationParameter.fromObject = function(obj) {
  var msg = new proto.ActivationParameter();
  obj.activation != null && jspb.Message.setField(msg, 1, obj.activation);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActivationParameter}
 */
proto.ActivationParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActivationParameter;
  return proto.ActivationParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActivationParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActivationParameter}
 */
proto.ActivationParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActivationParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActivationParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActivationParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActivationParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string activation = 1;
 * @return {string}
 */
proto.ActivationParameter.prototype.getActivation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ActivationParameter} returns this
 */
proto.ActivationParameter.prototype.setActivation = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ActivationParameter} returns this
 */
proto.ActivationParameter.prototype.clearActivation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ActivationParameter.prototype.hasActivation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MaxPool1dParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.MaxPool1dParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MaxPool1dParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MaxPool1dParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    kernelSize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    stride: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MaxPool1dParameter as accepted by the `fromObject` method.
 * @record
 */
proto.MaxPool1dParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.kernelSize;

  /** @type {?|undefined} */
  this.stride;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.MaxPool1dParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.MaxPool1dParameter}
 */
proto.MaxPool1dParameter.fromObject = function(obj) {
  var msg = new proto.MaxPool1dParameter();
  obj.kernelSize != null && jspb.Message.setField(msg, 1, obj.kernelSize);
  obj.stride != null && jspb.Message.setField(msg, 2, obj.stride);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MaxPool1dParameter}
 */
proto.MaxPool1dParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MaxPool1dParameter;
  return proto.MaxPool1dParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MaxPool1dParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MaxPool1dParameter}
 */
proto.MaxPool1dParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKernelSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MaxPool1dParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MaxPool1dParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MaxPool1dParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MaxPool1dParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 kernel_size = 1;
 * @return {number}
 */
proto.MaxPool1dParameter.prototype.getKernelSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MaxPool1dParameter} returns this
 */
proto.MaxPool1dParameter.prototype.setKernelSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MaxPool1dParameter} returns this
 */
proto.MaxPool1dParameter.prototype.clearKernelSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MaxPool1dParameter.prototype.hasKernelSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 stride = 2;
 * @return {number}
 */
proto.MaxPool1dParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MaxPool1dParameter} returns this
 */
proto.MaxPool1dParameter.prototype.setStride = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MaxPool1dParameter} returns this
 */
proto.MaxPool1dParameter.prototype.clearStride = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MaxPool1dParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AvgPool1dParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.AvgPool1dParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AvgPool1dParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AvgPool1dParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    kernelSize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    stride: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of AvgPool1dParameter as accepted by the `fromObject` method.
 * @record
 */
proto.AvgPool1dParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.kernelSize;

  /** @type {?|undefined} */
  this.stride;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.AvgPool1dParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.AvgPool1dParameter}
 */
proto.AvgPool1dParameter.fromObject = function(obj) {
  var msg = new proto.AvgPool1dParameter();
  obj.kernelSize != null && jspb.Message.setField(msg, 1, obj.kernelSize);
  obj.stride != null && jspb.Message.setField(msg, 2, obj.stride);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AvgPool1dParameter}
 */
proto.AvgPool1dParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AvgPool1dParameter;
  return proto.AvgPool1dParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AvgPool1dParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AvgPool1dParameter}
 */
proto.AvgPool1dParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKernelSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AvgPool1dParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AvgPool1dParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AvgPool1dParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AvgPool1dParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 kernel_size = 1;
 * @return {number}
 */
proto.AvgPool1dParameter.prototype.getKernelSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.AvgPool1dParameter} returns this
 */
proto.AvgPool1dParameter.prototype.setKernelSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.AvgPool1dParameter} returns this
 */
proto.AvgPool1dParameter.prototype.clearKernelSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AvgPool1dParameter.prototype.hasKernelSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 stride = 2;
 * @return {number}
 */
proto.AvgPool1dParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.AvgPool1dParameter} returns this
 */
proto.AvgPool1dParameter.prototype.setStride = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.AvgPool1dParameter} returns this
 */
proto.AvgPool1dParameter.prototype.clearStride = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AvgPool1dParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LaneFeatureConvParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.LaneFeatureConvParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LaneFeatureConvParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LaneFeatureConvParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    conv1d0: (f = msg.getConv1d0()) && proto.Conv1dParameter.toObject(includeInstance, f),
    activation1: (f = msg.getActivation1()) && proto.ActivationParameter.toObject(includeInstance, f),
    conv1d2: (f = msg.getConv1d2()) && proto.Conv1dParameter.toObject(includeInstance, f),
    activation3: (f = msg.getActivation3()) && proto.ActivationParameter.toObject(includeInstance, f),
    conv1d4: (f = msg.getConv1d4()) && proto.Conv1dParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneFeatureConvParameter as accepted by the `fromObject` method.
 * @record
 */
proto.LaneFeatureConvParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.conv1d0;

  /** @type {?|undefined} */
  this.activation1;

  /** @type {?|undefined} */
  this.conv1d2;

  /** @type {?|undefined} */
  this.activation3;

  /** @type {?|undefined} */
  this.conv1d4;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.LaneFeatureConvParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.LaneFeatureConvParameter}
 */
proto.LaneFeatureConvParameter.fromObject = function(obj) {
  var msg = new proto.LaneFeatureConvParameter();
  obj.conv1d0 && jspb.Message.setWrapperField(
      msg, 1, proto.Conv1dParameter.fromObject(obj.conv1d0));
  obj.activation1 && jspb.Message.setWrapperField(
      msg, 2, proto.ActivationParameter.fromObject(obj.activation1));
  obj.conv1d2 && jspb.Message.setWrapperField(
      msg, 3, proto.Conv1dParameter.fromObject(obj.conv1d2));
  obj.activation3 && jspb.Message.setWrapperField(
      msg, 4, proto.ActivationParameter.fromObject(obj.activation3));
  obj.conv1d4 && jspb.Message.setWrapperField(
      msg, 5, proto.Conv1dParameter.fromObject(obj.conv1d4));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LaneFeatureConvParameter}
 */
proto.LaneFeatureConvParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LaneFeatureConvParameter;
  return proto.LaneFeatureConvParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LaneFeatureConvParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LaneFeatureConvParameter}
 */
proto.LaneFeatureConvParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Conv1dParameter;
      reader.readMessage(value,proto.Conv1dParameter.deserializeBinaryFromReader);
      msg.setConv1d0(value);
      break;
    case 2:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation1(value);
      break;
    case 3:
      var value = new proto.Conv1dParameter;
      reader.readMessage(value,proto.Conv1dParameter.deserializeBinaryFromReader);
      msg.setConv1d2(value);
      break;
    case 4:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation3(value);
      break;
    case 5:
      var value = new proto.Conv1dParameter;
      reader.readMessage(value,proto.Conv1dParameter.deserializeBinaryFromReader);
      msg.setConv1d4(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LaneFeatureConvParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LaneFeatureConvParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LaneFeatureConvParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LaneFeatureConvParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConv1d0();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Conv1dParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getConv1d2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Conv1dParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation3();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getConv1d4();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Conv1dParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional Conv1dParameter conv1d_0 = 1;
 * @return {?proto.Conv1dParameter}
 */
proto.LaneFeatureConvParameter.prototype.getConv1d0 = function() {
  return /** @type{?proto.Conv1dParameter} */ (
    jspb.Message.getWrapperField(this, proto.Conv1dParameter, 1));
};


/**
 * @param {?proto.Conv1dParameter|undefined} value
 * @return {!proto.LaneFeatureConvParameter} returns this
*/
proto.LaneFeatureConvParameter.prototype.setConv1d0 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LaneFeatureConvParameter} returns this
 */
proto.LaneFeatureConvParameter.prototype.clearConv1d0 = function() {
  return this.setConv1d0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LaneFeatureConvParameter.prototype.hasConv1d0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActivationParameter activation_1 = 2;
 * @return {?proto.ActivationParameter}
 */
proto.LaneFeatureConvParameter.prototype.getActivation1 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 2));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.LaneFeatureConvParameter} returns this
*/
proto.LaneFeatureConvParameter.prototype.setActivation1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LaneFeatureConvParameter} returns this
 */
proto.LaneFeatureConvParameter.prototype.clearActivation1 = function() {
  return this.setActivation1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LaneFeatureConvParameter.prototype.hasActivation1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Conv1dParameter conv1d_2 = 3;
 * @return {?proto.Conv1dParameter}
 */
proto.LaneFeatureConvParameter.prototype.getConv1d2 = function() {
  return /** @type{?proto.Conv1dParameter} */ (
    jspb.Message.getWrapperField(this, proto.Conv1dParameter, 3));
};


/**
 * @param {?proto.Conv1dParameter|undefined} value
 * @return {!proto.LaneFeatureConvParameter} returns this
*/
proto.LaneFeatureConvParameter.prototype.setConv1d2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LaneFeatureConvParameter} returns this
 */
proto.LaneFeatureConvParameter.prototype.clearConv1d2 = function() {
  return this.setConv1d2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LaneFeatureConvParameter.prototype.hasConv1d2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActivationParameter activation_3 = 4;
 * @return {?proto.ActivationParameter}
 */
proto.LaneFeatureConvParameter.prototype.getActivation3 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 4));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.LaneFeatureConvParameter} returns this
*/
proto.LaneFeatureConvParameter.prototype.setActivation3 = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LaneFeatureConvParameter} returns this
 */
proto.LaneFeatureConvParameter.prototype.clearActivation3 = function() {
  return this.setActivation3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LaneFeatureConvParameter.prototype.hasActivation3 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Conv1dParameter conv1d_4 = 5;
 * @return {?proto.Conv1dParameter}
 */
proto.LaneFeatureConvParameter.prototype.getConv1d4 = function() {
  return /** @type{?proto.Conv1dParameter} */ (
    jspb.Message.getWrapperField(this, proto.Conv1dParameter, 5));
};


/**
 * @param {?proto.Conv1dParameter|undefined} value
 * @return {!proto.LaneFeatureConvParameter} returns this
*/
proto.LaneFeatureConvParameter.prototype.setConv1d4 = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.LaneFeatureConvParameter} returns this
 */
proto.LaneFeatureConvParameter.prototype.clearConv1d4 = function() {
  return this.setConv1d4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.LaneFeatureConvParameter.prototype.hasConv1d4 = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ObsFeatureFCParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.ObsFeatureFCParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ObsFeatureFCParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObsFeatureFCParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    linear0: (f = msg.getLinear0()) && proto.DenseParameter.toObject(includeInstance, f),
    activation1: (f = msg.getActivation1()) && proto.ActivationParameter.toObject(includeInstance, f),
    linear3: (f = msg.getLinear3()) && proto.DenseParameter.toObject(includeInstance, f),
    activation4: (f = msg.getActivation4()) && proto.ActivationParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObsFeatureFCParameter as accepted by the `fromObject` method.
 * @record
 */
proto.ObsFeatureFCParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.linear0;

  /** @type {?|undefined} */
  this.activation1;

  /** @type {?|undefined} */
  this.linear3;

  /** @type {?|undefined} */
  this.activation4;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.ObsFeatureFCParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.ObsFeatureFCParameter}
 */
proto.ObsFeatureFCParameter.fromObject = function(obj) {
  var msg = new proto.ObsFeatureFCParameter();
  obj.linear0 && jspb.Message.setWrapperField(
      msg, 1, proto.DenseParameter.fromObject(obj.linear0));
  obj.activation1 && jspb.Message.setWrapperField(
      msg, 2, proto.ActivationParameter.fromObject(obj.activation1));
  obj.linear3 && jspb.Message.setWrapperField(
      msg, 3, proto.DenseParameter.fromObject(obj.linear3));
  obj.activation4 && jspb.Message.setWrapperField(
      msg, 4, proto.ActivationParameter.fromObject(obj.activation4));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ObsFeatureFCParameter}
 */
proto.ObsFeatureFCParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ObsFeatureFCParameter;
  return proto.ObsFeatureFCParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ObsFeatureFCParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ObsFeatureFCParameter}
 */
proto.ObsFeatureFCParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear0(value);
      break;
    case 2:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation1(value);
      break;
    case 3:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear3(value);
      break;
    case 4:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation4(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ObsFeatureFCParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ObsFeatureFCParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ObsFeatureFCParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObsFeatureFCParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinear0();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLinear3();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation4();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional DenseParameter linear_0 = 1;
 * @return {?proto.DenseParameter}
 */
proto.ObsFeatureFCParameter.prototype.getLinear0 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 1));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.ObsFeatureFCParameter} returns this
*/
proto.ObsFeatureFCParameter.prototype.setLinear0 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObsFeatureFCParameter} returns this
 */
proto.ObsFeatureFCParameter.prototype.clearLinear0 = function() {
  return this.setLinear0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObsFeatureFCParameter.prototype.hasLinear0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActivationParameter activation_1 = 2;
 * @return {?proto.ActivationParameter}
 */
proto.ObsFeatureFCParameter.prototype.getActivation1 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 2));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.ObsFeatureFCParameter} returns this
*/
proto.ObsFeatureFCParameter.prototype.setActivation1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObsFeatureFCParameter} returns this
 */
proto.ObsFeatureFCParameter.prototype.clearActivation1 = function() {
  return this.setActivation1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObsFeatureFCParameter.prototype.hasActivation1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DenseParameter linear_3 = 3;
 * @return {?proto.DenseParameter}
 */
proto.ObsFeatureFCParameter.prototype.getLinear3 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 3));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.ObsFeatureFCParameter} returns this
*/
proto.ObsFeatureFCParameter.prototype.setLinear3 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObsFeatureFCParameter} returns this
 */
proto.ObsFeatureFCParameter.prototype.clearLinear3 = function() {
  return this.setLinear3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObsFeatureFCParameter.prototype.hasLinear3 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActivationParameter activation_4 = 4;
 * @return {?proto.ActivationParameter}
 */
proto.ObsFeatureFCParameter.prototype.getActivation4 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 4));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.ObsFeatureFCParameter} returns this
*/
proto.ObsFeatureFCParameter.prototype.setActivation4 = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObsFeatureFCParameter} returns this
 */
proto.ObsFeatureFCParameter.prototype.clearActivation4 = function() {
  return this.setActivation4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObsFeatureFCParameter.prototype.hasActivation4 = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClassifyParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.ClassifyParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClassifyParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClassifyParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    linear0: (f = msg.getLinear0()) && proto.DenseParameter.toObject(includeInstance, f),
    activation1: (f = msg.getActivation1()) && proto.ActivationParameter.toObject(includeInstance, f),
    linear3: (f = msg.getLinear3()) && proto.DenseParameter.toObject(includeInstance, f),
    activation4: (f = msg.getActivation4()) && proto.ActivationParameter.toObject(includeInstance, f),
    linear6: (f = msg.getLinear6()) && proto.DenseParameter.toObject(includeInstance, f),
    activation7: (f = msg.getActivation7()) && proto.ActivationParameter.toObject(includeInstance, f),
    linear9: (f = msg.getLinear9()) && proto.DenseParameter.toObject(includeInstance, f),
    activation10: (f = msg.getActivation10()) && proto.ActivationParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ClassifyParameter as accepted by the `fromObject` method.
 * @record
 */
proto.ClassifyParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.linear0;

  /** @type {?|undefined} */
  this.activation1;

  /** @type {?|undefined} */
  this.linear3;

  /** @type {?|undefined} */
  this.activation4;

  /** @type {?|undefined} */
  this.linear6;

  /** @type {?|undefined} */
  this.activation7;

  /** @type {?|undefined} */
  this.linear9;

  /** @type {?|undefined} */
  this.activation10;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.ClassifyParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.ClassifyParameter}
 */
proto.ClassifyParameter.fromObject = function(obj) {
  var msg = new proto.ClassifyParameter();
  obj.linear0 && jspb.Message.setWrapperField(
      msg, 1, proto.DenseParameter.fromObject(obj.linear0));
  obj.activation1 && jspb.Message.setWrapperField(
      msg, 2, proto.ActivationParameter.fromObject(obj.activation1));
  obj.linear3 && jspb.Message.setWrapperField(
      msg, 3, proto.DenseParameter.fromObject(obj.linear3));
  obj.activation4 && jspb.Message.setWrapperField(
      msg, 4, proto.ActivationParameter.fromObject(obj.activation4));
  obj.linear6 && jspb.Message.setWrapperField(
      msg, 5, proto.DenseParameter.fromObject(obj.linear6));
  obj.activation7 && jspb.Message.setWrapperField(
      msg, 6, proto.ActivationParameter.fromObject(obj.activation7));
  obj.linear9 && jspb.Message.setWrapperField(
      msg, 7, proto.DenseParameter.fromObject(obj.linear9));
  obj.activation10 && jspb.Message.setWrapperField(
      msg, 8, proto.ActivationParameter.fromObject(obj.activation10));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClassifyParameter}
 */
proto.ClassifyParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClassifyParameter;
  return proto.ClassifyParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClassifyParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClassifyParameter}
 */
proto.ClassifyParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear0(value);
      break;
    case 2:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation1(value);
      break;
    case 3:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear3(value);
      break;
    case 4:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation4(value);
      break;
    case 5:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear6(value);
      break;
    case 6:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation7(value);
      break;
    case 7:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear9(value);
      break;
    case 8:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation10(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClassifyParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClassifyParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClassifyParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClassifyParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinear0();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLinear3();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation4();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLinear6();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation7();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLinear9();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation10();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional DenseParameter linear_0 = 1;
 * @return {?proto.DenseParameter}
 */
proto.ClassifyParameter.prototype.getLinear0 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 1));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setLinear0 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearLinear0 = function() {
  return this.setLinear0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasLinear0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActivationParameter activation_1 = 2;
 * @return {?proto.ActivationParameter}
 */
proto.ClassifyParameter.prototype.getActivation1 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 2));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setActivation1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearActivation1 = function() {
  return this.setActivation1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasActivation1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DenseParameter linear_3 = 3;
 * @return {?proto.DenseParameter}
 */
proto.ClassifyParameter.prototype.getLinear3 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 3));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setLinear3 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearLinear3 = function() {
  return this.setLinear3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasLinear3 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActivationParameter activation_4 = 4;
 * @return {?proto.ActivationParameter}
 */
proto.ClassifyParameter.prototype.getActivation4 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 4));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setActivation4 = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearActivation4 = function() {
  return this.setActivation4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasActivation4 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DenseParameter linear_6 = 5;
 * @return {?proto.DenseParameter}
 */
proto.ClassifyParameter.prototype.getLinear6 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 5));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setLinear6 = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearLinear6 = function() {
  return this.setLinear6(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasLinear6 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ActivationParameter activation_7 = 6;
 * @return {?proto.ActivationParameter}
 */
proto.ClassifyParameter.prototype.getActivation7 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 6));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setActivation7 = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearActivation7 = function() {
  return this.setActivation7(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasActivation7 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DenseParameter linear_9 = 7;
 * @return {?proto.DenseParameter}
 */
proto.ClassifyParameter.prototype.getLinear9 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 7));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setLinear9 = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearLinear9 = function() {
  return this.setLinear9(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasLinear9 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ActivationParameter activation_10 = 8;
 * @return {?proto.ActivationParameter}
 */
proto.ClassifyParameter.prototype.getActivation10 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 8));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.ClassifyParameter} returns this
*/
proto.ClassifyParameter.prototype.setActivation10 = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ClassifyParameter} returns this
 */
proto.ClassifyParameter.prototype.clearActivation10 = function() {
  return this.setActivation10(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ClassifyParameter.prototype.hasActivation10 = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegressParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.RegressParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegressParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegressParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    linear0: (f = msg.getLinear0()) && proto.DenseParameter.toObject(includeInstance, f),
    activation1: (f = msg.getActivation1()) && proto.ActivationParameter.toObject(includeInstance, f),
    linear3: (f = msg.getLinear3()) && proto.DenseParameter.toObject(includeInstance, f),
    activation4: (f = msg.getActivation4()) && proto.ActivationParameter.toObject(includeInstance, f),
    linear6: (f = msg.getLinear6()) && proto.DenseParameter.toObject(includeInstance, f),
    activation7: (f = msg.getActivation7()) && proto.ActivationParameter.toObject(includeInstance, f),
    linear9: (f = msg.getLinear9()) && proto.DenseParameter.toObject(includeInstance, f),
    activation10: (f = msg.getActivation10()) && proto.ActivationParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RegressParameter as accepted by the `fromObject` method.
 * @record
 */
proto.RegressParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.linear0;

  /** @type {?|undefined} */
  this.activation1;

  /** @type {?|undefined} */
  this.linear3;

  /** @type {?|undefined} */
  this.activation4;

  /** @type {?|undefined} */
  this.linear6;

  /** @type {?|undefined} */
  this.activation7;

  /** @type {?|undefined} */
  this.linear9;

  /** @type {?|undefined} */
  this.activation10;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.RegressParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.RegressParameter}
 */
proto.RegressParameter.fromObject = function(obj) {
  var msg = new proto.RegressParameter();
  obj.linear0 && jspb.Message.setWrapperField(
      msg, 1, proto.DenseParameter.fromObject(obj.linear0));
  obj.activation1 && jspb.Message.setWrapperField(
      msg, 2, proto.ActivationParameter.fromObject(obj.activation1));
  obj.linear3 && jspb.Message.setWrapperField(
      msg, 3, proto.DenseParameter.fromObject(obj.linear3));
  obj.activation4 && jspb.Message.setWrapperField(
      msg, 4, proto.ActivationParameter.fromObject(obj.activation4));
  obj.linear6 && jspb.Message.setWrapperField(
      msg, 5, proto.DenseParameter.fromObject(obj.linear6));
  obj.activation7 && jspb.Message.setWrapperField(
      msg, 6, proto.ActivationParameter.fromObject(obj.activation7));
  obj.linear9 && jspb.Message.setWrapperField(
      msg, 7, proto.DenseParameter.fromObject(obj.linear9));
  obj.activation10 && jspb.Message.setWrapperField(
      msg, 8, proto.ActivationParameter.fromObject(obj.activation10));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegressParameter}
 */
proto.RegressParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegressParameter;
  return proto.RegressParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegressParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegressParameter}
 */
proto.RegressParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear0(value);
      break;
    case 2:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation1(value);
      break;
    case 3:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear3(value);
      break;
    case 4:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation4(value);
      break;
    case 5:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear6(value);
      break;
    case 6:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation7(value);
      break;
    case 7:
      var value = new proto.DenseParameter;
      reader.readMessage(value,proto.DenseParameter.deserializeBinaryFromReader);
      msg.setLinear9(value);
      break;
    case 8:
      var value = new proto.ActivationParameter;
      reader.readMessage(value,proto.ActivationParameter.deserializeBinaryFromReader);
      msg.setActivation10(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegressParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegressParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegressParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegressParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinear0();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLinear3();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation4();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLinear6();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation7();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLinear9();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.DenseParameter.serializeBinaryToWriter
    );
  }
  f = message.getActivation10();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ActivationParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional DenseParameter linear_0 = 1;
 * @return {?proto.DenseParameter}
 */
proto.RegressParameter.prototype.getLinear0 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 1));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setLinear0 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearLinear0 = function() {
  return this.setLinear0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasLinear0 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ActivationParameter activation_1 = 2;
 * @return {?proto.ActivationParameter}
 */
proto.RegressParameter.prototype.getActivation1 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 2));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setActivation1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearActivation1 = function() {
  return this.setActivation1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasActivation1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DenseParameter linear_3 = 3;
 * @return {?proto.DenseParameter}
 */
proto.RegressParameter.prototype.getLinear3 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 3));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setLinear3 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearLinear3 = function() {
  return this.setLinear3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasLinear3 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActivationParameter activation_4 = 4;
 * @return {?proto.ActivationParameter}
 */
proto.RegressParameter.prototype.getActivation4 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 4));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setActivation4 = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearActivation4 = function() {
  return this.setActivation4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasActivation4 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DenseParameter linear_6 = 5;
 * @return {?proto.DenseParameter}
 */
proto.RegressParameter.prototype.getLinear6 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 5));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setLinear6 = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearLinear6 = function() {
  return this.setLinear6(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasLinear6 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ActivationParameter activation_7 = 6;
 * @return {?proto.ActivationParameter}
 */
proto.RegressParameter.prototype.getActivation7 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 6));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setActivation7 = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearActivation7 = function() {
  return this.setActivation7(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasActivation7 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DenseParameter linear_9 = 7;
 * @return {?proto.DenseParameter}
 */
proto.RegressParameter.prototype.getLinear9 = function() {
  return /** @type{?proto.DenseParameter} */ (
    jspb.Message.getWrapperField(this, proto.DenseParameter, 7));
};


/**
 * @param {?proto.DenseParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setLinear9 = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearLinear9 = function() {
  return this.setLinear9(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasLinear9 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ActivationParameter activation_10 = 8;
 * @return {?proto.ActivationParameter}
 */
proto.RegressParameter.prototype.getActivation10 = function() {
  return /** @type{?proto.ActivationParameter} */ (
    jspb.Message.getWrapperField(this, proto.ActivationParameter, 8));
};


/**
 * @param {?proto.ActivationParameter|undefined} value
 * @return {!proto.RegressParameter} returns this
*/
proto.RegressParameter.prototype.setActivation10 = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RegressParameter} returns this
 */
proto.RegressParameter.prototype.clearActivation10 = function() {
  return this.setActivation10(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegressParameter.prototype.hasActivation10 = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CruiseModelParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.CruiseModelParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CruiseModelParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CruiseModelParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    laneFeatureConv: (f = msg.getLaneFeatureConv()) && proto.LaneFeatureConvParameter.toObject(includeInstance, f),
    laneFeatureMaxpool: (f = msg.getLaneFeatureMaxpool()) && proto.MaxPool1dParameter.toObject(includeInstance, f),
    laneFeatureAvgpool: (f = msg.getLaneFeatureAvgpool()) && proto.AvgPool1dParameter.toObject(includeInstance, f),
    obsFeatureFc: (f = msg.getObsFeatureFc()) && proto.ObsFeatureFCParameter.toObject(includeInstance, f),
    classify: (f = msg.getClassify()) && proto.ClassifyParameter.toObject(includeInstance, f),
    regress: (f = msg.getRegress()) && proto.RegressParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CruiseModelParameter as accepted by the `fromObject` method.
 * @record
 */
proto.CruiseModelParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.laneFeatureConv;

  /** @type {?|undefined} */
  this.laneFeatureMaxpool;

  /** @type {?|undefined} */
  this.laneFeatureAvgpool;

  /** @type {?|undefined} */
  this.obsFeatureFc;

  /** @type {?|undefined} */
  this.classify;

  /** @type {?|undefined} */
  this.regress;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.CruiseModelParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.CruiseModelParameter}
 */
proto.CruiseModelParameter.fromObject = function(obj) {
  var msg = new proto.CruiseModelParameter();
  obj.laneFeatureConv && jspb.Message.setWrapperField(
      msg, 1, proto.LaneFeatureConvParameter.fromObject(obj.laneFeatureConv));
  obj.laneFeatureMaxpool && jspb.Message.setWrapperField(
      msg, 2, proto.MaxPool1dParameter.fromObject(obj.laneFeatureMaxpool));
  obj.laneFeatureAvgpool && jspb.Message.setWrapperField(
      msg, 3, proto.AvgPool1dParameter.fromObject(obj.laneFeatureAvgpool));
  obj.obsFeatureFc && jspb.Message.setWrapperField(
      msg, 5, proto.ObsFeatureFCParameter.fromObject(obj.obsFeatureFc));
  obj.classify && jspb.Message.setWrapperField(
      msg, 6, proto.ClassifyParameter.fromObject(obj.classify));
  obj.regress && jspb.Message.setWrapperField(
      msg, 7, proto.RegressParameter.fromObject(obj.regress));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CruiseModelParameter}
 */
proto.CruiseModelParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CruiseModelParameter;
  return proto.CruiseModelParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CruiseModelParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CruiseModelParameter}
 */
proto.CruiseModelParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LaneFeatureConvParameter;
      reader.readMessage(value,proto.LaneFeatureConvParameter.deserializeBinaryFromReader);
      msg.setLaneFeatureConv(value);
      break;
    case 2:
      var value = new proto.MaxPool1dParameter;
      reader.readMessage(value,proto.MaxPool1dParameter.deserializeBinaryFromReader);
      msg.setLaneFeatureMaxpool(value);
      break;
    case 3:
      var value = new proto.AvgPool1dParameter;
      reader.readMessage(value,proto.AvgPool1dParameter.deserializeBinaryFromReader);
      msg.setLaneFeatureAvgpool(value);
      break;
    case 5:
      var value = new proto.ObsFeatureFCParameter;
      reader.readMessage(value,proto.ObsFeatureFCParameter.deserializeBinaryFromReader);
      msg.setObsFeatureFc(value);
      break;
    case 6:
      var value = new proto.ClassifyParameter;
      reader.readMessage(value,proto.ClassifyParameter.deserializeBinaryFromReader);
      msg.setClassify(value);
      break;
    case 7:
      var value = new proto.RegressParameter;
      reader.readMessage(value,proto.RegressParameter.deserializeBinaryFromReader);
      msg.setRegress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CruiseModelParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CruiseModelParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CruiseModelParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CruiseModelParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaneFeatureConv();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LaneFeatureConvParameter.serializeBinaryToWriter
    );
  }
  f = message.getLaneFeatureMaxpool();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MaxPool1dParameter.serializeBinaryToWriter
    );
  }
  f = message.getLaneFeatureAvgpool();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.AvgPool1dParameter.serializeBinaryToWriter
    );
  }
  f = message.getObsFeatureFc();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ObsFeatureFCParameter.serializeBinaryToWriter
    );
  }
  f = message.getClassify();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ClassifyParameter.serializeBinaryToWriter
    );
  }
  f = message.getRegress();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.RegressParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional LaneFeatureConvParameter lane_feature_conv = 1;
 * @return {?proto.LaneFeatureConvParameter}
 */
proto.CruiseModelParameter.prototype.getLaneFeatureConv = function() {
  return /** @type{?proto.LaneFeatureConvParameter} */ (
    jspb.Message.getWrapperField(this, proto.LaneFeatureConvParameter, 1));
};


/**
 * @param {?proto.LaneFeatureConvParameter|undefined} value
 * @return {!proto.CruiseModelParameter} returns this
*/
proto.CruiseModelParameter.prototype.setLaneFeatureConv = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CruiseModelParameter} returns this
 */
proto.CruiseModelParameter.prototype.clearLaneFeatureConv = function() {
  return this.setLaneFeatureConv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CruiseModelParameter.prototype.hasLaneFeatureConv = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MaxPool1dParameter lane_feature_maxpool = 2;
 * @return {?proto.MaxPool1dParameter}
 */
proto.CruiseModelParameter.prototype.getLaneFeatureMaxpool = function() {
  return /** @type{?proto.MaxPool1dParameter} */ (
    jspb.Message.getWrapperField(this, proto.MaxPool1dParameter, 2));
};


/**
 * @param {?proto.MaxPool1dParameter|undefined} value
 * @return {!proto.CruiseModelParameter} returns this
*/
proto.CruiseModelParameter.prototype.setLaneFeatureMaxpool = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CruiseModelParameter} returns this
 */
proto.CruiseModelParameter.prototype.clearLaneFeatureMaxpool = function() {
  return this.setLaneFeatureMaxpool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CruiseModelParameter.prototype.hasLaneFeatureMaxpool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AvgPool1dParameter lane_feature_avgpool = 3;
 * @return {?proto.AvgPool1dParameter}
 */
proto.CruiseModelParameter.prototype.getLaneFeatureAvgpool = function() {
  return /** @type{?proto.AvgPool1dParameter} */ (
    jspb.Message.getWrapperField(this, proto.AvgPool1dParameter, 3));
};


/**
 * @param {?proto.AvgPool1dParameter|undefined} value
 * @return {!proto.CruiseModelParameter} returns this
*/
proto.CruiseModelParameter.prototype.setLaneFeatureAvgpool = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CruiseModelParameter} returns this
 */
proto.CruiseModelParameter.prototype.clearLaneFeatureAvgpool = function() {
  return this.setLaneFeatureAvgpool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CruiseModelParameter.prototype.hasLaneFeatureAvgpool = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ObsFeatureFCParameter obs_feature_fc = 5;
 * @return {?proto.ObsFeatureFCParameter}
 */
proto.CruiseModelParameter.prototype.getObsFeatureFc = function() {
  return /** @type{?proto.ObsFeatureFCParameter} */ (
    jspb.Message.getWrapperField(this, proto.ObsFeatureFCParameter, 5));
};


/**
 * @param {?proto.ObsFeatureFCParameter|undefined} value
 * @return {!proto.CruiseModelParameter} returns this
*/
proto.CruiseModelParameter.prototype.setObsFeatureFc = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CruiseModelParameter} returns this
 */
proto.CruiseModelParameter.prototype.clearObsFeatureFc = function() {
  return this.setObsFeatureFc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CruiseModelParameter.prototype.hasObsFeatureFc = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ClassifyParameter classify = 6;
 * @return {?proto.ClassifyParameter}
 */
proto.CruiseModelParameter.prototype.getClassify = function() {
  return /** @type{?proto.ClassifyParameter} */ (
    jspb.Message.getWrapperField(this, proto.ClassifyParameter, 6));
};


/**
 * @param {?proto.ClassifyParameter|undefined} value
 * @return {!proto.CruiseModelParameter} returns this
*/
proto.CruiseModelParameter.prototype.setClassify = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CruiseModelParameter} returns this
 */
proto.CruiseModelParameter.prototype.clearClassify = function() {
  return this.setClassify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CruiseModelParameter.prototype.hasClassify = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RegressParameter regress = 7;
 * @return {?proto.RegressParameter}
 */
proto.CruiseModelParameter.prototype.getRegress = function() {
  return /** @type{?proto.RegressParameter} */ (
    jspb.Message.getWrapperField(this, proto.RegressParameter, 7));
};


/**
 * @param {?proto.RegressParameter|undefined} value
 * @return {!proto.CruiseModelParameter} returns this
*/
proto.CruiseModelParameter.prototype.setRegress = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CruiseModelParameter} returns this
 */
proto.CruiseModelParameter.prototype.clearRegress = function() {
  return this.setRegress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CruiseModelParameter.prototype.hasRegress = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto);
