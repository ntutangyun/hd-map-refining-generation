// source: modules/map/tools/map_datachecker/proto/collection_check_message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_map_tools_map_datachecker_proto_collection_error_code_pb = require('../../../../../modules/map/tools/map_datachecker/proto/collection_error_code_pb.js');
goog.object.extend(proto, modules_map_tools_map_datachecker_proto_collection_error_code_pb);
goog.exportSymbol('proto.apollo.hdmap.ChannelVerifyRequest', null, global);
goog.exportSymbol('proto.apollo.hdmap.ChannelVerifyResponse', null, global);
goog.exportSymbol('proto.apollo.hdmap.CmdType', null, global);
goog.exportSymbol('proto.apollo.hdmap.DataType', null, global);
goog.exportSymbol('proto.apollo.hdmap.DynamicAlignRequest', null, global);
goog.exportSymbol('proto.apollo.hdmap.DynamicAlignResponse', null, global);
goog.exportSymbol('proto.apollo.hdmap.EightRouteRequest', null, global);
goog.exportSymbol('proto.apollo.hdmap.EightRouteResponse', null, global);
goog.exportSymbol('proto.apollo.hdmap.FrameRate', null, global);
goog.exportSymbol('proto.apollo.hdmap.LoopResult', null, global);
goog.exportSymbol('proto.apollo.hdmap.LoopsVerifyRequest', null, global);
goog.exportSymbol('proto.apollo.hdmap.LoopsVerifyResponse', null, global);
goog.exportSymbol('proto.apollo.hdmap.StaticAlignRequest', null, global);
goog.exportSymbol('proto.apollo.hdmap.StaticAlignResponse', null, global);
goog.exportSymbol('proto.apollo.hdmap.TopicResult', null, global);
goog.exportSymbol('proto.apollo.hdmap.VerifyRange', null, global);
goog.exportSymbol('proto.apollo.hdmap.VerifyResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.VerifyRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.VerifyRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.VerifyRange.displayName = 'proto.apollo.hdmap.VerifyRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.LoopResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.LoopResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.LoopResult.displayName = 'proto.apollo.hdmap.LoopResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.TopicResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.TopicResult.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.TopicResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.TopicResult.displayName = 'proto.apollo.hdmap.TopicResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.FrameRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.FrameRate.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.FrameRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.FrameRate.displayName = 'proto.apollo.hdmap.FrameRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.VerifyResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.VerifyResult.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.VerifyResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.VerifyResult.displayName = 'proto.apollo.hdmap.VerifyResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.ChannelVerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.ChannelVerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.ChannelVerifyRequest.displayName = 'proto.apollo.hdmap.ChannelVerifyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.ChannelVerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.ChannelVerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.ChannelVerifyResponse.displayName = 'proto.apollo.hdmap.ChannelVerifyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.LoopsVerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.LoopsVerifyRequest.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.LoopsVerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.LoopsVerifyRequest.displayName = 'proto.apollo.hdmap.LoopsVerifyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.LoopsVerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.LoopsVerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.LoopsVerifyResponse.displayName = 'proto.apollo.hdmap.LoopsVerifyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.DynamicAlignRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.DynamicAlignRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.DynamicAlignRequest.displayName = 'proto.apollo.hdmap.DynamicAlignRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.DynamicAlignResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.DynamicAlignResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.DynamicAlignResponse.displayName = 'proto.apollo.hdmap.DynamicAlignResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.StaticAlignRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.StaticAlignRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.StaticAlignRequest.displayName = 'proto.apollo.hdmap.StaticAlignRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.StaticAlignResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.StaticAlignResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.StaticAlignResponse.displayName = 'proto.apollo.hdmap.StaticAlignResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.EightRouteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.EightRouteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.EightRouteRequest.displayName = 'proto.apollo.hdmap.EightRouteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.EightRouteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.EightRouteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.EightRouteResponse.displayName = 'proto.apollo.hdmap.EightRouteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.VerifyRange.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.VerifyRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.VerifyRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.VerifyRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    endTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VerifyRange as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.VerifyRange.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startTime;

  /** @type {?|undefined} */
  this.endTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.VerifyRange.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.VerifyRange}
 */
proto.apollo.hdmap.VerifyRange.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.VerifyRange();
  obj.startTime != null && jspb.Message.setField(msg, 1, obj.startTime);
  obj.endTime != null && jspb.Message.setField(msg, 2, obj.endTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.VerifyRange}
 */
proto.apollo.hdmap.VerifyRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.VerifyRange;
  return proto.apollo.hdmap.VerifyRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.VerifyRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.VerifyRange}
 */
proto.apollo.hdmap.VerifyRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.VerifyRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.VerifyRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.VerifyRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.VerifyRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double start_time = 1;
 * @return {number}
 */
proto.apollo.hdmap.VerifyRange.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.VerifyRange} returns this
 */
proto.apollo.hdmap.VerifyRange.prototype.setStartTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.VerifyRange} returns this
 */
proto.apollo.hdmap.VerifyRange.prototype.clearStartTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.VerifyRange.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double end_time = 2;
 * @return {number}
 */
proto.apollo.hdmap.VerifyRange.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.VerifyRange} returns this
 */
proto.apollo.hdmap.VerifyRange.prototype.setEndTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.VerifyRange} returns this
 */
proto.apollo.hdmap.VerifyRange.prototype.clearEndTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.VerifyRange.prototype.hasEndTime = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.LoopResult.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.LoopResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.LoopResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LoopResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    isReached: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    loopNum: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LoopResult as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.LoopResult.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.isReached;

  /** @type {?|undefined} */
  this.loopNum;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.LoopResult.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.LoopResult}
 */
proto.apollo.hdmap.LoopResult.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.LoopResult();
  obj.isReached != null && jspb.Message.setField(msg, 1, obj.isReached);
  obj.loopNum != null && jspb.Message.setField(msg, 2, obj.loopNum);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.LoopResult}
 */
proto.apollo.hdmap.LoopResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.LoopResult;
  return proto.apollo.hdmap.LoopResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.LoopResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.LoopResult}
 */
proto.apollo.hdmap.LoopResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReached(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLoopNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.LoopResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.LoopResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.LoopResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LoopResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * required bool is_reached = 1;
 * @return {boolean}
 */
proto.apollo.hdmap.LoopResult.prototype.getIsReached = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.hdmap.LoopResult} returns this
 */
proto.apollo.hdmap.LoopResult.prototype.setIsReached = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LoopResult} returns this
 */
proto.apollo.hdmap.LoopResult.prototype.clearIsReached = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LoopResult.prototype.hasIsReached = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double loop_num = 2;
 * @return {number}
 */
proto.apollo.hdmap.LoopResult.prototype.getLoopNum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.LoopResult} returns this
 */
proto.apollo.hdmap.LoopResult.prototype.setLoopNum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LoopResult} returns this
 */
proto.apollo.hdmap.LoopResult.prototype.clearLoopNum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LoopResult.prototype.hasLoopNum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.TopicResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.TopicResult.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.TopicResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.TopicResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.TopicResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicLackList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TopicResult as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.TopicResult.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topicLackList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.TopicResult.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.TopicResult}
 */
proto.apollo.hdmap.TopicResult.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.TopicResult();
  obj.topicLackList != null && jspb.Message.setField(msg, 1, obj.topicLackList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.TopicResult}
 */
proto.apollo.hdmap.TopicResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.TopicResult;
  return proto.apollo.hdmap.TopicResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.TopicResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.TopicResult}
 */
proto.apollo.hdmap.TopicResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopicLack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.TopicResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.TopicResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.TopicResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.TopicResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicLackList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string topic_lack = 1;
 * @return {!Array<string>}
 */
proto.apollo.hdmap.TopicResult.prototype.getTopicLackList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.hdmap.TopicResult} returns this
 */
proto.apollo.hdmap.TopicResult.prototype.setTopicLackList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.TopicResult} returns this
 */
proto.apollo.hdmap.TopicResult.prototype.addTopicLack = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.TopicResult} returns this
 */
proto.apollo.hdmap.TopicResult.prototype.clearTopicLackList = function() {
  return this.setTopicLackList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.FrameRate.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.FrameRate.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.FrameRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.FrameRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.FrameRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    expectedRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    currentRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    badRecordNameList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FrameRate as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.FrameRate.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topic;

  /** @type {?|undefined} */
  this.expectedRate;

  /** @type {?|undefined} */
  this.currentRate;

  /** @type {?|undefined} */
  this.badRecordNameList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.FrameRate.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.FrameRate}
 */
proto.apollo.hdmap.FrameRate.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.FrameRate();
  obj.topic != null && jspb.Message.setField(msg, 1, obj.topic);
  obj.expectedRate != null && jspb.Message.setField(msg, 2, obj.expectedRate);
  obj.currentRate != null && jspb.Message.setField(msg, 3, obj.currentRate);
  obj.badRecordNameList != null && jspb.Message.setField(msg, 4, obj.badRecordNameList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.FrameRate}
 */
proto.apollo.hdmap.FrameRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.FrameRate;
  return proto.apollo.hdmap.FrameRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.FrameRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.FrameRate}
 */
proto.apollo.hdmap.FrameRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExpectedRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentRate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addBadRecordName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.FrameRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.FrameRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.FrameRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.FrameRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getBadRecordNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.apollo.hdmap.FrameRate.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.setTopic = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.clearTopic = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.FrameRate.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double expected_rate = 2;
 * @return {number}
 */
proto.apollo.hdmap.FrameRate.prototype.getExpectedRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.setExpectedRate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.clearExpectedRate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.FrameRate.prototype.hasExpectedRate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double current_rate = 3;
 * @return {number}
 */
proto.apollo.hdmap.FrameRate.prototype.getCurrentRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.setCurrentRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.clearCurrentRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.FrameRate.prototype.hasCurrentRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string bad_record_name = 4;
 * @return {!Array<string>}
 */
proto.apollo.hdmap.FrameRate.prototype.getBadRecordNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.setBadRecordNameList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.addBadRecordName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.FrameRate} returns this
 */
proto.apollo.hdmap.FrameRate.prototype.clearBadRecordNameList = function() {
  return this.setBadRecordNameList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.VerifyResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.VerifyResult.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.VerifyResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.VerifyResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.VerifyResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    topics: (f = msg.getTopics()) && proto.apollo.hdmap.TopicResult.toObject(includeInstance, f),
    ratesList: jspb.Message.toObjectList(msg.getRatesList(),
    proto.apollo.hdmap.FrameRate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VerifyResult as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.VerifyResult.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topics;

  /** @type {?|undefined} */
  this.ratesList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.VerifyResult.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.VerifyResult}
 */
proto.apollo.hdmap.VerifyResult.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.VerifyResult();
  obj.topics && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.hdmap.TopicResult.fromObject(obj.topics));
  obj.ratesList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.ratesList.map(
          proto.apollo.hdmap.FrameRate.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.VerifyResult}
 */
proto.apollo.hdmap.VerifyResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.VerifyResult;
  return proto.apollo.hdmap.VerifyResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.VerifyResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.VerifyResult}
 */
proto.apollo.hdmap.VerifyResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.hdmap.TopicResult;
      reader.readMessage(value,proto.apollo.hdmap.TopicResult.deserializeBinaryFromReader);
      msg.setTopics(value);
      break;
    case 2:
      var value = new proto.apollo.hdmap.FrameRate;
      reader.readMessage(value,proto.apollo.hdmap.FrameRate.deserializeBinaryFromReader);
      msg.addRates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.VerifyResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.VerifyResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.VerifyResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.VerifyResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopics();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.hdmap.TopicResult.serializeBinaryToWriter
    );
  }
  f = message.getRatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.hdmap.FrameRate.serializeBinaryToWriter
    );
  }
};


/**
 * optional TopicResult topics = 1;
 * @return {?proto.apollo.hdmap.TopicResult}
 */
proto.apollo.hdmap.VerifyResult.prototype.getTopics = function() {
  return /** @type{?proto.apollo.hdmap.TopicResult} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.TopicResult, 1));
};


/**
 * @param {?proto.apollo.hdmap.TopicResult|undefined} value
 * @return {!proto.apollo.hdmap.VerifyResult} returns this
*/
proto.apollo.hdmap.VerifyResult.prototype.setTopics = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.VerifyResult} returns this
 */
proto.apollo.hdmap.VerifyResult.prototype.clearTopics = function() {
  return this.setTopics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.VerifyResult.prototype.hasTopics = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FrameRate rates = 2;
 * @return {!Array<!proto.apollo.hdmap.FrameRate>}
 */
proto.apollo.hdmap.VerifyResult.prototype.getRatesList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.FrameRate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.FrameRate, 2));
};


/**
 * @param {!Array<!proto.apollo.hdmap.FrameRate>} value
 * @return {!proto.apollo.hdmap.VerifyResult} returns this
*/
proto.apollo.hdmap.VerifyResult.prototype.setRatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.hdmap.FrameRate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.FrameRate}
 */
proto.apollo.hdmap.VerifyResult.prototype.addRates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.hdmap.FrameRate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.VerifyResult} returns this
 */
proto.apollo.hdmap.VerifyResult.prototype.clearRatesList = function() {
  return this.setRatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.ChannelVerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.ChannelVerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ChannelVerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    collectId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    path: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChannelVerifyRequest as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.ChannelVerifyRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cmd;

  /** @type {?|undefined} */
  this.collectId;

  /** @type {?|undefined} */
  this.path;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.ChannelVerifyRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest}
 */
proto.apollo.hdmap.ChannelVerifyRequest.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.ChannelVerifyRequest();
  obj.cmd != null && jspb.Message.setField(msg, 1, obj.cmd);
  obj.collectId != null && jspb.Message.setField(msg, 2, obj.collectId);
  obj.path != null && jspb.Message.setField(msg, 3, obj.path);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest}
 */
proto.apollo.hdmap.ChannelVerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.ChannelVerifyRequest;
  return proto.apollo.hdmap.ChannelVerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.ChannelVerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest}
 */
proto.apollo.hdmap.ChannelVerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.CmdType} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.ChannelVerifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.ChannelVerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ChannelVerifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional CmdType cmd = 1;
 * @return {!proto.apollo.hdmap.CmdType}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.getCmd = function() {
  return /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.hdmap.CmdType} value
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest} returns this
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.setCmd = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest} returns this
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.clearCmd = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string collect_id = 2;
 * @return {string}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.getCollectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest} returns this
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.setCollectId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest} returns this
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.clearCollectId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.hasCollectId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest} returns this
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.setPath = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.ChannelVerifyRequest} returns this
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.clearPath = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ChannelVerifyRequest.prototype.hasPath = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.ChannelVerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.ChannelVerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ChannelVerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    result: (f = msg.getResult()) && proto.apollo.hdmap.VerifyResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChannelVerifyResponse as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.ChannelVerifyResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.code;

  /** @type {?|undefined} */
  this.result;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.ChannelVerifyResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.ChannelVerifyResponse}
 */
proto.apollo.hdmap.ChannelVerifyResponse.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.ChannelVerifyResponse();
  obj.code != null && jspb.Message.setField(msg, 1, obj.code);
  obj.result && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.hdmap.VerifyResult.fromObject(obj.result));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.ChannelVerifyResponse}
 */
proto.apollo.hdmap.ChannelVerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.ChannelVerifyResponse;
  return proto.apollo.hdmap.ChannelVerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.ChannelVerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.ChannelVerifyResponse}
 */
proto.apollo.hdmap.ChannelVerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.apollo.hdmap.VerifyResult;
      reader.readMessage(value,proto.apollo.hdmap.VerifyResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.ChannelVerifyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.ChannelVerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ChannelVerifyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.hdmap.VerifyResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorCode code = 1;
 * @return {!proto.apollo.hdmap.ErrorCode}
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.getCode = function() {
  return /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.hdmap.ErrorCode} value
 * @return {!proto.apollo.hdmap.ChannelVerifyResponse} returns this
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.ChannelVerifyResponse} returns this
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.clearCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VerifyResult result = 2;
 * @return {?proto.apollo.hdmap.VerifyResult}
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.getResult = function() {
  return /** @type{?proto.apollo.hdmap.VerifyResult} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.VerifyResult, 2));
};


/**
 * @param {?proto.apollo.hdmap.VerifyResult|undefined} value
 * @return {!proto.apollo.hdmap.ChannelVerifyResponse} returns this
*/
proto.apollo.hdmap.ChannelVerifyResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ChannelVerifyResponse} returns this
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ChannelVerifyResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.LoopsVerifyRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.LoopsVerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.LoopsVerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LoopsVerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rangeList: jspb.Message.toObjectList(msg.getRangeList(),
    proto.apollo.hdmap.VerifyRange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LoopsVerifyRequest as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.LoopsVerifyRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cmd;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.rangeList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.LoopsVerifyRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest}
 */
proto.apollo.hdmap.LoopsVerifyRequest.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.LoopsVerifyRequest();
  obj.cmd != null && jspb.Message.setField(msg, 1, obj.cmd);
  obj.type != null && jspb.Message.setField(msg, 2, obj.type);
  obj.rangeList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.rangeList.map(
          proto.apollo.hdmap.VerifyRange.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest}
 */
proto.apollo.hdmap.LoopsVerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.LoopsVerifyRequest;
  return proto.apollo.hdmap.LoopsVerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.LoopsVerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest}
 */
proto.apollo.hdmap.LoopsVerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.CmdType} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.hdmap.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.VerifyRange;
      reader.readMessage(value,proto.apollo.hdmap.VerifyRange.deserializeBinaryFromReader);
      msg.addRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.LoopsVerifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.LoopsVerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LoopsVerifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.hdmap.DataType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.hdmap.VerifyRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional CmdType cmd = 1;
 * @return {!proto.apollo.hdmap.CmdType}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.getCmd = function() {
  return /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.hdmap.CmdType} value
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest} returns this
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.setCmd = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest} returns this
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.clearCmd = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataType type = 2;
 * @return {!proto.apollo.hdmap.DataType}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.getType = function() {
  return /** @type {!proto.apollo.hdmap.DataType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.apollo.hdmap.DataType} value
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest} returns this
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest} returns this
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated VerifyRange range = 3;
 * @return {!Array<!proto.apollo.hdmap.VerifyRange>}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.getRangeList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.VerifyRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.VerifyRange, 3));
};


/**
 * @param {!Array<!proto.apollo.hdmap.VerifyRange>} value
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest} returns this
*/
proto.apollo.hdmap.LoopsVerifyRequest.prototype.setRangeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.hdmap.VerifyRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.VerifyRange}
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.addRange = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.hdmap.VerifyRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.LoopsVerifyRequest} returns this
 */
proto.apollo.hdmap.LoopsVerifyRequest.prototype.clearRangeList = function() {
  return this.setRangeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.LoopsVerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.LoopsVerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LoopsVerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    progress: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    loopResult: (f = msg.getLoopResult()) && proto.apollo.hdmap.LoopResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LoopsVerifyResponse as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.LoopsVerifyResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.code;

  /** @type {?|undefined} */
  this.progress;

  /** @type {?|undefined} */
  this.loopResult;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.LoopsVerifyResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse}
 */
proto.apollo.hdmap.LoopsVerifyResponse.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.LoopsVerifyResponse();
  obj.code != null && jspb.Message.setField(msg, 1, obj.code);
  obj.progress != null && jspb.Message.setField(msg, 2, obj.progress);
  obj.loopResult && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.hdmap.LoopResult.fromObject(obj.loopResult));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse}
 */
proto.apollo.hdmap.LoopsVerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.LoopsVerifyResponse;
  return proto.apollo.hdmap.LoopsVerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.LoopsVerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse}
 */
proto.apollo.hdmap.LoopsVerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProgress(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.LoopResult;
      reader.readMessage(value,proto.apollo.hdmap.LoopResult.deserializeBinaryFromReader);
      msg.setLoopResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.LoopsVerifyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.LoopsVerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LoopsVerifyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLoopResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.hdmap.LoopResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorCode code = 1;
 * @return {!proto.apollo.hdmap.ErrorCode}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.getCode = function() {
  return /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.hdmap.ErrorCode} value
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse} returns this
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse} returns this
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.clearCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double progress = 2;
 * @return {number}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse} returns this
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.setProgress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse} returns this
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.clearProgress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LoopResult loop_result = 3;
 * @return {?proto.apollo.hdmap.LoopResult}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.getLoopResult = function() {
  return /** @type{?proto.apollo.hdmap.LoopResult} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.LoopResult, 3));
};


/**
 * @param {?proto.apollo.hdmap.LoopResult|undefined} value
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse} returns this
*/
proto.apollo.hdmap.LoopsVerifyResponse.prototype.setLoopResult = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.LoopsVerifyResponse} returns this
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.clearLoopResult = function() {
  return this.setLoopResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LoopsVerifyResponse.prototype.hasLoopResult = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.DynamicAlignRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.DynamicAlignRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.DynamicAlignRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.DynamicAlignRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DynamicAlignRequest as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.DynamicAlignRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cmd;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.DynamicAlignRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.DynamicAlignRequest}
 */
proto.apollo.hdmap.DynamicAlignRequest.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.DynamicAlignRequest();
  obj.cmd != null && jspb.Message.setField(msg, 1, obj.cmd);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.DynamicAlignRequest}
 */
proto.apollo.hdmap.DynamicAlignRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.DynamicAlignRequest;
  return proto.apollo.hdmap.DynamicAlignRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.DynamicAlignRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.DynamicAlignRequest}
 */
proto.apollo.hdmap.DynamicAlignRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.CmdType} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.DynamicAlignRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.DynamicAlignRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.DynamicAlignRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.DynamicAlignRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CmdType cmd = 1;
 * @return {!proto.apollo.hdmap.CmdType}
 */
proto.apollo.hdmap.DynamicAlignRequest.prototype.getCmd = function() {
  return /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.hdmap.CmdType} value
 * @return {!proto.apollo.hdmap.DynamicAlignRequest} returns this
 */
proto.apollo.hdmap.DynamicAlignRequest.prototype.setCmd = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.DynamicAlignRequest} returns this
 */
proto.apollo.hdmap.DynamicAlignRequest.prototype.clearCmd = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.DynamicAlignRequest.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.DynamicAlignResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.DynamicAlignResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.DynamicAlignResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    progress: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DynamicAlignResponse as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.DynamicAlignResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.code;

  /** @type {?|undefined} */
  this.progress;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.DynamicAlignResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.DynamicAlignResponse}
 */
proto.apollo.hdmap.DynamicAlignResponse.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.DynamicAlignResponse();
  obj.code != null && jspb.Message.setField(msg, 1, obj.code);
  obj.progress != null && jspb.Message.setField(msg, 2, obj.progress);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.DynamicAlignResponse}
 */
proto.apollo.hdmap.DynamicAlignResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.DynamicAlignResponse;
  return proto.apollo.hdmap.DynamicAlignResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.DynamicAlignResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.DynamicAlignResponse}
 */
proto.apollo.hdmap.DynamicAlignResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.DynamicAlignResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.DynamicAlignResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.DynamicAlignResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional ErrorCode code = 1;
 * @return {!proto.apollo.hdmap.ErrorCode}
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.getCode = function() {
  return /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.hdmap.ErrorCode} value
 * @return {!proto.apollo.hdmap.DynamicAlignResponse} returns this
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.DynamicAlignResponse} returns this
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.clearCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double progress = 2;
 * @return {number}
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.DynamicAlignResponse} returns this
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.setProgress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.DynamicAlignResponse} returns this
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.clearProgress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.DynamicAlignResponse.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.StaticAlignRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.StaticAlignRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.StaticAlignRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.StaticAlignRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StaticAlignRequest as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.StaticAlignRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cmd;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.StaticAlignRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.StaticAlignRequest}
 */
proto.apollo.hdmap.StaticAlignRequest.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.StaticAlignRequest();
  obj.cmd != null && jspb.Message.setField(msg, 1, obj.cmd);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.StaticAlignRequest}
 */
proto.apollo.hdmap.StaticAlignRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.StaticAlignRequest;
  return proto.apollo.hdmap.StaticAlignRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.StaticAlignRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.StaticAlignRequest}
 */
proto.apollo.hdmap.StaticAlignRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.CmdType} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.StaticAlignRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.StaticAlignRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.StaticAlignRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.StaticAlignRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CmdType cmd = 1;
 * @return {!proto.apollo.hdmap.CmdType}
 */
proto.apollo.hdmap.StaticAlignRequest.prototype.getCmd = function() {
  return /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.hdmap.CmdType} value
 * @return {!proto.apollo.hdmap.StaticAlignRequest} returns this
 */
proto.apollo.hdmap.StaticAlignRequest.prototype.setCmd = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.StaticAlignRequest} returns this
 */
proto.apollo.hdmap.StaticAlignRequest.prototype.clearCmd = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.StaticAlignRequest.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.StaticAlignResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.StaticAlignResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.StaticAlignResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    progress: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StaticAlignResponse as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.StaticAlignResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.code;

  /** @type {?|undefined} */
  this.progress;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.StaticAlignResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.StaticAlignResponse}
 */
proto.apollo.hdmap.StaticAlignResponse.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.StaticAlignResponse();
  obj.code != null && jspb.Message.setField(msg, 1, obj.code);
  obj.progress != null && jspb.Message.setField(msg, 2, obj.progress);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.StaticAlignResponse}
 */
proto.apollo.hdmap.StaticAlignResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.StaticAlignResponse;
  return proto.apollo.hdmap.StaticAlignResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.StaticAlignResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.StaticAlignResponse}
 */
proto.apollo.hdmap.StaticAlignResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.StaticAlignResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.StaticAlignResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.StaticAlignResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional ErrorCode code = 1;
 * @return {!proto.apollo.hdmap.ErrorCode}
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.getCode = function() {
  return /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.hdmap.ErrorCode} value
 * @return {!proto.apollo.hdmap.StaticAlignResponse} returns this
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.StaticAlignResponse} returns this
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.clearCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double progress = 2;
 * @return {number}
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.StaticAlignResponse} returns this
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.setProgress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.StaticAlignResponse} returns this
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.clearProgress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.StaticAlignResponse.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.EightRouteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.EightRouteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.EightRouteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.EightRouteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cmd: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EightRouteRequest as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.EightRouteRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cmd;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.EightRouteRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.EightRouteRequest}
 */
proto.apollo.hdmap.EightRouteRequest.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.EightRouteRequest();
  obj.cmd != null && jspb.Message.setField(msg, 1, obj.cmd);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.EightRouteRequest}
 */
proto.apollo.hdmap.EightRouteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.EightRouteRequest;
  return proto.apollo.hdmap.EightRouteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.EightRouteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.EightRouteRequest}
 */
proto.apollo.hdmap.EightRouteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.CmdType} */ (reader.readEnum());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.EightRouteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.EightRouteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.EightRouteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.EightRouteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CmdType cmd = 1;
 * @return {!proto.apollo.hdmap.CmdType}
 */
proto.apollo.hdmap.EightRouteRequest.prototype.getCmd = function() {
  return /** @type {!proto.apollo.hdmap.CmdType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.hdmap.CmdType} value
 * @return {!proto.apollo.hdmap.EightRouteRequest} returns this
 */
proto.apollo.hdmap.EightRouteRequest.prototype.setCmd = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.EightRouteRequest} returns this
 */
proto.apollo.hdmap.EightRouteRequest.prototype.clearCmd = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.EightRouteRequest.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.EightRouteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.EightRouteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.EightRouteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.EightRouteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    progress: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EightRouteResponse as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.EightRouteResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.code;

  /** @type {?|undefined} */
  this.progress;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.EightRouteResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.EightRouteResponse}
 */
proto.apollo.hdmap.EightRouteResponse.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.EightRouteResponse();
  obj.code != null && jspb.Message.setField(msg, 1, obj.code);
  obj.progress != null && jspb.Message.setField(msg, 2, obj.progress);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.EightRouteResponse}
 */
proto.apollo.hdmap.EightRouteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.EightRouteResponse;
  return proto.apollo.hdmap.EightRouteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.EightRouteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.EightRouteResponse}
 */
proto.apollo.hdmap.EightRouteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.hdmap.ErrorCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.EightRouteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.EightRouteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.EightRouteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.EightRouteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional ErrorCode code = 1;
 * @return {!proto.apollo.hdmap.ErrorCode}
 */
proto.apollo.hdmap.EightRouteResponse.prototype.getCode = function() {
  return /** @type {!proto.apollo.hdmap.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.hdmap.ErrorCode} value
 * @return {!proto.apollo.hdmap.EightRouteResponse} returns this
 */
proto.apollo.hdmap.EightRouteResponse.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.EightRouteResponse} returns this
 */
proto.apollo.hdmap.EightRouteResponse.prototype.clearCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.EightRouteResponse.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double progress = 2;
 * @return {number}
 */
proto.apollo.hdmap.EightRouteResponse.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.EightRouteResponse} returns this
 */
proto.apollo.hdmap.EightRouteResponse.prototype.setProgress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.EightRouteResponse} returns this
 */
proto.apollo.hdmap.EightRouteResponse.prototype.clearProgress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.EightRouteResponse.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.apollo.hdmap.CmdType = {
  START: 1,
  CHECK: 2,
  STOP: 3
};

/**
 * @enum {number}
 */
proto.apollo.hdmap.DataType = {
  MAP_MAKING: 1,
  MAP_CHECKOUT: 2
};

goog.object.extend(exports, proto.apollo.hdmap);
