// source: modules/planning/proto/reference_line_smoother_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_planning_proto_math_cos_theta_smoother_config_pb = require('../../../modules/planning/proto/math/cos_theta_smoother_config_pb.js');
goog.object.extend(proto, modules_planning_proto_math_cos_theta_smoother_config_pb);
var modules_planning_proto_math_fem_pos_deviation_smoother_config_pb = require('../../../modules/planning/proto/math/fem_pos_deviation_smoother_config_pb.js');
goog.object.extend(proto, modules_planning_proto_math_fem_pos_deviation_smoother_config_pb);
goog.exportSymbol('proto.apollo.planning.DiscretePointsSmootherConfig', null, global);
goog.exportSymbol('proto.apollo.planning.DiscretePointsSmootherConfig.SmootherconfigCase', null, global);
goog.exportSymbol('proto.apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod', null, global);
goog.exportSymbol('proto.apollo.planning.QpSplineSmootherConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ReferenceLineSmootherConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ReferenceLineSmootherConfig.SmootherconfigCase', null, global);
goog.exportSymbol('proto.apollo.planning.SpiralSmootherConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.QpSplineSmootherConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.QpSplineSmootherConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.QpSplineSmootherConfig.displayName = 'proto.apollo.planning.QpSplineSmootherConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.SpiralSmootherConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.SpiralSmootherConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.SpiralSmootherConfig.displayName = 'proto.apollo.planning.SpiralSmootherConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DiscretePointsSmootherConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.planning.DiscretePointsSmootherConfig.oneofGroups_);
};
goog.inherits(proto.apollo.planning.DiscretePointsSmootherConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DiscretePointsSmootherConfig.displayName = 'proto.apollo.planning.DiscretePointsSmootherConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ReferenceLineSmootherConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.planning.ReferenceLineSmootherConfig.oneofGroups_);
};
goog.inherits(proto.apollo.planning.ReferenceLineSmootherConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ReferenceLineSmootherConfig.displayName = 'proto.apollo.planning.ReferenceLineSmootherConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.QpSplineSmootherConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.QpSplineSmootherConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QpSplineSmootherConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    splineOrder: jspb.Message.getFieldWithDefault(msg, 1, 5),
    maxSplineLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 25.0),
    regularizationWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.1),
    secondDerivativeWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    thirdDerivativeWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 100.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of QpSplineSmootherConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.QpSplineSmootherConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.splineOrder;

  /** @type {?|undefined} */
  this.maxSplineLength;

  /** @type {?|undefined} */
  this.regularizationWeight;

  /** @type {?|undefined} */
  this.secondDerivativeWeight;

  /** @type {?|undefined} */
  this.thirdDerivativeWeight;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.QpSplineSmootherConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig}
 */
proto.apollo.planning.QpSplineSmootherConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.QpSplineSmootherConfig();
  obj.splineOrder != null && jspb.Message.setField(msg, 1, obj.splineOrder);
  obj.maxSplineLength != null && jspb.Message.setField(msg, 2, obj.maxSplineLength);
  obj.regularizationWeight != null && jspb.Message.setField(msg, 3, obj.regularizationWeight);
  obj.secondDerivativeWeight != null && jspb.Message.setField(msg, 4, obj.secondDerivativeWeight);
  obj.thirdDerivativeWeight != null && jspb.Message.setField(msg, 5, obj.thirdDerivativeWeight);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig}
 */
proto.apollo.planning.QpSplineSmootherConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.QpSplineSmootherConfig;
  return proto.apollo.planning.QpSplineSmootherConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.QpSplineSmootherConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig}
 */
proto.apollo.planning.QpSplineSmootherConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSplineOrder(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSplineLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRegularizationWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSecondDerivativeWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThirdDerivativeWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.QpSplineSmootherConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.QpSplineSmootherConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.QpSplineSmootherConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional uint32 spline_order = 1;
 * @return {number}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.getSplineOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.setSplineOrder = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.clearSplineOrder = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.hasSplineOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_spline_length = 2;
 * @return {number}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.getMaxSplineLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 25.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.setMaxSplineLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.clearMaxSplineLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.hasMaxSplineLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double regularization_weight = 3;
 * @return {number}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.getRegularizationWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.setRegularizationWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.clearRegularizationWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.hasRegularizationWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double second_derivative_weight = 4;
 * @return {number}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.getSecondDerivativeWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.setSecondDerivativeWeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.clearSecondDerivativeWeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.hasSecondDerivativeWeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double third_derivative_weight = 5;
 * @return {number}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.getThirdDerivativeWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.setThirdDerivativeWeight = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.QpSplineSmootherConfig} returns this
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.clearThirdDerivativeWeight = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.QpSplineSmootherConfig.prototype.hasThirdDerivativeWeight = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.SpiralSmootherConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.SpiralSmootherConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpiralSmootherConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxDeviation: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.1),
    piecewiseLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 10.0),
    maxIteration: jspb.Message.getFieldWithDefault(msg, 3, 1000),
    optTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0E-8),
    optAcceptableTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 1.0E-6),
    optAcceptableIteration: jspb.Message.getFieldWithDefault(msg, 6, 15),
    weightCurveLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 1.0),
    weightKappa: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 1.0),
    weightDkappa: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 100.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpiralSmootherConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.SpiralSmootherConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxDeviation;

  /** @type {?|undefined} */
  this.piecewiseLength;

  /** @type {?|undefined} */
  this.maxIteration;

  /** @type {?|undefined} */
  this.optTol;

  /** @type {?|undefined} */
  this.optAcceptableTol;

  /** @type {?|undefined} */
  this.optAcceptableIteration;

  /** @type {?|undefined} */
  this.weightCurveLength;

  /** @type {?|undefined} */
  this.weightKappa;

  /** @type {?|undefined} */
  this.weightDkappa;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.SpiralSmootherConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.SpiralSmootherConfig}
 */
proto.apollo.planning.SpiralSmootherConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.SpiralSmootherConfig();
  obj.maxDeviation != null && jspb.Message.setField(msg, 1, obj.maxDeviation);
  obj.piecewiseLength != null && jspb.Message.setField(msg, 2, obj.piecewiseLength);
  obj.maxIteration != null && jspb.Message.setField(msg, 3, obj.maxIteration);
  obj.optTol != null && jspb.Message.setField(msg, 4, obj.optTol);
  obj.optAcceptableTol != null && jspb.Message.setField(msg, 5, obj.optAcceptableTol);
  obj.optAcceptableIteration != null && jspb.Message.setField(msg, 6, obj.optAcceptableIteration);
  obj.weightCurveLength != null && jspb.Message.setField(msg, 7, obj.weightCurveLength);
  obj.weightKappa != null && jspb.Message.setField(msg, 8, obj.weightKappa);
  obj.weightDkappa != null && jspb.Message.setField(msg, 9, obj.weightDkappa);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.SpiralSmootherConfig}
 */
proto.apollo.planning.SpiralSmootherConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.SpiralSmootherConfig;
  return proto.apollo.planning.SpiralSmootherConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.SpiralSmootherConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.SpiralSmootherConfig}
 */
proto.apollo.planning.SpiralSmootherConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDeviation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPiecewiseLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxIteration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOptTol(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOptAcceptableTol(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptAcceptableIteration(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightCurveLength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightKappa(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightDkappa(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.SpiralSmootherConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.SpiralSmootherConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpiralSmootherConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional double max_deviation = 1;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getMaxDeviation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setMaxDeviation = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearMaxDeviation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasMaxDeviation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double piecewise_length = 2;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getPiecewiseLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setPiecewiseLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearPiecewiseLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasPiecewiseLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 max_iteration = 3;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getMaxIteration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1000));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setMaxIteration = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearMaxIteration = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasMaxIteration = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double opt_tol = 4;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getOptTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0E-8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setOptTol = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearOptTol = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasOptTol = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double opt_acceptable_tol = 5;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getOptAcceptableTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 1.0E-6));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setOptAcceptableTol = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearOptAcceptableTol = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasOptAcceptableTol = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 opt_acceptable_iteration = 6;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getOptAcceptableIteration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 15));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setOptAcceptableIteration = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearOptAcceptableIteration = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasOptAcceptableIteration = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double weight_curve_length = 7;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getWeightCurveLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setWeightCurveLength = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearWeightCurveLength = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasWeightCurveLength = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double weight_kappa = 8;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getWeightKappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setWeightKappa = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearWeightKappa = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasWeightKappa = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double weight_dkappa = 9;
 * @return {number}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.getWeightDkappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.setWeightDkappa = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpiralSmootherConfig} returns this
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.clearWeightDkappa = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpiralSmootherConfig.prototype.hasWeightDkappa = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.DiscretePointsSmootherConfig.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.SmootherconfigCase = {
  SMOOTHERCONFIG_NOT_SET: 0,
  COS_THETA_SMOOTHING: 4,
  FEM_POS_DEVIATION_SMOOTHING: 5
};

/**
 * @return {proto.apollo.planning.DiscretePointsSmootherConfig.SmootherconfigCase}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.getSmootherconfigCase = function() {
  return /** @type {proto.apollo.planning.DiscretePointsSmootherConfig.SmootherconfigCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.DiscretePointsSmootherConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DiscretePointsSmootherConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DiscretePointsSmootherConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DiscretePointsSmootherConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    smoothingMethod: jspb.Message.getFieldWithDefault(msg, 3, 2),
    cosThetaSmoothing: (f = msg.getCosThetaSmoothing()) && modules_planning_proto_math_cos_theta_smoother_config_pb.CosThetaSmootherConfig.toObject(includeInstance, f),
    femPosDeviationSmoothing: (f = msg.getFemPosDeviationSmoothing()) && modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DiscretePointsSmootherConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DiscretePointsSmootherConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.smoothingMethod;

  /** @type {?|undefined} */
  this.cosThetaSmoothing;

  /** @type {?|undefined} */
  this.femPosDeviationSmoothing;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DiscretePointsSmootherConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DiscretePointsSmootherConfig();
  obj.smoothingMethod != null && jspb.Message.setField(msg, 3, obj.smoothingMethod);
  obj.cosThetaSmoothing && jspb.Message.setWrapperField(
      msg, 4, modules_planning_proto_math_cos_theta_smoother_config_pb.CosThetaSmootherConfig.fromObject(obj.cosThetaSmoothing));
  obj.femPosDeviationSmoothing && jspb.Message.setWrapperField(
      msg, 5, modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.fromObject(obj.femPosDeviationSmoothing));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DiscretePointsSmootherConfig;
  return proto.apollo.planning.DiscretePointsSmootherConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DiscretePointsSmootherConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!proto.apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod} */ (reader.readEnum());
      msg.setSmoothingMethod(value);
      break;
    case 4:
      var value = new modules_planning_proto_math_cos_theta_smoother_config_pb.CosThetaSmootherConfig;
      reader.readMessage(value,modules_planning_proto_math_cos_theta_smoother_config_pb.CosThetaSmootherConfig.deserializeBinaryFromReader);
      msg.setCosThetaSmoothing(value);
      break;
    case 5:
      var value = new modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig;
      reader.readMessage(value,modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.deserializeBinaryFromReader);
      msg.setFemPosDeviationSmoothing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DiscretePointsSmootherConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DiscretePointsSmootherConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DiscretePointsSmootherConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCosThetaSmoothing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_planning_proto_math_cos_theta_smoother_config_pb.CosThetaSmootherConfig.serializeBinaryToWriter
    );
  }
  f = message.getFemPosDeviationSmoothing();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod = {
  NOT_DEFINED: 0,
  COS_THETA_SMOOTHING: 1,
  FEM_POS_DEVIATION_SMOOTHING: 2
};

/**
 * optional SmoothingMethod smoothing_method = 3;
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.getSmoothingMethod = function() {
  return /** @type {!proto.apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod} */ (jspb.Message.getFieldWithDefault(this, 3, 2));
};


/**
 * @param {!proto.apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod} value
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig} returns this
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.setSmoothingMethod = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig} returns this
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.clearSmoothingMethod = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.hasSmoothingMethod = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CosThetaSmootherConfig cos_theta_smoothing = 4;
 * @return {?proto.apollo.planning.CosThetaSmootherConfig}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.getCosThetaSmoothing = function() {
  return /** @type{?proto.apollo.planning.CosThetaSmootherConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_math_cos_theta_smoother_config_pb.CosThetaSmootherConfig, 4));
};


/**
 * @param {?proto.apollo.planning.CosThetaSmootherConfig|undefined} value
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig} returns this
*/
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.setCosThetaSmoothing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.DiscretePointsSmootherConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig} returns this
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.clearCosThetaSmoothing = function() {
  return this.setCosThetaSmoothing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.hasCosThetaSmoothing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
 * @return {?proto.apollo.planning.FemPosDeviationSmootherConfig}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.getFemPosDeviationSmoothing = function() {
  return /** @type{?proto.apollo.planning.FemPosDeviationSmootherConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_math_fem_pos_deviation_smoother_config_pb.FemPosDeviationSmootherConfig, 5));
};


/**
 * @param {?proto.apollo.planning.FemPosDeviationSmootherConfig|undefined} value
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig} returns this
*/
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.setFemPosDeviationSmoothing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.planning.DiscretePointsSmootherConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DiscretePointsSmootherConfig} returns this
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.clearFemPosDeviationSmoothing = function() {
  return this.setFemPosDeviationSmoothing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DiscretePointsSmootherConfig.prototype.hasFemPosDeviationSmoothing = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.ReferenceLineSmootherConfig.oneofGroups_ = [[20,21,22]];

/**
 * @enum {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.SmootherconfigCase = {
  SMOOTHERCONFIG_NOT_SET: 0,
  QP_SPLINE: 20,
  SPIRAL: 21,
  DISCRETE_POINTS: 22
};

/**
 * @return {proto.apollo.planning.ReferenceLineSmootherConfig.SmootherconfigCase}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getSmootherconfigCase = function() {
  return /** @type {proto.apollo.planning.ReferenceLineSmootherConfig.SmootherconfigCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.ReferenceLineSmootherConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ReferenceLineSmootherConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ReferenceLineSmootherConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReferenceLineSmootherConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxConstraintInterval: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 5.0),
    longitudinalBoundaryBound: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    maxLateralBoundaryBound: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.5),
    minLateralBoundaryBound: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.2),
    numOfTotalPoints: jspb.Message.getFieldWithDefault(msg, 5, 500),
    curbShift: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.2),
    lateralBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.2),
    resolution: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.02),
    qpSpline: (f = msg.getQpSpline()) && proto.apollo.planning.QpSplineSmootherConfig.toObject(includeInstance, f),
    spiral: (f = msg.getSpiral()) && proto.apollo.planning.SpiralSmootherConfig.toObject(includeInstance, f),
    discretePoints: (f = msg.getDiscretePoints()) && proto.apollo.planning.DiscretePointsSmootherConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ReferenceLineSmootherConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ReferenceLineSmootherConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxConstraintInterval;

  /** @type {?|undefined} */
  this.longitudinalBoundaryBound;

  /** @type {?|undefined} */
  this.maxLateralBoundaryBound;

  /** @type {?|undefined} */
  this.minLateralBoundaryBound;

  /** @type {?|undefined} */
  this.numOfTotalPoints;

  /** @type {?|undefined} */
  this.curbShift;

  /** @type {?|undefined} */
  this.lateralBuffer;

  /** @type {?|undefined} */
  this.resolution;

  /** @type {?|undefined} */
  this.qpSpline;

  /** @type {?|undefined} */
  this.spiral;

  /** @type {?|undefined} */
  this.discretePoints;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ReferenceLineSmootherConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ReferenceLineSmootherConfig();
  obj.maxConstraintInterval != null && jspb.Message.setField(msg, 1, obj.maxConstraintInterval);
  obj.longitudinalBoundaryBound != null && jspb.Message.setField(msg, 2, obj.longitudinalBoundaryBound);
  obj.maxLateralBoundaryBound != null && jspb.Message.setField(msg, 3, obj.maxLateralBoundaryBound);
  obj.minLateralBoundaryBound != null && jspb.Message.setField(msg, 4, obj.minLateralBoundaryBound);
  obj.numOfTotalPoints != null && jspb.Message.setField(msg, 5, obj.numOfTotalPoints);
  obj.curbShift != null && jspb.Message.setField(msg, 6, obj.curbShift);
  obj.lateralBuffer != null && jspb.Message.setField(msg, 7, obj.lateralBuffer);
  obj.resolution != null && jspb.Message.setField(msg, 8, obj.resolution);
  obj.qpSpline && jspb.Message.setWrapperField(
      msg, 20, proto.apollo.planning.QpSplineSmootherConfig.fromObject(obj.qpSpline));
  obj.spiral && jspb.Message.setWrapperField(
      msg, 21, proto.apollo.planning.SpiralSmootherConfig.fromObject(obj.spiral));
  obj.discretePoints && jspb.Message.setWrapperField(
      msg, 22, proto.apollo.planning.DiscretePointsSmootherConfig.fromObject(obj.discretePoints));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ReferenceLineSmootherConfig;
  return proto.apollo.planning.ReferenceLineSmootherConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ReferenceLineSmootherConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxConstraintInterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudinalBoundaryBound(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxLateralBoundaryBound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinLateralBoundaryBound(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOfTotalPoints(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurbShift(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralBuffer(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setResolution(value);
      break;
    case 20:
      var value = new proto.apollo.planning.QpSplineSmootherConfig;
      reader.readMessage(value,proto.apollo.planning.QpSplineSmootherConfig.deserializeBinaryFromReader);
      msg.setQpSpline(value);
      break;
    case 21:
      var value = new proto.apollo.planning.SpiralSmootherConfig;
      reader.readMessage(value,proto.apollo.planning.SpiralSmootherConfig.deserializeBinaryFromReader);
      msg.setSpiral(value);
      break;
    case 22:
      var value = new proto.apollo.planning.DiscretePointsSmootherConfig;
      reader.readMessage(value,proto.apollo.planning.DiscretePointsSmootherConfig.deserializeBinaryFromReader);
      msg.setDiscretePoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ReferenceLineSmootherConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ReferenceLineSmootherConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ReferenceLineSmootherConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getQpSpline();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.apollo.planning.QpSplineSmootherConfig.serializeBinaryToWriter
    );
  }
  f = message.getSpiral();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.apollo.planning.SpiralSmootherConfig.serializeBinaryToWriter
    );
  }
  f = message.getDiscretePoints();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.apollo.planning.DiscretePointsSmootherConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional double max_constraint_interval = 1;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getMaxConstraintInterval = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setMaxConstraintInterval = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearMaxConstraintInterval = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasMaxConstraintInterval = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double longitudinal_boundary_bound = 2;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getLongitudinalBoundaryBound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setLongitudinalBoundaryBound = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearLongitudinalBoundaryBound = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasLongitudinalBoundaryBound = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_lateral_boundary_bound = 3;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getMaxLateralBoundaryBound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setMaxLateralBoundaryBound = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearMaxLateralBoundaryBound = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasMaxLateralBoundaryBound = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double min_lateral_boundary_bound = 4;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getMinLateralBoundaryBound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setMinLateralBoundaryBound = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearMinLateralBoundaryBound = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasMinLateralBoundaryBound = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 num_of_total_points = 5;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getNumOfTotalPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 500));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setNumOfTotalPoints = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearNumOfTotalPoints = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasNumOfTotalPoints = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double curb_shift = 6;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getCurbShift = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setCurbShift = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearCurbShift = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasCurbShift = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double lateral_buffer = 7;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getLateralBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setLateralBuffer = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearLateralBuffer = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasLateralBuffer = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double resolution = 8;
 * @return {number}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.02));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setResolution = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearResolution = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional QpSplineSmootherConfig qp_spline = 20;
 * @return {?proto.apollo.planning.QpSplineSmootherConfig}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getQpSpline = function() {
  return /** @type{?proto.apollo.planning.QpSplineSmootherConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.QpSplineSmootherConfig, 20));
};


/**
 * @param {?proto.apollo.planning.QpSplineSmootherConfig|undefined} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
*/
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setQpSpline = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.apollo.planning.ReferenceLineSmootherConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearQpSpline = function() {
  return this.setQpSpline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasQpSpline = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional SpiralSmootherConfig spiral = 21;
 * @return {?proto.apollo.planning.SpiralSmootherConfig}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getSpiral = function() {
  return /** @type{?proto.apollo.planning.SpiralSmootherConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.SpiralSmootherConfig, 21));
};


/**
 * @param {?proto.apollo.planning.SpiralSmootherConfig|undefined} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
*/
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setSpiral = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.apollo.planning.ReferenceLineSmootherConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearSpiral = function() {
  return this.setSpiral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasSpiral = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional DiscretePointsSmootherConfig discrete_points = 22;
 * @return {?proto.apollo.planning.DiscretePointsSmootherConfig}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.getDiscretePoints = function() {
  return /** @type{?proto.apollo.planning.DiscretePointsSmootherConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DiscretePointsSmootherConfig, 22));
};


/**
 * @param {?proto.apollo.planning.DiscretePointsSmootherConfig|undefined} value
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
*/
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.setDiscretePoints = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.apollo.planning.ReferenceLineSmootherConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ReferenceLineSmootherConfig} returns this
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.clearDiscretePoints = function() {
  return this.setDiscretePoints(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ReferenceLineSmootherConfig.prototype.hasDiscretePoints = function() {
  return jspb.Message.getField(this, 22) != null;
};


goog.object.extend(exports, proto.apollo.planning);
