// source: modules/perception/onboard/proto/fusion_camera_detection_component.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.onboard.FusionCameraDetection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.onboard.FusionCameraDetection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.onboard.FusionCameraDetection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.onboard.FusionCameraDetection.displayName = 'proto.apollo.perception.onboard.FusionCameraDetection';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.onboard.FusionCameraDetection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.onboard.FusionCameraDetection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.FusionCameraDetection.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraNames: jspb.Message.getFieldWithDefault(msg, 1, "front_6mm,front_12mm"),
    inputCameraChannelNames: jspb.Message.getFieldWithDefault(msg, 2, "/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow"),
    timestampOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    cameraObstaclePerceptionConfDir: jspb.Message.getFieldWithDefault(msg, 4, "conf/perception/camera"),
    cameraObstaclePerceptionConfFile: jspb.Message.getFieldWithDefault(msg, 5, "obstacle.pt"),
    frameCapacity: jspb.Message.getFieldWithDefault(msg, 6, 20),
    imageChannelNum: jspb.Message.getFieldWithDefault(msg, 7, 3),
    enableUndistortion: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    enableVisualization: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    outputObstaclesChannelName: jspb.Message.getFieldWithDefault(msg, 10, "/perception/obstacles"),
    cameraPerceptionVizMessageChannelName: jspb.Message.getFieldWithDefault(msg, 11, "/perception/inner/camera_viz_msg"),
    prefusedChannelName: jspb.Message.getFieldWithDefault(msg, 12, "/perception/inner/PrefusedObjects"),
    defaultCameraPitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    defaultCameraHeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 1.5),
    laneCalibrationWorkingSensorName: jspb.Message.getFieldWithDefault(msg, 15, "front_6mm"),
    calibratorMethod: jspb.Message.getFieldWithDefault(msg, 16, "LaneLineCalibrator"),
    calibServiceName: jspb.Message.getFieldWithDefault(msg, 17, "OnlineCalibrationService"),
    runCalibService: jspb.Message.getBooleanFieldWithDefault(msg, 18, true),
    outputCameraDebugMsg: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    cameraDebugChannelName: jspb.Message.getFieldWithDefault(msg, 20, "/perception/camera_debug"),
    tsDiff: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.1),
    outputFinalObstacles: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    visualDebugFolder: jspb.Message.getFieldWithDefault(msg, 23, "/apollo/debug_output"),
    visualCamera: jspb.Message.getFieldWithDefault(msg, 24, "front_6mm"),
    writeVisualImg: jspb.Message.getBooleanFieldWithDefault(msg, 25, false),
    minLanelineLengthForCipv: jspb.Message.getFloatingPointFieldWithDefault(msg, 26, 2.0),
    averageLaneWidthInMeter: jspb.Message.getFloatingPointFieldWithDefault(msg, 27, 3.7),
    maxVehicleWidthInMeter: jspb.Message.getFloatingPointFieldWithDefault(msg, 28, 2.5),
    averageFrameRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 29, 0.05),
    imageBasedCipv: jspb.Message.getBooleanFieldWithDefault(msg, 30, false),
    debugLevel: jspb.Message.getFieldWithDefault(msg, 31, 0),
    enableCipv: jspb.Message.getBooleanFieldWithDefault(msg, 32, false),
    cipv: jspb.Message.getFieldWithDefault(msg, 33, "Cipv")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FusionCameraDetection as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.onboard.FusionCameraDetection.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cameraNames;

  /** @type {?|undefined} */
  this.inputCameraChannelNames;

  /** @type {?|undefined} */
  this.timestampOffset;

  /** @type {?|undefined} */
  this.cameraObstaclePerceptionConfDir;

  /** @type {?|undefined} */
  this.cameraObstaclePerceptionConfFile;

  /** @type {?|undefined} */
  this.frameCapacity;

  /** @type {?|undefined} */
  this.imageChannelNum;

  /** @type {?|undefined} */
  this.enableUndistortion;

  /** @type {?|undefined} */
  this.enableVisualization;

  /** @type {?|undefined} */
  this.outputObstaclesChannelName;

  /** @type {?|undefined} */
  this.cameraPerceptionVizMessageChannelName;

  /** @type {?|undefined} */
  this.prefusedChannelName;

  /** @type {?|undefined} */
  this.defaultCameraPitch;

  /** @type {?|undefined} */
  this.defaultCameraHeight;

  /** @type {?|undefined} */
  this.laneCalibrationWorkingSensorName;

  /** @type {?|undefined} */
  this.calibratorMethod;

  /** @type {?|undefined} */
  this.calibServiceName;

  /** @type {?|undefined} */
  this.runCalibService;

  /** @type {?|undefined} */
  this.outputCameraDebugMsg;

  /** @type {?|undefined} */
  this.cameraDebugChannelName;

  /** @type {?|undefined} */
  this.tsDiff;

  /** @type {?|undefined} */
  this.outputFinalObstacles;

  /** @type {?|undefined} */
  this.visualDebugFolder;

  /** @type {?|undefined} */
  this.visualCamera;

  /** @type {?|undefined} */
  this.writeVisualImg;

  /** @type {?|undefined} */
  this.minLanelineLengthForCipv;

  /** @type {?|undefined} */
  this.averageLaneWidthInMeter;

  /** @type {?|undefined} */
  this.maxVehicleWidthInMeter;

  /** @type {?|undefined} */
  this.averageFrameRate;

  /** @type {?|undefined} */
  this.imageBasedCipv;

  /** @type {?|undefined} */
  this.debugLevel;

  /** @type {?|undefined} */
  this.enableCipv;

  /** @type {?|undefined} */
  this.cipv;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.onboard.FusionCameraDetection.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection}
 */
proto.apollo.perception.onboard.FusionCameraDetection.fromObject = function(obj) {
  var msg = new proto.apollo.perception.onboard.FusionCameraDetection();
  obj.cameraNames != null && jspb.Message.setField(msg, 1, obj.cameraNames);
  obj.inputCameraChannelNames != null && jspb.Message.setField(msg, 2, obj.inputCameraChannelNames);
  obj.timestampOffset != null && jspb.Message.setField(msg, 3, obj.timestampOffset);
  obj.cameraObstaclePerceptionConfDir != null && jspb.Message.setField(msg, 4, obj.cameraObstaclePerceptionConfDir);
  obj.cameraObstaclePerceptionConfFile != null && jspb.Message.setField(msg, 5, obj.cameraObstaclePerceptionConfFile);
  obj.frameCapacity != null && jspb.Message.setField(msg, 6, obj.frameCapacity);
  obj.imageChannelNum != null && jspb.Message.setField(msg, 7, obj.imageChannelNum);
  obj.enableUndistortion != null && jspb.Message.setField(msg, 8, obj.enableUndistortion);
  obj.enableVisualization != null && jspb.Message.setField(msg, 9, obj.enableVisualization);
  obj.outputObstaclesChannelName != null && jspb.Message.setField(msg, 10, obj.outputObstaclesChannelName);
  obj.cameraPerceptionVizMessageChannelName != null && jspb.Message.setField(msg, 11, obj.cameraPerceptionVizMessageChannelName);
  obj.prefusedChannelName != null && jspb.Message.setField(msg, 12, obj.prefusedChannelName);
  obj.defaultCameraPitch != null && jspb.Message.setField(msg, 13, obj.defaultCameraPitch);
  obj.defaultCameraHeight != null && jspb.Message.setField(msg, 14, obj.defaultCameraHeight);
  obj.laneCalibrationWorkingSensorName != null && jspb.Message.setField(msg, 15, obj.laneCalibrationWorkingSensorName);
  obj.calibratorMethod != null && jspb.Message.setField(msg, 16, obj.calibratorMethod);
  obj.calibServiceName != null && jspb.Message.setField(msg, 17, obj.calibServiceName);
  obj.runCalibService != null && jspb.Message.setField(msg, 18, obj.runCalibService);
  obj.outputCameraDebugMsg != null && jspb.Message.setField(msg, 19, obj.outputCameraDebugMsg);
  obj.cameraDebugChannelName != null && jspb.Message.setField(msg, 20, obj.cameraDebugChannelName);
  obj.tsDiff != null && jspb.Message.setField(msg, 21, obj.tsDiff);
  obj.outputFinalObstacles != null && jspb.Message.setField(msg, 22, obj.outputFinalObstacles);
  obj.visualDebugFolder != null && jspb.Message.setField(msg, 23, obj.visualDebugFolder);
  obj.visualCamera != null && jspb.Message.setField(msg, 24, obj.visualCamera);
  obj.writeVisualImg != null && jspb.Message.setField(msg, 25, obj.writeVisualImg);
  obj.minLanelineLengthForCipv != null && jspb.Message.setField(msg, 26, obj.minLanelineLengthForCipv);
  obj.averageLaneWidthInMeter != null && jspb.Message.setField(msg, 27, obj.averageLaneWidthInMeter);
  obj.maxVehicleWidthInMeter != null && jspb.Message.setField(msg, 28, obj.maxVehicleWidthInMeter);
  obj.averageFrameRate != null && jspb.Message.setField(msg, 29, obj.averageFrameRate);
  obj.imageBasedCipv != null && jspb.Message.setField(msg, 30, obj.imageBasedCipv);
  obj.debugLevel != null && jspb.Message.setField(msg, 31, obj.debugLevel);
  obj.enableCipv != null && jspb.Message.setField(msg, 32, obj.enableCipv);
  obj.cipv != null && jspb.Message.setField(msg, 33, obj.cipv);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection}
 */
proto.apollo.perception.onboard.FusionCameraDetection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.onboard.FusionCameraDetection;
  return proto.apollo.perception.onboard.FusionCameraDetection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.onboard.FusionCameraDetection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection}
 */
proto.apollo.perception.onboard.FusionCameraDetection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraNames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputCameraChannelNames(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampOffset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraObstaclePerceptionConfDir(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraObstaclePerceptionConfFile(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameCapacity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageChannelNum(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableUndistortion(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableVisualization(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputObstaclesChannelName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraPerceptionVizMessageChannelName(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefusedChannelName(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultCameraPitch(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultCameraHeight(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneCalibrationWorkingSensorName(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibratorMethod(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibServiceName(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunCalibService(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputCameraDebugMsg(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraDebugChannelName(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTsDiff(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputFinalObstacles(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisualDebugFolder(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisualCamera(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWriteVisualImg(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinLanelineLengthForCipv(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAverageLaneWidthInMeter(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxVehicleWidthInMeter(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAverageFrameRate(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImageBasedCipv(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDebugLevel(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableCipv(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setCipv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.onboard.FusionCameraDetection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.onboard.FusionCameraDetection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.FusionCameraDetection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeString(
      23,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeString(
      24,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeDouble(
      28,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeBool(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeBool(
      32,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeString(
      33,
      f
    );
  }
};


/**
 * optional string camera_names = 1;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCameraNames = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "front_6mm,front_12mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCameraNames = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCameraNames = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCameraNames = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string input_camera_channel_names = 2;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getInputCameraChannelNames = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setInputCameraChannelNames = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearInputCameraChannelNames = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasInputCameraChannelNames = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double timestamp_offset = 3;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getTimestampOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setTimestampOffset = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearTimestampOffset = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasTimestampOffset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string camera_obstacle_perception_conf_dir = 4;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCameraObstaclePerceptionConfDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "conf/perception/camera"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCameraObstaclePerceptionConfDir = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCameraObstaclePerceptionConfDir = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCameraObstaclePerceptionConfDir = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string camera_obstacle_perception_conf_file = 5;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCameraObstaclePerceptionConfFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "obstacle.pt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCameraObstaclePerceptionConfFile = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCameraObstaclePerceptionConfFile = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCameraObstaclePerceptionConfFile = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 frame_capacity = 6;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getFrameCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 20));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setFrameCapacity = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearFrameCapacity = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasFrameCapacity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 image_channel_num = 7;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getImageChannelNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setImageChannelNum = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearImageChannelNum = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasImageChannelNum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool enable_undistortion = 8;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getEnableUndistortion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setEnableUndistortion = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearEnableUndistortion = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasEnableUndistortion = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool enable_visualization = 9;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getEnableVisualization = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setEnableVisualization = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearEnableVisualization = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasEnableVisualization = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string output_obstacles_channel_name = 10;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getOutputObstaclesChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "/perception/obstacles"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setOutputObstaclesChannelName = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearOutputObstaclesChannelName = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasOutputObstaclesChannelName = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string camera_perception_viz_message_channel_name = 11;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCameraPerceptionVizMessageChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "/perception/inner/camera_viz_msg"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCameraPerceptionVizMessageChannelName = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCameraPerceptionVizMessageChannelName = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCameraPerceptionVizMessageChannelName = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string prefused_channel_name = 12;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getPrefusedChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "/perception/inner/PrefusedObjects"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setPrefusedChannelName = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearPrefusedChannelName = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasPrefusedChannelName = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double default_camera_pitch = 13;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getDefaultCameraPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setDefaultCameraPitch = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearDefaultCameraPitch = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasDefaultCameraPitch = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double default_camera_height = 14;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getDefaultCameraHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setDefaultCameraHeight = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearDefaultCameraHeight = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasDefaultCameraHeight = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string lane_calibration_working_sensor_name = 15;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getLaneCalibrationWorkingSensorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, "front_6mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setLaneCalibrationWorkingSensorName = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearLaneCalibrationWorkingSensorName = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasLaneCalibrationWorkingSensorName = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string calibrator_method = 16;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCalibratorMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, "LaneLineCalibrator"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCalibratorMethod = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCalibratorMethod = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCalibratorMethod = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string calib_service_name = 17;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCalibServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, "OnlineCalibrationService"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCalibServiceName = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCalibServiceName = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCalibServiceName = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool run_calib_service = 18;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getRunCalibService = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setRunCalibService = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearRunCalibService = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasRunCalibService = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool output_camera_debug_msg = 19;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getOutputCameraDebugMsg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setOutputCameraDebugMsg = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearOutputCameraDebugMsg = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasOutputCameraDebugMsg = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string camera_debug_channel_name = 20;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCameraDebugChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, "/perception/camera_debug"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCameraDebugChannelName = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCameraDebugChannelName = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCameraDebugChannelName = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double ts_diff = 21;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getTsDiff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setTsDiff = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearTsDiff = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasTsDiff = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool output_final_obstacles = 22;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getOutputFinalObstacles = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setOutputFinalObstacles = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearOutputFinalObstacles = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasOutputFinalObstacles = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string visual_debug_folder = 23;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getVisualDebugFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, "/apollo/debug_output"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setVisualDebugFolder = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearVisualDebugFolder = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasVisualDebugFolder = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional string visual_camera = 24;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getVisualCamera = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, "front_6mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setVisualCamera = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearVisualCamera = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasVisualCamera = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional bool write_visual_img = 25;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getWriteVisualImg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setWriteVisualImg = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearWriteVisualImg = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasWriteVisualImg = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional double min_laneline_length_for_cipv = 26;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getMinLanelineLengthForCipv = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setMinLanelineLengthForCipv = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearMinLanelineLengthForCipv = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasMinLanelineLengthForCipv = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional double average_lane_width_in_meter = 27;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getAverageLaneWidthInMeter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 3.7));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setAverageLaneWidthInMeter = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearAverageLaneWidthInMeter = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasAverageLaneWidthInMeter = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional double max_vehicle_width_in_meter = 28;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getMaxVehicleWidthInMeter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 2.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setMaxVehicleWidthInMeter = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearMaxVehicleWidthInMeter = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasMaxVehicleWidthInMeter = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional double average_frame_rate = 29;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getAverageFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setAverageFrameRate = function(value) {
  return jspb.Message.setField(this, 29, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearAverageFrameRate = function() {
  return jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasAverageFrameRate = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional bool image_based_cipv = 30;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getImageBasedCipv = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 30, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setImageBasedCipv = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearImageBasedCipv = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasImageBasedCipv = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional int32 debug_level = 31;
 * @return {number}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getDebugLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setDebugLevel = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearDebugLevel = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasDebugLevel = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional bool enable_cipv = 32;
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getEnableCipv = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 32, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setEnableCipv = function(value) {
  return jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearEnableCipv = function() {
  return jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasEnableCipv = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional string cipv = 33;
 * @return {string}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.getCipv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, "Cipv"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.setCipv = function(value) {
  return jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.FusionCameraDetection} returns this
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.clearCipv = function() {
  return jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.FusionCameraDetection.prototype.hasCipv = function() {
  return jspb.Message.getField(this, 33) != null;
};


goog.object.extend(exports, proto.apollo.perception.onboard);
