// source: modules/drivers/canbus/proto/can_card_parameter.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.drivers.canbus.CANCardParameter', null, global);
goog.exportSymbol('proto.apollo.drivers.canbus.CANCardParameter.CANCardBrand', null, global);
goog.exportSymbol('proto.apollo.drivers.canbus.CANCardParameter.CANCardType', null, global);
goog.exportSymbol('proto.apollo.drivers.canbus.CANCardParameter.CANChannelId', null, global);
goog.exportSymbol('proto.apollo.drivers.canbus.CANCardParameter.CANInterface', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.canbus.CANCardParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.canbus.CANCardParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.canbus.CANCardParameter.displayName = 'proto.apollo.drivers.canbus.CANCardParameter';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.canbus.CANCardParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.canbus.CANCardParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.canbus.CANCardParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    brand: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    channelId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    pb_interface: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    numPorts: jspb.Message.getFieldWithDefault(msg, 5, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CANCardParameter as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.canbus.CANCardParameter.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.brand;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.channelId;

  /** @type {?|undefined} */
  this.pb_interface;

  /** @type {?|undefined} */
  this.numPorts;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.canbus.CANCardParameter.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter}
 */
proto.apollo.drivers.canbus.CANCardParameter.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.canbus.CANCardParameter();
  obj.brand != null && jspb.Message.setField(msg, 1, obj.brand);
  obj.type != null && jspb.Message.setField(msg, 2, obj.type);
  obj.channelId != null && jspb.Message.setField(msg, 3, obj.channelId);
  obj.pb_interface != null && jspb.Message.setField(msg, 4, obj.pb_interface);
  obj.numPorts != null && jspb.Message.setField(msg, 5, obj.numPorts);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter}
 */
proto.apollo.drivers.canbus.CANCardParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.canbus.CANCardParameter;
  return proto.apollo.drivers.canbus.CANCardParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.canbus.CANCardParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter}
 */
proto.apollo.drivers.canbus.CANCardParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANCardBrand} */ (reader.readEnum());
      msg.setBrand(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANCardType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANChannelId} */ (reader.readEnum());
      msg.setChannelId(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANInterface} */ (reader.readEnum());
      msg.setInterface(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumPorts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.canbus.CANCardParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.canbus.CANCardParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.canbus.CANCardParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANCardBrand} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANCardType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANChannelId} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANInterface} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.drivers.canbus.CANCardParameter.CANCardBrand = {
  FAKE_CAN: 0,
  ESD_CAN: 1,
  SOCKET_CAN_RAW: 2,
  HERMES_CAN: 3
};

/**
 * @enum {number}
 */
proto.apollo.drivers.canbus.CANCardParameter.CANCardType = {
  PCI_CARD: 0,
  USB_CARD: 1
};

/**
 * @enum {number}
 */
proto.apollo.drivers.canbus.CANCardParameter.CANChannelId = {
  CHANNEL_ID_ZERO: 0,
  CHANNEL_ID_ONE: 1,
  CHANNEL_ID_TWO: 2,
  CHANNEL_ID_THREE: 3,
  CHANNEL_ID_FOUR: 4,
  CHANNEL_ID_FIVE: 5,
  CHANNEL_ID_SIX: 6,
  CHANNEL_ID_SEVEN: 7
};

/**
 * @enum {number}
 */
proto.apollo.drivers.canbus.CANCardParameter.CANInterface = {
  NATIVE: 0,
  VIRTUAL: 1,
  SLCAN: 2
};

/**
 * optional CANCardBrand brand = 1;
 * @return {!proto.apollo.drivers.canbus.CANCardParameter.CANCardBrand}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.getBrand = function() {
  return /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANCardBrand} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.drivers.canbus.CANCardParameter.CANCardBrand} value
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.setBrand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.clearBrand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CANCardType type = 2;
 * @return {!proto.apollo.drivers.canbus.CANCardParameter.CANCardType}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.getType = function() {
  return /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANCardType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.drivers.canbus.CANCardParameter.CANCardType} value
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CANChannelId channel_id = 3;
 * @return {!proto.apollo.drivers.canbus.CANCardParameter.CANChannelId}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.getChannelId = function() {
  return /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANChannelId} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.drivers.canbus.CANCardParameter.CANChannelId} value
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CANInterface interface = 4;
 * @return {!proto.apollo.drivers.canbus.CANCardParameter.CANInterface}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.getInterface = function() {
  return /** @type {!proto.apollo.drivers.canbus.CANCardParameter.CANInterface} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.drivers.canbus.CANCardParameter.CANInterface} value
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.setInterface = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.clearInterface = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 num_ports = 5;
 * @return {number}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.getNumPorts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.setNumPorts = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.canbus.CANCardParameter} returns this
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.clearNumPorts = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.canbus.CANCardParameter.prototype.hasNumPorts = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.apollo.drivers.canbus);
