// source: modules/planning/proto/planning_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_planning_proto_open_space_task_config_pb = require('../../../modules/planning/proto/open_space_task_config_pb.js');
goog.object.extend(proto, modules_planning_proto_open_space_task_config_pb);
var modules_planning_proto_task_config_pb = require('../../../modules/planning/proto/task_config_pb.js');
goog.object.extend(proto, modules_planning_proto_task_config_pb);
goog.exportSymbol('proto.apollo.planning.NavigationPlanningConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PlannerNaviConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PlannerPublicRoadConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PlannerType', null, global);
goog.exportSymbol('proto.apollo.planning.PlanningConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PlanningConfig.PlanningConfigCase', null, global);
goog.exportSymbol('proto.apollo.planning.PlanningConfig.PlanningLearningMode', null, global);
goog.exportSymbol('proto.apollo.planning.RtkPlanningConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioConfig.ScenarioConfigCase', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioConfig.ScenarioType', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioConfig.StageConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioConfig.StageType', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioDeadEndTurnAroundConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioEmergencyPullOverConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioEmergencyStopConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioLaneFollowConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioLearningModelSampleConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioNarrowStreetUTurnConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioParkAndGoConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioPullOverConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioStopSignUnprotectedConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioTrafficLightProtectedConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioValetParkingConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ScenarioYieldSignConfig', null, global);
goog.exportSymbol('proto.apollo.planning.StandardPlanningConfig', null, global);
goog.exportSymbol('proto.apollo.planning.TaskConfig', null, global);
goog.exportSymbol('proto.apollo.planning.TaskConfig.TaskConfigCase', null, global);
goog.exportSymbol('proto.apollo.planning.TaskConfig.TaskType', null, global);
goog.exportSymbol('proto.apollo.planning.TopicConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TaskConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.planning.TaskConfig.oneofGroups_);
};
goog.inherits(proto.apollo.planning.TaskConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TaskConfig.displayName = 'proto.apollo.planning.TaskConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.displayName = 'proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioEmergencyPullOverConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioEmergencyPullOverConfig.displayName = 'proto.apollo.planning.ScenarioEmergencyPullOverConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioEmergencyStopConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioEmergencyStopConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioEmergencyStopConfig.displayName = 'proto.apollo.planning.ScenarioEmergencyStopConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioLaneFollowConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioLaneFollowConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioLaneFollowConfig.displayName = 'proto.apollo.planning.ScenarioLaneFollowConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioLearningModelSampleConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioLearningModelSampleConfig.displayName = 'proto.apollo.planning.ScenarioLearningModelSampleConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioNarrowStreetUTurnConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.displayName = 'proto.apollo.planning.ScenarioNarrowStreetUTurnConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioParkAndGoConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioParkAndGoConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioParkAndGoConfig.displayName = 'proto.apollo.planning.ScenarioParkAndGoConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioPullOverConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioPullOverConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioPullOverConfig.displayName = 'proto.apollo.planning.ScenarioPullOverConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioStopSignUnprotectedConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioStopSignUnprotectedConfig.displayName = 'proto.apollo.planning.ScenarioStopSignUnprotectedConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioTrafficLightProtectedConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioTrafficLightProtectedConfig.displayName = 'proto.apollo.planning.ScenarioTrafficLightProtectedConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.displayName = 'proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.displayName = 'proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioValetParkingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioValetParkingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioValetParkingConfig.displayName = 'proto.apollo.planning.ScenarioValetParkingConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioDeadEndTurnAroundConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.displayName = 'proto.apollo.planning.ScenarioDeadEndTurnAroundConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioYieldSignConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ScenarioYieldSignConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioYieldSignConfig.displayName = 'proto.apollo.planning.ScenarioYieldSignConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ScenarioConfig.repeatedFields_, proto.apollo.planning.ScenarioConfig.oneofGroups_);
};
goog.inherits(proto.apollo.planning.ScenarioConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioConfig.displayName = 'proto.apollo.planning.ScenarioConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ScenarioConfig.StageConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ScenarioConfig.StageConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.ScenarioConfig.StageConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ScenarioConfig.StageConfig.displayName = 'proto.apollo.planning.ScenarioConfig.StageConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlannerPublicRoadConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PlannerPublicRoadConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlannerPublicRoadConfig.displayName = 'proto.apollo.planning.PlannerPublicRoadConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlannerNaviConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.PlannerNaviConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.PlannerNaviConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlannerNaviConfig.displayName = 'proto.apollo.planning.PlannerNaviConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.RtkPlanningConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.RtkPlanningConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.RtkPlanningConfig.displayName = 'proto.apollo.planning.RtkPlanningConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.StandardPlanningConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.StandardPlanningConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.StandardPlanningConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.StandardPlanningConfig.displayName = 'proto.apollo.planning.StandardPlanningConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.NavigationPlanningConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.NavigationPlanningConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.NavigationPlanningConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.NavigationPlanningConfig.displayName = 'proto.apollo.planning.NavigationPlanningConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TopicConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.TopicConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TopicConfig.displayName = 'proto.apollo.planning.TopicConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlanningConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.PlanningConfig.repeatedFields_, proto.apollo.planning.PlanningConfig.oneofGroups_);
};
goog.inherits(proto.apollo.planning.PlanningConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlanningConfig.displayName = 'proto.apollo.planning.PlanningConfig';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.TaskConfig.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]];

/**
 * @enum {number}
 */
proto.apollo.planning.TaskConfig.TaskConfigCase = {
  TASK_CONFIG_NOT_SET: 0,
  CREEP_DECIDER_CONFIG: 2,
  LANE_CHANGE_DECIDER_CONFIG: 3,
  OPEN_SPACE_FALLBACK_DECIDER_CONFIG: 4,
  OPEN_SPACE_PRE_STOP_DECIDER_CONFIG: 5,
  OPEN_SPACE_ROI_DECIDER_CONFIG: 6,
  PATH_ASSESSMENT_DECIDER_CONFIG: 7,
  PATH_BOUNDS_DECIDER_CONFIG: 8,
  PATH_DECIDER_CONFIG: 9,
  PATH_LANE_BORROW_DECIDER_CONFIG: 10,
  PATH_REFERENCE_DECIDER_CONFIG: 11,
  PATH_REUSE_DECIDER_CONFIG: 12,
  RULE_BASED_STOP_DECIDER_CONFIG: 13,
  SPEED_BOUNDS_DECIDER_CONFIG: 14,
  ST_BOUNDS_DECIDER_CONFIG: 15,
  OPEN_SPACE_TRAJECTORY_PARTITION_CONFIG: 16,
  OPEN_SPACE_TRAJECTORY_PROVIDER_CONFIG: 17,
  PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER_CONFIG: 18,
  PIECEWISE_JERK_PATH_OPTIMIZER_CONFIG: 19,
  PIECEWISE_JERK_SPEED_OPTIMIZER_CONFIG: 20,
  SPEED_HEURISTIC_OPTIMIZER_CONFIG: 21,
  LEARNING_MODEL_INFERENCE_TASK_CONFIG: 22,
  LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK_CONFIG: 23
};

/**
 * @return {proto.apollo.planning.TaskConfig.TaskConfigCase}
 */
proto.apollo.planning.TaskConfig.prototype.getTaskConfigCase = function() {
  return /** @type {proto.apollo.planning.TaskConfig.TaskConfigCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.TaskConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TaskConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TaskConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TaskConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TaskConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    creepDeciderConfig: (f = msg.getCreepDeciderConfig()) && modules_planning_proto_task_config_pb.CreepDeciderConfig.toObject(includeInstance, f),
    laneChangeDeciderConfig: (f = msg.getLaneChangeDeciderConfig()) && modules_planning_proto_task_config_pb.LaneChangeDeciderConfig.toObject(includeInstance, f),
    openSpaceFallbackDeciderConfig: (f = msg.getOpenSpaceFallbackDeciderConfig()) && modules_planning_proto_open_space_task_config_pb.OpenSpaceFallBackDeciderConfig.toObject(includeInstance, f),
    openSpacePreStopDeciderConfig: (f = msg.getOpenSpacePreStopDeciderConfig()) && modules_planning_proto_open_space_task_config_pb.OpenSpacePreStopDeciderConfig.toObject(includeInstance, f),
    openSpaceRoiDeciderConfig: (f = msg.getOpenSpaceRoiDeciderConfig()) && modules_planning_proto_open_space_task_config_pb.OpenSpaceRoiDeciderConfig.toObject(includeInstance, f),
    pathAssessmentDeciderConfig: (f = msg.getPathAssessmentDeciderConfig()) && modules_planning_proto_task_config_pb.PathAssessmentDeciderConfig.toObject(includeInstance, f),
    pathBoundsDeciderConfig: (f = msg.getPathBoundsDeciderConfig()) && modules_planning_proto_task_config_pb.PathBoundsDeciderConfig.toObject(includeInstance, f),
    pathDeciderConfig: (f = msg.getPathDeciderConfig()) && modules_planning_proto_task_config_pb.PathDeciderConfig.toObject(includeInstance, f),
    pathLaneBorrowDeciderConfig: (f = msg.getPathLaneBorrowDeciderConfig()) && modules_planning_proto_task_config_pb.PathLaneBorrowDeciderConfig.toObject(includeInstance, f),
    pathReferenceDeciderConfig: (f = msg.getPathReferenceDeciderConfig()) && modules_planning_proto_task_config_pb.PathReferenceDeciderConfig.toObject(includeInstance, f),
    pathReuseDeciderConfig: (f = msg.getPathReuseDeciderConfig()) && modules_planning_proto_task_config_pb.PathReuseDeciderConfig.toObject(includeInstance, f),
    ruleBasedStopDeciderConfig: (f = msg.getRuleBasedStopDeciderConfig()) && modules_planning_proto_task_config_pb.RuleBasedStopDeciderConfig.toObject(includeInstance, f),
    speedBoundsDeciderConfig: (f = msg.getSpeedBoundsDeciderConfig()) && modules_planning_proto_task_config_pb.SpeedBoundsDeciderConfig.toObject(includeInstance, f),
    stBoundsDeciderConfig: (f = msg.getStBoundsDeciderConfig()) && modules_planning_proto_task_config_pb.STBoundsDeciderConfig.toObject(includeInstance, f),
    openSpaceTrajectoryPartitionConfig: (f = msg.getOpenSpaceTrajectoryPartitionConfig()) && modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryPartitionConfig.toObject(includeInstance, f),
    openSpaceTrajectoryProviderConfig: (f = msg.getOpenSpaceTrajectoryProviderConfig()) && modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryProviderConfig.toObject(includeInstance, f),
    piecewiseJerkNonlinearSpeedOptimizerConfig: (f = msg.getPiecewiseJerkNonlinearSpeedOptimizerConfig()) && modules_planning_proto_task_config_pb.PiecewiseJerkNonlinearSpeedOptimizerConfig.toObject(includeInstance, f),
    piecewiseJerkPathOptimizerConfig: (f = msg.getPiecewiseJerkPathOptimizerConfig()) && modules_planning_proto_task_config_pb.PiecewiseJerkPathOptimizerConfig.toObject(includeInstance, f),
    piecewiseJerkSpeedOptimizerConfig: (f = msg.getPiecewiseJerkSpeedOptimizerConfig()) && modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.toObject(includeInstance, f),
    speedHeuristicOptimizerConfig: (f = msg.getSpeedHeuristicOptimizerConfig()) && modules_planning_proto_task_config_pb.SpeedHeuristicOptimizerConfig.toObject(includeInstance, f),
    learningModelInferenceTaskConfig: (f = msg.getLearningModelInferenceTaskConfig()) && modules_planning_proto_task_config_pb.LearningModelInferenceTaskConfig.toObject(includeInstance, f),
    learningModelInferenceTrajectoryTaskConfig: (f = msg.getLearningModelInferenceTrajectoryTaskConfig()) && modules_planning_proto_task_config_pb.LearningModelInferenceTrajectoryTaskConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TaskConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TaskConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.taskType;

  /** @type {?|undefined} */
  this.creepDeciderConfig;

  /** @type {?|undefined} */
  this.laneChangeDeciderConfig;

  /** @type {?|undefined} */
  this.openSpaceFallbackDeciderConfig;

  /** @type {?|undefined} */
  this.openSpacePreStopDeciderConfig;

  /** @type {?|undefined} */
  this.openSpaceRoiDeciderConfig;

  /** @type {?|undefined} */
  this.pathAssessmentDeciderConfig;

  /** @type {?|undefined} */
  this.pathBoundsDeciderConfig;

  /** @type {?|undefined} */
  this.pathDeciderConfig;

  /** @type {?|undefined} */
  this.pathLaneBorrowDeciderConfig;

  /** @type {?|undefined} */
  this.pathReferenceDeciderConfig;

  /** @type {?|undefined} */
  this.pathReuseDeciderConfig;

  /** @type {?|undefined} */
  this.ruleBasedStopDeciderConfig;

  /** @type {?|undefined} */
  this.speedBoundsDeciderConfig;

  /** @type {?|undefined} */
  this.stBoundsDeciderConfig;

  /** @type {?|undefined} */
  this.openSpaceTrajectoryPartitionConfig;

  /** @type {?|undefined} */
  this.openSpaceTrajectoryProviderConfig;

  /** @type {?|undefined} */
  this.piecewiseJerkNonlinearSpeedOptimizerConfig;

  /** @type {?|undefined} */
  this.piecewiseJerkPathOptimizerConfig;

  /** @type {?|undefined} */
  this.piecewiseJerkSpeedOptimizerConfig;

  /** @type {?|undefined} */
  this.speedHeuristicOptimizerConfig;

  /** @type {?|undefined} */
  this.learningModelInferenceTaskConfig;

  /** @type {?|undefined} */
  this.learningModelInferenceTrajectoryTaskConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TaskConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TaskConfig}
 */
proto.apollo.planning.TaskConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TaskConfig();
  obj.taskType != null && jspb.Message.setField(msg, 1, obj.taskType);
  obj.creepDeciderConfig && jspb.Message.setWrapperField(
      msg, 2, modules_planning_proto_task_config_pb.CreepDeciderConfig.fromObject(obj.creepDeciderConfig));
  obj.laneChangeDeciderConfig && jspb.Message.setWrapperField(
      msg, 3, modules_planning_proto_task_config_pb.LaneChangeDeciderConfig.fromObject(obj.laneChangeDeciderConfig));
  obj.openSpaceFallbackDeciderConfig && jspb.Message.setWrapperField(
      msg, 4, modules_planning_proto_open_space_task_config_pb.OpenSpaceFallBackDeciderConfig.fromObject(obj.openSpaceFallbackDeciderConfig));
  obj.openSpacePreStopDeciderConfig && jspb.Message.setWrapperField(
      msg, 5, modules_planning_proto_open_space_task_config_pb.OpenSpacePreStopDeciderConfig.fromObject(obj.openSpacePreStopDeciderConfig));
  obj.openSpaceRoiDeciderConfig && jspb.Message.setWrapperField(
      msg, 6, modules_planning_proto_open_space_task_config_pb.OpenSpaceRoiDeciderConfig.fromObject(obj.openSpaceRoiDeciderConfig));
  obj.pathAssessmentDeciderConfig && jspb.Message.setWrapperField(
      msg, 7, modules_planning_proto_task_config_pb.PathAssessmentDeciderConfig.fromObject(obj.pathAssessmentDeciderConfig));
  obj.pathBoundsDeciderConfig && jspb.Message.setWrapperField(
      msg, 8, modules_planning_proto_task_config_pb.PathBoundsDeciderConfig.fromObject(obj.pathBoundsDeciderConfig));
  obj.pathDeciderConfig && jspb.Message.setWrapperField(
      msg, 9, modules_planning_proto_task_config_pb.PathDeciderConfig.fromObject(obj.pathDeciderConfig));
  obj.pathLaneBorrowDeciderConfig && jspb.Message.setWrapperField(
      msg, 10, modules_planning_proto_task_config_pb.PathLaneBorrowDeciderConfig.fromObject(obj.pathLaneBorrowDeciderConfig));
  obj.pathReferenceDeciderConfig && jspb.Message.setWrapperField(
      msg, 11, modules_planning_proto_task_config_pb.PathReferenceDeciderConfig.fromObject(obj.pathReferenceDeciderConfig));
  obj.pathReuseDeciderConfig && jspb.Message.setWrapperField(
      msg, 12, modules_planning_proto_task_config_pb.PathReuseDeciderConfig.fromObject(obj.pathReuseDeciderConfig));
  obj.ruleBasedStopDeciderConfig && jspb.Message.setWrapperField(
      msg, 13, modules_planning_proto_task_config_pb.RuleBasedStopDeciderConfig.fromObject(obj.ruleBasedStopDeciderConfig));
  obj.speedBoundsDeciderConfig && jspb.Message.setWrapperField(
      msg, 14, modules_planning_proto_task_config_pb.SpeedBoundsDeciderConfig.fromObject(obj.speedBoundsDeciderConfig));
  obj.stBoundsDeciderConfig && jspb.Message.setWrapperField(
      msg, 15, modules_planning_proto_task_config_pb.STBoundsDeciderConfig.fromObject(obj.stBoundsDeciderConfig));
  obj.openSpaceTrajectoryPartitionConfig && jspb.Message.setWrapperField(
      msg, 16, modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryPartitionConfig.fromObject(obj.openSpaceTrajectoryPartitionConfig));
  obj.openSpaceTrajectoryProviderConfig && jspb.Message.setWrapperField(
      msg, 17, modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryProviderConfig.fromObject(obj.openSpaceTrajectoryProviderConfig));
  obj.piecewiseJerkNonlinearSpeedOptimizerConfig && jspb.Message.setWrapperField(
      msg, 18, modules_planning_proto_task_config_pb.PiecewiseJerkNonlinearSpeedOptimizerConfig.fromObject(obj.piecewiseJerkNonlinearSpeedOptimizerConfig));
  obj.piecewiseJerkPathOptimizerConfig && jspb.Message.setWrapperField(
      msg, 19, modules_planning_proto_task_config_pb.PiecewiseJerkPathOptimizerConfig.fromObject(obj.piecewiseJerkPathOptimizerConfig));
  obj.piecewiseJerkSpeedOptimizerConfig && jspb.Message.setWrapperField(
      msg, 20, modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.fromObject(obj.piecewiseJerkSpeedOptimizerConfig));
  obj.speedHeuristicOptimizerConfig && jspb.Message.setWrapperField(
      msg, 21, modules_planning_proto_task_config_pb.SpeedHeuristicOptimizerConfig.fromObject(obj.speedHeuristicOptimizerConfig));
  obj.learningModelInferenceTaskConfig && jspb.Message.setWrapperField(
      msg, 22, modules_planning_proto_task_config_pb.LearningModelInferenceTaskConfig.fromObject(obj.learningModelInferenceTaskConfig));
  obj.learningModelInferenceTrajectoryTaskConfig && jspb.Message.setWrapperField(
      msg, 23, modules_planning_proto_task_config_pb.LearningModelInferenceTrajectoryTaskConfig.fromObject(obj.learningModelInferenceTrajectoryTaskConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TaskConfig}
 */
proto.apollo.planning.TaskConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TaskConfig;
  return proto.apollo.planning.TaskConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TaskConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TaskConfig}
 */
proto.apollo.planning.TaskConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.TaskConfig.TaskType} */ (reader.readEnum());
      msg.setTaskType(value);
      break;
    case 2:
      var value = new modules_planning_proto_task_config_pb.CreepDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.CreepDeciderConfig.deserializeBinaryFromReader);
      msg.setCreepDeciderConfig(value);
      break;
    case 3:
      var value = new modules_planning_proto_task_config_pb.LaneChangeDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.LaneChangeDeciderConfig.deserializeBinaryFromReader);
      msg.setLaneChangeDeciderConfig(value);
      break;
    case 4:
      var value = new modules_planning_proto_open_space_task_config_pb.OpenSpaceFallBackDeciderConfig;
      reader.readMessage(value,modules_planning_proto_open_space_task_config_pb.OpenSpaceFallBackDeciderConfig.deserializeBinaryFromReader);
      msg.setOpenSpaceFallbackDeciderConfig(value);
      break;
    case 5:
      var value = new modules_planning_proto_open_space_task_config_pb.OpenSpacePreStopDeciderConfig;
      reader.readMessage(value,modules_planning_proto_open_space_task_config_pb.OpenSpacePreStopDeciderConfig.deserializeBinaryFromReader);
      msg.setOpenSpacePreStopDeciderConfig(value);
      break;
    case 6:
      var value = new modules_planning_proto_open_space_task_config_pb.OpenSpaceRoiDeciderConfig;
      reader.readMessage(value,modules_planning_proto_open_space_task_config_pb.OpenSpaceRoiDeciderConfig.deserializeBinaryFromReader);
      msg.setOpenSpaceRoiDeciderConfig(value);
      break;
    case 7:
      var value = new modules_planning_proto_task_config_pb.PathAssessmentDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PathAssessmentDeciderConfig.deserializeBinaryFromReader);
      msg.setPathAssessmentDeciderConfig(value);
      break;
    case 8:
      var value = new modules_planning_proto_task_config_pb.PathBoundsDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PathBoundsDeciderConfig.deserializeBinaryFromReader);
      msg.setPathBoundsDeciderConfig(value);
      break;
    case 9:
      var value = new modules_planning_proto_task_config_pb.PathDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PathDeciderConfig.deserializeBinaryFromReader);
      msg.setPathDeciderConfig(value);
      break;
    case 10:
      var value = new modules_planning_proto_task_config_pb.PathLaneBorrowDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PathLaneBorrowDeciderConfig.deserializeBinaryFromReader);
      msg.setPathLaneBorrowDeciderConfig(value);
      break;
    case 11:
      var value = new modules_planning_proto_task_config_pb.PathReferenceDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PathReferenceDeciderConfig.deserializeBinaryFromReader);
      msg.setPathReferenceDeciderConfig(value);
      break;
    case 12:
      var value = new modules_planning_proto_task_config_pb.PathReuseDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PathReuseDeciderConfig.deserializeBinaryFromReader);
      msg.setPathReuseDeciderConfig(value);
      break;
    case 13:
      var value = new modules_planning_proto_task_config_pb.RuleBasedStopDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.RuleBasedStopDeciderConfig.deserializeBinaryFromReader);
      msg.setRuleBasedStopDeciderConfig(value);
      break;
    case 14:
      var value = new modules_planning_proto_task_config_pb.SpeedBoundsDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.SpeedBoundsDeciderConfig.deserializeBinaryFromReader);
      msg.setSpeedBoundsDeciderConfig(value);
      break;
    case 15:
      var value = new modules_planning_proto_task_config_pb.STBoundsDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.STBoundsDeciderConfig.deserializeBinaryFromReader);
      msg.setStBoundsDeciderConfig(value);
      break;
    case 16:
      var value = new modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryPartitionConfig;
      reader.readMessage(value,modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryPartitionConfig.deserializeBinaryFromReader);
      msg.setOpenSpaceTrajectoryPartitionConfig(value);
      break;
    case 17:
      var value = new modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryProviderConfig;
      reader.readMessage(value,modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryProviderConfig.deserializeBinaryFromReader);
      msg.setOpenSpaceTrajectoryProviderConfig(value);
      break;
    case 18:
      var value = new modules_planning_proto_task_config_pb.PiecewiseJerkNonlinearSpeedOptimizerConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PiecewiseJerkNonlinearSpeedOptimizerConfig.deserializeBinaryFromReader);
      msg.setPiecewiseJerkNonlinearSpeedOptimizerConfig(value);
      break;
    case 19:
      var value = new modules_planning_proto_task_config_pb.PiecewiseJerkPathOptimizerConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PiecewiseJerkPathOptimizerConfig.deserializeBinaryFromReader);
      msg.setPiecewiseJerkPathOptimizerConfig(value);
      break;
    case 20:
      var value = new modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.deserializeBinaryFromReader);
      msg.setPiecewiseJerkSpeedOptimizerConfig(value);
      break;
    case 21:
      var value = new modules_planning_proto_task_config_pb.SpeedHeuristicOptimizerConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.SpeedHeuristicOptimizerConfig.deserializeBinaryFromReader);
      msg.setSpeedHeuristicOptimizerConfig(value);
      break;
    case 22:
      var value = new modules_planning_proto_task_config_pb.LearningModelInferenceTaskConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.LearningModelInferenceTaskConfig.deserializeBinaryFromReader);
      msg.setLearningModelInferenceTaskConfig(value);
      break;
    case 23:
      var value = new modules_planning_proto_task_config_pb.LearningModelInferenceTrajectoryTaskConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.LearningModelInferenceTrajectoryTaskConfig.deserializeBinaryFromReader);
      msg.setLearningModelInferenceTrajectoryTaskConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TaskConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TaskConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TaskConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TaskConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.TaskConfig.TaskType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCreepDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_planning_proto_task_config_pb.CreepDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getLaneChangeDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_planning_proto_task_config_pb.LaneChangeDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getOpenSpaceFallbackDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_planning_proto_open_space_task_config_pb.OpenSpaceFallBackDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getOpenSpacePreStopDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      modules_planning_proto_open_space_task_config_pb.OpenSpacePreStopDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getOpenSpaceRoiDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      modules_planning_proto_open_space_task_config_pb.OpenSpaceRoiDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getPathAssessmentDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      modules_planning_proto_task_config_pb.PathAssessmentDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getPathBoundsDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      modules_planning_proto_task_config_pb.PathBoundsDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getPathDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      modules_planning_proto_task_config_pb.PathDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getPathLaneBorrowDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      modules_planning_proto_task_config_pb.PathLaneBorrowDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getPathReferenceDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      modules_planning_proto_task_config_pb.PathReferenceDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getPathReuseDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      modules_planning_proto_task_config_pb.PathReuseDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getRuleBasedStopDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      modules_planning_proto_task_config_pb.RuleBasedStopDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getSpeedBoundsDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      modules_planning_proto_task_config_pb.SpeedBoundsDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getStBoundsDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      modules_planning_proto_task_config_pb.STBoundsDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getOpenSpaceTrajectoryPartitionConfig();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryPartitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getOpenSpaceTrajectoryProviderConfig();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryProviderConfig.serializeBinaryToWriter
    );
  }
  f = message.getPiecewiseJerkNonlinearSpeedOptimizerConfig();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      modules_planning_proto_task_config_pb.PiecewiseJerkNonlinearSpeedOptimizerConfig.serializeBinaryToWriter
    );
  }
  f = message.getPiecewiseJerkPathOptimizerConfig();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      modules_planning_proto_task_config_pb.PiecewiseJerkPathOptimizerConfig.serializeBinaryToWriter
    );
  }
  f = message.getPiecewiseJerkSpeedOptimizerConfig();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig.serializeBinaryToWriter
    );
  }
  f = message.getSpeedHeuristicOptimizerConfig();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      modules_planning_proto_task_config_pb.SpeedHeuristicOptimizerConfig.serializeBinaryToWriter
    );
  }
  f = message.getLearningModelInferenceTaskConfig();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      modules_planning_proto_task_config_pb.LearningModelInferenceTaskConfig.serializeBinaryToWriter
    );
  }
  f = message.getLearningModelInferenceTrajectoryTaskConfig();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      modules_planning_proto_task_config_pb.LearningModelInferenceTrajectoryTaskConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.TaskConfig.TaskType = {
  CREEP_DECIDER: 1,
  LANE_CHANGE_DECIDER: 2,
  NAVI_OBSTACLE_DECIDER: 3,
  NAVI_PATH_DECIDER: 4,
  NAVI_SPEED_DECIDER: 5,
  OPEN_SPACE_FALLBACK_DECIDER: 6,
  OPEN_SPACE_PRE_STOP_DECIDER: 7,
  OPEN_SPACE_ROI_DECIDER: 8,
  PATH_ASSESSMENT_DECIDER: 9,
  PATH_BOUNDS_DECIDER: 10,
  PATH_DECIDER: 11,
  PATH_LANE_BORROW_DECIDER: 12,
  PATH_REFERENCE_DECIDER: 13,
  PATH_REUSE_DECIDER: 14,
  RSS_DECIDER: 15,
  RULE_BASED_STOP_DECIDER: 16,
  SPEED_BOUNDS_PRIORI_DECIDER: 17,
  SPEED_BOUNDS_FINAL_DECIDER: 18,
  SPEED_DECIDER: 19,
  ST_BOUNDS_DECIDER: 20,
  OPEN_SPACE_TRAJECTORY_PARTITION: 21,
  OPEN_SPACE_TRAJECTORY_PROVIDER: 22,
  PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER: 23,
  PIECEWISE_JERK_PATH_OPTIMIZER: 24,
  PIECEWISE_JERK_SPEED_OPTIMIZER: 25,
  SPEED_HEURISTIC_OPTIMIZER: 26,
  LEARNING_MODEL_INFERENCE_TASK: 27,
  LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK: 28
};

/**
 * optional TaskType task_type = 1;
 * @return {!proto.apollo.planning.TaskConfig.TaskType}
 */
proto.apollo.planning.TaskConfig.prototype.getTaskType = function() {
  return /** @type {!proto.apollo.planning.TaskConfig.TaskType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.TaskConfig.TaskType} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.setTaskType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearTaskType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasTaskType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreepDeciderConfig creep_decider_config = 2;
 * @return {?proto.apollo.planning.CreepDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getCreepDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.CreepDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.CreepDeciderConfig, 2));
};


/**
 * @param {?proto.apollo.planning.CreepDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setCreepDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearCreepDeciderConfig = function() {
  return this.setCreepDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasCreepDeciderConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LaneChangeDeciderConfig lane_change_decider_config = 3;
 * @return {?proto.apollo.planning.LaneChangeDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getLaneChangeDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.LaneChangeDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.LaneChangeDeciderConfig, 3));
};


/**
 * @param {?proto.apollo.planning.LaneChangeDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setLaneChangeDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearLaneChangeDeciderConfig = function() {
  return this.setLaneChangeDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasLaneChangeDeciderConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 4;
 * @return {?proto.apollo.planning.OpenSpaceFallBackDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getOpenSpaceFallbackDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.OpenSpaceFallBackDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_open_space_task_config_pb.OpenSpaceFallBackDeciderConfig, 4));
};


/**
 * @param {?proto.apollo.planning.OpenSpaceFallBackDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setOpenSpaceFallbackDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearOpenSpaceFallbackDeciderConfig = function() {
  return this.setOpenSpaceFallbackDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasOpenSpaceFallbackDeciderConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 5;
 * @return {?proto.apollo.planning.OpenSpacePreStopDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getOpenSpacePreStopDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.OpenSpacePreStopDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_open_space_task_config_pb.OpenSpacePreStopDeciderConfig, 5));
};


/**
 * @param {?proto.apollo.planning.OpenSpacePreStopDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setOpenSpacePreStopDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearOpenSpacePreStopDeciderConfig = function() {
  return this.setOpenSpacePreStopDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasOpenSpacePreStopDeciderConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 6;
 * @return {?proto.apollo.planning.OpenSpaceRoiDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getOpenSpaceRoiDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.OpenSpaceRoiDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_open_space_task_config_pb.OpenSpaceRoiDeciderConfig, 6));
};


/**
 * @param {?proto.apollo.planning.OpenSpaceRoiDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setOpenSpaceRoiDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearOpenSpaceRoiDeciderConfig = function() {
  return this.setOpenSpaceRoiDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasOpenSpaceRoiDeciderConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PathAssessmentDeciderConfig path_assessment_decider_config = 7;
 * @return {?proto.apollo.planning.PathAssessmentDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPathAssessmentDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.PathAssessmentDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PathAssessmentDeciderConfig, 7));
};


/**
 * @param {?proto.apollo.planning.PathAssessmentDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPathAssessmentDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPathAssessmentDeciderConfig = function() {
  return this.setPathAssessmentDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPathAssessmentDeciderConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PathBoundsDeciderConfig path_bounds_decider_config = 8;
 * @return {?proto.apollo.planning.PathBoundsDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPathBoundsDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.PathBoundsDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PathBoundsDeciderConfig, 8));
};


/**
 * @param {?proto.apollo.planning.PathBoundsDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPathBoundsDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPathBoundsDeciderConfig = function() {
  return this.setPathBoundsDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPathBoundsDeciderConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PathDeciderConfig path_decider_config = 9;
 * @return {?proto.apollo.planning.PathDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPathDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.PathDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PathDeciderConfig, 9));
};


/**
 * @param {?proto.apollo.planning.PathDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPathDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPathDeciderConfig = function() {
  return this.setPathDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPathDeciderConfig = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 10;
 * @return {?proto.apollo.planning.PathLaneBorrowDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPathLaneBorrowDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.PathLaneBorrowDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PathLaneBorrowDeciderConfig, 10));
};


/**
 * @param {?proto.apollo.planning.PathLaneBorrowDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPathLaneBorrowDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPathLaneBorrowDeciderConfig = function() {
  return this.setPathLaneBorrowDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPathLaneBorrowDeciderConfig = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PathReferenceDeciderConfig path_reference_decider_config = 11;
 * @return {?proto.apollo.planning.PathReferenceDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPathReferenceDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.PathReferenceDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PathReferenceDeciderConfig, 11));
};


/**
 * @param {?proto.apollo.planning.PathReferenceDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPathReferenceDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPathReferenceDeciderConfig = function() {
  return this.setPathReferenceDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPathReferenceDeciderConfig = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PathReuseDeciderConfig path_reuse_decider_config = 12;
 * @return {?proto.apollo.planning.PathReuseDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPathReuseDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.PathReuseDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PathReuseDeciderConfig, 12));
};


/**
 * @param {?proto.apollo.planning.PathReuseDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPathReuseDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPathReuseDeciderConfig = function() {
  return this.setPathReuseDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPathReuseDeciderConfig = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RuleBasedStopDeciderConfig rule_based_stop_decider_config = 13;
 * @return {?proto.apollo.planning.RuleBasedStopDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getRuleBasedStopDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.RuleBasedStopDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.RuleBasedStopDeciderConfig, 13));
};


/**
 * @param {?proto.apollo.planning.RuleBasedStopDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setRuleBasedStopDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearRuleBasedStopDeciderConfig = function() {
  return this.setRuleBasedStopDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasRuleBasedStopDeciderConfig = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional SpeedBoundsDeciderConfig speed_bounds_decider_config = 14;
 * @return {?proto.apollo.planning.SpeedBoundsDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getSpeedBoundsDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.SpeedBoundsDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.SpeedBoundsDeciderConfig, 14));
};


/**
 * @param {?proto.apollo.planning.SpeedBoundsDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setSpeedBoundsDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearSpeedBoundsDeciderConfig = function() {
  return this.setSpeedBoundsDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasSpeedBoundsDeciderConfig = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional STBoundsDeciderConfig st_bounds_decider_config = 15;
 * @return {?proto.apollo.planning.STBoundsDeciderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getStBoundsDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.STBoundsDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.STBoundsDeciderConfig, 15));
};


/**
 * @param {?proto.apollo.planning.STBoundsDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setStBoundsDeciderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearStBoundsDeciderConfig = function() {
  return this.setStBoundsDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasStBoundsDeciderConfig = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 16;
 * @return {?proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getOpenSpaceTrajectoryPartitionConfig = function() {
  return /** @type{?proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryPartitionConfig, 16));
};


/**
 * @param {?proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setOpenSpaceTrajectoryPartitionConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearOpenSpaceTrajectoryPartitionConfig = function() {
  return this.setOpenSpaceTrajectoryPartitionConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasOpenSpaceTrajectoryPartitionConfig = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 17;
 * @return {?proto.apollo.planning.OpenSpaceTrajectoryProviderConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getOpenSpaceTrajectoryProviderConfig = function() {
  return /** @type{?proto.apollo.planning.OpenSpaceTrajectoryProviderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_open_space_task_config_pb.OpenSpaceTrajectoryProviderConfig, 17));
};


/**
 * @param {?proto.apollo.planning.OpenSpaceTrajectoryProviderConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setOpenSpaceTrajectoryProviderConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearOpenSpaceTrajectoryProviderConfig = function() {
  return this.setOpenSpaceTrajectoryProviderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasOpenSpaceTrajectoryProviderConfig = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional PiecewiseJerkNonlinearSpeedOptimizerConfig piecewise_jerk_nonlinear_speed_optimizer_config = 18;
 * @return {?proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPiecewiseJerkNonlinearSpeedOptimizerConfig = function() {
  return /** @type{?proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PiecewiseJerkNonlinearSpeedOptimizerConfig, 18));
};


/**
 * @param {?proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPiecewiseJerkNonlinearSpeedOptimizerConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPiecewiseJerkNonlinearSpeedOptimizerConfig = function() {
  return this.setPiecewiseJerkNonlinearSpeedOptimizerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPiecewiseJerkNonlinearSpeedOptimizerConfig = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional PiecewiseJerkPathOptimizerConfig piecewise_jerk_path_optimizer_config = 19;
 * @return {?proto.apollo.planning.PiecewiseJerkPathOptimizerConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPiecewiseJerkPathOptimizerConfig = function() {
  return /** @type{?proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PiecewiseJerkPathOptimizerConfig, 19));
};


/**
 * @param {?proto.apollo.planning.PiecewiseJerkPathOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPiecewiseJerkPathOptimizerConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPiecewiseJerkPathOptimizerConfig = function() {
  return this.setPiecewiseJerkPathOptimizerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPiecewiseJerkPathOptimizerConfig = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional PiecewiseJerkSpeedOptimizerConfig piecewise_jerk_speed_optimizer_config = 20;
 * @return {?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getPiecewiseJerkSpeedOptimizerConfig = function() {
  return /** @type{?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.PiecewiseJerkSpeedOptimizerConfig, 20));
};


/**
 * @param {?proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setPiecewiseJerkSpeedOptimizerConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearPiecewiseJerkSpeedOptimizerConfig = function() {
  return this.setPiecewiseJerkSpeedOptimizerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasPiecewiseJerkSpeedOptimizerConfig = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional SpeedHeuristicOptimizerConfig speed_heuristic_optimizer_config = 21;
 * @return {?proto.apollo.planning.SpeedHeuristicOptimizerConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getSpeedHeuristicOptimizerConfig = function() {
  return /** @type{?proto.apollo.planning.SpeedHeuristicOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.SpeedHeuristicOptimizerConfig, 21));
};


/**
 * @param {?proto.apollo.planning.SpeedHeuristicOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setSpeedHeuristicOptimizerConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearSpeedHeuristicOptimizerConfig = function() {
  return this.setSpeedHeuristicOptimizerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasSpeedHeuristicOptimizerConfig = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional LearningModelInferenceTaskConfig learning_model_inference_task_config = 22;
 * @return {?proto.apollo.planning.LearningModelInferenceTaskConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getLearningModelInferenceTaskConfig = function() {
  return /** @type{?proto.apollo.planning.LearningModelInferenceTaskConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.LearningModelInferenceTaskConfig, 22));
};


/**
 * @param {?proto.apollo.planning.LearningModelInferenceTaskConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setLearningModelInferenceTaskConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearLearningModelInferenceTaskConfig = function() {
  return this.setLearningModelInferenceTaskConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasLearningModelInferenceTaskConfig = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional LearningModelInferenceTrajectoryTaskConfig learning_model_inference_trajectory_task_config = 23;
 * @return {?proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig}
 */
proto.apollo.planning.TaskConfig.prototype.getLearningModelInferenceTrajectoryTaskConfig = function() {
  return /** @type{?proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.LearningModelInferenceTrajectoryTaskConfig, 23));
};


/**
 * @param {?proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig|undefined} value
 * @return {!proto.apollo.planning.TaskConfig} returns this
*/
proto.apollo.planning.TaskConfig.prototype.setLearningModelInferenceTrajectoryTaskConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.apollo.planning.TaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.TaskConfig} returns this
 */
proto.apollo.planning.TaskConfig.prototype.clearLearningModelInferenceTrajectoryTaskConfig = function() {
  return this.setLearningModelInferenceTrajectoryTaskConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskConfig.prototype.hasLearningModelInferenceTrajectoryTaskConfig = function() {
  return jspb.Message.getField(this, 23) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    startBareIntersectionScenarioDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 25.0),
    enableExplicitStop: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 3.0),
    approachCruiseSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 6.7056),
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.5),
    stopTimeoutSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 8.0),
    creepTimeoutSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioBareIntersectionUnprotectedConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startBareIntersectionScenarioDistance;

  /** @type {?|undefined} */
  this.enableExplicitStop;

  /** @type {?|undefined} */
  this.minPassSDistance;

  /** @type {?|undefined} */
  this.approachCruiseSpeed;

  /** @type {?|undefined} */
  this.stopDistance;

  /** @type {?|undefined} */
  this.stopTimeoutSec;

  /** @type {?|undefined} */
  this.creepTimeoutSec;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig();
  obj.startBareIntersectionScenarioDistance != null && jspb.Message.setField(msg, 1, obj.startBareIntersectionScenarioDistance);
  obj.enableExplicitStop != null && jspb.Message.setField(msg, 2, obj.enableExplicitStop);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 3, obj.minPassSDistance);
  obj.approachCruiseSpeed != null && jspb.Message.setField(msg, 4, obj.approachCruiseSpeed);
  obj.stopDistance != null && jspb.Message.setField(msg, 5, obj.stopDistance);
  obj.stopTimeoutSec != null && jspb.Message.setField(msg, 6, obj.stopTimeoutSec);
  obj.creepTimeoutSec != null && jspb.Message.setField(msg, 7, obj.creepTimeoutSec);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig;
  return proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartBareIntersectionScenarioDistance(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableExplicitStop(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setApproachCruiseSpeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStopTimeoutSec(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCreepTimeoutSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional double start_bare_intersection_scenario_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.getStartBareIntersectionScenarioDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 25.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.setStartBareIntersectionScenarioDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.clearStartBareIntersectionScenarioDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.hasStartBareIntersectionScenarioDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enable_explicit_stop = 2;
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.getEnableExplicitStop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.setEnableExplicitStop = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.clearEnableExplicitStop = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.hasEnableExplicitStop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double min_pass_s_distance = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double approach_cruise_speed = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.getApproachCruiseSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 6.7056));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.setApproachCruiseSpeed = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.clearApproachCruiseSpeed = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.hasApproachCruiseSpeed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double stop_distance = 5;
 * @return {number}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float stop_timeout_sec = 6;
 * @return {number}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.getStopTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 8.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.setStopTimeoutSec = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.clearStopTimeoutSec = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.hasStopTimeoutSec = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float creep_timeout_sec = 7;
 * @return {number}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.getCreepTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.setCreepTimeoutSec = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.clearCreepTimeoutSec = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.prototype.hasCreepTimeoutSec = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioEmergencyPullOverConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxStopDeceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 3.0),
    slowDownDecelerationTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 3.0),
    targetSlowDownSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 2.5),
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioEmergencyPullOverConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxStopDeceleration;

  /** @type {?|undefined} */
  this.slowDownDecelerationTime;

  /** @type {?|undefined} */
  this.targetSlowDownSpeed;

  /** @type {?|undefined} */
  this.stopDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioEmergencyPullOverConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioEmergencyPullOverConfig();
  obj.maxStopDeceleration != null && jspb.Message.setField(msg, 1, obj.maxStopDeceleration);
  obj.slowDownDecelerationTime != null && jspb.Message.setField(msg, 2, obj.slowDownDecelerationTime);
  obj.targetSlowDownSpeed != null && jspb.Message.setField(msg, 3, obj.targetSlowDownSpeed);
  obj.stopDistance != null && jspb.Message.setField(msg, 4, obj.stopDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioEmergencyPullOverConfig;
  return proto.apollo.planning.ScenarioEmergencyPullOverConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxStopDeceleration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSlowDownDecelerationTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTargetSlowDownSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioEmergencyPullOverConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double max_stop_deceleration = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.getMaxStopDeceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.setMaxStopDeceleration = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.clearMaxStopDeceleration = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.hasMaxStopDeceleration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double slow_down_deceleration_time = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.getSlowDownDecelerationTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.setSlowDownDecelerationTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.clearSlowDownDecelerationTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.hasSlowDownDecelerationTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double target_slow_down_speed = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.getTargetSlowDownSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 2.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.setTargetSlowDownSpeed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.clearTargetSlowDownSpeed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.hasTargetSlowDownSpeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double stop_distance = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioEmergencyPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioEmergencyPullOverConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioEmergencyStopConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioEmergencyStopConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxStopDeceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 6.0),
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioEmergencyStopConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxStopDeceleration;

  /** @type {?|undefined} */
  this.stopDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioEmergencyStopConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioEmergencyStopConfig}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioEmergencyStopConfig();
  obj.maxStopDeceleration != null && jspb.Message.setField(msg, 1, obj.maxStopDeceleration);
  obj.stopDistance != null && jspb.Message.setField(msg, 2, obj.stopDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioEmergencyStopConfig}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioEmergencyStopConfig;
  return proto.apollo.planning.ScenarioEmergencyStopConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioEmergencyStopConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioEmergencyStopConfig}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxStopDeceleration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioEmergencyStopConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioEmergencyStopConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double max_stop_deceleration = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.getMaxStopDeceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 6.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioEmergencyStopConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.setMaxStopDeceleration = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioEmergencyStopConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.clearMaxStopDeceleration = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.hasMaxStopDeceleration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioEmergencyStopConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioEmergencyStopConfig} returns this
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioEmergencyStopConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioLaneFollowConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioLaneFollowConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioLaneFollowConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioLaneFollowConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioLaneFollowConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioLaneFollowConfig.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioLaneFollowConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioLaneFollowConfig}
 */
proto.apollo.planning.ScenarioLaneFollowConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioLaneFollowConfig();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioLaneFollowConfig}
 */
proto.apollo.planning.ScenarioLaneFollowConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioLaneFollowConfig;
  return proto.apollo.planning.ScenarioLaneFollowConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioLaneFollowConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioLaneFollowConfig}
 */
proto.apollo.planning.ScenarioLaneFollowConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioLaneFollowConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioLaneFollowConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioLaneFollowConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioLaneFollowConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioLearningModelSampleConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioLearningModelSampleConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioLearningModelSampleConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioLearningModelSampleConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioLearningModelSampleConfig}
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioLearningModelSampleConfig();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioLearningModelSampleConfig}
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioLearningModelSampleConfig;
  return proto.apollo.planning.ScenarioLearningModelSampleConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioLearningModelSampleConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioLearningModelSampleConfig}
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioLearningModelSampleConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioLearningModelSampleConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioLearningModelSampleConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioNarrowStreetUTurnConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioNarrowStreetUTurnConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioNarrowStreetUTurnConfig}
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioNarrowStreetUTurnConfig();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioNarrowStreetUTurnConfig}
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioNarrowStreetUTurnConfig;
  return proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioNarrowStreetUTurnConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioNarrowStreetUTurnConfig}
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioNarrowStreetUTurnConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioParkAndGoConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioParkAndGoConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioParkAndGoConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontObstacleBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 4.0),
    headingBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.5),
    minDistToDest: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 25.0),
    maxSteeringPercentageWhenCruise: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 90.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioParkAndGoConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioParkAndGoConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.frontObstacleBuffer;

  /** @type {?|undefined} */
  this.headingBuffer;

  /** @type {?|undefined} */
  this.minDistToDest;

  /** @type {?|undefined} */
  this.maxSteeringPercentageWhenCruise;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioParkAndGoConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioParkAndGoConfig();
  obj.frontObstacleBuffer != null && jspb.Message.setField(msg, 1, obj.frontObstacleBuffer);
  obj.headingBuffer != null && jspb.Message.setField(msg, 2, obj.headingBuffer);
  obj.minDistToDest != null && jspb.Message.setField(msg, 3, obj.minDistToDest);
  obj.maxSteeringPercentageWhenCruise != null && jspb.Message.setField(msg, 4, obj.maxSteeringPercentageWhenCruise);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioParkAndGoConfig;
  return proto.apollo.planning.ScenarioParkAndGoConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioParkAndGoConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrontObstacleBuffer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingBuffer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinDistToDest(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSteeringPercentageWhenCruise(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioParkAndGoConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioParkAndGoConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioParkAndGoConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double front_obstacle_buffer = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.getFrontObstacleBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.setFrontObstacleBuffer = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.clearFrontObstacleBuffer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.hasFrontObstacleBuffer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double heading_buffer = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.getHeadingBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.setHeadingBuffer = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.clearHeadingBuffer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.hasHeadingBuffer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double min_dist_to_dest = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.getMinDistToDest = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 25.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.setMinDistToDest = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.clearMinDistToDest = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.hasMinDistToDest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double max_steering_percentage_when_cruise = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.getMaxSteeringPercentageWhenCruise = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 90.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.setMaxSteeringPercentageWhenCruise = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioParkAndGoConfig} returns this
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.clearMaxSteeringPercentageWhenCruise = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioParkAndGoConfig.prototype.hasMaxSteeringPercentageWhenCruise = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioPullOverConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioPullOverConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioPullOverConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    startPullOverScenarioDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 50.0),
    pullOverMinDistanceBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 10.0),
    maxDistanceStopSearch: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 25.0),
    maxSErrorToEndPoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.2),
    maxLErrorToEndPoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.5),
    maxThetaErrorToEndPoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.2),
    maxDistanceErrorToEndPoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.2),
    passDestinationThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 10.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.0),
    sDistanceToStopForOpenSpaceParking: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 7.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioPullOverConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioPullOverConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startPullOverScenarioDistance;

  /** @type {?|undefined} */
  this.pullOverMinDistanceBuffer;

  /** @type {?|undefined} */
  this.maxDistanceStopSearch;

  /** @type {?|undefined} */
  this.maxSErrorToEndPoint;

  /** @type {?|undefined} */
  this.maxLErrorToEndPoint;

  /** @type {?|undefined} */
  this.maxThetaErrorToEndPoint;

  /** @type {?|undefined} */
  this.maxDistanceErrorToEndPoint;

  /** @type {?|undefined} */
  this.passDestinationThreshold;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.sDistanceToStopForOpenSpaceParking;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioPullOverConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig}
 */
proto.apollo.planning.ScenarioPullOverConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioPullOverConfig();
  obj.startPullOverScenarioDistance != null && jspb.Message.setField(msg, 1, obj.startPullOverScenarioDistance);
  obj.pullOverMinDistanceBuffer != null && jspb.Message.setField(msg, 2, obj.pullOverMinDistanceBuffer);
  obj.maxDistanceStopSearch != null && jspb.Message.setField(msg, 3, obj.maxDistanceStopSearch);
  obj.maxSErrorToEndPoint != null && jspb.Message.setField(msg, 4, obj.maxSErrorToEndPoint);
  obj.maxLErrorToEndPoint != null && jspb.Message.setField(msg, 5, obj.maxLErrorToEndPoint);
  obj.maxThetaErrorToEndPoint != null && jspb.Message.setField(msg, 6, obj.maxThetaErrorToEndPoint);
  obj.maxDistanceErrorToEndPoint != null && jspb.Message.setField(msg, 7, obj.maxDistanceErrorToEndPoint);
  obj.passDestinationThreshold != null && jspb.Message.setField(msg, 8, obj.passDestinationThreshold);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 9, obj.maxValidStopDistance);
  obj.sDistanceToStopForOpenSpaceParking != null && jspb.Message.setField(msg, 10, obj.sDistanceToStopForOpenSpaceParking);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig}
 */
proto.apollo.planning.ScenarioPullOverConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioPullOverConfig;
  return proto.apollo.planning.ScenarioPullOverConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioPullOverConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig}
 */
proto.apollo.planning.ScenarioPullOverConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartPullOverScenarioDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPullOverMinDistanceBuffer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDistanceStopSearch(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSErrorToEndPoint(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxLErrorToEndPoint(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxThetaErrorToEndPoint(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDistanceErrorToEndPoint(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPassDestinationThreshold(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSDistanceToStopForOpenSpaceParking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioPullOverConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioPullOverConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioPullOverConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional double start_pull_over_scenario_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getStartPullOverScenarioDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 50.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setStartPullOverScenarioDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearStartPullOverScenarioDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasStartPullOverScenarioDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double pull_over_min_distance_buffer = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getPullOverMinDistanceBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setPullOverMinDistanceBuffer = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearPullOverMinDistanceBuffer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasPullOverMinDistanceBuffer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_distance_stop_search = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getMaxDistanceStopSearch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 25.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setMaxDistanceStopSearch = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearMaxDistanceStopSearch = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasMaxDistanceStopSearch = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double max_s_error_to_end_point = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getMaxSErrorToEndPoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setMaxSErrorToEndPoint = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearMaxSErrorToEndPoint = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasMaxSErrorToEndPoint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double max_l_error_to_end_point = 5;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getMaxLErrorToEndPoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setMaxLErrorToEndPoint = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearMaxLErrorToEndPoint = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasMaxLErrorToEndPoint = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double max_theta_error_to_end_point = 6;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getMaxThetaErrorToEndPoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setMaxThetaErrorToEndPoint = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearMaxThetaErrorToEndPoint = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasMaxThetaErrorToEndPoint = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double max_distance_error_to_end_point = 7;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getMaxDistanceErrorToEndPoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setMaxDistanceErrorToEndPoint = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearMaxDistanceErrorToEndPoint = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasMaxDistanceErrorToEndPoint = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double pass_destination_threshold = 8;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getPassDestinationThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setPassDestinationThreshold = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearPassDestinationThreshold = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasPassDestinationThreshold = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double max_valid_stop_distance = 9;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double s_distance_to_stop_for_open_space_parking = 10;
 * @return {number}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.getSDistanceToStopForOpenSpaceParking = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 7.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.setSDistanceToStopForOpenSpaceParking = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioPullOverConfig} returns this
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.clearSDistanceToStopForOpenSpaceParking = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioPullOverConfig.prototype.hasSDistanceToStopForOpenSpaceParking = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioStopSignUnprotectedConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    startStopSignScenarioDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 5.0),
    watchVehicleMaxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 5.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 3.5),
    stopDurationSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 3.0),
    stopTimeoutSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 8.0),
    creepTimeoutSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioStopSignUnprotectedConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startStopSignScenarioDistance;

  /** @type {?|undefined} */
  this.watchVehicleMaxValidStopDistance;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.stopDurationSec;

  /** @type {?|undefined} */
  this.minPassSDistance;

  /** @type {?|undefined} */
  this.stopTimeoutSec;

  /** @type {?|undefined} */
  this.creepTimeoutSec;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioStopSignUnprotectedConfig();
  obj.startStopSignScenarioDistance != null && jspb.Message.setField(msg, 1, obj.startStopSignScenarioDistance);
  obj.watchVehicleMaxValidStopDistance != null && jspb.Message.setField(msg, 2, obj.watchVehicleMaxValidStopDistance);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 3, obj.maxValidStopDistance);
  obj.stopDurationSec != null && jspb.Message.setField(msg, 4, obj.stopDurationSec);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 5, obj.minPassSDistance);
  obj.stopTimeoutSec != null && jspb.Message.setField(msg, 6, obj.stopTimeoutSec);
  obj.creepTimeoutSec != null && jspb.Message.setField(msg, 7, obj.creepTimeoutSec);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioStopSignUnprotectedConfig;
  return proto.apollo.planning.ScenarioStopSignUnprotectedConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartStopSignScenarioDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWatchVehicleMaxValidStopDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStopDurationSec(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStopTimeoutSec(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCreepTimeoutSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioStopSignUnprotectedConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional double start_stop_sign_scenario_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.getStartStopSignScenarioDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.setStartStopSignScenarioDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.clearStartStopSignScenarioDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.hasStartStopSignScenarioDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double watch_vehicle_max_valid_stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.getWatchVehicleMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.setWatchVehicleMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.clearWatchVehicleMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.hasWatchVehicleMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_valid_stop_distance = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 3.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float stop_duration_sec = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.getStopDurationSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.setStopDurationSec = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.clearStopDurationSec = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.hasStopDurationSec = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double min_pass_s_distance = 5;
 * @return {number}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float stop_timeout_sec = 6;
 * @return {number}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.getStopTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 8.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.setStopTimeoutSec = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.clearStopTimeoutSec = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.hasStopTimeoutSec = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float creep_timeout_sec = 7;
 * @return {number}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.getCreepTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.setCreepTimeoutSec = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioStopSignUnprotectedConfig} returns this
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.clearCreepTimeoutSec = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioStopSignUnprotectedConfig.prototype.hasCreepTimeoutSec = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioTrafficLightProtectedConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTrafficLightScenarioDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 5.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 2.0),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 3.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioTrafficLightProtectedConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startTrafficLightScenarioDistance;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.minPassSDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioTrafficLightProtectedConfig();
  obj.startTrafficLightScenarioDistance != null && jspb.Message.setField(msg, 1, obj.startTrafficLightScenarioDistance);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 2, obj.maxValidStopDistance);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 3, obj.minPassSDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioTrafficLightProtectedConfig;
  return proto.apollo.planning.ScenarioTrafficLightProtectedConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTrafficLightScenarioDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioTrafficLightProtectedConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double start_traffic_light_scenario_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.getStartTrafficLightScenarioDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.setStartTrafficLightScenarioDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.clearStartTrafficLightScenarioDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.hasStartTrafficLightScenarioDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_valid_stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double min_pass_s_distance = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightProtectedConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightProtectedConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTrafficLightScenarioDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 5.0),
    approachCruiseSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 2.78),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 3.5),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 3.0),
    creepTimeoutSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 10.0),
    maxAdcSpeedBeforeCreep: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 5.56)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioTrafficLightUnprotectedLeftTurnConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startTrafficLightScenarioDistance;

  /** @type {?|undefined} */
  this.approachCruiseSpeed;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.minPassSDistance;

  /** @type {?|undefined} */
  this.creepTimeoutSec;

  /** @type {?|undefined} */
  this.maxAdcSpeedBeforeCreep;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig();
  obj.startTrafficLightScenarioDistance != null && jspb.Message.setField(msg, 1, obj.startTrafficLightScenarioDistance);
  obj.approachCruiseSpeed != null && jspb.Message.setField(msg, 2, obj.approachCruiseSpeed);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 3, obj.maxValidStopDistance);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 4, obj.minPassSDistance);
  obj.creepTimeoutSec != null && jspb.Message.setField(msg, 5, obj.creepTimeoutSec);
  obj.maxAdcSpeedBeforeCreep != null && jspb.Message.setField(msg, 6, obj.maxAdcSpeedBeforeCreep);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig;
  return proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTrafficLightScenarioDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setApproachCruiseSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCreepTimeoutSec(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAdcSpeedBeforeCreep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional double start_traffic_light_scenario_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.getStartTrafficLightScenarioDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.setStartTrafficLightScenarioDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.clearStartTrafficLightScenarioDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.hasStartTrafficLightScenarioDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double approach_cruise_speed = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.getApproachCruiseSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 2.78));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.setApproachCruiseSpeed = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.clearApproachCruiseSpeed = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.hasApproachCruiseSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_valid_stop_distance = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 3.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double min_pass_s_distance = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float creep_timeout_sec = 5;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.getCreepTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.setCreepTimeoutSec = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.clearCreepTimeoutSec = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.hasCreepTimeoutSec = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double max_adc_speed_before_creep = 6;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.getMaxAdcSpeedBeforeCreep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 5.56));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.setMaxAdcSpeedBeforeCreep = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.clearMaxAdcSpeedBeforeCreep = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.prototype.hasMaxAdcSpeedBeforeCreep = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTrafficLightScenarioDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 5.0),
    enableRightTurnOnRed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 3.5),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 3.0),
    redLightRightTurnStopDurationSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 3.0),
    creepTimeoutSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 10.0),
    maxAdcSpeedBeforeCreep: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 3.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioTrafficLightUnprotectedRightTurnConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startTrafficLightScenarioDistance;

  /** @type {?|undefined} */
  this.enableRightTurnOnRed;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.minPassSDistance;

  /** @type {?|undefined} */
  this.redLightRightTurnStopDurationSec;

  /** @type {?|undefined} */
  this.creepTimeoutSec;

  /** @type {?|undefined} */
  this.maxAdcSpeedBeforeCreep;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig();
  obj.startTrafficLightScenarioDistance != null && jspb.Message.setField(msg, 1, obj.startTrafficLightScenarioDistance);
  obj.enableRightTurnOnRed != null && jspb.Message.setField(msg, 2, obj.enableRightTurnOnRed);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 3, obj.maxValidStopDistance);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 4, obj.minPassSDistance);
  obj.redLightRightTurnStopDurationSec != null && jspb.Message.setField(msg, 5, obj.redLightRightTurnStopDurationSec);
  obj.creepTimeoutSec != null && jspb.Message.setField(msg, 6, obj.creepTimeoutSec);
  obj.maxAdcSpeedBeforeCreep != null && jspb.Message.setField(msg, 7, obj.maxAdcSpeedBeforeCreep);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig;
  return proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTrafficLightScenarioDistance(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableRightTurnOnRed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRedLightRightTurnStopDurationSec(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCreepTimeoutSec(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAdcSpeedBeforeCreep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional double start_traffic_light_scenario_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.getStartTrafficLightScenarioDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.setStartTrafficLightScenarioDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.clearStartTrafficLightScenarioDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.hasStartTrafficLightScenarioDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enable_right_turn_on_red = 2;
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.getEnableRightTurnOnRed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.setEnableRightTurnOnRed = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.clearEnableRightTurnOnRed = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.hasEnableRightTurnOnRed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_valid_stop_distance = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 3.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double min_pass_s_distance = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float red_light_right_turn_stop_duration_sec = 5;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.getRedLightRightTurnStopDurationSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.setRedLightRightTurnStopDurationSec = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.clearRedLightRightTurnStopDurationSec = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.hasRedLightRightTurnStopDurationSec = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float creep_timeout_sec = 6;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.getCreepTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.setCreepTimeoutSec = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.clearCreepTimeoutSec = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.hasCreepTimeoutSec = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double max_adc_speed_before_creep = 7;
 * @return {number}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.getMaxAdcSpeedBeforeCreep = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.setMaxAdcSpeedBeforeCreep = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} returns this
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.clearMaxAdcSpeedBeforeCreep = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.prototype.hasMaxAdcSpeedBeforeCreep = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioValetParkingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioValetParkingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioValetParkingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    parkingSpotRangeToStart: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 20.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioValetParkingConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioValetParkingConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.parkingSpotRangeToStart;

  /** @type {?|undefined} */
  this.maxValidStopDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioValetParkingConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioValetParkingConfig}
 */
proto.apollo.planning.ScenarioValetParkingConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioValetParkingConfig();
  obj.parkingSpotRangeToStart != null && jspb.Message.setField(msg, 1, obj.parkingSpotRangeToStart);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 2, obj.maxValidStopDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioValetParkingConfig}
 */
proto.apollo.planning.ScenarioValetParkingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioValetParkingConfig;
  return proto.apollo.planning.ScenarioValetParkingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioValetParkingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioValetParkingConfig}
 */
proto.apollo.planning.ScenarioValetParkingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setParkingSpotRangeToStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioValetParkingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioValetParkingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioValetParkingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double parking_spot_range_to_start = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.getParkingSpotRangeToStart = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 20.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioValetParkingConfig} returns this
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.setParkingSpotRangeToStart = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioValetParkingConfig} returns this
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.clearParkingSpotRangeToStart = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.hasParkingSpotRangeToStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_valid_stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioValetParkingConfig} returns this
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioValetParkingConfig} returns this
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioValetParkingConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadEndStartRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 20.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioDeadEndTurnAroundConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.deadEndStartRange;

  /** @type {?|undefined} */
  this.maxValidStopDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioDeadEndTurnAroundConfig();
  obj.deadEndStartRange != null && jspb.Message.setField(msg, 1, obj.deadEndStartRange);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 2, obj.maxValidStopDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioDeadEndTurnAroundConfig;
  return proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeadEndStartRange(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double dead_end_start_range = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.getDeadEndStartRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 20.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} returns this
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.setDeadEndStartRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} returns this
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.clearDeadEndStartRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.hasDeadEndStartRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_valid_stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} returns this
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} returns this
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioYieldSignConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioYieldSignConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioYieldSignConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    startYieldSignScenarioDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 10.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 4.5),
    minPassSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 3.0),
    creepTimeoutSec: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioYieldSignConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioYieldSignConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startYieldSignScenarioDistance;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.minPassSDistance;

  /** @type {?|undefined} */
  this.creepTimeoutSec;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioYieldSignConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig}
 */
proto.apollo.planning.ScenarioYieldSignConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioYieldSignConfig();
  obj.startYieldSignScenarioDistance != null && jspb.Message.setField(msg, 1, obj.startYieldSignScenarioDistance);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 2, obj.maxValidStopDistance);
  obj.minPassSDistance != null && jspb.Message.setField(msg, 3, obj.minPassSDistance);
  obj.creepTimeoutSec != null && jspb.Message.setField(msg, 4, obj.creepTimeoutSec);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig}
 */
proto.apollo.planning.ScenarioYieldSignConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioYieldSignConfig;
  return proto.apollo.planning.ScenarioYieldSignConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioYieldSignConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig}
 */
proto.apollo.planning.ScenarioYieldSignConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartYieldSignScenarioDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPassSDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCreepTimeoutSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioYieldSignConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioYieldSignConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioYieldSignConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional double start_yield_sign_scenario_distance = 1;
 * @return {number}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.getStartYieldSignScenarioDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.setStartYieldSignScenarioDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.clearStartYieldSignScenarioDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.hasStartYieldSignScenarioDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_valid_stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 4.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double min_pass_s_distance = 3;
 * @return {number}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.getMinPassSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.setMinPassSDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.clearMinPassSDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.hasMinPassSDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float creep_timeout_sec = 4;
 * @return {number}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.getCreepTimeoutSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.setCreepTimeoutSec = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioYieldSignConfig} returns this
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.clearCreepTimeoutSec = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioYieldSignConfig.prototype.hasCreepTimeoutSec = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ScenarioConfig.repeatedFields_ = [16,17];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.ScenarioConfig.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,18]];

/**
 * @enum {number}
 */
proto.apollo.planning.ScenarioConfig.ScenarioConfigCase = {
  SCENARIO_CONFIG_NOT_SET: 0,
  LANE_FOLLOW_CONFIG: 2,
  BARE_INTERSECTION_UNPROTECTED_CONFIG: 3,
  EMERGENCY_PULL_OVER_CONFIG: 4,
  EMERGENCY_STOP_CONFIG: 5,
  LEARNING_MODEL_SAMPLE_CONFIG: 6,
  NARROW_STREET_U_TURN_CONFIG: 7,
  PARK_AND_GO_CONFIG: 8,
  PULL_OVER_CONFIG: 9,
  STOP_SIGN_UNPROTECTED_CONFIG: 10,
  TRAFFIC_LIGHT_PROTECTED_CONFIG: 11,
  TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CONFIG: 12,
  TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CONFIG: 13,
  VALET_PARKING_CONFIG: 14,
  YIELD_SIGN_CONFIG: 15,
  DEADEND_TURNAROUND_CONFIG: 18
};

/**
 * @return {proto.apollo.planning.ScenarioConfig.ScenarioConfigCase}
 */
proto.apollo.planning.ScenarioConfig.prototype.getScenarioConfigCase = function() {
  return /** @type {proto.apollo.planning.ScenarioConfig.ScenarioConfigCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.ScenarioConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    scenarioType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    laneFollowConfig: (f = msg.getLaneFollowConfig()) && proto.apollo.planning.ScenarioLaneFollowConfig.toObject(includeInstance, f),
    bareIntersectionUnprotectedConfig: (f = msg.getBareIntersectionUnprotectedConfig()) && proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.toObject(includeInstance, f),
    emergencyPullOverConfig: (f = msg.getEmergencyPullOverConfig()) && proto.apollo.planning.ScenarioEmergencyPullOverConfig.toObject(includeInstance, f),
    emergencyStopConfig: (f = msg.getEmergencyStopConfig()) && proto.apollo.planning.ScenarioEmergencyStopConfig.toObject(includeInstance, f),
    learningModelSampleConfig: (f = msg.getLearningModelSampleConfig()) && proto.apollo.planning.ScenarioLearningModelSampleConfig.toObject(includeInstance, f),
    narrowStreetUTurnConfig: (f = msg.getNarrowStreetUTurnConfig()) && proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.toObject(includeInstance, f),
    parkAndGoConfig: (f = msg.getParkAndGoConfig()) && proto.apollo.planning.ScenarioParkAndGoConfig.toObject(includeInstance, f),
    pullOverConfig: (f = msg.getPullOverConfig()) && proto.apollo.planning.ScenarioPullOverConfig.toObject(includeInstance, f),
    stopSignUnprotectedConfig: (f = msg.getStopSignUnprotectedConfig()) && proto.apollo.planning.ScenarioStopSignUnprotectedConfig.toObject(includeInstance, f),
    trafficLightProtectedConfig: (f = msg.getTrafficLightProtectedConfig()) && proto.apollo.planning.ScenarioTrafficLightProtectedConfig.toObject(includeInstance, f),
    trafficLightUnprotectedLeftTurnConfig: (f = msg.getTrafficLightUnprotectedLeftTurnConfig()) && proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.toObject(includeInstance, f),
    trafficLightUnprotectedRightTurnConfig: (f = msg.getTrafficLightUnprotectedRightTurnConfig()) && proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.toObject(includeInstance, f),
    valetParkingConfig: (f = msg.getValetParkingConfig()) && proto.apollo.planning.ScenarioValetParkingConfig.toObject(includeInstance, f),
    yieldSignConfig: (f = msg.getYieldSignConfig()) && proto.apollo.planning.ScenarioYieldSignConfig.toObject(includeInstance, f),
    deadendTurnaroundConfig: (f = msg.getDeadendTurnaroundConfig()) && proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.toObject(includeInstance, f),
    stageTypeList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    stageConfigList: jspb.Message.toObjectList(msg.getStageConfigList(),
    proto.apollo.planning.ScenarioConfig.StageConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ScenarioConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.scenarioType;

  /** @type {?|undefined} */
  this.laneFollowConfig;

  /** @type {?|undefined} */
  this.bareIntersectionUnprotectedConfig;

  /** @type {?|undefined} */
  this.emergencyPullOverConfig;

  /** @type {?|undefined} */
  this.emergencyStopConfig;

  /** @type {?|undefined} */
  this.learningModelSampleConfig;

  /** @type {?|undefined} */
  this.narrowStreetUTurnConfig;

  /** @type {?|undefined} */
  this.parkAndGoConfig;

  /** @type {?|undefined} */
  this.pullOverConfig;

  /** @type {?|undefined} */
  this.stopSignUnprotectedConfig;

  /** @type {?|undefined} */
  this.trafficLightProtectedConfig;

  /** @type {?|undefined} */
  this.trafficLightUnprotectedLeftTurnConfig;

  /** @type {?|undefined} */
  this.trafficLightUnprotectedRightTurnConfig;

  /** @type {?|undefined} */
  this.valetParkingConfig;

  /** @type {?|undefined} */
  this.yieldSignConfig;

  /** @type {?|undefined} */
  this.deadendTurnaroundConfig;

  /** @type {?|undefined} */
  this.stageTypeList;

  /** @type {?|undefined} */
  this.stageConfigList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioConfig}
 */
proto.apollo.planning.ScenarioConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioConfig();
  obj.scenarioType != null && jspb.Message.setField(msg, 1, obj.scenarioType);
  obj.laneFollowConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.ScenarioLaneFollowConfig.fromObject(obj.laneFollowConfig));
  obj.bareIntersectionUnprotectedConfig && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.fromObject(obj.bareIntersectionUnprotectedConfig));
  obj.emergencyPullOverConfig && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.ScenarioEmergencyPullOverConfig.fromObject(obj.emergencyPullOverConfig));
  obj.emergencyStopConfig && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.ScenarioEmergencyStopConfig.fromObject(obj.emergencyStopConfig));
  obj.learningModelSampleConfig && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.ScenarioLearningModelSampleConfig.fromObject(obj.learningModelSampleConfig));
  obj.narrowStreetUTurnConfig && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.fromObject(obj.narrowStreetUTurnConfig));
  obj.parkAndGoConfig && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.planning.ScenarioParkAndGoConfig.fromObject(obj.parkAndGoConfig));
  obj.pullOverConfig && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.planning.ScenarioPullOverConfig.fromObject(obj.pullOverConfig));
  obj.stopSignUnprotectedConfig && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.planning.ScenarioStopSignUnprotectedConfig.fromObject(obj.stopSignUnprotectedConfig));
  obj.trafficLightProtectedConfig && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.planning.ScenarioTrafficLightProtectedConfig.fromObject(obj.trafficLightProtectedConfig));
  obj.trafficLightUnprotectedLeftTurnConfig && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.fromObject(obj.trafficLightUnprotectedLeftTurnConfig));
  obj.trafficLightUnprotectedRightTurnConfig && jspb.Message.setWrapperField(
      msg, 13, proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.fromObject(obj.trafficLightUnprotectedRightTurnConfig));
  obj.valetParkingConfig && jspb.Message.setWrapperField(
      msg, 14, proto.apollo.planning.ScenarioValetParkingConfig.fromObject(obj.valetParkingConfig));
  obj.yieldSignConfig && jspb.Message.setWrapperField(
      msg, 15, proto.apollo.planning.ScenarioYieldSignConfig.fromObject(obj.yieldSignConfig));
  obj.deadendTurnaroundConfig && jspb.Message.setWrapperField(
      msg, 18, proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.fromObject(obj.deadendTurnaroundConfig));
  obj.stageTypeList != null && jspb.Message.setField(msg, 16, obj.stageTypeList);
  obj.stageConfigList && jspb.Message.setRepeatedWrapperField(
      msg, 17, obj.stageConfigList.map(
          proto.apollo.planning.ScenarioConfig.StageConfig.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioConfig}
 */
proto.apollo.planning.ScenarioConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioConfig;
  return proto.apollo.planning.ScenarioConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioConfig}
 */
proto.apollo.planning.ScenarioConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.ScenarioConfig.ScenarioType} */ (reader.readEnum());
      msg.setScenarioType(value);
      break;
    case 2:
      var value = new proto.apollo.planning.ScenarioLaneFollowConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioLaneFollowConfig.deserializeBinaryFromReader);
      msg.setLaneFollowConfig(value);
      break;
    case 3:
      var value = new proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.deserializeBinaryFromReader);
      msg.setBareIntersectionUnprotectedConfig(value);
      break;
    case 4:
      var value = new proto.apollo.planning.ScenarioEmergencyPullOverConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioEmergencyPullOverConfig.deserializeBinaryFromReader);
      msg.setEmergencyPullOverConfig(value);
      break;
    case 5:
      var value = new proto.apollo.planning.ScenarioEmergencyStopConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioEmergencyStopConfig.deserializeBinaryFromReader);
      msg.setEmergencyStopConfig(value);
      break;
    case 6:
      var value = new proto.apollo.planning.ScenarioLearningModelSampleConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioLearningModelSampleConfig.deserializeBinaryFromReader);
      msg.setLearningModelSampleConfig(value);
      break;
    case 7:
      var value = new proto.apollo.planning.ScenarioNarrowStreetUTurnConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.deserializeBinaryFromReader);
      msg.setNarrowStreetUTurnConfig(value);
      break;
    case 8:
      var value = new proto.apollo.planning.ScenarioParkAndGoConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioParkAndGoConfig.deserializeBinaryFromReader);
      msg.setParkAndGoConfig(value);
      break;
    case 9:
      var value = new proto.apollo.planning.ScenarioPullOverConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioPullOverConfig.deserializeBinaryFromReader);
      msg.setPullOverConfig(value);
      break;
    case 10:
      var value = new proto.apollo.planning.ScenarioStopSignUnprotectedConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioStopSignUnprotectedConfig.deserializeBinaryFromReader);
      msg.setStopSignUnprotectedConfig(value);
      break;
    case 11:
      var value = new proto.apollo.planning.ScenarioTrafficLightProtectedConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioTrafficLightProtectedConfig.deserializeBinaryFromReader);
      msg.setTrafficLightProtectedConfig(value);
      break;
    case 12:
      var value = new proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.deserializeBinaryFromReader);
      msg.setTrafficLightUnprotectedLeftTurnConfig(value);
      break;
    case 13:
      var value = new proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.deserializeBinaryFromReader);
      msg.setTrafficLightUnprotectedRightTurnConfig(value);
      break;
    case 14:
      var value = new proto.apollo.planning.ScenarioValetParkingConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioValetParkingConfig.deserializeBinaryFromReader);
      msg.setValetParkingConfig(value);
      break;
    case 15:
      var value = new proto.apollo.planning.ScenarioYieldSignConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioYieldSignConfig.deserializeBinaryFromReader);
      msg.setYieldSignConfig(value);
      break;
    case 18:
      var value = new proto.apollo.planning.ScenarioDeadEndTurnAroundConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.deserializeBinaryFromReader);
      msg.setDeadendTurnaroundConfig(value);
      break;
    case 16:
      var values = /** @type {!Array<!proto.apollo.planning.ScenarioConfig.StageType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStageType(values[i]);
      }
      break;
    case 17:
      var value = new proto.apollo.planning.ScenarioConfig.StageConfig;
      reader.readMessage(value,proto.apollo.planning.ScenarioConfig.StageConfig.deserializeBinaryFromReader);
      msg.addStageConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.ScenarioConfig.ScenarioType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLaneFollowConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.ScenarioLaneFollowConfig.serializeBinaryToWriter
    );
  }
  f = message.getBareIntersectionUnprotectedConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig.serializeBinaryToWriter
    );
  }
  f = message.getEmergencyPullOverConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.ScenarioEmergencyPullOverConfig.serializeBinaryToWriter
    );
  }
  f = message.getEmergencyStopConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.ScenarioEmergencyStopConfig.serializeBinaryToWriter
    );
  }
  f = message.getLearningModelSampleConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.ScenarioLearningModelSampleConfig.serializeBinaryToWriter
    );
  }
  f = message.getNarrowStreetUTurnConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.ScenarioNarrowStreetUTurnConfig.serializeBinaryToWriter
    );
  }
  f = message.getParkAndGoConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.planning.ScenarioParkAndGoConfig.serializeBinaryToWriter
    );
  }
  f = message.getPullOverConfig();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.planning.ScenarioPullOverConfig.serializeBinaryToWriter
    );
  }
  f = message.getStopSignUnprotectedConfig();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.planning.ScenarioStopSignUnprotectedConfig.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLightProtectedConfig();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.planning.ScenarioTrafficLightProtectedConfig.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLightUnprotectedLeftTurnConfig();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.serializeBinaryToWriter
    );
  }
  f = message.getTrafficLightUnprotectedRightTurnConfig();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.serializeBinaryToWriter
    );
  }
  f = message.getValetParkingConfig();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.apollo.planning.ScenarioValetParkingConfig.serializeBinaryToWriter
    );
  }
  f = message.getYieldSignConfig();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.apollo.planning.ScenarioYieldSignConfig.serializeBinaryToWriter
    );
  }
  f = message.getDeadendTurnaroundConfig();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.apollo.planning.ScenarioDeadEndTurnAroundConfig.serializeBinaryToWriter
    );
  }
  f = message.getStageTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      16,
      f
    );
  }
  f = message.getStageConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.apollo.planning.ScenarioConfig.StageConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.ScenarioConfig.ScenarioType = {
  LANE_FOLLOW: 0,
  BARE_INTERSECTION_UNPROTECTED: 2,
  STOP_SIGN_PROTECTED: 3,
  STOP_SIGN_UNPROTECTED: 4,
  TRAFFIC_LIGHT_PROTECTED: 5,
  TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN: 6,
  TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN: 7,
  YIELD_SIGN: 8,
  PULL_OVER: 9,
  VALET_PARKING: 10,
  EMERGENCY_PULL_OVER: 11,
  EMERGENCY_STOP: 12,
  NARROW_STREET_U_TURN: 13,
  PARK_AND_GO: 14,
  LEARNING_MODEL_SAMPLE: 15,
  DEADEND_TURNAROUND: 16
};

/**
 * @enum {number}
 */
proto.apollo.planning.ScenarioConfig.StageType = {
  NO_STAGE: 0,
  LANE_FOLLOW_DEFAULT_STAGE: 1,
  BARE_INTERSECTION_UNPROTECTED_APPROACH: 200,
  BARE_INTERSECTION_UNPROTECTED_INTERSECTION_CRUISE: 201,
  STOP_SIGN_UNPROTECTED_PRE_STOP: 300,
  STOP_SIGN_UNPROTECTED_STOP: 301,
  STOP_SIGN_UNPROTECTED_CREEP: 302,
  STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE: 303,
  TRAFFIC_LIGHT_PROTECTED_APPROACH: 400,
  TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE: 401,
  TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH: 410,
  TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP: 411,
  TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE: 412,
  TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP: 420,
  TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP: 421,
  TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE: 422,
  PULL_OVER_APPROACH: 500,
  PULL_OVER_RETRY_APPROACH_PARKING: 501,
  PULL_OVER_RETRY_PARKING: 502,
  EMERGENCY_PULL_OVER_SLOW_DOWN: 600,
  EMERGENCY_PULL_OVER_APPROACH: 601,
  EMERGENCY_PULL_OVER_STANDBY: 602,
  EMERGENCY_STOP_APPROACH: 610,
  EMERGENCY_STOP_STANDBY: 611,
  VALET_PARKING_APPROACHING_PARKING_SPOT: 700,
  VALET_PARKING_PARKING: 701,
  DEADEND_TURNAROUND_APPROACHING_TURNING_POINT: 1100,
  DEADEND_TURNAROUND_TURNING: 1101,
  PARK_AND_GO_CHECK: 800,
  PARK_AND_GO_CRUISE: 801,
  PARK_AND_GO_ADJUST: 802,
  PARK_AND_GO_PRE_CRUISE: 803,
  YIELD_SIGN_APPROACH: 900,
  YIELD_SIGN_CREEP: 901,
  LEARNING_MODEL_RUN: 1000
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ScenarioConfig.StageConfig.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ScenarioConfig.StageConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ScenarioConfig.StageConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioConfig.StageConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    stageType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    taskTypeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    taskConfigList: jspb.Message.toObjectList(msg.getTaskConfigList(),
    proto.apollo.planning.TaskConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StageConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ScenarioConfig.StageConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stageType;

  /** @type {?|undefined} */
  this.enabled;

  /** @type {?|undefined} */
  this.taskTypeList;

  /** @type {?|undefined} */
  this.taskConfigList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ScenarioConfig.StageConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ScenarioConfig.StageConfig();
  obj.stageType != null && jspb.Message.setField(msg, 1, obj.stageType);
  obj.enabled != null && jspb.Message.setField(msg, 2, obj.enabled);
  obj.taskTypeList != null && jspb.Message.setField(msg, 3, obj.taskTypeList);
  obj.taskConfigList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.taskConfigList.map(
          proto.apollo.planning.TaskConfig.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ScenarioConfig.StageConfig;
  return proto.apollo.planning.ScenarioConfig.StageConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ScenarioConfig.StageConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.ScenarioConfig.StageType} */ (reader.readEnum());
      msg.setStageType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.apollo.planning.TaskConfig.TaskType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTaskType(values[i]);
      }
      break;
    case 4:
      var value = new proto.apollo.planning.TaskConfig;
      reader.readMessage(value,proto.apollo.planning.TaskConfig.deserializeBinaryFromReader);
      msg.addTaskConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ScenarioConfig.StageConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ScenarioConfig.StageConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ScenarioConfig.StageConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.ScenarioConfig.StageType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTaskTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      3,
      f
    );
  }
  f = message.getTaskConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.planning.TaskConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional StageType stage_type = 1;
 * @return {!proto.apollo.planning.ScenarioConfig.StageType}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.getStageType = function() {
  return /** @type {!proto.apollo.planning.ScenarioConfig.StageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.planning.ScenarioConfig.StageType} value
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.setStageType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.clearStageType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.hasStageType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TaskConfig.TaskType task_type = 3;
 * @return {!Array<!proto.apollo.planning.TaskConfig.TaskType>}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.getTaskTypeList = function() {
  return /** @type {!Array<!proto.apollo.planning.TaskConfig.TaskType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.apollo.planning.TaskConfig.TaskType>} value
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.setTaskTypeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.apollo.planning.TaskConfig.TaskType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.addTaskType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.clearTaskTypeList = function() {
  return this.setTaskTypeList([]);
};


/**
 * repeated TaskConfig task_config = 4;
 * @return {!Array<!proto.apollo.planning.TaskConfig>}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.getTaskConfigList = function() {
  return /** @type{!Array<!proto.apollo.planning.TaskConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TaskConfig, 4));
};


/**
 * @param {!Array<!proto.apollo.planning.TaskConfig>} value
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.setTaskConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.planning.TaskConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TaskConfig}
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.addTaskConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.planning.TaskConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.StageConfig.prototype.clearTaskConfigList = function() {
  return this.setTaskConfigList([]);
};


/**
 * optional ScenarioType scenario_type = 1;
 * @return {!proto.apollo.planning.ScenarioConfig.ScenarioType}
 */
proto.apollo.planning.ScenarioConfig.prototype.getScenarioType = function() {
  return /** @type {!proto.apollo.planning.ScenarioConfig.ScenarioType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.planning.ScenarioConfig.ScenarioType} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.setScenarioType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearScenarioType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasScenarioType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ScenarioLaneFollowConfig lane_follow_config = 2;
 * @return {?proto.apollo.planning.ScenarioLaneFollowConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getLaneFollowConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioLaneFollowConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioLaneFollowConfig, 2));
};


/**
 * @param {?proto.apollo.planning.ScenarioLaneFollowConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setLaneFollowConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearLaneFollowConfig = function() {
  return this.setLaneFollowConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasLaneFollowConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 3;
 * @return {?proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getBareIntersectionUnprotectedConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig, 3));
};


/**
 * @param {?proto.apollo.planning.ScenarioBareIntersectionUnprotectedConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setBareIntersectionUnprotectedConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearBareIntersectionUnprotectedConfig = function() {
  return this.setBareIntersectionUnprotectedConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasBareIntersectionUnprotectedConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ScenarioEmergencyPullOverConfig emergency_pull_over_config = 4;
 * @return {?proto.apollo.planning.ScenarioEmergencyPullOverConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getEmergencyPullOverConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioEmergencyPullOverConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioEmergencyPullOverConfig, 4));
};


/**
 * @param {?proto.apollo.planning.ScenarioEmergencyPullOverConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setEmergencyPullOverConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearEmergencyPullOverConfig = function() {
  return this.setEmergencyPullOverConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasEmergencyPullOverConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ScenarioEmergencyStopConfig emergency_stop_config = 5;
 * @return {?proto.apollo.planning.ScenarioEmergencyStopConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getEmergencyStopConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioEmergencyStopConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioEmergencyStopConfig, 5));
};


/**
 * @param {?proto.apollo.planning.ScenarioEmergencyStopConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setEmergencyStopConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearEmergencyStopConfig = function() {
  return this.setEmergencyStopConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasEmergencyStopConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ScenarioLearningModelSampleConfig learning_model_sample_config = 6;
 * @return {?proto.apollo.planning.ScenarioLearningModelSampleConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getLearningModelSampleConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioLearningModelSampleConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioLearningModelSampleConfig, 6));
};


/**
 * @param {?proto.apollo.planning.ScenarioLearningModelSampleConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setLearningModelSampleConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearLearningModelSampleConfig = function() {
  return this.setLearningModelSampleConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasLearningModelSampleConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 7;
 * @return {?proto.apollo.planning.ScenarioNarrowStreetUTurnConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getNarrowStreetUTurnConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioNarrowStreetUTurnConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioNarrowStreetUTurnConfig, 7));
};


/**
 * @param {?proto.apollo.planning.ScenarioNarrowStreetUTurnConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setNarrowStreetUTurnConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearNarrowStreetUTurnConfig = function() {
  return this.setNarrowStreetUTurnConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasNarrowStreetUTurnConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ScenarioParkAndGoConfig park_and_go_config = 8;
 * @return {?proto.apollo.planning.ScenarioParkAndGoConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getParkAndGoConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioParkAndGoConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioParkAndGoConfig, 8));
};


/**
 * @param {?proto.apollo.planning.ScenarioParkAndGoConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setParkAndGoConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearParkAndGoConfig = function() {
  return this.setParkAndGoConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasParkAndGoConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ScenarioPullOverConfig pull_over_config = 9;
 * @return {?proto.apollo.planning.ScenarioPullOverConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getPullOverConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioPullOverConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioPullOverConfig, 9));
};


/**
 * @param {?proto.apollo.planning.ScenarioPullOverConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setPullOverConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearPullOverConfig = function() {
  return this.setPullOverConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasPullOverConfig = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 10;
 * @return {?proto.apollo.planning.ScenarioStopSignUnprotectedConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getStopSignUnprotectedConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioStopSignUnprotectedConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioStopSignUnprotectedConfig, 10));
};


/**
 * @param {?proto.apollo.planning.ScenarioStopSignUnprotectedConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setStopSignUnprotectedConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearStopSignUnprotectedConfig = function() {
  return this.setStopSignUnprotectedConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasStopSignUnprotectedConfig = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 11;
 * @return {?proto.apollo.planning.ScenarioTrafficLightProtectedConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getTrafficLightProtectedConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioTrafficLightProtectedConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioTrafficLightProtectedConfig, 11));
};


/**
 * @param {?proto.apollo.planning.ScenarioTrafficLightProtectedConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setTrafficLightProtectedConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearTrafficLightProtectedConfig = function() {
  return this.setTrafficLightProtectedConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasTrafficLightProtectedConfig = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 12;
 * @return {?proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getTrafficLightUnprotectedLeftTurnConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig, 12));
};


/**
 * @param {?proto.apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setTrafficLightUnprotectedLeftTurnConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearTrafficLightUnprotectedLeftTurnConfig = function() {
  return this.setTrafficLightUnprotectedLeftTurnConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasTrafficLightUnprotectedLeftTurnConfig = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 13;
 * @return {?proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getTrafficLightUnprotectedRightTurnConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig, 13));
};


/**
 * @param {?proto.apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setTrafficLightUnprotectedRightTurnConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearTrafficLightUnprotectedRightTurnConfig = function() {
  return this.setTrafficLightUnprotectedRightTurnConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasTrafficLightUnprotectedRightTurnConfig = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ScenarioValetParkingConfig valet_parking_config = 14;
 * @return {?proto.apollo.planning.ScenarioValetParkingConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getValetParkingConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioValetParkingConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioValetParkingConfig, 14));
};


/**
 * @param {?proto.apollo.planning.ScenarioValetParkingConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setValetParkingConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearValetParkingConfig = function() {
  return this.setValetParkingConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasValetParkingConfig = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ScenarioYieldSignConfig yield_sign_config = 15;
 * @return {?proto.apollo.planning.ScenarioYieldSignConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getYieldSignConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioYieldSignConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioYieldSignConfig, 15));
};


/**
 * @param {?proto.apollo.planning.ScenarioYieldSignConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setYieldSignConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearYieldSignConfig = function() {
  return this.setYieldSignConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasYieldSignConfig = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
 * @return {?proto.apollo.planning.ScenarioDeadEndTurnAroundConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.getDeadendTurnaroundConfig = function() {
  return /** @type{?proto.apollo.planning.ScenarioDeadEndTurnAroundConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ScenarioDeadEndTurnAroundConfig, 18));
};


/**
 * @param {?proto.apollo.planning.ScenarioDeadEndTurnAroundConfig|undefined} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setDeadendTurnaroundConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.apollo.planning.ScenarioConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearDeadendTurnaroundConfig = function() {
  return this.setDeadendTurnaroundConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ScenarioConfig.prototype.hasDeadendTurnaroundConfig = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * repeated StageType stage_type = 16;
 * @return {!Array<!proto.apollo.planning.ScenarioConfig.StageType>}
 */
proto.apollo.planning.ScenarioConfig.prototype.getStageTypeList = function() {
  return /** @type {!Array<!proto.apollo.planning.ScenarioConfig.StageType>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<!proto.apollo.planning.ScenarioConfig.StageType>} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.setStageTypeList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!proto.apollo.planning.ScenarioConfig.StageType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.addStageType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearStageTypeList = function() {
  return this.setStageTypeList([]);
};


/**
 * repeated StageConfig stage_config = 17;
 * @return {!Array<!proto.apollo.planning.ScenarioConfig.StageConfig>}
 */
proto.apollo.planning.ScenarioConfig.prototype.getStageConfigList = function() {
  return /** @type{!Array<!proto.apollo.planning.ScenarioConfig.StageConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.ScenarioConfig.StageConfig, 17));
};


/**
 * @param {!Array<!proto.apollo.planning.ScenarioConfig.StageConfig>} value
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
*/
proto.apollo.planning.ScenarioConfig.prototype.setStageConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.apollo.planning.ScenarioConfig.StageConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ScenarioConfig.StageConfig}
 */
proto.apollo.planning.ScenarioConfig.prototype.addStageConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.apollo.planning.ScenarioConfig.StageConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ScenarioConfig} returns this
 */
proto.apollo.planning.ScenarioConfig.prototype.clearStageConfigList = function() {
  return this.setStageConfigList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlannerPublicRoadConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlannerPublicRoadConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlannerPublicRoadConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlannerPublicRoadConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlannerPublicRoadConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlannerPublicRoadConfig.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlannerPublicRoadConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlannerPublicRoadConfig}
 */
proto.apollo.planning.PlannerPublicRoadConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlannerPublicRoadConfig();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlannerPublicRoadConfig}
 */
proto.apollo.planning.PlannerPublicRoadConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlannerPublicRoadConfig;
  return proto.apollo.planning.PlannerPublicRoadConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlannerPublicRoadConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlannerPublicRoadConfig}
 */
proto.apollo.planning.PlannerPublicRoadConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlannerPublicRoadConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlannerPublicRoadConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlannerPublicRoadConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlannerPublicRoadConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.PlannerNaviConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlannerNaviConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlannerNaviConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlannerNaviConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    naviPathDeciderConfig: (f = msg.getNaviPathDeciderConfig()) && modules_planning_proto_task_config_pb.NaviPathDeciderConfig.toObject(includeInstance, f),
    naviSpeedDeciderConfig: (f = msg.getNaviSpeedDeciderConfig()) && modules_planning_proto_task_config_pb.NaviSpeedDeciderConfig.toObject(includeInstance, f),
    naviObstacleDeciderConfig: (f = msg.getNaviObstacleDeciderConfig()) && modules_planning_proto_task_config_pb.NaviObstacleDeciderConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlannerNaviConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlannerNaviConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.taskList;

  /** @type {?|undefined} */
  this.naviPathDeciderConfig;

  /** @type {?|undefined} */
  this.naviSpeedDeciderConfig;

  /** @type {?|undefined} */
  this.naviObstacleDeciderConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlannerNaviConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlannerNaviConfig}
 */
proto.apollo.planning.PlannerNaviConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlannerNaviConfig();
  obj.taskList != null && jspb.Message.setField(msg, 1, obj.taskList);
  obj.naviPathDeciderConfig && jspb.Message.setWrapperField(
      msg, 2, modules_planning_proto_task_config_pb.NaviPathDeciderConfig.fromObject(obj.naviPathDeciderConfig));
  obj.naviSpeedDeciderConfig && jspb.Message.setWrapperField(
      msg, 3, modules_planning_proto_task_config_pb.NaviSpeedDeciderConfig.fromObject(obj.naviSpeedDeciderConfig));
  obj.naviObstacleDeciderConfig && jspb.Message.setWrapperField(
      msg, 4, modules_planning_proto_task_config_pb.NaviObstacleDeciderConfig.fromObject(obj.naviObstacleDeciderConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlannerNaviConfig}
 */
proto.apollo.planning.PlannerNaviConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlannerNaviConfig;
  return proto.apollo.planning.PlannerNaviConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlannerNaviConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlannerNaviConfig}
 */
proto.apollo.planning.PlannerNaviConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.apollo.planning.TaskConfig.TaskType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTask(values[i]);
      }
      break;
    case 2:
      var value = new modules_planning_proto_task_config_pb.NaviPathDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.NaviPathDeciderConfig.deserializeBinaryFromReader);
      msg.setNaviPathDeciderConfig(value);
      break;
    case 3:
      var value = new modules_planning_proto_task_config_pb.NaviSpeedDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.NaviSpeedDeciderConfig.deserializeBinaryFromReader);
      msg.setNaviSpeedDeciderConfig(value);
      break;
    case 4:
      var value = new modules_planning_proto_task_config_pb.NaviObstacleDeciderConfig;
      reader.readMessage(value,modules_planning_proto_task_config_pb.NaviObstacleDeciderConfig.deserializeBinaryFromReader);
      msg.setNaviObstacleDeciderConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlannerNaviConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlannerNaviConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlannerNaviConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1,
      f
    );
  }
  f = message.getNaviPathDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_planning_proto_task_config_pb.NaviPathDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getNaviSpeedDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_planning_proto_task_config_pb.NaviSpeedDeciderConfig.serializeBinaryToWriter
    );
  }
  f = message.getNaviObstacleDeciderConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_planning_proto_task_config_pb.NaviObstacleDeciderConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TaskConfig.TaskType task = 1;
 * @return {!Array<!proto.apollo.planning.TaskConfig.TaskType>}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.getTaskList = function() {
  return /** @type {!Array<!proto.apollo.planning.TaskConfig.TaskType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.TaskConfig.TaskType>} value
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
 */
proto.apollo.planning.PlannerNaviConfig.prototype.setTaskList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.apollo.planning.TaskConfig.TaskType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
 */
proto.apollo.planning.PlannerNaviConfig.prototype.addTask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
 */
proto.apollo.planning.PlannerNaviConfig.prototype.clearTaskList = function() {
  return this.setTaskList([]);
};


/**
 * optional NaviPathDeciderConfig navi_path_decider_config = 2;
 * @return {?proto.apollo.planning.NaviPathDeciderConfig}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.getNaviPathDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.NaviPathDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.NaviPathDeciderConfig, 2));
};


/**
 * @param {?proto.apollo.planning.NaviPathDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
*/
proto.apollo.planning.PlannerNaviConfig.prototype.setNaviPathDeciderConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
 */
proto.apollo.planning.PlannerNaviConfig.prototype.clearNaviPathDeciderConfig = function() {
  return this.setNaviPathDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.hasNaviPathDeciderConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NaviSpeedDeciderConfig navi_speed_decider_config = 3;
 * @return {?proto.apollo.planning.NaviSpeedDeciderConfig}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.getNaviSpeedDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.NaviSpeedDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.NaviSpeedDeciderConfig, 3));
};


/**
 * @param {?proto.apollo.planning.NaviSpeedDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
*/
proto.apollo.planning.PlannerNaviConfig.prototype.setNaviSpeedDeciderConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
 */
proto.apollo.planning.PlannerNaviConfig.prototype.clearNaviSpeedDeciderConfig = function() {
  return this.setNaviSpeedDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.hasNaviSpeedDeciderConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
 * @return {?proto.apollo.planning.NaviObstacleDeciderConfig}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.getNaviObstacleDeciderConfig = function() {
  return /** @type{?proto.apollo.planning.NaviObstacleDeciderConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_task_config_pb.NaviObstacleDeciderConfig, 4));
};


/**
 * @param {?proto.apollo.planning.NaviObstacleDeciderConfig|undefined} value
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
*/
proto.apollo.planning.PlannerNaviConfig.prototype.setNaviObstacleDeciderConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlannerNaviConfig} returns this
 */
proto.apollo.planning.PlannerNaviConfig.prototype.clearNaviObstacleDeciderConfig = function() {
  return this.setNaviObstacleDeciderConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlannerNaviConfig.prototype.hasNaviObstacleDeciderConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.RtkPlanningConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.RtkPlanningConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.RtkPlanningConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RtkPlanningConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    plannerType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RtkPlanningConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.RtkPlanningConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.plannerType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.RtkPlanningConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.RtkPlanningConfig}
 */
proto.apollo.planning.RtkPlanningConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.RtkPlanningConfig();
  obj.plannerType != null && jspb.Message.setField(msg, 1, obj.plannerType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.RtkPlanningConfig}
 */
proto.apollo.planning.RtkPlanningConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.RtkPlanningConfig;
  return proto.apollo.planning.RtkPlanningConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.RtkPlanningConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.RtkPlanningConfig}
 */
proto.apollo.planning.RtkPlanningConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.PlannerType} */ (reader.readEnum());
      msg.setPlannerType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.RtkPlanningConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.RtkPlanningConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.RtkPlanningConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RtkPlanningConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.PlannerType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional PlannerType planner_type = 1;
 * @return {!proto.apollo.planning.PlannerType}
 */
proto.apollo.planning.RtkPlanningConfig.prototype.getPlannerType = function() {
  return /** @type {!proto.apollo.planning.PlannerType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.planning.PlannerType} value
 * @return {!proto.apollo.planning.RtkPlanningConfig} returns this
 */
proto.apollo.planning.RtkPlanningConfig.prototype.setPlannerType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RtkPlanningConfig} returns this
 */
proto.apollo.planning.RtkPlanningConfig.prototype.clearPlannerType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RtkPlanningConfig.prototype.hasPlannerType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.StandardPlanningConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.StandardPlanningConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.StandardPlanningConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.StandardPlanningConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StandardPlanningConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    plannerTypeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    plannerPublicRoadConfig: (f = msg.getPlannerPublicRoadConfig()) && proto.apollo.planning.PlannerPublicRoadConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StandardPlanningConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.StandardPlanningConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.plannerTypeList;

  /** @type {?|undefined} */
  this.plannerPublicRoadConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.StandardPlanningConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.StandardPlanningConfig}
 */
proto.apollo.planning.StandardPlanningConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.StandardPlanningConfig();
  obj.plannerTypeList != null && jspb.Message.setField(msg, 1, obj.plannerTypeList);
  obj.plannerPublicRoadConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.PlannerPublicRoadConfig.fromObject(obj.plannerPublicRoadConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.StandardPlanningConfig}
 */
proto.apollo.planning.StandardPlanningConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.StandardPlanningConfig;
  return proto.apollo.planning.StandardPlanningConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.StandardPlanningConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.StandardPlanningConfig}
 */
proto.apollo.planning.StandardPlanningConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.apollo.planning.PlannerType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPlannerType(values[i]);
      }
      break;
    case 2:
      var value = new proto.apollo.planning.PlannerPublicRoadConfig;
      reader.readMessage(value,proto.apollo.planning.PlannerPublicRoadConfig.deserializeBinaryFromReader);
      msg.setPlannerPublicRoadConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.StandardPlanningConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.StandardPlanningConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.StandardPlanningConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.StandardPlanningConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlannerTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1,
      f
    );
  }
  f = message.getPlannerPublicRoadConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.PlannerPublicRoadConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlannerType planner_type = 1;
 * @return {!Array<!proto.apollo.planning.PlannerType>}
 */
proto.apollo.planning.StandardPlanningConfig.prototype.getPlannerTypeList = function() {
  return /** @type {!Array<!proto.apollo.planning.PlannerType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.PlannerType>} value
 * @return {!proto.apollo.planning.StandardPlanningConfig} returns this
 */
proto.apollo.planning.StandardPlanningConfig.prototype.setPlannerTypeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.apollo.planning.PlannerType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.StandardPlanningConfig} returns this
 */
proto.apollo.planning.StandardPlanningConfig.prototype.addPlannerType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.StandardPlanningConfig} returns this
 */
proto.apollo.planning.StandardPlanningConfig.prototype.clearPlannerTypeList = function() {
  return this.setPlannerTypeList([]);
};


/**
 * optional PlannerPublicRoadConfig planner_public_road_config = 2;
 * @return {?proto.apollo.planning.PlannerPublicRoadConfig}
 */
proto.apollo.planning.StandardPlanningConfig.prototype.getPlannerPublicRoadConfig = function() {
  return /** @type{?proto.apollo.planning.PlannerPublicRoadConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PlannerPublicRoadConfig, 2));
};


/**
 * @param {?proto.apollo.planning.PlannerPublicRoadConfig|undefined} value
 * @return {!proto.apollo.planning.StandardPlanningConfig} returns this
*/
proto.apollo.planning.StandardPlanningConfig.prototype.setPlannerPublicRoadConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.StandardPlanningConfig} returns this
 */
proto.apollo.planning.StandardPlanningConfig.prototype.clearPlannerPublicRoadConfig = function() {
  return this.setPlannerPublicRoadConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.StandardPlanningConfig.prototype.hasPlannerPublicRoadConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.NavigationPlanningConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.NavigationPlanningConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.NavigationPlanningConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NavigationPlanningConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    plannerTypeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    plannerNaviConfig: (f = msg.getPlannerNaviConfig()) && proto.apollo.planning.PlannerNaviConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NavigationPlanningConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.NavigationPlanningConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.plannerTypeList;

  /** @type {?|undefined} */
  this.plannerNaviConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.NavigationPlanningConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.NavigationPlanningConfig}
 */
proto.apollo.planning.NavigationPlanningConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.NavigationPlanningConfig();
  obj.plannerTypeList != null && jspb.Message.setField(msg, 1, obj.plannerTypeList);
  obj.plannerNaviConfig && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.PlannerNaviConfig.fromObject(obj.plannerNaviConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.NavigationPlanningConfig}
 */
proto.apollo.planning.NavigationPlanningConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.NavigationPlanningConfig;
  return proto.apollo.planning.NavigationPlanningConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.NavigationPlanningConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.NavigationPlanningConfig}
 */
proto.apollo.planning.NavigationPlanningConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.apollo.planning.PlannerType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPlannerType(values[i]);
      }
      break;
    case 4:
      var value = new proto.apollo.planning.PlannerNaviConfig;
      reader.readMessage(value,proto.apollo.planning.PlannerNaviConfig.deserializeBinaryFromReader);
      msg.setPlannerNaviConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.NavigationPlanningConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.NavigationPlanningConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NavigationPlanningConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlannerTypeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1,
      f
    );
  }
  f = message.getPlannerNaviConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.PlannerNaviConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlannerType planner_type = 1;
 * @return {!Array<!proto.apollo.planning.PlannerType>}
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.getPlannerTypeList = function() {
  return /** @type {!Array<!proto.apollo.planning.PlannerType>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.PlannerType>} value
 * @return {!proto.apollo.planning.NavigationPlanningConfig} returns this
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.setPlannerTypeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.apollo.planning.PlannerType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.NavigationPlanningConfig} returns this
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.addPlannerType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.NavigationPlanningConfig} returns this
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.clearPlannerTypeList = function() {
  return this.setPlannerTypeList([]);
};


/**
 * optional PlannerNaviConfig planner_navi_config = 4;
 * @return {?proto.apollo.planning.PlannerNaviConfig}
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.getPlannerNaviConfig = function() {
  return /** @type{?proto.apollo.planning.PlannerNaviConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PlannerNaviConfig, 4));
};


/**
 * @param {?proto.apollo.planning.PlannerNaviConfig|undefined} value
 * @return {!proto.apollo.planning.NavigationPlanningConfig} returns this
*/
proto.apollo.planning.NavigationPlanningConfig.prototype.setPlannerNaviConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.NavigationPlanningConfig} returns this
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.clearPlannerNaviConfig = function() {
  return this.setPlannerNaviConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NavigationPlanningConfig.prototype.hasPlannerNaviConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TopicConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TopicConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TopicConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TopicConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chassisTopic: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    hmiStatusTopic: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    localizationTopic: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    planningPadTopic: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    planningTrajectoryTopic: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    predictionTopic: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    relativeMapTopic: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    routingRequestTopic: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    routingResponseTopic: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    storyTellingTopic: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    trafficLightDetectionTopic: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    planningLearningDataTopic: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TopicConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TopicConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.chassisTopic;

  /** @type {?|undefined} */
  this.hmiStatusTopic;

  /** @type {?|undefined} */
  this.localizationTopic;

  /** @type {?|undefined} */
  this.planningPadTopic;

  /** @type {?|undefined} */
  this.planningTrajectoryTopic;

  /** @type {?|undefined} */
  this.predictionTopic;

  /** @type {?|undefined} */
  this.relativeMapTopic;

  /** @type {?|undefined} */
  this.routingRequestTopic;

  /** @type {?|undefined} */
  this.routingResponseTopic;

  /** @type {?|undefined} */
  this.storyTellingTopic;

  /** @type {?|undefined} */
  this.trafficLightDetectionTopic;

  /** @type {?|undefined} */
  this.planningLearningDataTopic;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TopicConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TopicConfig}
 */
proto.apollo.planning.TopicConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TopicConfig();
  obj.chassisTopic != null && jspb.Message.setField(msg, 1, obj.chassisTopic);
  obj.hmiStatusTopic != null && jspb.Message.setField(msg, 2, obj.hmiStatusTopic);
  obj.localizationTopic != null && jspb.Message.setField(msg, 3, obj.localizationTopic);
  obj.planningPadTopic != null && jspb.Message.setField(msg, 4, obj.planningPadTopic);
  obj.planningTrajectoryTopic != null && jspb.Message.setField(msg, 5, obj.planningTrajectoryTopic);
  obj.predictionTopic != null && jspb.Message.setField(msg, 6, obj.predictionTopic);
  obj.relativeMapTopic != null && jspb.Message.setField(msg, 7, obj.relativeMapTopic);
  obj.routingRequestTopic != null && jspb.Message.setField(msg, 8, obj.routingRequestTopic);
  obj.routingResponseTopic != null && jspb.Message.setField(msg, 9, obj.routingResponseTopic);
  obj.storyTellingTopic != null && jspb.Message.setField(msg, 10, obj.storyTellingTopic);
  obj.trafficLightDetectionTopic != null && jspb.Message.setField(msg, 11, obj.trafficLightDetectionTopic);
  obj.planningLearningDataTopic != null && jspb.Message.setField(msg, 12, obj.planningLearningDataTopic);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TopicConfig}
 */
proto.apollo.planning.TopicConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TopicConfig;
  return proto.apollo.planning.TopicConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TopicConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TopicConfig}
 */
proto.apollo.planning.TopicConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChassisTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHmiStatusTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalizationTopic(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanningPadTopic(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanningTrajectoryTopic(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPredictionTopic(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelativeMapTopic(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingRequestTopic(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoutingResponseTopic(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoryTellingTopic(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrafficLightDetectionTopic(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanningLearningDataTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TopicConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TopicConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TopicConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TopicConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string chassis_topic = 1;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getChassisTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setChassisTopic = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearChassisTopic = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasChassisTopic = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hmi_status_topic = 2;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getHmiStatusTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setHmiStatusTopic = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearHmiStatusTopic = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasHmiStatusTopic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string localization_topic = 3;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getLocalizationTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setLocalizationTopic = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearLocalizationTopic = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasLocalizationTopic = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string planning_pad_topic = 4;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getPlanningPadTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setPlanningPadTopic = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearPlanningPadTopic = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasPlanningPadTopic = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string planning_trajectory_topic = 5;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getPlanningTrajectoryTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setPlanningTrajectoryTopic = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearPlanningTrajectoryTopic = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasPlanningTrajectoryTopic = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string prediction_topic = 6;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getPredictionTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setPredictionTopic = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearPredictionTopic = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasPredictionTopic = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string relative_map_topic = 7;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getRelativeMapTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setRelativeMapTopic = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearRelativeMapTopic = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasRelativeMapTopic = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string routing_request_topic = 8;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getRoutingRequestTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setRoutingRequestTopic = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearRoutingRequestTopic = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasRoutingRequestTopic = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string routing_response_topic = 9;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getRoutingResponseTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setRoutingResponseTopic = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearRoutingResponseTopic = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasRoutingResponseTopic = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string story_telling_topic = 10;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getStoryTellingTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setStoryTellingTopic = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearStoryTellingTopic = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasStoryTellingTopic = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string traffic_light_detection_topic = 11;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getTrafficLightDetectionTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setTrafficLightDetectionTopic = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearTrafficLightDetectionTopic = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasTrafficLightDetectionTopic = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string planning_learning_data_topic = 12;
 * @return {string}
 */
proto.apollo.planning.TopicConfig.prototype.getPlanningLearningDataTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.setPlanningLearningDataTopic = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TopicConfig} returns this
 */
proto.apollo.planning.TopicConfig.prototype.clearPlanningLearningDataTopic = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TopicConfig.prototype.hasPlanningLearningDataTopic = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.PlanningConfig.repeatedFields_ = [6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.planning.PlanningConfig.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.apollo.planning.PlanningConfig.PlanningConfigCase = {
  PLANNING_CONFIG_NOT_SET: 0,
  RTK_PLANNING_CONFIG: 3,
  STANDARD_PLANNING_CONFIG: 4,
  NAVIGATION_PLANNING_CONFIG: 5
};

/**
 * @return {proto.apollo.planning.PlanningConfig.PlanningConfigCase}
 */
proto.apollo.planning.PlanningConfig.prototype.getPlanningConfigCase = function() {
  return /** @type {proto.apollo.planning.PlanningConfig.PlanningConfigCase} */(jspb.Message.computeOneofCase(this, proto.apollo.planning.PlanningConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlanningConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlanningConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlanningConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicConfig: (f = msg.getTopicConfig()) && proto.apollo.planning.TopicConfig.toObject(includeInstance, f),
    learningMode: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rtkPlanningConfig: (f = msg.getRtkPlanningConfig()) && proto.apollo.planning.RtkPlanningConfig.toObject(includeInstance, f),
    standardPlanningConfig: (f = msg.getStandardPlanningConfig()) && proto.apollo.planning.StandardPlanningConfig.toObject(includeInstance, f),
    navigationPlanningConfig: (f = msg.getNavigationPlanningConfig()) && proto.apollo.planning.NavigationPlanningConfig.toObject(includeInstance, f),
    defaultTaskConfigList: jspb.Message.toObjectList(msg.getDefaultTaskConfigList(),
    proto.apollo.planning.TaskConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlanningConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlanningConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topicConfig;

  /** @type {?|undefined} */
  this.learningMode;

  /** @type {?|undefined} */
  this.rtkPlanningConfig;

  /** @type {?|undefined} */
  this.standardPlanningConfig;

  /** @type {?|undefined} */
  this.navigationPlanningConfig;

  /** @type {?|undefined} */
  this.defaultTaskConfigList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlanningConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlanningConfig}
 */
proto.apollo.planning.PlanningConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlanningConfig();
  obj.topicConfig && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.TopicConfig.fromObject(obj.topicConfig));
  obj.learningMode != null && jspb.Message.setField(msg, 2, obj.learningMode);
  obj.rtkPlanningConfig && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.RtkPlanningConfig.fromObject(obj.rtkPlanningConfig));
  obj.standardPlanningConfig && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.planning.StandardPlanningConfig.fromObject(obj.standardPlanningConfig));
  obj.navigationPlanningConfig && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.planning.NavigationPlanningConfig.fromObject(obj.navigationPlanningConfig));
  obj.defaultTaskConfigList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.defaultTaskConfigList.map(
          proto.apollo.planning.TaskConfig.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlanningConfig}
 */
proto.apollo.planning.PlanningConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlanningConfig;
  return proto.apollo.planning.PlanningConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlanningConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlanningConfig}
 */
proto.apollo.planning.PlanningConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.TopicConfig;
      reader.readMessage(value,proto.apollo.planning.TopicConfig.deserializeBinaryFromReader);
      msg.setTopicConfig(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.planning.PlanningConfig.PlanningLearningMode} */ (reader.readEnum());
      msg.setLearningMode(value);
      break;
    case 3:
      var value = new proto.apollo.planning.RtkPlanningConfig;
      reader.readMessage(value,proto.apollo.planning.RtkPlanningConfig.deserializeBinaryFromReader);
      msg.setRtkPlanningConfig(value);
      break;
    case 4:
      var value = new proto.apollo.planning.StandardPlanningConfig;
      reader.readMessage(value,proto.apollo.planning.StandardPlanningConfig.deserializeBinaryFromReader);
      msg.setStandardPlanningConfig(value);
      break;
    case 5:
      var value = new proto.apollo.planning.NavigationPlanningConfig;
      reader.readMessage(value,proto.apollo.planning.NavigationPlanningConfig.deserializeBinaryFromReader);
      msg.setNavigationPlanningConfig(value);
      break;
    case 6:
      var value = new proto.apollo.planning.TaskConfig;
      reader.readMessage(value,proto.apollo.planning.TaskConfig.deserializeBinaryFromReader);
      msg.addDefaultTaskConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlanningConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlanningConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlanningConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.TopicConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.planning.PlanningConfig.PlanningLearningMode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRtkPlanningConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.RtkPlanningConfig.serializeBinaryToWriter
    );
  }
  f = message.getStandardPlanningConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.planning.StandardPlanningConfig.serializeBinaryToWriter
    );
  }
  f = message.getNavigationPlanningConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.planning.NavigationPlanningConfig.serializeBinaryToWriter
    );
  }
  f = message.getDefaultTaskConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.planning.TaskConfig.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.PlanningConfig.PlanningLearningMode = {
  NO_LEARNING: 0,
  E2E: 1,
  HYBRID: 2,
  RL_TEST: 3,
  E2E_TEST: 4,
  HYBRID_TEST: 5
};

/**
 * optional TopicConfig topic_config = 1;
 * @return {?proto.apollo.planning.TopicConfig}
 */
proto.apollo.planning.PlanningConfig.prototype.getTopicConfig = function() {
  return /** @type{?proto.apollo.planning.TopicConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.TopicConfig, 1));
};


/**
 * @param {?proto.apollo.planning.TopicConfig|undefined} value
 * @return {!proto.apollo.planning.PlanningConfig} returns this
*/
proto.apollo.planning.PlanningConfig.prototype.setTopicConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningConfig} returns this
 */
proto.apollo.planning.PlanningConfig.prototype.clearTopicConfig = function() {
  return this.setTopicConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningConfig.prototype.hasTopicConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlanningLearningMode learning_mode = 2;
 * @return {!proto.apollo.planning.PlanningConfig.PlanningLearningMode}
 */
proto.apollo.planning.PlanningConfig.prototype.getLearningMode = function() {
  return /** @type {!proto.apollo.planning.PlanningConfig.PlanningLearningMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.planning.PlanningConfig.PlanningLearningMode} value
 * @return {!proto.apollo.planning.PlanningConfig} returns this
 */
proto.apollo.planning.PlanningConfig.prototype.setLearningMode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningConfig} returns this
 */
proto.apollo.planning.PlanningConfig.prototype.clearLearningMode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningConfig.prototype.hasLearningMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RtkPlanningConfig rtk_planning_config = 3;
 * @return {?proto.apollo.planning.RtkPlanningConfig}
 */
proto.apollo.planning.PlanningConfig.prototype.getRtkPlanningConfig = function() {
  return /** @type{?proto.apollo.planning.RtkPlanningConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.RtkPlanningConfig, 3));
};


/**
 * @param {?proto.apollo.planning.RtkPlanningConfig|undefined} value
 * @return {!proto.apollo.planning.PlanningConfig} returns this
*/
proto.apollo.planning.PlanningConfig.prototype.setRtkPlanningConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.planning.PlanningConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningConfig} returns this
 */
proto.apollo.planning.PlanningConfig.prototype.clearRtkPlanningConfig = function() {
  return this.setRtkPlanningConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningConfig.prototype.hasRtkPlanningConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StandardPlanningConfig standard_planning_config = 4;
 * @return {?proto.apollo.planning.StandardPlanningConfig}
 */
proto.apollo.planning.PlanningConfig.prototype.getStandardPlanningConfig = function() {
  return /** @type{?proto.apollo.planning.StandardPlanningConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.StandardPlanningConfig, 4));
};


/**
 * @param {?proto.apollo.planning.StandardPlanningConfig|undefined} value
 * @return {!proto.apollo.planning.PlanningConfig} returns this
*/
proto.apollo.planning.PlanningConfig.prototype.setStandardPlanningConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.planning.PlanningConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningConfig} returns this
 */
proto.apollo.planning.PlanningConfig.prototype.clearStandardPlanningConfig = function() {
  return this.setStandardPlanningConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningConfig.prototype.hasStandardPlanningConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NavigationPlanningConfig navigation_planning_config = 5;
 * @return {?proto.apollo.planning.NavigationPlanningConfig}
 */
proto.apollo.planning.PlanningConfig.prototype.getNavigationPlanningConfig = function() {
  return /** @type{?proto.apollo.planning.NavigationPlanningConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.NavigationPlanningConfig, 5));
};


/**
 * @param {?proto.apollo.planning.NavigationPlanningConfig|undefined} value
 * @return {!proto.apollo.planning.PlanningConfig} returns this
*/
proto.apollo.planning.PlanningConfig.prototype.setNavigationPlanningConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.planning.PlanningConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PlanningConfig} returns this
 */
proto.apollo.planning.PlanningConfig.prototype.clearNavigationPlanningConfig = function() {
  return this.setNavigationPlanningConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningConfig.prototype.hasNavigationPlanningConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated TaskConfig default_task_config = 6;
 * @return {!Array<!proto.apollo.planning.TaskConfig>}
 */
proto.apollo.planning.PlanningConfig.prototype.getDefaultTaskConfigList = function() {
  return /** @type{!Array<!proto.apollo.planning.TaskConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TaskConfig, 6));
};


/**
 * @param {!Array<!proto.apollo.planning.TaskConfig>} value
 * @return {!proto.apollo.planning.PlanningConfig} returns this
*/
proto.apollo.planning.PlanningConfig.prototype.setDefaultTaskConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.planning.TaskConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TaskConfig}
 */
proto.apollo.planning.PlanningConfig.prototype.addDefaultTaskConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.planning.TaskConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.PlanningConfig} returns this
 */
proto.apollo.planning.PlanningConfig.prototype.clearDefaultTaskConfigList = function() {
  return this.setDefaultTaskConfigList([]);
};


/**
 * @enum {number}
 */
proto.apollo.planning.PlannerType = {
  RTK: 0,
  PUBLIC_ROAD: 1,
  NAVI: 2,
  LATTICE: 3
};

goog.object.extend(exports, proto.apollo.planning);
