// source: modules/control/proto/control_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_canbus_proto_chassis_pb = require('../../../modules/canbus/proto/chassis_pb.js');
goog.object.extend(proto, modules_canbus_proto_chassis_pb);
var modules_control_proto_pad_msg_pb = require('../../../modules/control/proto/pad_msg_pb.js');
goog.object.extend(proto, modules_control_proto_pad_msg_pb);
var modules_control_proto_lat_controller_conf_pb = require('../../../modules/control/proto/lat_controller_conf_pb.js');
goog.object.extend(proto, modules_control_proto_lat_controller_conf_pb);
var modules_control_proto_lon_controller_conf_pb = require('../../../modules/control/proto/lon_controller_conf_pb.js');
goog.object.extend(proto, modules_control_proto_lon_controller_conf_pb);
var modules_control_proto_mpc_controller_conf_pb = require('../../../modules/control/proto/mpc_controller_conf_pb.js');
goog.object.extend(proto, modules_control_proto_mpc_controller_conf_pb);
goog.exportSymbol('proto.apollo.control.ControlConf', null, global);
goog.exportSymbol('proto.apollo.control.ControlConf.ControllerType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.ControlConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.control.ControlConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.control.ControlConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.ControlConf.displayName = 'proto.apollo.control.ControlConf';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.control.ControlConf.repeatedFields_ = [25];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.ControlConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.ControlConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.ControlConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.ControlConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlTestDuration: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, -1.0),
    enableCsvDebug: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    enableSpeedStationPreview: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    isControlTestMode: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    usePreviewSpeedForTable: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    enableInputTimestampCheck: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    maxLocalizationMissNum: jspb.Message.getFieldWithDefault(msg, 7, 20),
    maxChassisMissNum: jspb.Message.getFieldWithDefault(msg, 8, 20),
    maxPlanningMissNum: jspb.Message.getFieldWithDefault(msg, 9, 20),
    maxAccelerationWhenStopped: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.01),
    steerAngleRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 100.0),
    enableGainScheduler: jspb.Message.getBooleanFieldWithDefault(msg, 12, true),
    setSteerLimit: jspb.Message.getBooleanFieldWithDefault(msg, 13, true),
    enableSlopeOffset: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    lockSteerSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.081),
    enableNavigationModeErrorFilter: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    enableNavigationModePositionUpdate: jspb.Message.getBooleanFieldWithDefault(msg, 17, true),
    enablePersistentEstop: jspb.Message.getBooleanFieldWithDefault(msg, 18, true),
    controlPeriod: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    maxPlanningIntervalSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 20)) == null ? undefined : f,
    maxPlanningDelayThreshold: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    drivingMode: (f = jspb.Message.getField(msg, 22)) == null ? undefined : f,
    action: (f = jspb.Message.getField(msg, 23)) == null ? undefined : f,
    softEstopBrake: (f = jspb.Message.getOptionalFloatingPointField(msg, 24)) == null ? undefined : f,
    activeControllersList: (f = jspb.Message.getRepeatedField(msg, 25)) == null ? undefined : f,
    maxSteeringPercentageAllowed: (f = jspb.Message.getField(msg, 26)) == null ? undefined : f,
    maxStatusIntervalSec: (f = jspb.Message.getOptionalFloatingPointField(msg, 27)) == null ? undefined : f,
    latControllerConf: (f = msg.getLatControllerConf()) && modules_control_proto_lat_controller_conf_pb.LatControllerConf.toObject(includeInstance, f),
    lonControllerConf: (f = msg.getLonControllerConf()) && modules_control_proto_lon_controller_conf_pb.LonControllerConf.toObject(includeInstance, f),
    trajectoryPeriod: (f = jspb.Message.getOptionalFloatingPointField(msg, 30)) == null ? undefined : f,
    chassisPeriod: (f = jspb.Message.getOptionalFloatingPointField(msg, 31)) == null ? undefined : f,
    localizationPeriod: (f = jspb.Message.getOptionalFloatingPointField(msg, 32)) == null ? undefined : f,
    minimumSpeedResolution: (f = jspb.Message.getOptionalFloatingPointField(msg, 33)) == null ? undefined : f,
    mpcControllerConf: (f = msg.getMpcControllerConf()) && modules_control_proto_mpc_controller_conf_pb.MPCControllerConf.toObject(includeInstance, f),
    queryRelativeTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 35)) == null ? undefined : f,
    minimumSpeedProtection: (f = jspb.Message.getOptionalFloatingPointField(msg, 36)) == null ? undefined : f,
    maxPathRemainWhenStopped: jspb.Message.getFloatingPointFieldWithDefault(msg, 37, 0.3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ControlConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.ControlConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.controlTestDuration;

  /** @type {?|undefined} */
  this.enableCsvDebug;

  /** @type {?|undefined} */
  this.enableSpeedStationPreview;

  /** @type {?|undefined} */
  this.isControlTestMode;

  /** @type {?|undefined} */
  this.usePreviewSpeedForTable;

  /** @type {?|undefined} */
  this.enableInputTimestampCheck;

  /** @type {?|undefined} */
  this.maxLocalizationMissNum;

  /** @type {?|undefined} */
  this.maxChassisMissNum;

  /** @type {?|undefined} */
  this.maxPlanningMissNum;

  /** @type {?|undefined} */
  this.maxAccelerationWhenStopped;

  /** @type {?|undefined} */
  this.steerAngleRate;

  /** @type {?|undefined} */
  this.enableGainScheduler;

  /** @type {?|undefined} */
  this.setSteerLimit;

  /** @type {?|undefined} */
  this.enableSlopeOffset;

  /** @type {?|undefined} */
  this.lockSteerSpeed;

  /** @type {?|undefined} */
  this.enableNavigationModeErrorFilter;

  /** @type {?|undefined} */
  this.enableNavigationModePositionUpdate;

  /** @type {?|undefined} */
  this.enablePersistentEstop;

  /** @type {?|undefined} */
  this.controlPeriod;

  /** @type {?|undefined} */
  this.maxPlanningIntervalSec;

  /** @type {?|undefined} */
  this.maxPlanningDelayThreshold;

  /** @type {?|undefined} */
  this.drivingMode;

  /** @type {?|undefined} */
  this.action;

  /** @type {?|undefined} */
  this.softEstopBrake;

  /** @type {?|undefined} */
  this.activeControllersList;

  /** @type {?|undefined} */
  this.maxSteeringPercentageAllowed;

  /** @type {?|undefined} */
  this.maxStatusIntervalSec;

  /** @type {?|undefined} */
  this.latControllerConf;

  /** @type {?|undefined} */
  this.lonControllerConf;

  /** @type {?|undefined} */
  this.trajectoryPeriod;

  /** @type {?|undefined} */
  this.chassisPeriod;

  /** @type {?|undefined} */
  this.localizationPeriod;

  /** @type {?|undefined} */
  this.minimumSpeedResolution;

  /** @type {?|undefined} */
  this.mpcControllerConf;

  /** @type {?|undefined} */
  this.queryRelativeTime;

  /** @type {?|undefined} */
  this.minimumSpeedProtection;

  /** @type {?|undefined} */
  this.maxPathRemainWhenStopped;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.ControlConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.ControlConf}
 */
proto.apollo.control.ControlConf.fromObject = function(obj) {
  var msg = new proto.apollo.control.ControlConf();
  obj.controlTestDuration != null && jspb.Message.setField(msg, 1, obj.controlTestDuration);
  obj.enableCsvDebug != null && jspb.Message.setField(msg, 2, obj.enableCsvDebug);
  obj.enableSpeedStationPreview != null && jspb.Message.setField(msg, 3, obj.enableSpeedStationPreview);
  obj.isControlTestMode != null && jspb.Message.setField(msg, 4, obj.isControlTestMode);
  obj.usePreviewSpeedForTable != null && jspb.Message.setField(msg, 5, obj.usePreviewSpeedForTable);
  obj.enableInputTimestampCheck != null && jspb.Message.setField(msg, 6, obj.enableInputTimestampCheck);
  obj.maxLocalizationMissNum != null && jspb.Message.setField(msg, 7, obj.maxLocalizationMissNum);
  obj.maxChassisMissNum != null && jspb.Message.setField(msg, 8, obj.maxChassisMissNum);
  obj.maxPlanningMissNum != null && jspb.Message.setField(msg, 9, obj.maxPlanningMissNum);
  obj.maxAccelerationWhenStopped != null && jspb.Message.setField(msg, 10, obj.maxAccelerationWhenStopped);
  obj.steerAngleRate != null && jspb.Message.setField(msg, 11, obj.steerAngleRate);
  obj.enableGainScheduler != null && jspb.Message.setField(msg, 12, obj.enableGainScheduler);
  obj.setSteerLimit != null && jspb.Message.setField(msg, 13, obj.setSteerLimit);
  obj.enableSlopeOffset != null && jspb.Message.setField(msg, 14, obj.enableSlopeOffset);
  obj.lockSteerSpeed != null && jspb.Message.setField(msg, 15, obj.lockSteerSpeed);
  obj.enableNavigationModeErrorFilter != null && jspb.Message.setField(msg, 16, obj.enableNavigationModeErrorFilter);
  obj.enableNavigationModePositionUpdate != null && jspb.Message.setField(msg, 17, obj.enableNavigationModePositionUpdate);
  obj.enablePersistentEstop != null && jspb.Message.setField(msg, 18, obj.enablePersistentEstop);
  obj.controlPeriod != null && jspb.Message.setField(msg, 19, obj.controlPeriod);
  obj.maxPlanningIntervalSec != null && jspb.Message.setField(msg, 20, obj.maxPlanningIntervalSec);
  obj.maxPlanningDelayThreshold != null && jspb.Message.setField(msg, 21, obj.maxPlanningDelayThreshold);
  obj.drivingMode != null && jspb.Message.setField(msg, 22, obj.drivingMode);
  obj.action != null && jspb.Message.setField(msg, 23, obj.action);
  obj.softEstopBrake != null && jspb.Message.setField(msg, 24, obj.softEstopBrake);
  obj.activeControllersList != null && jspb.Message.setField(msg, 25, obj.activeControllersList);
  obj.maxSteeringPercentageAllowed != null && jspb.Message.setField(msg, 26, obj.maxSteeringPercentageAllowed);
  obj.maxStatusIntervalSec != null && jspb.Message.setField(msg, 27, obj.maxStatusIntervalSec);
  obj.latControllerConf && jspb.Message.setWrapperField(
      msg, 28, modules_control_proto_lat_controller_conf_pb.LatControllerConf.fromObject(obj.latControllerConf));
  obj.lonControllerConf && jspb.Message.setWrapperField(
      msg, 29, modules_control_proto_lon_controller_conf_pb.LonControllerConf.fromObject(obj.lonControllerConf));
  obj.trajectoryPeriod != null && jspb.Message.setField(msg, 30, obj.trajectoryPeriod);
  obj.chassisPeriod != null && jspb.Message.setField(msg, 31, obj.chassisPeriod);
  obj.localizationPeriod != null && jspb.Message.setField(msg, 32, obj.localizationPeriod);
  obj.minimumSpeedResolution != null && jspb.Message.setField(msg, 33, obj.minimumSpeedResolution);
  obj.mpcControllerConf && jspb.Message.setWrapperField(
      msg, 34, modules_control_proto_mpc_controller_conf_pb.MPCControllerConf.fromObject(obj.mpcControllerConf));
  obj.queryRelativeTime != null && jspb.Message.setField(msg, 35, obj.queryRelativeTime);
  obj.minimumSpeedProtection != null && jspb.Message.setField(msg, 36, obj.minimumSpeedProtection);
  obj.maxPathRemainWhenStopped != null && jspb.Message.setField(msg, 37, obj.maxPathRemainWhenStopped);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.ControlConf}
 */
proto.apollo.control.ControlConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.ControlConf;
  return proto.apollo.control.ControlConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.ControlConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.ControlConf}
 */
proto.apollo.control.ControlConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setControlTestDuration(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableCsvDebug(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSpeedStationPreview(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsControlTestMode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsePreviewSpeedForTable(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableInputTimestampCheck(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxLocalizationMissNum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxChassisMissNum(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxPlanningMissNum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAccelerationWhenStopped(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteerAngleRate(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableGainScheduler(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSetSteerLimit(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSlopeOffset(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLockSteerSpeed(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableNavigationModeErrorFilter(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableNavigationModePositionUpdate(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablePersistentEstop(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setControlPeriod(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxPlanningIntervalSec(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxPlanningDelayThreshold(value);
      break;
    case 22:
      var value = /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (reader.readEnum());
      msg.setDrivingMode(value);
      break;
    case 23:
      var value = /** @type {!proto.apollo.control.DrivingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSoftEstopBrake(value);
      break;
    case 25:
      var values = /** @type {!Array<!proto.apollo.control.ControlConf.ControllerType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActiveControllers(values[i]);
      }
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxSteeringPercentageAllowed(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxStatusIntervalSec(value);
      break;
    case 28:
      var value = new modules_control_proto_lat_controller_conf_pb.LatControllerConf;
      reader.readMessage(value,modules_control_proto_lat_controller_conf_pb.LatControllerConf.deserializeBinaryFromReader);
      msg.setLatControllerConf(value);
      break;
    case 29:
      var value = new modules_control_proto_lon_controller_conf_pb.LonControllerConf;
      reader.readMessage(value,modules_control_proto_lon_controller_conf_pb.LonControllerConf.deserializeBinaryFromReader);
      msg.setLonControllerConf(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajectoryPeriod(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChassisPeriod(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLocalizationPeriod(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinimumSpeedResolution(value);
      break;
    case 34:
      var value = new modules_control_proto_mpc_controller_conf_pb.MPCControllerConf;
      reader.readMessage(value,modules_control_proto_mpc_controller_conf_pb.MPCControllerConf.deserializeBinaryFromReader);
      msg.setMpcControllerConf(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQueryRelativeTime(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinimumSpeedProtection(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxPathRemainWhenStopped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.ControlConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.ControlConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.ControlConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.ControlConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = /** @type {!proto.apollo.control.DrivingAction} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeEnum(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = message.getActiveControllersList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = message.getLatControllerConf();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      modules_control_proto_lat_controller_conf_pb.LatControllerConf.serializeBinaryToWriter
    );
  }
  f = message.getLonControllerConf();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      modules_control_proto_lon_controller_conf_pb.LonControllerConf.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeDouble(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeDouble(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeDouble(
      33,
      f
    );
  }
  f = message.getMpcControllerConf();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      modules_control_proto_mpc_controller_conf_pb.MPCControllerConf.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeDouble(
      35,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeDouble(
      36,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeDouble(
      37,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.control.ControlConf.ControllerType = {
  LAT_CONTROLLER: 0,
  LON_CONTROLLER: 1,
  MPC_CONTROLLER: 2
};

/**
 * optional double control_test_duration = 1;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getControlTestDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, -1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setControlTestDuration = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearControlTestDuration = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasControlTestDuration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enable_csv_debug = 2;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnableCsvDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnableCsvDebug = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnableCsvDebug = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnableCsvDebug = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enable_speed_station_preview = 3;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnableSpeedStationPreview = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnableSpeedStationPreview = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnableSpeedStationPreview = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnableSpeedStationPreview = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool is_control_test_mode = 4;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getIsControlTestMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setIsControlTestMode = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearIsControlTestMode = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasIsControlTestMode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool use_preview_speed_for_table = 5;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getUsePreviewSpeedForTable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setUsePreviewSpeedForTable = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearUsePreviewSpeedForTable = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasUsePreviewSpeedForTable = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool enable_input_timestamp_check = 6;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnableInputTimestampCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnableInputTimestampCheck = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnableInputTimestampCheck = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnableInputTimestampCheck = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 max_localization_miss_num = 7;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxLocalizationMissNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 20));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxLocalizationMissNum = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxLocalizationMissNum = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxLocalizationMissNum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 max_chassis_miss_num = 8;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxChassisMissNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 20));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxChassisMissNum = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxChassisMissNum = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxChassisMissNum = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 max_planning_miss_num = 9;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxPlanningMissNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 20));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxPlanningMissNum = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxPlanningMissNum = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxPlanningMissNum = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double max_acceleration_when_stopped = 10;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxAccelerationWhenStopped = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.01));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxAccelerationWhenStopped = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxAccelerationWhenStopped = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxAccelerationWhenStopped = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double steer_angle_rate = 11;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getSteerAngleRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setSteerAngleRate = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearSteerAngleRate = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasSteerAngleRate = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool enable_gain_scheduler = 12;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnableGainScheduler = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnableGainScheduler = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnableGainScheduler = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnableGainScheduler = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool set_steer_limit = 13;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getSetSteerLimit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setSetSteerLimit = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearSetSteerLimit = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasSetSteerLimit = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool enable_slope_offset = 14;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnableSlopeOffset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnableSlopeOffset = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnableSlopeOffset = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnableSlopeOffset = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double lock_steer_speed = 15;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getLockSteerSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.081));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setLockSteerSpeed = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearLockSteerSpeed = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasLockSteerSpeed = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool enable_navigation_mode_error_filter = 16;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnableNavigationModeErrorFilter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnableNavigationModeErrorFilter = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnableNavigationModeErrorFilter = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnableNavigationModeErrorFilter = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool enable_navigation_mode_position_update = 17;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnableNavigationModePositionUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnableNavigationModePositionUpdate = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnableNavigationModePositionUpdate = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnableNavigationModePositionUpdate = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool enable_persistent_estop = 18;
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.getEnablePersistentEstop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setEnablePersistentEstop = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearEnablePersistentEstop = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasEnablePersistentEstop = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double control_period = 19;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getControlPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setControlPeriod = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearControlPeriod = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasControlPeriod = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional double max_planning_interval_sec = 20;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxPlanningIntervalSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxPlanningIntervalSec = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxPlanningIntervalSec = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxPlanningIntervalSec = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double max_planning_delay_threshold = 21;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxPlanningDelayThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxPlanningDelayThreshold = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxPlanningDelayThreshold = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxPlanningDelayThreshold = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional apollo.canbus.Chassis.DrivingMode driving_mode = 22;
 * @return {!proto.apollo.canbus.Chassis.DrivingMode}
 */
proto.apollo.control.ControlConf.prototype.getDrivingMode = function() {
  return /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.DrivingMode} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setDrivingMode = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearDrivingMode = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasDrivingMode = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional DrivingAction action = 23;
 * @return {!proto.apollo.control.DrivingAction}
 */
proto.apollo.control.ControlConf.prototype.getAction = function() {
  return /** @type {!proto.apollo.control.DrivingAction} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {!proto.apollo.control.DrivingAction} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearAction = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasAction = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional double soft_estop_brake = 24;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getSoftEstopBrake = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setSoftEstopBrake = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearSoftEstopBrake = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasSoftEstopBrake = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * repeated ControllerType active_controllers = 25;
 * @return {!Array<!proto.apollo.control.ControlConf.ControllerType>}
 */
proto.apollo.control.ControlConf.prototype.getActiveControllersList = function() {
  return /** @type {!Array<!proto.apollo.control.ControlConf.ControllerType>} */ (jspb.Message.getRepeatedField(this, 25));
};


/**
 * @param {!Array<!proto.apollo.control.ControlConf.ControllerType>} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setActiveControllersList = function(value) {
  return jspb.Message.setField(this, 25, value || []);
};


/**
 * @param {!proto.apollo.control.ControlConf.ControllerType} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.addActiveControllers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 25, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearActiveControllersList = function() {
  return this.setActiveControllersList([]);
};


/**
 * optional int32 max_steering_percentage_allowed = 26;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxSteeringPercentageAllowed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxSteeringPercentageAllowed = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxSteeringPercentageAllowed = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxSteeringPercentageAllowed = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional double max_status_interval_sec = 27;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxStatusIntervalSec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxStatusIntervalSec = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxStatusIntervalSec = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxStatusIntervalSec = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional LatControllerConf lat_controller_conf = 28;
 * @return {?proto.apollo.control.LatControllerConf}
 */
proto.apollo.control.ControlConf.prototype.getLatControllerConf = function() {
  return /** @type{?proto.apollo.control.LatControllerConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_lat_controller_conf_pb.LatControllerConf, 28));
};


/**
 * @param {?proto.apollo.control.LatControllerConf|undefined} value
 * @return {!proto.apollo.control.ControlConf} returns this
*/
proto.apollo.control.ControlConf.prototype.setLatControllerConf = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearLatControllerConf = function() {
  return this.setLatControllerConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasLatControllerConf = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional LonControllerConf lon_controller_conf = 29;
 * @return {?proto.apollo.control.LonControllerConf}
 */
proto.apollo.control.ControlConf.prototype.getLonControllerConf = function() {
  return /** @type{?proto.apollo.control.LonControllerConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_lon_controller_conf_pb.LonControllerConf, 29));
};


/**
 * @param {?proto.apollo.control.LonControllerConf|undefined} value
 * @return {!proto.apollo.control.ControlConf} returns this
*/
proto.apollo.control.ControlConf.prototype.setLonControllerConf = function(value) {
  return jspb.Message.setWrapperField(this, 29, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearLonControllerConf = function() {
  return this.setLonControllerConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasLonControllerConf = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional double trajectory_period = 30;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getTrajectoryPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setTrajectoryPeriod = function(value) {
  return jspb.Message.setField(this, 30, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearTrajectoryPeriod = function() {
  return jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasTrajectoryPeriod = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional double chassis_period = 31;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getChassisPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setChassisPeriod = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearChassisPeriod = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasChassisPeriod = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional double localization_period = 32;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getLocalizationPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setLocalizationPeriod = function(value) {
  return jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearLocalizationPeriod = function() {
  return jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasLocalizationPeriod = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional double minimum_speed_resolution = 33;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMinimumSpeedResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 33, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMinimumSpeedResolution = function(value) {
  return jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMinimumSpeedResolution = function() {
  return jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMinimumSpeedResolution = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional MPCControllerConf mpc_controller_conf = 34;
 * @return {?proto.apollo.control.MPCControllerConf}
 */
proto.apollo.control.ControlConf.prototype.getMpcControllerConf = function() {
  return /** @type{?proto.apollo.control.MPCControllerConf} */ (
    jspb.Message.getWrapperField(this, modules_control_proto_mpc_controller_conf_pb.MPCControllerConf, 34));
};


/**
 * @param {?proto.apollo.control.MPCControllerConf|undefined} value
 * @return {!proto.apollo.control.ControlConf} returns this
*/
proto.apollo.control.ControlConf.prototype.setMpcControllerConf = function(value) {
  return jspb.Message.setWrapperField(this, 34, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMpcControllerConf = function() {
  return this.setMpcControllerConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMpcControllerConf = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional double query_relative_time = 35;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getQueryRelativeTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 35, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setQueryRelativeTime = function(value) {
  return jspb.Message.setField(this, 35, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearQueryRelativeTime = function() {
  return jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasQueryRelativeTime = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional double minimum_speed_protection = 36;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMinimumSpeedProtection = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 36, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMinimumSpeedProtection = function(value) {
  return jspb.Message.setField(this, 36, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMinimumSpeedProtection = function() {
  return jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMinimumSpeedProtection = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional double max_path_remain_when_stopped = 37;
 * @return {number}
 */
proto.apollo.control.ControlConf.prototype.getMaxPathRemainWhenStopped = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 37, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.setMaxPathRemainWhenStopped = function(value) {
  return jspb.Message.setField(this, 37, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.ControlConf} returns this
 */
proto.apollo.control.ControlConf.prototype.clearMaxPathRemainWhenStopped = function() {
  return jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.ControlConf.prototype.hasMaxPathRemainWhenStopped = function() {
  return jspb.Message.getField(this, 37) != null;
};


goog.object.extend(exports, proto.apollo.control);
