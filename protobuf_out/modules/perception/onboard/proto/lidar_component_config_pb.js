// source: modules/perception/onboard/proto/lidar_component_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.onboard.LidarDetectionComponentConfig', null, global);
goog.exportSymbol('proto.apollo.perception.onboard.LidarRecognitionComponentConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.onboard.LidarDetectionComponentConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.onboard.LidarDetectionComponentConfig.displayName = 'proto.apollo.perception.onboard.LidarDetectionComponentConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.onboard.LidarRecognitionComponentConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.onboard.LidarRecognitionComponentConfig.displayName = 'proto.apollo.perception.onboard.LidarRecognitionComponentConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.onboard.LidarDetectionComponentConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    detectorName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    enableHdmap: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    lidarQueryTfOffset: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    lidar2novatelTf2ChildFrameId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    outputChannelName: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LidarDetectionComponentConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sensorName;

  /** @type {?|undefined} */
  this.detectorName;

  /** @type {?|undefined} */
  this.enableHdmap;

  /** @type {?|undefined} */
  this.lidarQueryTfOffset;

  /** @type {?|undefined} */
  this.lidar2novatelTf2ChildFrameId;

  /** @type {?|undefined} */
  this.outputChannelName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.onboard.LidarDetectionComponentConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.onboard.LidarDetectionComponentConfig();
  obj.sensorName != null && jspb.Message.setField(msg, 1, obj.sensorName);
  obj.detectorName != null && jspb.Message.setField(msg, 2, obj.detectorName);
  obj.enableHdmap != null && jspb.Message.setField(msg, 3, obj.enableHdmap);
  obj.lidarQueryTfOffset != null && jspb.Message.setField(msg, 4, obj.lidarQueryTfOffset);
  obj.lidar2novatelTf2ChildFrameId != null && jspb.Message.setField(msg, 5, obj.lidar2novatelTf2ChildFrameId);
  obj.outputChannelName != null && jspb.Message.setField(msg, 6, obj.outputChannelName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.onboard.LidarDetectionComponentConfig;
  return proto.apollo.perception.onboard.LidarDetectionComponentConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectorName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableHdmap(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLidarQueryTfOffset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLidar2novatelTf2ChildFrameId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.onboard.LidarDetectionComponentConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string sensor_name = 1;
 * @return {string}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.getSensorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.setSensorName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.clearSensorName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.hasSensorName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string detector_name = 2;
 * @return {string}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.getDetectorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.setDetectorName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.clearDetectorName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.hasDetectorName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enable_hdmap = 3;
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.getEnableHdmap = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.setEnableHdmap = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.clearEnableHdmap = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.hasEnableHdmap = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double lidar_query_tf_offset = 4;
 * @return {number}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.getLidarQueryTfOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.setLidarQueryTfOffset = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.clearLidarQueryTfOffset = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.hasLidarQueryTfOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string lidar2novatel_tf2_child_frame_id = 5;
 * @return {string}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.getLidar2novatelTf2ChildFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.setLidar2novatelTf2ChildFrameId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.clearLidar2novatelTf2ChildFrameId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.hasLidar2novatelTf2ChildFrameId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string output_channel_name = 6;
 * @return {string}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.getOutputChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.setOutputChannelName = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarDetectionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.clearOutputChannelName = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarDetectionComponentConfig.prototype.hasOutputChannelName = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.onboard.LidarRecognitionComponentConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainSensorName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    outputChannelName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LidarRecognitionComponentConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.mainSensorName;

  /** @type {?|undefined} */
  this.outputChannelName;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.onboard.LidarRecognitionComponentConfig();
  obj.mainSensorName != null && jspb.Message.setField(msg, 1, obj.mainSensorName);
  obj.outputChannelName != null && jspb.Message.setField(msg, 2, obj.outputChannelName);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.onboard.LidarRecognitionComponentConfig;
  return proto.apollo.perception.onboard.LidarRecognitionComponentConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainSensorName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.onboard.LidarRecognitionComponentConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string main_sensor_name = 1;
 * @return {string}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.getMainSensorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.setMainSensorName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.clearMainSensorName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.hasMainSensorName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string output_channel_name = 2;
 * @return {string}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.getOutputChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.setOutputChannelName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LidarRecognitionComponentConfig} returns this
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.clearOutputChannelName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LidarRecognitionComponentConfig.prototype.hasOutputChannelName = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.apollo.perception.onboard);
