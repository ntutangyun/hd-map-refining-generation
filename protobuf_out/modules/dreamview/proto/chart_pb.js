// source: modules/dreamview/proto/chart.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
goog.exportSymbol('proto.apollo.dreamview.Car', null, global);
goog.exportSymbol('proto.apollo.dreamview.Chart', null, global);
goog.exportSymbol('proto.apollo.dreamview.Line', null, global);
goog.exportSymbol('proto.apollo.dreamview.Options', null, global);
goog.exportSymbol('proto.apollo.dreamview.Options.Axis', null, global);
goog.exportSymbol('proto.apollo.dreamview.Polygon', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Options = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Options, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Options.displayName = 'proto.apollo.dreamview.Options';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Options.Axis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Options.Axis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Options.Axis.displayName = 'proto.apollo.dreamview.Options.Axis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Line.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Line.displayName = 'proto.apollo.dreamview.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Polygon.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Polygon.displayName = 'proto.apollo.dreamview.Polygon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Car = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dreamview.Car, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Car.displayName = 'proto.apollo.dreamview.Car';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dreamview.Chart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dreamview.Chart.repeatedFields_, null);
};
goog.inherits(proto.apollo.dreamview.Chart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dreamview.Chart.displayName = 'proto.apollo.dreamview.Chart';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Options.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Options.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Options} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Options.toObject = function(includeInstance, msg) {
  var f, obj = {
    legendDisplay: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    x: (f = msg.getX()) && proto.apollo.dreamview.Options.Axis.toObject(includeInstance, f),
    y: (f = msg.getY()) && proto.apollo.dreamview.Options.Axis.toObject(includeInstance, f),
    aspectRatio: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    syncXyWindowSize: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Options as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Options.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.legendDisplay;

  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.aspectRatio;

  /** @type {?|undefined} */
  this.syncXyWindowSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Options.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Options}
 */
proto.apollo.dreamview.Options.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Options();
  obj.legendDisplay != null && jspb.Message.setField(msg, 1, obj.legendDisplay);
  obj.x && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.dreamview.Options.Axis.fromObject(obj.x));
  obj.y && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.dreamview.Options.Axis.fromObject(obj.y));
  obj.aspectRatio != null && jspb.Message.setField(msg, 4, obj.aspectRatio);
  obj.syncXyWindowSize != null && jspb.Message.setField(msg, 5, obj.syncXyWindowSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Options}
 */
proto.apollo.dreamview.Options.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Options;
  return proto.apollo.dreamview.Options.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Options} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Options}
 */
proto.apollo.dreamview.Options.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLegendDisplay(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.Options.Axis;
      reader.readMessage(value,proto.apollo.dreamview.Options.Axis.deserializeBinaryFromReader);
      msg.setX(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.Options.Axis;
      reader.readMessage(value,proto.apollo.dreamview.Options.Axis.deserializeBinaryFromReader);
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAspectRatio(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSyncXyWindowSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Options.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Options.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Options} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Options.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getX();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.dreamview.Options.Axis.serializeBinaryToWriter
    );
  }
  f = message.getY();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.dreamview.Options.Axis.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Options.Axis.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Options.Axis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Options.Axis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Options.Axis.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    max: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    labelString: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    windowSize: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    stepSize: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    midValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Axis as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Options.Axis.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.min;

  /** @type {?|undefined} */
  this.max;

  /** @type {?|undefined} */
  this.labelString;

  /** @type {?|undefined} */
  this.windowSize;

  /** @type {?|undefined} */
  this.stepSize;

  /** @type {?|undefined} */
  this.midValue;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Options.Axis.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Options.Axis}
 */
proto.apollo.dreamview.Options.Axis.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Options.Axis();
  obj.min != null && jspb.Message.setField(msg, 1, obj.min);
  obj.max != null && jspb.Message.setField(msg, 2, obj.max);
  obj.labelString != null && jspb.Message.setField(msg, 3, obj.labelString);
  obj.windowSize != null && jspb.Message.setField(msg, 4, obj.windowSize);
  obj.stepSize != null && jspb.Message.setField(msg, 5, obj.stepSize);
  obj.midValue != null && jspb.Message.setField(msg, 6, obj.midValue);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Options.Axis}
 */
proto.apollo.dreamview.Options.Axis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Options.Axis;
  return proto.apollo.dreamview.Options.Axis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Options.Axis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Options.Axis}
 */
proto.apollo.dreamview.Options.Axis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelString(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWindowSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStepSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMidValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Options.Axis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Options.Axis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Options.Axis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Options.Axis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional double min = 1;
 * @return {number}
 */
proto.apollo.dreamview.Options.Axis.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.clearMin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.Axis.prototype.hasMin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max = 2;
 * @return {number}
 */
proto.apollo.dreamview.Options.Axis.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.clearMax = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.Axis.prototype.hasMax = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string label_string = 3;
 * @return {string}
 */
proto.apollo.dreamview.Options.Axis.prototype.getLabelString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.setLabelString = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.clearLabelString = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.Axis.prototype.hasLabelString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double window_size = 4;
 * @return {number}
 */
proto.apollo.dreamview.Options.Axis.prototype.getWindowSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.setWindowSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.clearWindowSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.Axis.prototype.hasWindowSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double step_size = 5;
 * @return {number}
 */
proto.apollo.dreamview.Options.Axis.prototype.getStepSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.setStepSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.clearStepSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.Axis.prototype.hasStepSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double mid_value = 6;
 * @return {number}
 */
proto.apollo.dreamview.Options.Axis.prototype.getMidValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.setMidValue = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options.Axis} returns this
 */
proto.apollo.dreamview.Options.Axis.prototype.clearMidValue = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.Axis.prototype.hasMidValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool legend_display = 1;
 * @return {boolean}
 */
proto.apollo.dreamview.Options.prototype.getLegendDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.setLegendDisplay = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.clearLegendDisplay = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.prototype.hasLegendDisplay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Axis x = 2;
 * @return {?proto.apollo.dreamview.Options.Axis}
 */
proto.apollo.dreamview.Options.prototype.getX = function() {
  return /** @type{?proto.apollo.dreamview.Options.Axis} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Options.Axis, 2));
};


/**
 * @param {?proto.apollo.dreamview.Options.Axis|undefined} value
 * @return {!proto.apollo.dreamview.Options} returns this
*/
proto.apollo.dreamview.Options.prototype.setX = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.clearX = function() {
  return this.setX(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Axis y = 3;
 * @return {?proto.apollo.dreamview.Options.Axis}
 */
proto.apollo.dreamview.Options.prototype.getY = function() {
  return /** @type{?proto.apollo.dreamview.Options.Axis} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Options.Axis, 3));
};


/**
 * @param {?proto.apollo.dreamview.Options.Axis|undefined} value
 * @return {!proto.apollo.dreamview.Options} returns this
*/
proto.apollo.dreamview.Options.prototype.setY = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.clearY = function() {
  return this.setY(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double aspect_ratio = 4;
 * @return {number}
 */
proto.apollo.dreamview.Options.prototype.getAspectRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.setAspectRatio = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.clearAspectRatio = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.prototype.hasAspectRatio = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool sync_xy_window_size = 5;
 * @return {boolean}
 */
proto.apollo.dreamview.Options.prototype.getSyncXyWindowSize = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.setSyncXyWindowSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Options} returns this
 */
proto.apollo.dreamview.Options.prototype.clearSyncXyWindowSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Options.prototype.hasSyncXyWindowSize = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Line.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    hideLabelInLegend: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    modules_common_proto_geometry_pb.Point2D.toObject, includeInstance),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Line as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Line.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.label;

  /** @type {?|undefined} */
  this.hideLabelInLegend;

  /** @type {?|undefined} */
  this.pointList;

  /** @type {?|undefined} */
  this.propertiesMap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Line.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Line}
 */
proto.apollo.dreamview.Line.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Line();
  obj.label != null && jspb.Message.setField(msg, 1, obj.label);
  obj.hideLabelInLegend != null && jspb.Message.setField(msg, 2, obj.hideLabelInLegend);
  obj.pointList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.pointList.map(
          modules_common_proto_geometry_pb.Point2D.fromObject));
  obj.propertiesMap && jspb.Message.setField(msg, 4, obj.propertiesMap);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Line}
 */
proto.apollo.dreamview.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Line;
  return proto.apollo.dreamview.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Line}
 */
proto.apollo.dreamview.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHideLabelInLegend(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.addPoint(value);
      break;
    case 4:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.apollo.dreamview.Line.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Line} returns this
 */
proto.apollo.dreamview.Line.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Line} returns this
 */
proto.apollo.dreamview.Line.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Line.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool hide_label_in_legend = 2;
 * @return {boolean}
 */
proto.apollo.dreamview.Line.prototype.getHideLabelInLegend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Line} returns this
 */
proto.apollo.dreamview.Line.prototype.setHideLabelInLegend = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Line} returns this
 */
proto.apollo.dreamview.Line.prototype.clearHideLabelInLegend = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Line.prototype.hasHideLabelInLegend = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated apollo.common.Point2D point = 3;
 * @return {!Array<!proto.apollo.common.Point2D>}
 */
proto.apollo.dreamview.Line.prototype.getPointList = function() {
  return /** @type{!Array<!proto.apollo.common.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point2D, 3));
};


/**
 * @param {!Array<!proto.apollo.common.Point2D>} value
 * @return {!proto.apollo.dreamview.Line} returns this
*/
proto.apollo.dreamview.Line.prototype.setPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.common.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point2D}
 */
proto.apollo.dreamview.Line.prototype.addPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.common.Point2D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Line} returns this
 */
proto.apollo.dreamview.Line.prototype.clearPointList = function() {
  return this.setPointList([]);
};


/**
 * map<string, string> properties = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.apollo.dreamview.Line.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.Line} returns this
 */
proto.apollo.dreamview.Line.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Polygon.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Polygon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    hideLabelInLegend: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    modules_common_proto_geometry_pb.Point2D.toObject, includeInstance),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Polygon as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Polygon.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.label;

  /** @type {?|undefined} */
  this.hideLabelInLegend;

  /** @type {?|undefined} */
  this.pointList;

  /** @type {?|undefined} */
  this.propertiesMap;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Polygon.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Polygon}
 */
proto.apollo.dreamview.Polygon.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Polygon();
  obj.label != null && jspb.Message.setField(msg, 1, obj.label);
  obj.hideLabelInLegend != null && jspb.Message.setField(msg, 2, obj.hideLabelInLegend);
  obj.pointList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.pointList.map(
          modules_common_proto_geometry_pb.Point2D.fromObject));
  obj.propertiesMap && jspb.Message.setField(msg, 4, obj.propertiesMap);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Polygon}
 */
proto.apollo.dreamview.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Polygon;
  return proto.apollo.dreamview.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Polygon}
 */
proto.apollo.dreamview.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHideLabelInLegend(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.Point2D;
      reader.readMessage(value,modules_common_proto_geometry_pb.Point2D.deserializeBinaryFromReader);
      msg.addPoint(value);
      break;
    case 4:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Polygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Polygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      modules_common_proto_geometry_pb.Point2D.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.apollo.dreamview.Polygon.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Polygon} returns this
 */
proto.apollo.dreamview.Polygon.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Polygon} returns this
 */
proto.apollo.dreamview.Polygon.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Polygon.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool hide_label_in_legend = 2;
 * @return {boolean}
 */
proto.apollo.dreamview.Polygon.prototype.getHideLabelInLegend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Polygon} returns this
 */
proto.apollo.dreamview.Polygon.prototype.setHideLabelInLegend = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Polygon} returns this
 */
proto.apollo.dreamview.Polygon.prototype.clearHideLabelInLegend = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Polygon.prototype.hasHideLabelInLegend = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated apollo.common.Point2D point = 3;
 * @return {!Array<!proto.apollo.common.Point2D>}
 */
proto.apollo.dreamview.Polygon.prototype.getPointList = function() {
  return /** @type{!Array<!proto.apollo.common.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Point2D, 3));
};


/**
 * @param {!Array<!proto.apollo.common.Point2D>} value
 * @return {!proto.apollo.dreamview.Polygon} returns this
*/
proto.apollo.dreamview.Polygon.prototype.setPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.common.Point2D=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Point2D}
 */
proto.apollo.dreamview.Polygon.prototype.addPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.common.Point2D, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Polygon} returns this
 */
proto.apollo.dreamview.Polygon.prototype.clearPointList = function() {
  return this.setPointList([]);
};


/**
 * map<string, string> properties = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.apollo.dreamview.Polygon.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.apollo.dreamview.Polygon} returns this
 */
proto.apollo.dreamview.Polygon.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Car.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Car.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Car} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Car.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    hideLabelInLegend: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    color: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Car as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Car.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.label;

  /** @type {?|undefined} */
  this.hideLabelInLegend;

  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.heading;

  /** @type {?|undefined} */
  this.color;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Car.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Car}
 */
proto.apollo.dreamview.Car.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Car();
  obj.label != null && jspb.Message.setField(msg, 1, obj.label);
  obj.hideLabelInLegend != null && jspb.Message.setField(msg, 2, obj.hideLabelInLegend);
  obj.x != null && jspb.Message.setField(msg, 3, obj.x);
  obj.y != null && jspb.Message.setField(msg, 4, obj.y);
  obj.heading != null && jspb.Message.setField(msg, 5, obj.heading);
  obj.color != null && jspb.Message.setField(msg, 6, obj.color);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Car}
 */
proto.apollo.dreamview.Car.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Car;
  return proto.apollo.dreamview.Car.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Car} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Car}
 */
proto.apollo.dreamview.Car.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHideLabelInLegend(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Car.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Car.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Car} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Car.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.apollo.dreamview.Car.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.setLabel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.clearLabel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Car.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool hide_label_in_legend = 2;
 * @return {boolean}
 */
proto.apollo.dreamview.Car.prototype.getHideLabelInLegend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.setHideLabelInLegend = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.clearHideLabelInLegend = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Car.prototype.hasHideLabelInLegend = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double x = 3;
 * @return {number}
 */
proto.apollo.dreamview.Car.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.setX = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.clearX = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Car.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double y = 4;
 * @return {number}
 */
proto.apollo.dreamview.Car.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.setY = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.clearY = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Car.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double heading = 5;
 * @return {number}
 */
proto.apollo.dreamview.Car.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Car.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string color = 6;
 * @return {string}
 */
proto.apollo.dreamview.Car.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.setColor = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Car} returns this
 */
proto.apollo.dreamview.Car.prototype.clearColor = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Car.prototype.hasColor = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dreamview.Chart.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dreamview.Chart.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dreamview.Chart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dreamview.Chart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Chart.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    options: (f = msg.getOptions()) && proto.apollo.dreamview.Options.toObject(includeInstance, f),
    lineList: jspb.Message.toObjectList(msg.getLineList(),
    proto.apollo.dreamview.Line.toObject, includeInstance),
    polygonList: jspb.Message.toObjectList(msg.getPolygonList(),
    proto.apollo.dreamview.Polygon.toObject, includeInstance),
    carList: jspb.Message.toObjectList(msg.getCarList(),
    proto.apollo.dreamview.Car.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Chart as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dreamview.Chart.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.title;

  /** @type {?|undefined} */
  this.options;

  /** @type {?|undefined} */
  this.lineList;

  /** @type {?|undefined} */
  this.polygonList;

  /** @type {?|undefined} */
  this.carList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dreamview.Chart.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dreamview.Chart}
 */
proto.apollo.dreamview.Chart.fromObject = function(obj) {
  var msg = new proto.apollo.dreamview.Chart();
  obj.title != null && jspb.Message.setField(msg, 1, obj.title);
  obj.options && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.dreamview.Options.fromObject(obj.options));
  obj.lineList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.lineList.map(
          proto.apollo.dreamview.Line.fromObject));
  obj.polygonList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.polygonList.map(
          proto.apollo.dreamview.Polygon.fromObject));
  obj.carList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.carList.map(
          proto.apollo.dreamview.Car.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dreamview.Chart}
 */
proto.apollo.dreamview.Chart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dreamview.Chart;
  return proto.apollo.dreamview.Chart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dreamview.Chart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dreamview.Chart}
 */
proto.apollo.dreamview.Chart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = new proto.apollo.dreamview.Options;
      reader.readMessage(value,proto.apollo.dreamview.Options.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 3:
      var value = new proto.apollo.dreamview.Line;
      reader.readMessage(value,proto.apollo.dreamview.Line.deserializeBinaryFromReader);
      msg.addLine(value);
      break;
    case 4:
      var value = new proto.apollo.dreamview.Polygon;
      reader.readMessage(value,proto.apollo.dreamview.Polygon.deserializeBinaryFromReader);
      msg.addPolygon(value);
      break;
    case 5:
      var value = new proto.apollo.dreamview.Car;
      reader.readMessage(value,proto.apollo.dreamview.Car.deserializeBinaryFromReader);
      msg.addCar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dreamview.Chart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dreamview.Chart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dreamview.Chart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dreamview.Chart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.dreamview.Options.serializeBinaryToWriter
    );
  }
  f = message.getLineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.dreamview.Line.serializeBinaryToWriter
    );
  }
  f = message.getPolygonList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.dreamview.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getCarList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.dreamview.Car.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.apollo.dreamview.Chart.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.setTitle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearTitle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Chart.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Options options = 2;
 * @return {?proto.apollo.dreamview.Options}
 */
proto.apollo.dreamview.Chart.prototype.getOptions = function() {
  return /** @type{?proto.apollo.dreamview.Options} */ (
    jspb.Message.getWrapperField(this, proto.apollo.dreamview.Options, 2));
};


/**
 * @param {?proto.apollo.dreamview.Options|undefined} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dreamview.Chart.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Line line = 3;
 * @return {!Array<!proto.apollo.dreamview.Line>}
 */
proto.apollo.dreamview.Chart.prototype.getLineList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Line, 3));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Line>} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setLineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.dreamview.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Line}
 */
proto.apollo.dreamview.Chart.prototype.addLine = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.dreamview.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearLineList = function() {
  return this.setLineList([]);
};


/**
 * repeated Polygon polygon = 4;
 * @return {!Array<!proto.apollo.dreamview.Polygon>}
 */
proto.apollo.dreamview.Chart.prototype.getPolygonList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Polygon, 4));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Polygon>} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setPolygonList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.dreamview.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Polygon}
 */
proto.apollo.dreamview.Chart.prototype.addPolygon = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.dreamview.Polygon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearPolygonList = function() {
  return this.setPolygonList([]);
};


/**
 * repeated Car car = 5;
 * @return {!Array<!proto.apollo.dreamview.Car>}
 */
proto.apollo.dreamview.Chart.prototype.getCarList = function() {
  return /** @type{!Array<!proto.apollo.dreamview.Car>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dreamview.Car, 5));
};


/**
 * @param {!Array<!proto.apollo.dreamview.Car>} value
 * @return {!proto.apollo.dreamview.Chart} returns this
*/
proto.apollo.dreamview.Chart.prototype.setCarList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.dreamview.Car=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dreamview.Car}
 */
proto.apollo.dreamview.Chart.prototype.addCar = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.dreamview.Car, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dreamview.Chart} returns this
 */
proto.apollo.dreamview.Chart.prototype.clearCarList = function() {
  return this.setCarList([]);
};


goog.object.extend(exports, proto.apollo.dreamview);
