// source: modules/map/proto/map_pnc_junction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_map_proto_map_id_pb = require('../../../modules/map/proto/map_id_pb.js');
goog.object.extend(proto, modules_map_proto_map_id_pb);
var modules_map_proto_map_geometry_pb = require('../../../modules/map/proto/map_geometry_pb.js');
goog.object.extend(proto, modules_map_proto_map_geometry_pb);
goog.exportSymbol('proto.apollo.hdmap.PNCJunction', null, global);
goog.exportSymbol('proto.apollo.hdmap.Passage', null, global);
goog.exportSymbol('proto.apollo.hdmap.Passage.Type', null, global);
goog.exportSymbol('proto.apollo.hdmap.PassageGroup', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.Passage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.Passage.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.Passage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.Passage.displayName = 'proto.apollo.hdmap.Passage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.PassageGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.PassageGroup.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.PassageGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.PassageGroup.displayName = 'proto.apollo.hdmap.PassageGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.PNCJunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.PNCJunction.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.PNCJunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.PNCJunction.displayName = 'proto.apollo.hdmap.PNCJunction';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.Passage.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.Passage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.Passage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.Passage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Passage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f),
    signalIdList: jspb.Message.toObjectList(msg.getSignalIdList(),
    modules_map_proto_map_id_pb.Id.toObject, includeInstance),
    yieldIdList: jspb.Message.toObjectList(msg.getYieldIdList(),
    modules_map_proto_map_id_pb.Id.toObject, includeInstance),
    stopSignIdList: jspb.Message.toObjectList(msg.getStopSignIdList(),
    modules_map_proto_map_id_pb.Id.toObject, includeInstance),
    laneIdList: jspb.Message.toObjectList(msg.getLaneIdList(),
    modules_map_proto_map_id_pb.Id.toObject, includeInstance),
    type: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Passage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.Passage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.signalIdList;

  /** @type {?|undefined} */
  this.yieldIdList;

  /** @type {?|undefined} */
  this.stopSignIdList;

  /** @type {?|undefined} */
  this.laneIdList;

  /** @type {?|undefined} */
  this.type;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.Passage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.Passage}
 */
proto.apollo.hdmap.Passage.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.Passage();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, modules_map_proto_map_id_pb.Id.fromObject(obj.id));
  obj.signalIdList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.signalIdList.map(
          modules_map_proto_map_id_pb.Id.fromObject));
  obj.yieldIdList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.yieldIdList.map(
          modules_map_proto_map_id_pb.Id.fromObject));
  obj.stopSignIdList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.stopSignIdList.map(
          modules_map_proto_map_id_pb.Id.fromObject));
  obj.laneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.laneIdList.map(
          modules_map_proto_map_id_pb.Id.fromObject));
  obj.type != null && jspb.Message.setField(msg, 6, obj.type);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.Passage}
 */
proto.apollo.hdmap.Passage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.Passage;
  return proto.apollo.hdmap.Passage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.Passage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.Passage}
 */
proto.apollo.hdmap.Passage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.addSignalId(value);
      break;
    case 3:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.addYieldId(value);
      break;
    case 4:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.addStopSignId(value);
      break;
    case 5:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.addLaneId(value);
      break;
    case 6:
      var value = /** @type {!proto.apollo.hdmap.Passage.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Passage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.Passage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.Passage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Passage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getSignalIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getYieldIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getStopSignIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.hdmap.Passage.Type} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.hdmap.Passage.Type = {
  UNKNOWN: 0,
  ENTRANCE: 1,
  EXIT: 2
};

/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Passage.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.Passage} returns this
*/
proto.apollo.hdmap.Passage.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Passage} returns this
 */
proto.apollo.hdmap.Passage.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Passage.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Id signal_id = 2;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Passage.prototype.getSignalIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_id_pb.Id, 2));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Passage} returns this
*/
proto.apollo.hdmap.Passage.prototype.setSignalIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Passage.prototype.addSignalId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Passage} returns this
 */
proto.apollo.hdmap.Passage.prototype.clearSignalIdList = function() {
  return this.setSignalIdList([]);
};


/**
 * repeated Id yield_id = 3;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Passage.prototype.getYieldIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_id_pb.Id, 3));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Passage} returns this
*/
proto.apollo.hdmap.Passage.prototype.setYieldIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Passage.prototype.addYieldId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Passage} returns this
 */
proto.apollo.hdmap.Passage.prototype.clearYieldIdList = function() {
  return this.setYieldIdList([]);
};


/**
 * repeated Id stop_sign_id = 4;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Passage.prototype.getStopSignIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_id_pb.Id, 4));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Passage} returns this
*/
proto.apollo.hdmap.Passage.prototype.setStopSignIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Passage.prototype.addStopSignId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Passage} returns this
 */
proto.apollo.hdmap.Passage.prototype.clearStopSignIdList = function() {
  return this.setStopSignIdList([]);
};


/**
 * repeated Id lane_id = 5;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.Passage.prototype.getLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_id_pb.Id, 5));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.Passage} returns this
*/
proto.apollo.hdmap.Passage.prototype.setLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Passage.prototype.addLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Passage} returns this
 */
proto.apollo.hdmap.Passage.prototype.clearLaneIdList = function() {
  return this.setLaneIdList([]);
};


/**
 * optional Type type = 6;
 * @return {!proto.apollo.hdmap.Passage.Type}
 */
proto.apollo.hdmap.Passage.prototype.getType = function() {
  return /** @type {!proto.apollo.hdmap.Passage.Type} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.apollo.hdmap.Passage.Type} value
 * @return {!proto.apollo.hdmap.Passage} returns this
 */
proto.apollo.hdmap.Passage.prototype.setType = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.Passage} returns this
 */
proto.apollo.hdmap.Passage.prototype.clearType = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Passage.prototype.hasType = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.PassageGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.PassageGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.PassageGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.PassageGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.PassageGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f),
    passageList: jspb.Message.toObjectList(msg.getPassageList(),
    proto.apollo.hdmap.Passage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PassageGroup as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.PassageGroup.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.passageList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.PassageGroup.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.PassageGroup}
 */
proto.apollo.hdmap.PassageGroup.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.PassageGroup();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, modules_map_proto_map_id_pb.Id.fromObject(obj.id));
  obj.passageList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.passageList.map(
          proto.apollo.hdmap.Passage.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.PassageGroup}
 */
proto.apollo.hdmap.PassageGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.PassageGroup;
  return proto.apollo.hdmap.PassageGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.PassageGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.PassageGroup}
 */
proto.apollo.hdmap.PassageGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.hdmap.Passage;
      reader.readMessage(value,proto.apollo.hdmap.Passage.deserializeBinaryFromReader);
      msg.addPassage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.PassageGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.PassageGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.PassageGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.PassageGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getPassageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.hdmap.Passage.serializeBinaryToWriter
    );
  }
};


/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.PassageGroup.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.PassageGroup} returns this
*/
proto.apollo.hdmap.PassageGroup.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.PassageGroup} returns this
 */
proto.apollo.hdmap.PassageGroup.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.PassageGroup.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Passage passage = 2;
 * @return {!Array<!proto.apollo.hdmap.Passage>}
 */
proto.apollo.hdmap.PassageGroup.prototype.getPassageList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Passage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.Passage, 2));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Passage>} value
 * @return {!proto.apollo.hdmap.PassageGroup} returns this
*/
proto.apollo.hdmap.PassageGroup.prototype.setPassageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.hdmap.Passage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Passage}
 */
proto.apollo.hdmap.PassageGroup.prototype.addPassage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.hdmap.Passage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.PassageGroup} returns this
 */
proto.apollo.hdmap.PassageGroup.prototype.clearPassageList = function() {
  return this.setPassageList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.PNCJunction.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.PNCJunction.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.PNCJunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.PNCJunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.PNCJunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f),
    polygon: (f = msg.getPolygon()) && modules_map_proto_map_geometry_pb.Polygon.toObject(includeInstance, f),
    overlapIdList: jspb.Message.toObjectList(msg.getOverlapIdList(),
    modules_map_proto_map_id_pb.Id.toObject, includeInstance),
    passageGroupList: jspb.Message.toObjectList(msg.getPassageGroupList(),
    proto.apollo.hdmap.PassageGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PNCJunction as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.PNCJunction.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.polygon;

  /** @type {?|undefined} */
  this.overlapIdList;

  /** @type {?|undefined} */
  this.passageGroupList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.PNCJunction.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.PNCJunction}
 */
proto.apollo.hdmap.PNCJunction.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.PNCJunction();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, modules_map_proto_map_id_pb.Id.fromObject(obj.id));
  obj.polygon && jspb.Message.setWrapperField(
      msg, 2, modules_map_proto_map_geometry_pb.Polygon.fromObject(obj.polygon));
  obj.overlapIdList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.overlapIdList.map(
          modules_map_proto_map_id_pb.Id.fromObject));
  obj.passageGroupList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.passageGroupList.map(
          proto.apollo.hdmap.PassageGroup.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.PNCJunction}
 */
proto.apollo.hdmap.PNCJunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.PNCJunction;
  return proto.apollo.hdmap.PNCJunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.PNCJunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.PNCJunction}
 */
proto.apollo.hdmap.PNCJunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new modules_map_proto_map_geometry_pb.Polygon;
      reader.readMessage(value,modules_map_proto_map_geometry_pb.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    case 3:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.addOverlapId(value);
      break;
    case 4:
      var value = new proto.apollo.hdmap.PassageGroup;
      reader.readMessage(value,proto.apollo.hdmap.PassageGroup.deserializeBinaryFromReader);
      msg.addPassageGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.PNCJunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.PNCJunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.PNCJunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.PNCJunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getPolygon();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_map_proto_map_geometry_pb.Polygon.serializeBinaryToWriter
    );
  }
  f = message.getOverlapIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getPassageGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.hdmap.PassageGroup.serializeBinaryToWriter
    );
  }
};


/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.PNCJunction.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
*/
proto.apollo.hdmap.PNCJunction.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
 */
proto.apollo.hdmap.PNCJunction.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.PNCJunction.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Polygon polygon = 2;
 * @return {?proto.apollo.hdmap.Polygon}
 */
proto.apollo.hdmap.PNCJunction.prototype.getPolygon = function() {
  return /** @type{?proto.apollo.hdmap.Polygon} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_geometry_pb.Polygon, 2));
};


/**
 * @param {?proto.apollo.hdmap.Polygon|undefined} value
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
*/
proto.apollo.hdmap.PNCJunction.prototype.setPolygon = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
 */
proto.apollo.hdmap.PNCJunction.prototype.clearPolygon = function() {
  return this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.PNCJunction.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Id overlap_id = 3;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.hdmap.PNCJunction.prototype.getOverlapIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_id_pb.Id, 3));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
*/
proto.apollo.hdmap.PNCJunction.prototype.setOverlapIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.PNCJunction.prototype.addOverlapId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
 */
proto.apollo.hdmap.PNCJunction.prototype.clearOverlapIdList = function() {
  return this.setOverlapIdList([]);
};


/**
 * repeated PassageGroup passage_group = 4;
 * @return {!Array<!proto.apollo.hdmap.PassageGroup>}
 */
proto.apollo.hdmap.PNCJunction.prototype.getPassageGroupList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.PassageGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.PassageGroup, 4));
};


/**
 * @param {!Array<!proto.apollo.hdmap.PassageGroup>} value
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
*/
proto.apollo.hdmap.PNCJunction.prototype.setPassageGroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.hdmap.PassageGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.PassageGroup}
 */
proto.apollo.hdmap.PNCJunction.prototype.addPassageGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.hdmap.PassageGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.PNCJunction} returns this
 */
proto.apollo.hdmap.PNCJunction.prototype.clearPassageGroupList = function() {
  return this.setPassageGroupList([]);
};


goog.object.extend(exports, proto.apollo.hdmap);
