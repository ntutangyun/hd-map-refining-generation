// source: modules/storytelling/proto/story.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
goog.exportSymbol('proto.apollo.storytelling.CloseToClearArea', null, global);
goog.exportSymbol('proto.apollo.storytelling.CloseToCrosswalk', null, global);
goog.exportSymbol('proto.apollo.storytelling.CloseToJunction', null, global);
goog.exportSymbol('proto.apollo.storytelling.CloseToJunction.JunctionType', null, global);
goog.exportSymbol('proto.apollo.storytelling.CloseToSignal', null, global);
goog.exportSymbol('proto.apollo.storytelling.CloseToStopSign', null, global);
goog.exportSymbol('proto.apollo.storytelling.CloseToYieldSign', null, global);
goog.exportSymbol('proto.apollo.storytelling.Stories', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.storytelling.CloseToCrosswalk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.storytelling.CloseToCrosswalk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.storytelling.CloseToCrosswalk.displayName = 'proto.apollo.storytelling.CloseToCrosswalk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.storytelling.CloseToClearArea = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.storytelling.CloseToClearArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.storytelling.CloseToClearArea.displayName = 'proto.apollo.storytelling.CloseToClearArea';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.storytelling.CloseToJunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.storytelling.CloseToJunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.storytelling.CloseToJunction.displayName = 'proto.apollo.storytelling.CloseToJunction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.storytelling.CloseToSignal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.storytelling.CloseToSignal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.storytelling.CloseToSignal.displayName = 'proto.apollo.storytelling.CloseToSignal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.storytelling.CloseToStopSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.storytelling.CloseToStopSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.storytelling.CloseToStopSign.displayName = 'proto.apollo.storytelling.CloseToStopSign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.storytelling.CloseToYieldSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.storytelling.CloseToYieldSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.storytelling.CloseToYieldSign.displayName = 'proto.apollo.storytelling.CloseToYieldSign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.storytelling.Stories = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.storytelling.Stories, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.storytelling.Stories.displayName = 'proto.apollo.storytelling.Stories';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.storytelling.CloseToCrosswalk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.storytelling.CloseToCrosswalk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToCrosswalk.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, NaN)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CloseToCrosswalk as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.storytelling.CloseToCrosswalk.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.storytelling.CloseToCrosswalk.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.storytelling.CloseToCrosswalk}
 */
proto.apollo.storytelling.CloseToCrosswalk.fromObject = function(obj) {
  var msg = new proto.apollo.storytelling.CloseToCrosswalk();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.distance != null && jspb.Message.setField(msg, 2, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.storytelling.CloseToCrosswalk}
 */
proto.apollo.storytelling.CloseToCrosswalk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.storytelling.CloseToCrosswalk;
  return proto.apollo.storytelling.CloseToCrosswalk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.storytelling.CloseToCrosswalk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.storytelling.CloseToCrosswalk}
 */
proto.apollo.storytelling.CloseToCrosswalk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.storytelling.CloseToCrosswalk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.storytelling.CloseToCrosswalk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToCrosswalk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.storytelling.CloseToCrosswalk} returns this
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToCrosswalk} returns this
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance = 2;
 * @return {number}
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.storytelling.CloseToCrosswalk} returns this
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToCrosswalk} returns this
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToCrosswalk.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.storytelling.CloseToClearArea.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.storytelling.CloseToClearArea.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.storytelling.CloseToClearArea} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToClearArea.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, NaN)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CloseToClearArea as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.storytelling.CloseToClearArea.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.storytelling.CloseToClearArea.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.storytelling.CloseToClearArea}
 */
proto.apollo.storytelling.CloseToClearArea.fromObject = function(obj) {
  var msg = new proto.apollo.storytelling.CloseToClearArea();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.distance != null && jspb.Message.setField(msg, 2, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.storytelling.CloseToClearArea}
 */
proto.apollo.storytelling.CloseToClearArea.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.storytelling.CloseToClearArea;
  return proto.apollo.storytelling.CloseToClearArea.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.storytelling.CloseToClearArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.storytelling.CloseToClearArea}
 */
proto.apollo.storytelling.CloseToClearArea.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.storytelling.CloseToClearArea.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.storytelling.CloseToClearArea.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.storytelling.CloseToClearArea} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToClearArea.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.storytelling.CloseToClearArea.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.storytelling.CloseToClearArea} returns this
 */
proto.apollo.storytelling.CloseToClearArea.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToClearArea} returns this
 */
proto.apollo.storytelling.CloseToClearArea.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToClearArea.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance = 2;
 * @return {number}
 */
proto.apollo.storytelling.CloseToClearArea.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.storytelling.CloseToClearArea} returns this
 */
proto.apollo.storytelling.CloseToClearArea.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToClearArea} returns this
 */
proto.apollo.storytelling.CloseToClearArea.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToClearArea.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.storytelling.CloseToJunction.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.storytelling.CloseToJunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.storytelling.CloseToJunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToJunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, NaN)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CloseToJunction as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.storytelling.CloseToJunction.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.type;

  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.storytelling.CloseToJunction.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.storytelling.CloseToJunction}
 */
proto.apollo.storytelling.CloseToJunction.fromObject = function(obj) {
  var msg = new proto.apollo.storytelling.CloseToJunction();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.type != null && jspb.Message.setField(msg, 2, obj.type);
  obj.distance != null && jspb.Message.setField(msg, 3, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.storytelling.CloseToJunction}
 */
proto.apollo.storytelling.CloseToJunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.storytelling.CloseToJunction;
  return proto.apollo.storytelling.CloseToJunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.storytelling.CloseToJunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.storytelling.CloseToJunction}
 */
proto.apollo.storytelling.CloseToJunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.storytelling.CloseToJunction.JunctionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.storytelling.CloseToJunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.storytelling.CloseToJunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.storytelling.CloseToJunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToJunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.storytelling.CloseToJunction.JunctionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.storytelling.CloseToJunction.JunctionType = {
  PNC_JUNCTION: 1,
  JUNCTION: 2
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.storytelling.CloseToJunction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.storytelling.CloseToJunction} returns this
 */
proto.apollo.storytelling.CloseToJunction.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToJunction} returns this
 */
proto.apollo.storytelling.CloseToJunction.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToJunction.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JunctionType type = 2;
 * @return {!proto.apollo.storytelling.CloseToJunction.JunctionType}
 */
proto.apollo.storytelling.CloseToJunction.prototype.getType = function() {
  return /** @type {!proto.apollo.storytelling.CloseToJunction.JunctionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.apollo.storytelling.CloseToJunction.JunctionType} value
 * @return {!proto.apollo.storytelling.CloseToJunction} returns this
 */
proto.apollo.storytelling.CloseToJunction.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToJunction} returns this
 */
proto.apollo.storytelling.CloseToJunction.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToJunction.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double distance = 3;
 * @return {number}
 */
proto.apollo.storytelling.CloseToJunction.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.storytelling.CloseToJunction} returns this
 */
proto.apollo.storytelling.CloseToJunction.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToJunction} returns this
 */
proto.apollo.storytelling.CloseToJunction.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToJunction.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.storytelling.CloseToSignal.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.storytelling.CloseToSignal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.storytelling.CloseToSignal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToSignal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, NaN)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CloseToSignal as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.storytelling.CloseToSignal.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.storytelling.CloseToSignal.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.storytelling.CloseToSignal}
 */
proto.apollo.storytelling.CloseToSignal.fromObject = function(obj) {
  var msg = new proto.apollo.storytelling.CloseToSignal();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.distance != null && jspb.Message.setField(msg, 2, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.storytelling.CloseToSignal}
 */
proto.apollo.storytelling.CloseToSignal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.storytelling.CloseToSignal;
  return proto.apollo.storytelling.CloseToSignal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.storytelling.CloseToSignal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.storytelling.CloseToSignal}
 */
proto.apollo.storytelling.CloseToSignal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.storytelling.CloseToSignal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.storytelling.CloseToSignal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.storytelling.CloseToSignal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToSignal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.storytelling.CloseToSignal.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.storytelling.CloseToSignal} returns this
 */
proto.apollo.storytelling.CloseToSignal.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToSignal} returns this
 */
proto.apollo.storytelling.CloseToSignal.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToSignal.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance = 2;
 * @return {number}
 */
proto.apollo.storytelling.CloseToSignal.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.storytelling.CloseToSignal} returns this
 */
proto.apollo.storytelling.CloseToSignal.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToSignal} returns this
 */
proto.apollo.storytelling.CloseToSignal.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToSignal.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.storytelling.CloseToStopSign.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.storytelling.CloseToStopSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.storytelling.CloseToStopSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToStopSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, NaN)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CloseToStopSign as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.storytelling.CloseToStopSign.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.storytelling.CloseToStopSign.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.storytelling.CloseToStopSign}
 */
proto.apollo.storytelling.CloseToStopSign.fromObject = function(obj) {
  var msg = new proto.apollo.storytelling.CloseToStopSign();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.distance != null && jspb.Message.setField(msg, 2, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.storytelling.CloseToStopSign}
 */
proto.apollo.storytelling.CloseToStopSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.storytelling.CloseToStopSign;
  return proto.apollo.storytelling.CloseToStopSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.storytelling.CloseToStopSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.storytelling.CloseToStopSign}
 */
proto.apollo.storytelling.CloseToStopSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.storytelling.CloseToStopSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.storytelling.CloseToStopSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.storytelling.CloseToStopSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToStopSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.storytelling.CloseToStopSign.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.storytelling.CloseToStopSign} returns this
 */
proto.apollo.storytelling.CloseToStopSign.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToStopSign} returns this
 */
proto.apollo.storytelling.CloseToStopSign.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToStopSign.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance = 2;
 * @return {number}
 */
proto.apollo.storytelling.CloseToStopSign.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.storytelling.CloseToStopSign} returns this
 */
proto.apollo.storytelling.CloseToStopSign.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToStopSign} returns this
 */
proto.apollo.storytelling.CloseToStopSign.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToStopSign.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.storytelling.CloseToYieldSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.storytelling.CloseToYieldSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToYieldSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    distance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, NaN)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CloseToYieldSign as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.storytelling.CloseToYieldSign.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.storytelling.CloseToYieldSign.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.storytelling.CloseToYieldSign}
 */
proto.apollo.storytelling.CloseToYieldSign.fromObject = function(obj) {
  var msg = new proto.apollo.storytelling.CloseToYieldSign();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.distance != null && jspb.Message.setField(msg, 2, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.storytelling.CloseToYieldSign}
 */
proto.apollo.storytelling.CloseToYieldSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.storytelling.CloseToYieldSign;
  return proto.apollo.storytelling.CloseToYieldSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.storytelling.CloseToYieldSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.storytelling.CloseToYieldSign}
 */
proto.apollo.storytelling.CloseToYieldSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.storytelling.CloseToYieldSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.storytelling.CloseToYieldSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.CloseToYieldSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.storytelling.CloseToYieldSign} returns this
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToYieldSign} returns this
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double distance = 2;
 * @return {number}
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, NaN));
};


/**
 * @param {number} value
 * @return {!proto.apollo.storytelling.CloseToYieldSign} returns this
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.storytelling.CloseToYieldSign} returns this
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.CloseToYieldSign.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.storytelling.Stories.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.storytelling.Stories.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.storytelling.Stories} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.Stories.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    closeToClearArea: (f = msg.getCloseToClearArea()) && proto.apollo.storytelling.CloseToClearArea.toObject(includeInstance, f),
    closeToCrosswalk: (f = msg.getCloseToCrosswalk()) && proto.apollo.storytelling.CloseToCrosswalk.toObject(includeInstance, f),
    closeToJunction: (f = msg.getCloseToJunction()) && proto.apollo.storytelling.CloseToJunction.toObject(includeInstance, f),
    closeToSignal: (f = msg.getCloseToSignal()) && proto.apollo.storytelling.CloseToSignal.toObject(includeInstance, f),
    closeToStopSign: (f = msg.getCloseToStopSign()) && proto.apollo.storytelling.CloseToStopSign.toObject(includeInstance, f),
    closeToYieldSign: (f = msg.getCloseToYieldSign()) && proto.apollo.storytelling.CloseToYieldSign.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Stories as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.storytelling.Stories.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.closeToClearArea;

  /** @type {?|undefined} */
  this.closeToCrosswalk;

  /** @type {?|undefined} */
  this.closeToJunction;

  /** @type {?|undefined} */
  this.closeToSignal;

  /** @type {?|undefined} */
  this.closeToStopSign;

  /** @type {?|undefined} */
  this.closeToYieldSign;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.storytelling.Stories.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.storytelling.Stories}
 */
proto.apollo.storytelling.Stories.fromObject = function(obj) {
  var msg = new proto.apollo.storytelling.Stories();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.closeToClearArea && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.storytelling.CloseToClearArea.fromObject(obj.closeToClearArea));
  obj.closeToCrosswalk && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.storytelling.CloseToCrosswalk.fromObject(obj.closeToCrosswalk));
  obj.closeToJunction && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.storytelling.CloseToJunction.fromObject(obj.closeToJunction));
  obj.closeToSignal && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.storytelling.CloseToSignal.fromObject(obj.closeToSignal));
  obj.closeToStopSign && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.storytelling.CloseToStopSign.fromObject(obj.closeToStopSign));
  obj.closeToYieldSign && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.storytelling.CloseToYieldSign.fromObject(obj.closeToYieldSign));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.storytelling.Stories}
 */
proto.apollo.storytelling.Stories.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.storytelling.Stories;
  return proto.apollo.storytelling.Stories.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.storytelling.Stories} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.storytelling.Stories}
 */
proto.apollo.storytelling.Stories.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.apollo.storytelling.CloseToClearArea;
      reader.readMessage(value,proto.apollo.storytelling.CloseToClearArea.deserializeBinaryFromReader);
      msg.setCloseToClearArea(value);
      break;
    case 3:
      var value = new proto.apollo.storytelling.CloseToCrosswalk;
      reader.readMessage(value,proto.apollo.storytelling.CloseToCrosswalk.deserializeBinaryFromReader);
      msg.setCloseToCrosswalk(value);
      break;
    case 4:
      var value = new proto.apollo.storytelling.CloseToJunction;
      reader.readMessage(value,proto.apollo.storytelling.CloseToJunction.deserializeBinaryFromReader);
      msg.setCloseToJunction(value);
      break;
    case 5:
      var value = new proto.apollo.storytelling.CloseToSignal;
      reader.readMessage(value,proto.apollo.storytelling.CloseToSignal.deserializeBinaryFromReader);
      msg.setCloseToSignal(value);
      break;
    case 6:
      var value = new proto.apollo.storytelling.CloseToStopSign;
      reader.readMessage(value,proto.apollo.storytelling.CloseToStopSign.deserializeBinaryFromReader);
      msg.setCloseToStopSign(value);
      break;
    case 7:
      var value = new proto.apollo.storytelling.CloseToYieldSign;
      reader.readMessage(value,proto.apollo.storytelling.CloseToYieldSign.deserializeBinaryFromReader);
      msg.setCloseToYieldSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.storytelling.Stories.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.storytelling.Stories.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.storytelling.Stories} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.storytelling.Stories.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getCloseToClearArea();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.storytelling.CloseToClearArea.serializeBinaryToWriter
    );
  }
  f = message.getCloseToCrosswalk();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.storytelling.CloseToCrosswalk.serializeBinaryToWriter
    );
  }
  f = message.getCloseToJunction();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.storytelling.CloseToJunction.serializeBinaryToWriter
    );
  }
  f = message.getCloseToSignal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.storytelling.CloseToSignal.serializeBinaryToWriter
    );
  }
  f = message.getCloseToStopSign();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.storytelling.CloseToStopSign.serializeBinaryToWriter
    );
  }
  f = message.getCloseToYieldSign();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.storytelling.CloseToYieldSign.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.storytelling.Stories.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.storytelling.Stories} returns this
*/
proto.apollo.storytelling.Stories.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.storytelling.Stories} returns this
 */
proto.apollo.storytelling.Stories.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.Stories.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CloseToClearArea close_to_clear_area = 2;
 * @return {?proto.apollo.storytelling.CloseToClearArea}
 */
proto.apollo.storytelling.Stories.prototype.getCloseToClearArea = function() {
  return /** @type{?proto.apollo.storytelling.CloseToClearArea} */ (
    jspb.Message.getWrapperField(this, proto.apollo.storytelling.CloseToClearArea, 2));
};


/**
 * @param {?proto.apollo.storytelling.CloseToClearArea|undefined} value
 * @return {!proto.apollo.storytelling.Stories} returns this
*/
proto.apollo.storytelling.Stories.prototype.setCloseToClearArea = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.storytelling.Stories} returns this
 */
proto.apollo.storytelling.Stories.prototype.clearCloseToClearArea = function() {
  return this.setCloseToClearArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.Stories.prototype.hasCloseToClearArea = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CloseToCrosswalk close_to_crosswalk = 3;
 * @return {?proto.apollo.storytelling.CloseToCrosswalk}
 */
proto.apollo.storytelling.Stories.prototype.getCloseToCrosswalk = function() {
  return /** @type{?proto.apollo.storytelling.CloseToCrosswalk} */ (
    jspb.Message.getWrapperField(this, proto.apollo.storytelling.CloseToCrosswalk, 3));
};


/**
 * @param {?proto.apollo.storytelling.CloseToCrosswalk|undefined} value
 * @return {!proto.apollo.storytelling.Stories} returns this
*/
proto.apollo.storytelling.Stories.prototype.setCloseToCrosswalk = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.storytelling.Stories} returns this
 */
proto.apollo.storytelling.Stories.prototype.clearCloseToCrosswalk = function() {
  return this.setCloseToCrosswalk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.Stories.prototype.hasCloseToCrosswalk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CloseToJunction close_to_junction = 4;
 * @return {?proto.apollo.storytelling.CloseToJunction}
 */
proto.apollo.storytelling.Stories.prototype.getCloseToJunction = function() {
  return /** @type{?proto.apollo.storytelling.CloseToJunction} */ (
    jspb.Message.getWrapperField(this, proto.apollo.storytelling.CloseToJunction, 4));
};


/**
 * @param {?proto.apollo.storytelling.CloseToJunction|undefined} value
 * @return {!proto.apollo.storytelling.Stories} returns this
*/
proto.apollo.storytelling.Stories.prototype.setCloseToJunction = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.storytelling.Stories} returns this
 */
proto.apollo.storytelling.Stories.prototype.clearCloseToJunction = function() {
  return this.setCloseToJunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.Stories.prototype.hasCloseToJunction = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CloseToSignal close_to_signal = 5;
 * @return {?proto.apollo.storytelling.CloseToSignal}
 */
proto.apollo.storytelling.Stories.prototype.getCloseToSignal = function() {
  return /** @type{?proto.apollo.storytelling.CloseToSignal} */ (
    jspb.Message.getWrapperField(this, proto.apollo.storytelling.CloseToSignal, 5));
};


/**
 * @param {?proto.apollo.storytelling.CloseToSignal|undefined} value
 * @return {!proto.apollo.storytelling.Stories} returns this
*/
proto.apollo.storytelling.Stories.prototype.setCloseToSignal = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.storytelling.Stories} returns this
 */
proto.apollo.storytelling.Stories.prototype.clearCloseToSignal = function() {
  return this.setCloseToSignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.Stories.prototype.hasCloseToSignal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CloseToStopSign close_to_stop_sign = 6;
 * @return {?proto.apollo.storytelling.CloseToStopSign}
 */
proto.apollo.storytelling.Stories.prototype.getCloseToStopSign = function() {
  return /** @type{?proto.apollo.storytelling.CloseToStopSign} */ (
    jspb.Message.getWrapperField(this, proto.apollo.storytelling.CloseToStopSign, 6));
};


/**
 * @param {?proto.apollo.storytelling.CloseToStopSign|undefined} value
 * @return {!proto.apollo.storytelling.Stories} returns this
*/
proto.apollo.storytelling.Stories.prototype.setCloseToStopSign = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.storytelling.Stories} returns this
 */
proto.apollo.storytelling.Stories.prototype.clearCloseToStopSign = function() {
  return this.setCloseToStopSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.Stories.prototype.hasCloseToStopSign = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CloseToYieldSign close_to_yield_sign = 7;
 * @return {?proto.apollo.storytelling.CloseToYieldSign}
 */
proto.apollo.storytelling.Stories.prototype.getCloseToYieldSign = function() {
  return /** @type{?proto.apollo.storytelling.CloseToYieldSign} */ (
    jspb.Message.getWrapperField(this, proto.apollo.storytelling.CloseToYieldSign, 7));
};


/**
 * @param {?proto.apollo.storytelling.CloseToYieldSign|undefined} value
 * @return {!proto.apollo.storytelling.Stories} returns this
*/
proto.apollo.storytelling.Stories.prototype.setCloseToYieldSign = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.storytelling.Stories} returns this
 */
proto.apollo.storytelling.Stories.prototype.clearCloseToYieldSign = function() {
  return this.setCloseToYieldSign(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.storytelling.Stories.prototype.hasCloseToYieldSign = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.apollo.storytelling);
