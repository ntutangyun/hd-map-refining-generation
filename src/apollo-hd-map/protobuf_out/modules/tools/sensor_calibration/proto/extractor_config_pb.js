// source: modules/tools/sensor_calibration/proto/extractor_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ChannelConfig', null, global);
goog.exportSymbol('proto.Channels', null, global);
goog.exportSymbol('proto.DataExtractionConfig', null, global);
goog.exportSymbol('proto.IoConfig', null, global);
goog.exportSymbol('proto.Records', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IoConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IoConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IoConfig.displayName = 'proto.IoConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChannelConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChannelConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChannelConfig.displayName = 'proto.ChannelConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Channels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Channels.repeatedFields_, null);
};
goog.inherits(proto.Channels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Channels.displayName = 'proto.Channels';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Records = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Records.repeatedFields_, null);
};
goog.inherits(proto.Records, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Records.displayName = 'proto.Records';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataExtractionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DataExtractionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataExtractionConfig.displayName = 'proto.DataExtractionConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IoConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.IoConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IoConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IoConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskName: jspb.Message.getFieldWithDefault(msg, 1, "tmp"),
    outputPath: jspb.Message.getFieldWithDefault(msg, 2, "extracted_data"),
    startTimestamp: jspb.Message.getFieldWithDefault(msg, 3, "FLOAT_MIN"),
    endTimestamp: jspb.Message.getFieldWithDefault(msg, 4, "FLOAT_MAX"),
    mainSensor: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of IoConfig as accepted by the `fromObject` method.
 * @record
 */
proto.IoConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.taskName;

  /** @type {?|undefined} */
  this.outputPath;

  /** @type {?|undefined} */
  this.startTimestamp;

  /** @type {?|undefined} */
  this.endTimestamp;

  /** @type {?|undefined} */
  this.mainSensor;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.IoConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.IoConfig}
 */
proto.IoConfig.fromObject = function(obj) {
  var msg = new proto.IoConfig();
  obj.taskName != null && jspb.Message.setField(msg, 1, obj.taskName);
  obj.outputPath != null && jspb.Message.setField(msg, 2, obj.outputPath);
  obj.startTimestamp != null && jspb.Message.setField(msg, 3, obj.startTimestamp);
  obj.endTimestamp != null && jspb.Message.setField(msg, 4, obj.endTimestamp);
  obj.mainSensor != null && jspb.Message.setField(msg, 5, obj.mainSensor);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IoConfig}
 */
proto.IoConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IoConfig;
  return proto.IoConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IoConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IoConfig}
 */
proto.IoConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainSensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IoConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IoConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IoConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IoConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required string task_name = 1;
 * @return {string}
 */
proto.IoConfig.prototype.getTaskName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "tmp"));
};


/**
 * @param {string} value
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.setTaskName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.clearTaskName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IoConfig.prototype.hasTaskName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string output_path = 2;
 * @return {string}
 */
proto.IoConfig.prototype.getOutputPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "extracted_data"));
};


/**
 * @param {string} value
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.setOutputPath = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.clearOutputPath = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IoConfig.prototype.hasOutputPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string start_timestamp = 3;
 * @return {string}
 */
proto.IoConfig.prototype.getStartTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "FLOAT_MIN"));
};


/**
 * @param {string} value
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.setStartTimestamp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.clearStartTimestamp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IoConfig.prototype.hasStartTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string end_timestamp = 4;
 * @return {string}
 */
proto.IoConfig.prototype.getEndTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "FLOAT_MAX"));
};


/**
 * @param {string} value
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.setEndTimestamp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.clearEndTimestamp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IoConfig.prototype.hasEndTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string main_sensor = 5;
 * @return {string}
 */
proto.IoConfig.prototype.getMainSensor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.setMainSensor = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.IoConfig} returns this
 */
proto.IoConfig.prototype.clearMainSensor = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IoConfig.prototype.hasMainSensor = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChannelConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ChannelConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChannelConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChannelConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    extractionRate: jspb.Message.getFieldWithDefault(msg, 3, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChannelConfig as accepted by the `fromObject` method.
 * @record
 */
proto.ChannelConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.description;

  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.extractionRate;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.ChannelConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.ChannelConfig}
 */
proto.ChannelConfig.fromObject = function(obj) {
  var msg = new proto.ChannelConfig();
  obj.description != null && jspb.Message.setField(msg, 1, obj.description);
  obj.name != null && jspb.Message.setField(msg, 2, obj.name);
  obj.extractionRate != null && jspb.Message.setField(msg, 3, obj.extractionRate);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChannelConfig}
 */
proto.ChannelConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChannelConfig;
  return proto.ChannelConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChannelConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChannelConfig}
 */
proto.ChannelConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExtractionRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChannelConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChannelConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChannelConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChannelConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.ChannelConfig.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChannelConfig} returns this
 */
proto.ChannelConfig.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ChannelConfig} returns this
 */
proto.ChannelConfig.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChannelConfig.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string name = 2;
 * @return {string}
 */
proto.ChannelConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChannelConfig} returns this
 */
proto.ChannelConfig.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ChannelConfig} returns this
 */
proto.ChannelConfig.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChannelConfig.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 extraction_rate = 3;
 * @return {number}
 */
proto.ChannelConfig.prototype.getExtractionRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {number} value
 * @return {!proto.ChannelConfig} returns this
 */
proto.ChannelConfig.prototype.setExtractionRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ChannelConfig} returns this
 */
proto.ChannelConfig.prototype.clearExtractionRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChannelConfig.prototype.hasExtractionRate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Channels.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Channels.prototype.toObject = function(opt_includeInstance) {
  return proto.Channels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Channels} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Channels.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelList: jspb.Message.toObjectList(msg.getChannelList(),
    proto.ChannelConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Channels as accepted by the `fromObject` method.
 * @record
 */
proto.Channels.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.channelList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Channels.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Channels}
 */
proto.Channels.fromObject = function(obj) {
  var msg = new proto.Channels();
  obj.channelList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.channelList.map(
          proto.ChannelConfig.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Channels}
 */
proto.Channels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Channels;
  return proto.Channels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Channels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Channels}
 */
proto.Channels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChannelConfig;
      reader.readMessage(value,proto.ChannelConfig.deserializeBinaryFromReader);
      msg.addChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Channels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Channels.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Channels} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Channels.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ChannelConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChannelConfig channel = 1;
 * @return {!Array<!proto.ChannelConfig>}
 */
proto.Channels.prototype.getChannelList = function() {
  return /** @type{!Array<!proto.ChannelConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChannelConfig, 1));
};


/**
 * @param {!Array<!proto.ChannelConfig>} value
 * @return {!proto.Channels} returns this
*/
proto.Channels.prototype.setChannelList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChannelConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChannelConfig}
 */
proto.Channels.prototype.addChannel = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChannelConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Channels} returns this
 */
proto.Channels.prototype.clearChannelList = function() {
  return this.setChannelList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Records.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Records.prototype.toObject = function(opt_includeInstance) {
  return proto.Records.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Records} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Records.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordPathList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Records as accepted by the `fromObject` method.
 * @record
 */
proto.Records.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.recordPathList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Records.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Records}
 */
proto.Records.fromObject = function(obj) {
  var msg = new proto.Records();
  obj.recordPathList != null && jspb.Message.setField(msg, 1, obj.recordPathList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Records}
 */
proto.Records.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Records;
  return proto.Records.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Records} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Records}
 */
proto.Records.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRecordPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Records.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Records.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Records} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Records.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordPathList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string record_path = 1;
 * @return {!Array<string>}
 */
proto.Records.prototype.getRecordPathList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Records} returns this
 */
proto.Records.prototype.setRecordPathList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Records} returns this
 */
proto.Records.prototype.addRecordPath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Records} returns this
 */
proto.Records.prototype.clearRecordPathList = function() {
  return this.setRecordPathList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataExtractionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.DataExtractionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataExtractionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataExtractionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ioConfig: (f = msg.getIoConfig()) && proto.IoConfig.toObject(includeInstance, f),
    channels: (f = msg.getChannels()) && proto.Channels.toObject(includeInstance, f),
    records: (f = msg.getRecords()) && proto.Records.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DataExtractionConfig as accepted by the `fromObject` method.
 * @record
 */
proto.DataExtractionConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ioConfig;

  /** @type {?|undefined} */
  this.channels;

  /** @type {?|undefined} */
  this.records;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.DataExtractionConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.DataExtractionConfig}
 */
proto.DataExtractionConfig.fromObject = function(obj) {
  var msg = new proto.DataExtractionConfig();
  obj.ioConfig && jspb.Message.setWrapperField(
      msg, 1, proto.IoConfig.fromObject(obj.ioConfig));
  obj.channels && jspb.Message.setWrapperField(
      msg, 2, proto.Channels.fromObject(obj.channels));
  obj.records && jspb.Message.setWrapperField(
      msg, 3, proto.Records.fromObject(obj.records));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataExtractionConfig}
 */
proto.DataExtractionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataExtractionConfig;
  return proto.DataExtractionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataExtractionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataExtractionConfig}
 */
proto.DataExtractionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IoConfig;
      reader.readMessage(value,proto.IoConfig.deserializeBinaryFromReader);
      msg.setIoConfig(value);
      break;
    case 2:
      var value = new proto.Channels;
      reader.readMessage(value,proto.Channels.deserializeBinaryFromReader);
      msg.setChannels(value);
      break;
    case 3:
      var value = new proto.Records;
      reader.readMessage(value,proto.Records.deserializeBinaryFromReader);
      msg.setRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataExtractionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataExtractionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataExtractionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataExtractionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIoConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IoConfig.serializeBinaryToWriter
    );
  }
  f = message.getChannels();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Channels.serializeBinaryToWriter
    );
  }
  f = message.getRecords();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Records.serializeBinaryToWriter
    );
  }
};


/**
 * required IoConfig io_config = 1;
 * @return {!proto.IoConfig}
 */
proto.DataExtractionConfig.prototype.getIoConfig = function() {
  return /** @type{!proto.IoConfig} */ (
    jspb.Message.getWrapperField(this, proto.IoConfig, 1, 1));
};


/**
 * @param {!proto.IoConfig} value
 * @return {!proto.DataExtractionConfig} returns this
*/
proto.DataExtractionConfig.prototype.setIoConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataExtractionConfig} returns this
 */
proto.DataExtractionConfig.prototype.clearIoConfig = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataExtractionConfig.prototype.hasIoConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Channels channels = 2;
 * @return {!proto.Channels}
 */
proto.DataExtractionConfig.prototype.getChannels = function() {
  return /** @type{!proto.Channels} */ (
    jspb.Message.getWrapperField(this, proto.Channels, 2, 1));
};


/**
 * @param {!proto.Channels} value
 * @return {!proto.DataExtractionConfig} returns this
*/
proto.DataExtractionConfig.prototype.setChannels = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataExtractionConfig} returns this
 */
proto.DataExtractionConfig.prototype.clearChannels = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataExtractionConfig.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required Records records = 3;
 * @return {!proto.Records}
 */
proto.DataExtractionConfig.prototype.getRecords = function() {
  return /** @type{!proto.Records} */ (
    jspb.Message.getWrapperField(this, proto.Records, 3, 1));
};


/**
 * @param {!proto.Records} value
 * @return {!proto.DataExtractionConfig} returns this
*/
proto.DataExtractionConfig.prototype.setRecords = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataExtractionConfig} returns this
 */
proto.DataExtractionConfig.prototype.clearRecords = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataExtractionConfig.prototype.hasRecords = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
