// source: modules/planning/proto/task_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.planning.CreepDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.DpStSpeedOptimizerConfig', null, global);
goog.exportSymbol('proto.apollo.planning.LaneChangeDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.LearningModelInferenceTaskConfig', null, global);
goog.exportSymbol('proto.apollo.planning.LearningModelInferenceTaskConfig.ModelType', null, global);
goog.exportSymbol('proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig', null, global);
goog.exportSymbol('proto.apollo.planning.MoveDestLaneConfigTable', null, global);
goog.exportSymbol('proto.apollo.planning.NaviObstacleDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.NaviPathDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.NaviSpeedDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PathAssessmentDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PathBoundsDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PathDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PathLaneBorrowDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PathReferenceDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PathReuseDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PiecewiseJerkPathOptimizerConfig', null, global);
goog.exportSymbol('proto.apollo.planning.PiecewiseJerkPathWeights', null, global);
goog.exportSymbol('proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig', null, global);
goog.exportSymbol('proto.apollo.planning.RuleBasedStopDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.STBoundsDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.ShiftConfig', null, global);
goog.exportSymbol('proto.apollo.planning.SpeedBoundsDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.SpeedHeuristicOptimizerConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.CreepDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.CreepDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.CreepDeciderConfig.displayName = 'proto.apollo.planning.CreepDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LaneChangeDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.LaneChangeDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LaneChangeDeciderConfig.displayName = 'proto.apollo.planning.LaneChangeDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LearningModelInferenceTaskConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.LearningModelInferenceTaskConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LearningModelInferenceTaskConfig.displayName = 'proto.apollo.planning.LearningModelInferenceTaskConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.displayName = 'proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.NaviObstacleDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.NaviObstacleDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.NaviObstacleDeciderConfig.displayName = 'proto.apollo.planning.NaviObstacleDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.NaviPathDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.NaviPathDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.NaviPathDeciderConfig.displayName = 'proto.apollo.planning.NaviPathDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.MoveDestLaneConfigTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.MoveDestLaneConfigTable.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.MoveDestLaneConfigTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.MoveDestLaneConfigTable.displayName = 'proto.apollo.planning.MoveDestLaneConfigTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ShiftConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.ShiftConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ShiftConfig.displayName = 'proto.apollo.planning.ShiftConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.NaviSpeedDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.NaviSpeedDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.NaviSpeedDeciderConfig.displayName = 'proto.apollo.planning.NaviSpeedDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PathAssessmentDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PathAssessmentDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PathAssessmentDeciderConfig.displayName = 'proto.apollo.planning.PathAssessmentDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PathBoundsDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PathBoundsDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PathBoundsDeciderConfig.displayName = 'proto.apollo.planning.PathBoundsDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PathDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PathDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PathDeciderConfig.displayName = 'proto.apollo.planning.PathDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PathLaneBorrowDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PathLaneBorrowDeciderConfig.displayName = 'proto.apollo.planning.PathLaneBorrowDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PathReferenceDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PathReferenceDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PathReferenceDeciderConfig.displayName = 'proto.apollo.planning.PathReferenceDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PathReuseDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PathReuseDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PathReuseDeciderConfig.displayName = 'proto.apollo.planning.PathReuseDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.displayName = 'proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PiecewiseJerkPathOptimizerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.displayName = 'proto.apollo.planning.PiecewiseJerkPathOptimizerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PiecewiseJerkPathWeights = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PiecewiseJerkPathWeights, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PiecewiseJerkPathWeights.displayName = 'proto.apollo.planning.PiecewiseJerkPathWeights';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.displayName = 'proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.RuleBasedStopDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.RuleBasedStopDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.RuleBasedStopDeciderConfig.displayName = 'proto.apollo.planning.RuleBasedStopDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.SpeedBoundsDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.SpeedBoundsDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.SpeedBoundsDeciderConfig.displayName = 'proto.apollo.planning.SpeedBoundsDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.SpeedHeuristicOptimizerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.SpeedHeuristicOptimizerConfig.displayName = 'proto.apollo.planning.SpeedHeuristicOptimizerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DpStSpeedOptimizerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DpStSpeedOptimizerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DpStSpeedOptimizerConfig.displayName = 'proto.apollo.planning.DpStSpeedOptimizerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.STBoundsDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.STBoundsDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.STBoundsDeciderConfig.displayName = 'proto.apollo.planning.STBoundsDeciderConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.CreepDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.CreepDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CreepDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.5),
    speedLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.3),
    minBoundaryT: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 6.0),
    ignoreMaxStMinT: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.1),
    ignoreMinStMinS: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 15.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CreepDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.CreepDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopDistance;

  /** @type {?|undefined} */
  this.speedLimit;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.minBoundaryT;

  /** @type {?|undefined} */
  this.ignoreMaxStMinT;

  /** @type {?|undefined} */
  this.ignoreMinStMinS;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.CreepDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.CreepDeciderConfig}
 */
proto.apollo.planning.CreepDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.CreepDeciderConfig();
  obj.stopDistance != null && jspb.Message.setField(msg, 1, obj.stopDistance);
  obj.speedLimit != null && jspb.Message.setField(msg, 2, obj.speedLimit);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 3, obj.maxValidStopDistance);
  obj.minBoundaryT != null && jspb.Message.setField(msg, 4, obj.minBoundaryT);
  obj.ignoreMaxStMinT != null && jspb.Message.setField(msg, 5, obj.ignoreMaxStMinT);
  obj.ignoreMinStMinS != null && jspb.Message.setField(msg, 6, obj.ignoreMinStMinS);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.CreepDeciderConfig}
 */
proto.apollo.planning.CreepDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.CreepDeciderConfig;
  return proto.apollo.planning.CreepDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.CreepDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.CreepDeciderConfig}
 */
proto.apollo.planning.CreepDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinBoundaryT(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIgnoreMaxStMinT(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIgnoreMinStMinS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.CreepDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.CreepDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.CreepDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional double stop_distance = 1;
 * @return {number}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.setStopDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.clearStopDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double speed_limit = 2;
 * @return {number}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.getSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.setSpeedLimit = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.clearSpeedLimit = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.hasSpeedLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_valid_stop_distance = 3;
 * @return {number}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double min_boundary_t = 4;
 * @return {number}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.getMinBoundaryT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 6.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.setMinBoundaryT = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.clearMinBoundaryT = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.hasMinBoundaryT = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ignore_max_st_min_t = 5;
 * @return {number}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.getIgnoreMaxStMinT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.setIgnoreMaxStMinT = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.clearIgnoreMaxStMinT = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.hasIgnoreMaxStMinT = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double ignore_min_st_min_s = 6;
 * @return {number}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.getIgnoreMinStMinS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 15.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.setIgnoreMinStMinS = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.CreepDeciderConfig} returns this
 */
proto.apollo.planning.CreepDeciderConfig.prototype.clearIgnoreMinStMinS = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.CreepDeciderConfig.prototype.hasIgnoreMinStMinS = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LaneChangeDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LaneChangeDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LaneChangeDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enableLaneChangeUrgencyCheck: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    enablePrioritizeChangeLane: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    enableRemoveChangeLane: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    recklessChangeLane: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    changeLaneSuccessFreezeTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 1.5),
    changeLaneFailFreezeTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneChangeDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LaneChangeDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.enableLaneChangeUrgencyCheck;

  /** @type {?|undefined} */
  this.enablePrioritizeChangeLane;

  /** @type {?|undefined} */
  this.enableRemoveChangeLane;

  /** @type {?|undefined} */
  this.recklessChangeLane;

  /** @type {?|undefined} */
  this.changeLaneSuccessFreezeTime;

  /** @type {?|undefined} */
  this.changeLaneFailFreezeTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LaneChangeDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig}
 */
proto.apollo.planning.LaneChangeDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LaneChangeDeciderConfig();
  obj.enableLaneChangeUrgencyCheck != null && jspb.Message.setField(msg, 1, obj.enableLaneChangeUrgencyCheck);
  obj.enablePrioritizeChangeLane != null && jspb.Message.setField(msg, 2, obj.enablePrioritizeChangeLane);
  obj.enableRemoveChangeLane != null && jspb.Message.setField(msg, 3, obj.enableRemoveChangeLane);
  obj.recklessChangeLane != null && jspb.Message.setField(msg, 4, obj.recklessChangeLane);
  obj.changeLaneSuccessFreezeTime != null && jspb.Message.setField(msg, 5, obj.changeLaneSuccessFreezeTime);
  obj.changeLaneFailFreezeTime != null && jspb.Message.setField(msg, 6, obj.changeLaneFailFreezeTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig}
 */
proto.apollo.planning.LaneChangeDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LaneChangeDeciderConfig;
  return proto.apollo.planning.LaneChangeDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LaneChangeDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig}
 */
proto.apollo.planning.LaneChangeDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableLaneChangeUrgencyCheck(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablePrioritizeChangeLane(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableRemoveChangeLane(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecklessChangeLane(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChangeLaneSuccessFreezeTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChangeLaneFailFreezeTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LaneChangeDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LaneChangeDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LaneChangeDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional bool enable_lane_change_urgency_check = 1;
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.getEnableLaneChangeUrgencyCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.setEnableLaneChangeUrgencyCheck = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.clearEnableLaneChangeUrgencyCheck = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.hasEnableLaneChangeUrgencyCheck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enable_prioritize_change_lane = 2;
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.getEnablePrioritizeChangeLane = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.setEnablePrioritizeChangeLane = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.clearEnablePrioritizeChangeLane = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.hasEnablePrioritizeChangeLane = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enable_remove_change_lane = 3;
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.getEnableRemoveChangeLane = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.setEnableRemoveChangeLane = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.clearEnableRemoveChangeLane = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.hasEnableRemoveChangeLane = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool reckless_change_lane = 4;
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.getRecklessChangeLane = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.setRecklessChangeLane = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.clearRecklessChangeLane = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.hasRecklessChangeLane = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double change_lane_success_freeze_time = 5;
 * @return {number}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.getChangeLaneSuccessFreezeTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.setChangeLaneSuccessFreezeTime = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.clearChangeLaneSuccessFreezeTime = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.hasChangeLaneSuccessFreezeTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double change_lane_fail_freeze_time = 6;
 * @return {number}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.getChangeLaneFailFreezeTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.setChangeLaneFailFreezeTime = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LaneChangeDeciderConfig} returns this
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.clearChangeLaneFailFreezeTime = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LaneChangeDeciderConfig.prototype.hasChangeLaneFailFreezeTime = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LearningModelInferenceTaskConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LearningModelInferenceTaskConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    cpuModelFile: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    gpuModelFile: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    useCuda: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    trajectoryDeltaT: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.2),
    allowEmptyLearningBasedData: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    allowEmptyOutputTrajectory: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LearningModelInferenceTaskConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.modelType;

  /** @type {?|undefined} */
  this.cpuModelFile;

  /** @type {?|undefined} */
  this.gpuModelFile;

  /** @type {?|undefined} */
  this.useCuda;

  /** @type {?|undefined} */
  this.trajectoryDeltaT;

  /** @type {?|undefined} */
  this.allowEmptyLearningBasedData;

  /** @type {?|undefined} */
  this.allowEmptyOutputTrajectory;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LearningModelInferenceTaskConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LearningModelInferenceTaskConfig();
  obj.modelType != null && jspb.Message.setField(msg, 1, obj.modelType);
  obj.cpuModelFile != null && jspb.Message.setField(msg, 2, obj.cpuModelFile);
  obj.gpuModelFile != null && jspb.Message.setField(msg, 3, obj.gpuModelFile);
  obj.useCuda != null && jspb.Message.setField(msg, 4, obj.useCuda);
  obj.trajectoryDeltaT != null && jspb.Message.setField(msg, 5, obj.trajectoryDeltaT);
  obj.allowEmptyLearningBasedData != null && jspb.Message.setField(msg, 6, obj.allowEmptyLearningBasedData);
  obj.allowEmptyOutputTrajectory != null && jspb.Message.setField(msg, 7, obj.allowEmptyOutputTrajectory);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LearningModelInferenceTaskConfig;
  return proto.apollo.planning.LearningModelInferenceTaskConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LearningModelInferenceTaskConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.LearningModelInferenceTaskConfig.ModelType} */ (reader.readEnum());
      msg.setModelType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpuModelFile(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGpuModelFile(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseCuda(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajectoryDeltaT(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowEmptyLearningBasedData(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowEmptyOutputTrajectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LearningModelInferenceTaskConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LearningModelInferenceTaskConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.LearningModelInferenceTaskConfig.ModelType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.ModelType = {
  CNN: 1,
  CNN_LSTM: 2
};

/**
 * optional ModelType model_type = 1;
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig.ModelType}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.getModelType = function() {
  return /** @type {!proto.apollo.planning.LearningModelInferenceTaskConfig.ModelType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.apollo.planning.LearningModelInferenceTaskConfig.ModelType} value
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.setModelType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.clearModelType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.hasModelType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string cpu_model_file = 2;
 * @return {string}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.getCpuModelFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.setCpuModelFile = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.clearCpuModelFile = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.hasCpuModelFile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string gpu_model_file = 3;
 * @return {string}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.getGpuModelFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.setGpuModelFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.clearGpuModelFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.hasGpuModelFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool use_cuda = 4;
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.getUseCuda = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.setUseCuda = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.clearUseCuda = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.hasUseCuda = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double trajectory_delta_t = 5;
 * @return {number}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.getTrajectoryDeltaT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.setTrajectoryDeltaT = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.clearTrajectoryDeltaT = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.hasTrajectoryDeltaT = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool allow_empty_learning_based_data = 6;
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.getAllowEmptyLearningBasedData = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.setAllowEmptyLearningBasedData = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.clearAllowEmptyLearningBasedData = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.hasAllowEmptyLearningBasedData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool allow_empty_output_trajectory = 7;
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.getAllowEmptyOutputTrajectory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.setAllowEmptyOutputTrajectory = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.clearAllowEmptyOutputTrajectory = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTaskConfig.prototype.hasAllowEmptyOutputTrajectory = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    minAdcFutureTrajectoryTimeLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 2.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LearningModelInferenceTrajectoryTaskConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minAdcFutureTrajectoryTimeLength;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig}
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig();
  obj.minAdcFutureTrajectoryTimeLength != null && jspb.Message.setField(msg, 1, obj.minAdcFutureTrajectoryTimeLength);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig}
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig;
  return proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig}
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinAdcFutureTrajectoryTimeLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double min_adc_future_trajectory_time_length = 1;
 * @return {number}
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.prototype.getMinAdcFutureTrajectoryTimeLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.prototype.setMinAdcFutureTrajectoryTimeLength = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig} returns this
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.prototype.clearMinAdcFutureTrajectoryTimeLength = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LearningModelInferenceTrajectoryTaskConfig.prototype.hasMinAdcFutureTrajectoryTimeLength = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.NaviObstacleDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.NaviObstacleDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NaviObstacleDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    minNudgeDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.2),
    maxNudgeDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.2),
    maxAllowNudgeSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 16.667),
    safeDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.2),
    nudgeAllowTolerance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.05),
    cyclesNumber: jspb.Message.getFieldWithDefault(msg, 6, 3),
    judgeDisCoeff: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 2.0),
    basisDisValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 30.0),
    lateralVelocityValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.5),
    speedDeciderDetectRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 1.0),
    maxKeepNudgeCycles: jspb.Message.getFieldWithDefault(msg, 11, 100)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NaviObstacleDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.NaviObstacleDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minNudgeDistance;

  /** @type {?|undefined} */
  this.maxNudgeDistance;

  /** @type {?|undefined} */
  this.maxAllowNudgeSpeed;

  /** @type {?|undefined} */
  this.safeDistance;

  /** @type {?|undefined} */
  this.nudgeAllowTolerance;

  /** @type {?|undefined} */
  this.cyclesNumber;

  /** @type {?|undefined} */
  this.judgeDisCoeff;

  /** @type {?|undefined} */
  this.basisDisValue;

  /** @type {?|undefined} */
  this.lateralVelocityValue;

  /** @type {?|undefined} */
  this.speedDeciderDetectRange;

  /** @type {?|undefined} */
  this.maxKeepNudgeCycles;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.NaviObstacleDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.NaviObstacleDeciderConfig();
  obj.minNudgeDistance != null && jspb.Message.setField(msg, 1, obj.minNudgeDistance);
  obj.maxNudgeDistance != null && jspb.Message.setField(msg, 2, obj.maxNudgeDistance);
  obj.maxAllowNudgeSpeed != null && jspb.Message.setField(msg, 3, obj.maxAllowNudgeSpeed);
  obj.safeDistance != null && jspb.Message.setField(msg, 4, obj.safeDistance);
  obj.nudgeAllowTolerance != null && jspb.Message.setField(msg, 5, obj.nudgeAllowTolerance);
  obj.cyclesNumber != null && jspb.Message.setField(msg, 6, obj.cyclesNumber);
  obj.judgeDisCoeff != null && jspb.Message.setField(msg, 7, obj.judgeDisCoeff);
  obj.basisDisValue != null && jspb.Message.setField(msg, 8, obj.basisDisValue);
  obj.lateralVelocityValue != null && jspb.Message.setField(msg, 9, obj.lateralVelocityValue);
  obj.speedDeciderDetectRange != null && jspb.Message.setField(msg, 10, obj.speedDeciderDetectRange);
  obj.maxKeepNudgeCycles != null && jspb.Message.setField(msg, 11, obj.maxKeepNudgeCycles);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.NaviObstacleDeciderConfig;
  return proto.apollo.planning.NaviObstacleDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.NaviObstacleDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinNudgeDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxNudgeDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAllowNudgeSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSafeDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNudgeAllowTolerance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCyclesNumber(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJudgeDisCoeff(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBasisDisValue(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralVelocityValue(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedDeciderDetectRange(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxKeepNudgeCycles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.NaviObstacleDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.NaviObstacleDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NaviObstacleDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional double min_nudge_distance = 1;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getMinNudgeDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setMinNudgeDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearMinNudgeDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasMinNudgeDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_nudge_distance = 2;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getMaxNudgeDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setMaxNudgeDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearMaxNudgeDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasMaxNudgeDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_allow_nudge_speed = 3;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getMaxAllowNudgeSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 16.667));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setMaxAllowNudgeSpeed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearMaxAllowNudgeSpeed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasMaxAllowNudgeSpeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double safe_distance = 4;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getSafeDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setSafeDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearSafeDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasSafeDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double nudge_allow_tolerance = 5;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getNudgeAllowTolerance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setNudgeAllowTolerance = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearNudgeAllowTolerance = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasNudgeAllowTolerance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 cycles_number = 6;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getCyclesNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setCyclesNumber = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearCyclesNumber = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasCyclesNumber = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double judge_dis_coeff = 7;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getJudgeDisCoeff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setJudgeDisCoeff = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearJudgeDisCoeff = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasJudgeDisCoeff = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double basis_dis_value = 8;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getBasisDisValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 30.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setBasisDisValue = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearBasisDisValue = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasBasisDisValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double lateral_velocity_value = 9;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getLateralVelocityValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setLateralVelocityValue = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearLateralVelocityValue = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasLateralVelocityValue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double speed_decider_detect_range = 10;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getSpeedDeciderDetectRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setSpeedDeciderDetectRange = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearSpeedDeciderDetectRange = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasSpeedDeciderDetectRange = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 max_keep_nudge_cycles = 11;
 * @return {number}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.getMaxKeepNudgeCycles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 100));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.setMaxKeepNudgeCycles = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviObstacleDeciderConfig} returns this
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.clearMaxKeepNudgeCycles = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviObstacleDeciderConfig.prototype.hasMaxKeepNudgeCycles = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.NaviPathDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.NaviPathDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NaviPathDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    minPathLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 5.0),
    minLookForwardTime: jspb.Message.getFieldWithDefault(msg, 2, 2),
    maxKeepLaneDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.8),
    maxKeepLaneShiftY: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 20.0),
    minKeepLaneOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 15.0),
    keepLaneShiftCompensation: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.01),
    moveDestLaneConfigTalbe: (f = msg.getMoveDestLaneConfigTalbe()) && proto.apollo.planning.MoveDestLaneConfigTable.toObject(includeInstance, f),
    moveDestLaneCompensation: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.35),
    maxKappaThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    kappaMoveDestLaneCompensation: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    startPlanPointFrom: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NaviPathDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.NaviPathDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minPathLength;

  /** @type {?|undefined} */
  this.minLookForwardTime;

  /** @type {?|undefined} */
  this.maxKeepLaneDistance;

  /** @type {?|undefined} */
  this.maxKeepLaneShiftY;

  /** @type {?|undefined} */
  this.minKeepLaneOffset;

  /** @type {?|undefined} */
  this.keepLaneShiftCompensation;

  /** @type {?|undefined} */
  this.moveDestLaneConfigTalbe;

  /** @type {?|undefined} */
  this.moveDestLaneCompensation;

  /** @type {?|undefined} */
  this.maxKappaThreshold;

  /** @type {?|undefined} */
  this.kappaMoveDestLaneCompensation;

  /** @type {?|undefined} */
  this.startPlanPointFrom;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.NaviPathDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig}
 */
proto.apollo.planning.NaviPathDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.NaviPathDeciderConfig();
  obj.minPathLength != null && jspb.Message.setField(msg, 1, obj.minPathLength);
  obj.minLookForwardTime != null && jspb.Message.setField(msg, 2, obj.minLookForwardTime);
  obj.maxKeepLaneDistance != null && jspb.Message.setField(msg, 3, obj.maxKeepLaneDistance);
  obj.maxKeepLaneShiftY != null && jspb.Message.setField(msg, 4, obj.maxKeepLaneShiftY);
  obj.minKeepLaneOffset != null && jspb.Message.setField(msg, 5, obj.minKeepLaneOffset);
  obj.keepLaneShiftCompensation != null && jspb.Message.setField(msg, 6, obj.keepLaneShiftCompensation);
  obj.moveDestLaneConfigTalbe && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.planning.MoveDestLaneConfigTable.fromObject(obj.moveDestLaneConfigTalbe));
  obj.moveDestLaneCompensation != null && jspb.Message.setField(msg, 8, obj.moveDestLaneCompensation);
  obj.maxKappaThreshold != null && jspb.Message.setField(msg, 9, obj.maxKappaThreshold);
  obj.kappaMoveDestLaneCompensation != null && jspb.Message.setField(msg, 10, obj.kappaMoveDestLaneCompensation);
  obj.startPlanPointFrom != null && jspb.Message.setField(msg, 11, obj.startPlanPointFrom);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig}
 */
proto.apollo.planning.NaviPathDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.NaviPathDeciderConfig;
  return proto.apollo.planning.NaviPathDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.NaviPathDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig}
 */
proto.apollo.planning.NaviPathDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinPathLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinLookForwardTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxKeepLaneDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxKeepLaneShiftY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinKeepLaneOffset(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKeepLaneShiftCompensation(value);
      break;
    case 7:
      var value = new proto.apollo.planning.MoveDestLaneConfigTable;
      reader.readMessage(value,proto.apollo.planning.MoveDestLaneConfigTable.deserializeBinaryFromReader);
      msg.setMoveDestLaneConfigTalbe(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMoveDestLaneCompensation(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxKappaThreshold(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappaMoveDestLaneCompensation(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartPlanPointFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.NaviPathDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.NaviPathDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NaviPathDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMoveDestLaneConfigTalbe();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.planning.MoveDestLaneConfigTable.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional double min_path_length = 1;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMinPathLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMinPathLength = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMinPathLength = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMinPathLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 min_look_forward_time = 2;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMinLookForwardTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMinLookForwardTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMinLookForwardTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMinLookForwardTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_keep_lane_distance = 3;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMaxKeepLaneDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.8));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMaxKeepLaneDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMaxKeepLaneDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMaxKeepLaneDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double max_keep_lane_shift_y = 4;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMaxKeepLaneShiftY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 20.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMaxKeepLaneShiftY = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMaxKeepLaneShiftY = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMaxKeepLaneShiftY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double min_keep_lane_offset = 5;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMinKeepLaneOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 15.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMinKeepLaneOffset = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMinKeepLaneOffset = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMinKeepLaneOffset = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double keep_lane_shift_compensation = 6;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getKeepLaneShiftCompensation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.01));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setKeepLaneShiftCompensation = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearKeepLaneShiftCompensation = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasKeepLaneShiftCompensation = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
 * @return {?proto.apollo.planning.MoveDestLaneConfigTable}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMoveDestLaneConfigTalbe = function() {
  return /** @type{?proto.apollo.planning.MoveDestLaneConfigTable} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.MoveDestLaneConfigTable, 7));
};


/**
 * @param {?proto.apollo.planning.MoveDestLaneConfigTable|undefined} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
*/
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMoveDestLaneConfigTalbe = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMoveDestLaneConfigTalbe = function() {
  return this.setMoveDestLaneConfigTalbe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMoveDestLaneConfigTalbe = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double move_dest_lane_compensation = 8;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMoveDestLaneCompensation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.35));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMoveDestLaneCompensation = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMoveDestLaneCompensation = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMoveDestLaneCompensation = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double max_kappa_threshold = 9;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getMaxKappaThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setMaxKappaThreshold = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearMaxKappaThreshold = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasMaxKappaThreshold = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double kappa_move_dest_lane_compensation = 10;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getKappaMoveDestLaneCompensation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setKappaMoveDestLaneCompensation = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearKappaMoveDestLaneCompensation = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasKappaMoveDestLaneCompensation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 start_plan_point_from = 11;
 * @return {number}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.getStartPlanPointFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.setStartPlanPointFrom = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviPathDeciderConfig} returns this
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.clearStartPlanPointFrom = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviPathDeciderConfig.prototype.hasStartPlanPointFrom = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.MoveDestLaneConfigTable.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.MoveDestLaneConfigTable.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.MoveDestLaneConfigTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.MoveDestLaneConfigTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MoveDestLaneConfigTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    lateralShiftList: jspb.Message.toObjectList(msg.getLateralShiftList(),
    proto.apollo.planning.ShiftConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MoveDestLaneConfigTable as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.MoveDestLaneConfigTable.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lateralShiftList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.MoveDestLaneConfigTable.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.MoveDestLaneConfigTable}
 */
proto.apollo.planning.MoveDestLaneConfigTable.fromObject = function(obj) {
  var msg = new proto.apollo.planning.MoveDestLaneConfigTable();
  obj.lateralShiftList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.lateralShiftList.map(
          proto.apollo.planning.ShiftConfig.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.MoveDestLaneConfigTable}
 */
proto.apollo.planning.MoveDestLaneConfigTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.MoveDestLaneConfigTable;
  return proto.apollo.planning.MoveDestLaneConfigTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.MoveDestLaneConfigTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.MoveDestLaneConfigTable}
 */
proto.apollo.planning.MoveDestLaneConfigTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.ShiftConfig;
      reader.readMessage(value,proto.apollo.planning.ShiftConfig.deserializeBinaryFromReader);
      msg.addLateralShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.MoveDestLaneConfigTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.MoveDestLaneConfigTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.MoveDestLaneConfigTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.MoveDestLaneConfigTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLateralShiftList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.ShiftConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ShiftConfig lateral_shift = 1;
 * @return {!Array<!proto.apollo.planning.ShiftConfig>}
 */
proto.apollo.planning.MoveDestLaneConfigTable.prototype.getLateralShiftList = function() {
  return /** @type{!Array<!proto.apollo.planning.ShiftConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.ShiftConfig, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.ShiftConfig>} value
 * @return {!proto.apollo.planning.MoveDestLaneConfigTable} returns this
*/
proto.apollo.planning.MoveDestLaneConfigTable.prototype.setLateralShiftList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.ShiftConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.ShiftConfig}
 */
proto.apollo.planning.MoveDestLaneConfigTable.prototype.addLateralShift = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.ShiftConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.MoveDestLaneConfigTable} returns this
 */
proto.apollo.planning.MoveDestLaneConfigTable.prototype.clearLateralShiftList = function() {
  return this.setLateralShiftList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ShiftConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ShiftConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ShiftConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ShiftConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 4.16),
    maxMoveDestLaneShiftY: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ShiftConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ShiftConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxSpeed;

  /** @type {?|undefined} */
  this.maxMoveDestLaneShiftY;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ShiftConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ShiftConfig}
 */
proto.apollo.planning.ShiftConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ShiftConfig();
  obj.maxSpeed != null && jspb.Message.setField(msg, 1, obj.maxSpeed);
  obj.maxMoveDestLaneShiftY != null && jspb.Message.setField(msg, 3, obj.maxMoveDestLaneShiftY);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ShiftConfig}
 */
proto.apollo.planning.ShiftConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ShiftConfig;
  return proto.apollo.planning.ShiftConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ShiftConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ShiftConfig}
 */
proto.apollo.planning.ShiftConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxMoveDestLaneShiftY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ShiftConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ShiftConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ShiftConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ShiftConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double max_speed = 1;
 * @return {number}
 */
proto.apollo.planning.ShiftConfig.prototype.getMaxSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 4.16));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ShiftConfig} returns this
 */
proto.apollo.planning.ShiftConfig.prototype.setMaxSpeed = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ShiftConfig} returns this
 */
proto.apollo.planning.ShiftConfig.prototype.clearMaxSpeed = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ShiftConfig.prototype.hasMaxSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_move_dest_lane_shift_y = 3;
 * @return {number}
 */
proto.apollo.planning.ShiftConfig.prototype.getMaxMoveDestLaneShiftY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ShiftConfig} returns this
 */
proto.apollo.planning.ShiftConfig.prototype.setMaxMoveDestLaneShiftY = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ShiftConfig} returns this
 */
proto.apollo.planning.ShiftConfig.prototype.clearMaxMoveDestLaneShiftY = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ShiftConfig.prototype.hasMaxMoveDestLaneShiftY = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.NaviSpeedDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.NaviSpeedDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NaviSpeedDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    preferredAccel: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 2.0),
    preferredDecel: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 2.0),
    preferredJerk: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 2.0),
    maxAccel: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 4.0),
    maxDecel: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 5.0),
    obstacleBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.5),
    safeDistanceBase: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 2.0),
    safeDistanceRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 1.0),
    followingAccelRatio: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.5),
    softCentricAccelLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 1.2),
    hardCentricAccelLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 1.5),
    hardSpeedLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 100.0),
    hardAccelLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 10.0),
    enableSafePath: jspb.Message.getBooleanFieldWithDefault(msg, 14, true),
    enablePlanningStartPoint: jspb.Message.getBooleanFieldWithDefault(msg, 15, true),
    enableAccelAutoCompensation: jspb.Message.getBooleanFieldWithDefault(msg, 16, true),
    kappaPreview: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    kappaThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NaviSpeedDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.NaviSpeedDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.preferredAccel;

  /** @type {?|undefined} */
  this.preferredDecel;

  /** @type {?|undefined} */
  this.preferredJerk;

  /** @type {?|undefined} */
  this.maxAccel;

  /** @type {?|undefined} */
  this.maxDecel;

  /** @type {?|undefined} */
  this.obstacleBuffer;

  /** @type {?|undefined} */
  this.safeDistanceBase;

  /** @type {?|undefined} */
  this.safeDistanceRatio;

  /** @type {?|undefined} */
  this.followingAccelRatio;

  /** @type {?|undefined} */
  this.softCentricAccelLimit;

  /** @type {?|undefined} */
  this.hardCentricAccelLimit;

  /** @type {?|undefined} */
  this.hardSpeedLimit;

  /** @type {?|undefined} */
  this.hardAccelLimit;

  /** @type {?|undefined} */
  this.enableSafePath;

  /** @type {?|undefined} */
  this.enablePlanningStartPoint;

  /** @type {?|undefined} */
  this.enableAccelAutoCompensation;

  /** @type {?|undefined} */
  this.kappaPreview;

  /** @type {?|undefined} */
  this.kappaThreshold;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.NaviSpeedDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.NaviSpeedDeciderConfig();
  obj.preferredAccel != null && jspb.Message.setField(msg, 1, obj.preferredAccel);
  obj.preferredDecel != null && jspb.Message.setField(msg, 2, obj.preferredDecel);
  obj.preferredJerk != null && jspb.Message.setField(msg, 3, obj.preferredJerk);
  obj.maxAccel != null && jspb.Message.setField(msg, 4, obj.maxAccel);
  obj.maxDecel != null && jspb.Message.setField(msg, 5, obj.maxDecel);
  obj.obstacleBuffer != null && jspb.Message.setField(msg, 6, obj.obstacleBuffer);
  obj.safeDistanceBase != null && jspb.Message.setField(msg, 7, obj.safeDistanceBase);
  obj.safeDistanceRatio != null && jspb.Message.setField(msg, 8, obj.safeDistanceRatio);
  obj.followingAccelRatio != null && jspb.Message.setField(msg, 9, obj.followingAccelRatio);
  obj.softCentricAccelLimit != null && jspb.Message.setField(msg, 10, obj.softCentricAccelLimit);
  obj.hardCentricAccelLimit != null && jspb.Message.setField(msg, 11, obj.hardCentricAccelLimit);
  obj.hardSpeedLimit != null && jspb.Message.setField(msg, 12, obj.hardSpeedLimit);
  obj.hardAccelLimit != null && jspb.Message.setField(msg, 13, obj.hardAccelLimit);
  obj.enableSafePath != null && jspb.Message.setField(msg, 14, obj.enableSafePath);
  obj.enablePlanningStartPoint != null && jspb.Message.setField(msg, 15, obj.enablePlanningStartPoint);
  obj.enableAccelAutoCompensation != null && jspb.Message.setField(msg, 16, obj.enableAccelAutoCompensation);
  obj.kappaPreview != null && jspb.Message.setField(msg, 17, obj.kappaPreview);
  obj.kappaThreshold != null && jspb.Message.setField(msg, 18, obj.kappaThreshold);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.NaviSpeedDeciderConfig;
  return proto.apollo.planning.NaviSpeedDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.NaviSpeedDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreferredAccel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreferredDecel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreferredJerk(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAccel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDecel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setObstacleBuffer(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSafeDistanceBase(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSafeDistanceRatio(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFollowingAccelRatio(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSoftCentricAccelLimit(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHardCentricAccelLimit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHardSpeedLimit(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHardAccelLimit(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSafePath(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablePlanningStartPoint(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableAccelAutoCompensation(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappaPreview(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappaThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.NaviSpeedDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.NaviSpeedDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.NaviSpeedDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
};


/**
 * optional double preferred_accel = 1;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getPreferredAccel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setPreferredAccel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearPreferredAccel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasPreferredAccel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double preferred_decel = 2;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getPreferredDecel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setPreferredDecel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearPreferredDecel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasPreferredDecel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double preferred_jerk = 3;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getPreferredJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setPreferredJerk = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearPreferredJerk = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasPreferredJerk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double max_accel = 4;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getMaxAccel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setMaxAccel = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearMaxAccel = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasMaxAccel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double max_decel = 5;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getMaxDecel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setMaxDecel = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearMaxDecel = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasMaxDecel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double obstacle_buffer = 6;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getObstacleBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setObstacleBuffer = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearObstacleBuffer = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasObstacleBuffer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double safe_distance_base = 7;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getSafeDistanceBase = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setSafeDistanceBase = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearSafeDistanceBase = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasSafeDistanceBase = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double safe_distance_ratio = 8;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getSafeDistanceRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setSafeDistanceRatio = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearSafeDistanceRatio = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasSafeDistanceRatio = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double following_accel_ratio = 9;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getFollowingAccelRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setFollowingAccelRatio = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearFollowingAccelRatio = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasFollowingAccelRatio = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double soft_centric_accel_limit = 10;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getSoftCentricAccelLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 1.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setSoftCentricAccelLimit = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearSoftCentricAccelLimit = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasSoftCentricAccelLimit = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double hard_centric_accel_limit = 11;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getHardCentricAccelLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setHardCentricAccelLimit = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearHardCentricAccelLimit = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasHardCentricAccelLimit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double hard_speed_limit = 12;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getHardSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setHardSpeedLimit = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearHardSpeedLimit = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasHardSpeedLimit = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double hard_accel_limit = 13;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getHardAccelLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setHardAccelLimit = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearHardAccelLimit = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasHardAccelLimit = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool enable_safe_path = 14;
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getEnableSafePath = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setEnableSafePath = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearEnableSafePath = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasEnableSafePath = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool enable_planning_start_point = 15;
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getEnablePlanningStartPoint = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setEnablePlanningStartPoint = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearEnablePlanningStartPoint = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasEnablePlanningStartPoint = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool enable_accel_auto_compensation = 16;
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getEnableAccelAutoCompensation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setEnableAccelAutoCompensation = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearEnableAccelAutoCompensation = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasEnableAccelAutoCompensation = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double kappa_preview = 17;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getKappaPreview = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setKappaPreview = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearKappaPreview = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasKappaPreview = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double kappa_threshold = 18;
 * @return {number}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.getKappaThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.setKappaThreshold = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.NaviSpeedDeciderConfig} returns this
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.clearKappaThreshold = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.NaviSpeedDeciderConfig.prototype.hasKappaThreshold = function() {
  return jspb.Message.getField(this, 18) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PathAssessmentDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PathAssessmentDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PathAssessmentDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathAssessmentDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathAssessmentDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PathAssessmentDeciderConfig.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PathAssessmentDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PathAssessmentDeciderConfig}
 */
proto.apollo.planning.PathAssessmentDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PathAssessmentDeciderConfig();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PathAssessmentDeciderConfig}
 */
proto.apollo.planning.PathAssessmentDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PathAssessmentDeciderConfig;
  return proto.apollo.planning.PathAssessmentDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PathAssessmentDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PathAssessmentDeciderConfig}
 */
proto.apollo.planning.PathAssessmentDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PathAssessmentDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PathAssessmentDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PathAssessmentDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathAssessmentDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PathBoundsDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PathBoundsDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathBoundsDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    isLaneBorrowing: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    isPullOver: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    pullOverDestinationToAdcBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 25.0),
    pullOverDestinationToPathendBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 10.0),
    pullOverRoadEdgeBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.15),
    pullOverApproachLonDistanceAdjustFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 1.5),
    adcBufferCoeff: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 1.0),
    isExtendLaneBoundsToIncludeAdc: jspb.Message.getBooleanFieldWithDefault(msg, 8, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathBoundsDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PathBoundsDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.isLaneBorrowing;

  /** @type {?|undefined} */
  this.isPullOver;

  /** @type {?|undefined} */
  this.pullOverDestinationToAdcBuffer;

  /** @type {?|undefined} */
  this.pullOverDestinationToPathendBuffer;

  /** @type {?|undefined} */
  this.pullOverRoadEdgeBuffer;

  /** @type {?|undefined} */
  this.pullOverApproachLonDistanceAdjustFactor;

  /** @type {?|undefined} */
  this.adcBufferCoeff;

  /** @type {?|undefined} */
  this.isExtendLaneBoundsToIncludeAdc;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PathBoundsDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig}
 */
proto.apollo.planning.PathBoundsDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PathBoundsDeciderConfig();
  obj.isLaneBorrowing != null && jspb.Message.setField(msg, 1, obj.isLaneBorrowing);
  obj.isPullOver != null && jspb.Message.setField(msg, 2, obj.isPullOver);
  obj.pullOverDestinationToAdcBuffer != null && jspb.Message.setField(msg, 3, obj.pullOverDestinationToAdcBuffer);
  obj.pullOverDestinationToPathendBuffer != null && jspb.Message.setField(msg, 4, obj.pullOverDestinationToPathendBuffer);
  obj.pullOverRoadEdgeBuffer != null && jspb.Message.setField(msg, 5, obj.pullOverRoadEdgeBuffer);
  obj.pullOverApproachLonDistanceAdjustFactor != null && jspb.Message.setField(msg, 6, obj.pullOverApproachLonDistanceAdjustFactor);
  obj.adcBufferCoeff != null && jspb.Message.setField(msg, 7, obj.adcBufferCoeff);
  obj.isExtendLaneBoundsToIncludeAdc != null && jspb.Message.setField(msg, 8, obj.isExtendLaneBoundsToIncludeAdc);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig}
 */
proto.apollo.planning.PathBoundsDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PathBoundsDeciderConfig;
  return proto.apollo.planning.PathBoundsDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PathBoundsDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig}
 */
proto.apollo.planning.PathBoundsDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLaneBorrowing(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPullOver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPullOverDestinationToAdcBuffer(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPullOverDestinationToPathendBuffer(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPullOverRoadEdgeBuffer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPullOverApproachLonDistanceAdjustFactor(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdcBufferCoeff(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsExtendLaneBoundsToIncludeAdc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PathBoundsDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PathBoundsDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathBoundsDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional bool is_lane_borrowing = 1;
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getIsLaneBorrowing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setIsLaneBorrowing = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearIsLaneBorrowing = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasIsLaneBorrowing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_pull_over = 2;
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getIsPullOver = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setIsPullOver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearIsPullOver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasIsPullOver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double pull_over_destination_to_adc_buffer = 3;
 * @return {number}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getPullOverDestinationToAdcBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 25.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setPullOverDestinationToAdcBuffer = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearPullOverDestinationToAdcBuffer = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasPullOverDestinationToAdcBuffer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double pull_over_destination_to_pathend_buffer = 4;
 * @return {number}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getPullOverDestinationToPathendBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setPullOverDestinationToPathendBuffer = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearPullOverDestinationToPathendBuffer = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasPullOverDestinationToPathendBuffer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double pull_over_road_edge_buffer = 5;
 * @return {number}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getPullOverRoadEdgeBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.15));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setPullOverRoadEdgeBuffer = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearPullOverRoadEdgeBuffer = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasPullOverRoadEdgeBuffer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double pull_over_approach_lon_distance_adjust_factor = 6;
 * @return {number}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getPullOverApproachLonDistanceAdjustFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setPullOverApproachLonDistanceAdjustFactor = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearPullOverApproachLonDistanceAdjustFactor = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasPullOverApproachLonDistanceAdjustFactor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double adc_buffer_coeff = 7;
 * @return {number}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getAdcBufferCoeff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setAdcBufferCoeff = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearAdcBufferCoeff = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasAdcBufferCoeff = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool is_extend_lane_bounds_to_include_adc = 8;
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.getIsExtendLaneBoundsToIncludeAdc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.setIsExtendLaneBoundsToIncludeAdc = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathBoundsDeciderConfig} returns this
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.clearIsExtendLaneBoundsToIncludeAdc = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathBoundsDeciderConfig.prototype.hasIsExtendLaneBoundsToIncludeAdc = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PathDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PathDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PathDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    staticObstacleBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PathDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.staticObstacleBuffer;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PathDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PathDeciderConfig}
 */
proto.apollo.planning.PathDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PathDeciderConfig();
  obj.staticObstacleBuffer != null && jspb.Message.setField(msg, 1, obj.staticObstacleBuffer);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PathDeciderConfig}
 */
proto.apollo.planning.PathDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PathDeciderConfig;
  return proto.apollo.planning.PathDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PathDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PathDeciderConfig}
 */
proto.apollo.planning.PathDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStaticObstacleBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PathDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PathDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PathDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double static_obstacle_buffer = 1;
 * @return {number}
 */
proto.apollo.planning.PathDeciderConfig.prototype.getStaticObstacleBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathDeciderConfig} returns this
 */
proto.apollo.planning.PathDeciderConfig.prototype.setStaticObstacleBuffer = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathDeciderConfig} returns this
 */
proto.apollo.planning.PathDeciderConfig.prototype.clearStaticObstacleBuffer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathDeciderConfig.prototype.hasStaticObstacleBuffer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PathLaneBorrowDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PathLaneBorrowDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    allowLaneBorrowing: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathLaneBorrowDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.allowLaneBorrowing;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PathLaneBorrowDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PathLaneBorrowDeciderConfig}
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PathLaneBorrowDeciderConfig();
  obj.allowLaneBorrowing != null && jspb.Message.setField(msg, 1, obj.allowLaneBorrowing);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PathLaneBorrowDeciderConfig}
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PathLaneBorrowDeciderConfig;
  return proto.apollo.planning.PathLaneBorrowDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PathLaneBorrowDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PathLaneBorrowDeciderConfig}
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowLaneBorrowing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PathLaneBorrowDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PathLaneBorrowDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool allow_lane_borrowing = 1;
 * @return {boolean}
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.prototype.getAllowLaneBorrowing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PathLaneBorrowDeciderConfig} returns this
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.prototype.setAllowLaneBorrowing = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathLaneBorrowDeciderConfig} returns this
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.prototype.clearAllowLaneBorrowing = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathLaneBorrowDeciderConfig.prototype.hasAllowLaneBorrowing = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PathReferenceDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PathReferenceDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathReferenceDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    minPathReferenceLength: jspb.Message.getFieldWithDefault(msg, 1, 20),
    weightXRefPathReference: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathReferenceDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PathReferenceDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.minPathReferenceLength;

  /** @type {?|undefined} */
  this.weightXRefPathReference;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PathReferenceDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PathReferenceDeciderConfig}
 */
proto.apollo.planning.PathReferenceDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PathReferenceDeciderConfig();
  obj.minPathReferenceLength != null && jspb.Message.setField(msg, 1, obj.minPathReferenceLength);
  obj.weightXRefPathReference != null && jspb.Message.setField(msg, 2, obj.weightXRefPathReference);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PathReferenceDeciderConfig}
 */
proto.apollo.planning.PathReferenceDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PathReferenceDeciderConfig;
  return proto.apollo.planning.PathReferenceDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PathReferenceDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PathReferenceDeciderConfig}
 */
proto.apollo.planning.PathReferenceDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinPathReferenceLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightXRefPathReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PathReferenceDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PathReferenceDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathReferenceDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional uint32 min_path_reference_length = 1;
 * @return {number}
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.getMinPathReferenceLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 20));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathReferenceDeciderConfig} returns this
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.setMinPathReferenceLength = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathReferenceDeciderConfig} returns this
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.clearMinPathReferenceLength = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.hasMinPathReferenceLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double weight_x_ref_path_reference = 2;
 * @return {number}
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.getWeightXRefPathReference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PathReferenceDeciderConfig} returns this
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.setWeightXRefPathReference = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathReferenceDeciderConfig} returns this
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.clearWeightXRefPathReference = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathReferenceDeciderConfig.prototype.hasWeightXRefPathReference = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PathReuseDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PathReuseDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PathReuseDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathReuseDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    reusePath: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathReuseDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PathReuseDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.reusePath;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PathReuseDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PathReuseDeciderConfig}
 */
proto.apollo.planning.PathReuseDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PathReuseDeciderConfig();
  obj.reusePath != null && jspb.Message.setField(msg, 1, obj.reusePath);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PathReuseDeciderConfig}
 */
proto.apollo.planning.PathReuseDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PathReuseDeciderConfig;
  return proto.apollo.planning.PathReuseDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PathReuseDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PathReuseDeciderConfig}
 */
proto.apollo.planning.PathReuseDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReusePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PathReuseDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PathReuseDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PathReuseDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PathReuseDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool reuse_path = 1;
 * @return {boolean}
 */
proto.apollo.planning.PathReuseDeciderConfig.prototype.getReusePath = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PathReuseDeciderConfig} returns this
 */
proto.apollo.planning.PathReuseDeciderConfig.prototype.setReusePath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PathReuseDeciderConfig} returns this
 */
proto.apollo.planning.PathReuseDeciderConfig.prototype.clearReusePath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PathReuseDeciderConfig.prototype.hasReusePath = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    accWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 500.0),
    jerkWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 100.0),
    latAccWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 500.0),
    sPotentialWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 10.0),
    refVWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 10.0),
    refSWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 10.0),
    endSWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 10.0),
    endVWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 10.0),
    endAWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 10.0),
    softSBoundWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 10.0),
    useWarmStart: jspb.Message.getBooleanFieldWithDefault(msg, 100, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PiecewiseJerkNonlinearSpeedOptimizerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.accWeight;

  /** @type {?|undefined} */
  this.jerkWeight;

  /** @type {?|undefined} */
  this.latAccWeight;

  /** @type {?|undefined} */
  this.sPotentialWeight;

  /** @type {?|undefined} */
  this.refVWeight;

  /** @type {?|undefined} */
  this.refSWeight;

  /** @type {?|undefined} */
  this.endSWeight;

  /** @type {?|undefined} */
  this.endVWeight;

  /** @type {?|undefined} */
  this.endAWeight;

  /** @type {?|undefined} */
  this.softSBoundWeight;

  /** @type {?|undefined} */
  this.useWarmStart;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig();
  obj.accWeight != null && jspb.Message.setField(msg, 1, obj.accWeight);
  obj.jerkWeight != null && jspb.Message.setField(msg, 2, obj.jerkWeight);
  obj.latAccWeight != null && jspb.Message.setField(msg, 3, obj.latAccWeight);
  obj.sPotentialWeight != null && jspb.Message.setField(msg, 4, obj.sPotentialWeight);
  obj.refVWeight != null && jspb.Message.setField(msg, 5, obj.refVWeight);
  obj.refSWeight != null && jspb.Message.setField(msg, 6, obj.refSWeight);
  obj.endSWeight != null && jspb.Message.setField(msg, 7, obj.endSWeight);
  obj.endVWeight != null && jspb.Message.setField(msg, 8, obj.endVWeight);
  obj.endAWeight != null && jspb.Message.setField(msg, 9, obj.endAWeight);
  obj.softSBoundWeight != null && jspb.Message.setField(msg, 10, obj.softSBoundWeight);
  obj.useWarmStart != null && jspb.Message.setField(msg, 100, obj.useWarmStart);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig;
  return proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccWeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkWeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatAccWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSPotentialWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefVWeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefSWeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndSWeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndVWeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndAWeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSoftSBoundWeight(value);
      break;
    case 100:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseWarmStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeBool(
      100,
      f
    );
  }
};


/**
 * optional double acc_weight = 1;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getAccWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 500.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setAccWeight = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearAccWeight = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasAccWeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double jerk_weight = 2;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getJerkWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setJerkWeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearJerkWeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasJerkWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double lat_acc_weight = 3;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getLatAccWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 500.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setLatAccWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearLatAccWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasLatAccWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double s_potential_weight = 4;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getSPotentialWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setSPotentialWeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearSPotentialWeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasSPotentialWeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ref_v_weight = 5;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getRefVWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setRefVWeight = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearRefVWeight = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasRefVWeight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double ref_s_weight = 6;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getRefSWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setRefSWeight = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearRefSWeight = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasRefSWeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double end_s_weight = 7;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getEndSWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setEndSWeight = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearEndSWeight = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasEndSWeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double end_v_weight = 8;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getEndVWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setEndVWeight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearEndVWeight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasEndVWeight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double end_a_weight = 9;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getEndAWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setEndAWeight = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearEndAWeight = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasEndAWeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double soft_s_bound_weight = 10;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getSoftSBoundWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setSoftSBoundWeight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearSoftSBoundWeight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasSoftSBoundWeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool use_warm_start = 100;
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.getUseWarmStart = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 100, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.setUseWarmStart = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.clearUseWarmStart = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.prototype.hasUseWarmStart = function() {
  return jspb.Message.getField(this, 100) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultPathConfig: (f = msg.getDefaultPathConfig()) && proto.apollo.planning.PiecewiseJerkPathWeights.toObject(includeInstance, f),
    laneChangePathConfig: (f = msg.getLaneChangePathConfig()) && proto.apollo.planning.PiecewiseJerkPathWeights.toObject(includeInstance, f),
    pathReferenceLWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PiecewiseJerkPathOptimizerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.defaultPathConfig;

  /** @type {?|undefined} */
  this.laneChangePathConfig;

  /** @type {?|undefined} */
  this.pathReferenceLWeight;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PiecewiseJerkPathOptimizerConfig();
  obj.defaultPathConfig && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.PiecewiseJerkPathWeights.fromObject(obj.defaultPathConfig));
  obj.laneChangePathConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.PiecewiseJerkPathWeights.fromObject(obj.laneChangePathConfig));
  obj.pathReferenceLWeight != null && jspb.Message.setField(msg, 3, obj.pathReferenceLWeight);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PiecewiseJerkPathOptimizerConfig;
  return proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.PiecewiseJerkPathWeights;
      reader.readMessage(value,proto.apollo.planning.PiecewiseJerkPathWeights.deserializeBinaryFromReader);
      msg.setDefaultPathConfig(value);
      break;
    case 2:
      var value = new proto.apollo.planning.PiecewiseJerkPathWeights;
      reader.readMessage(value,proto.apollo.planning.PiecewiseJerkPathWeights.deserializeBinaryFromReader);
      msg.setLaneChangePathConfig(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPathReferenceLWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultPathConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.PiecewiseJerkPathWeights.serializeBinaryToWriter
    );
  }
  f = message.getLaneChangePathConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.PiecewiseJerkPathWeights.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional PiecewiseJerkPathWeights default_path_config = 1;
 * @return {?proto.apollo.planning.PiecewiseJerkPathWeights}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.getDefaultPathConfig = function() {
  return /** @type{?proto.apollo.planning.PiecewiseJerkPathWeights} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PiecewiseJerkPathWeights, 1));
};


/**
 * @param {?proto.apollo.planning.PiecewiseJerkPathWeights|undefined} value
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} returns this
*/
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.setDefaultPathConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.clearDefaultPathConfig = function() {
  return this.setDefaultPathConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.hasDefaultPathConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PiecewiseJerkPathWeights lane_change_path_config = 2;
 * @return {?proto.apollo.planning.PiecewiseJerkPathWeights}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.getLaneChangePathConfig = function() {
  return /** @type{?proto.apollo.planning.PiecewiseJerkPathWeights} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.PiecewiseJerkPathWeights, 2));
};


/**
 * @param {?proto.apollo.planning.PiecewiseJerkPathWeights|undefined} value
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} returns this
*/
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.setLaneChangePathConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.clearLaneChangePathConfig = function() {
  return this.setLaneChangePathConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.hasLaneChangePathConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double path_reference_l_weight = 3;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.getPathReferenceLWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.setPathReferenceLWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkPathOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.clearPathReferenceLWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkPathOptimizerConfig.prototype.hasPathReferenceLWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PiecewiseJerkPathWeights.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PiecewiseJerkPathWeights} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkPathWeights.toObject = function(includeInstance, msg) {
  var f, obj = {
    lWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    dlWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 100.0),
    ddlWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1000.0),
    dddlWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 10000.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PiecewiseJerkPathWeights as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PiecewiseJerkPathWeights.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.lWeight;

  /** @type {?|undefined} */
  this.dlWeight;

  /** @type {?|undefined} */
  this.ddlWeight;

  /** @type {?|undefined} */
  this.dddlWeight;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PiecewiseJerkPathWeights.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PiecewiseJerkPathWeights();
  obj.lWeight != null && jspb.Message.setField(msg, 1, obj.lWeight);
  obj.dlWeight != null && jspb.Message.setField(msg, 2, obj.dlWeight);
  obj.ddlWeight != null && jspb.Message.setField(msg, 3, obj.ddlWeight);
  obj.dddlWeight != null && jspb.Message.setField(msg, 4, obj.dddlWeight);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PiecewiseJerkPathWeights;
  return proto.apollo.planning.PiecewiseJerkPathWeights.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PiecewiseJerkPathWeights} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLWeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDlWeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDdlWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDddlWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PiecewiseJerkPathWeights.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PiecewiseJerkPathWeights} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkPathWeights.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double l_weight = 1;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.getLWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.setLWeight = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.clearLWeight = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.hasLWeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double dl_weight = 2;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.getDlWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.setDlWeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.clearDlWeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.hasDlWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double ddl_weight = 3;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.getDdlWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1000.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.setDdlWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.clearDdlWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.hasDdlWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double dddl_weight = 4;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.getDddlWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 10000.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.setDddlWeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkPathWeights} returns this
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.clearDddlWeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkPathWeights.prototype.hasDddlWeight = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    accWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    jerkWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 10.0),
    kappaPenaltyWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1000.0),
    refSWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 10.0),
    refVWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PiecewiseJerkSpeedOptimizerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.accWeight;

  /** @type {?|undefined} */
  this.jerkWeight;

  /** @type {?|undefined} */
  this.kappaPenaltyWeight;

  /** @type {?|undefined} */
  this.refSWeight;

  /** @type {?|undefined} */
  this.refVWeight;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig();
  obj.accWeight != null && jspb.Message.setField(msg, 1, obj.accWeight);
  obj.jerkWeight != null && jspb.Message.setField(msg, 2, obj.jerkWeight);
  obj.kappaPenaltyWeight != null && jspb.Message.setField(msg, 3, obj.kappaPenaltyWeight);
  obj.refSWeight != null && jspb.Message.setField(msg, 4, obj.refSWeight);
  obj.refVWeight != null && jspb.Message.setField(msg, 5, obj.refVWeight);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig;
  return proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccWeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkWeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappaPenaltyWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefSWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRefVWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double acc_weight = 1;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.getAccWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.setAccWeight = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.clearAccWeight = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.hasAccWeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double jerk_weight = 2;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.getJerkWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.setJerkWeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.clearJerkWeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.hasJerkWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double kappa_penalty_weight = 3;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.getKappaPenaltyWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1000.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.setKappaPenaltyWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.clearKappaPenaltyWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.hasKappaPenaltyWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double ref_s_weight = 4;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.getRefSWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.setRefSWeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.clearRefSWeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.hasRefSWeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ref_v_weight = 5;
 * @return {number}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.getRefVWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.setRefVWeight = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.clearRefVWeight = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PiecewiseJerkSpeedOptimizerConfig.prototype.hasRefVWeight = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.RuleBasedStopDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.RuleBasedStopDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxAdcStopSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.3),
    maxValidStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.5),
    searchBeamLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 5.0),
    searchBeamRadiusIntensity: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.08),
    searchRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 3.14),
    isBlockAngleThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 1.57),
    approachDistanceForLaneChange: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 80.0),
    urgentDistanceForLaneChange: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 50.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RuleBasedStopDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxAdcStopSpeed;

  /** @type {?|undefined} */
  this.maxValidStopDistance;

  /** @type {?|undefined} */
  this.searchBeamLength;

  /** @type {?|undefined} */
  this.searchBeamRadiusIntensity;

  /** @type {?|undefined} */
  this.searchRange;

  /** @type {?|undefined} */
  this.isBlockAngleThreshold;

  /** @type {?|undefined} */
  this.approachDistanceForLaneChange;

  /** @type {?|undefined} */
  this.urgentDistanceForLaneChange;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.RuleBasedStopDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.RuleBasedStopDeciderConfig();
  obj.maxAdcStopSpeed != null && jspb.Message.setField(msg, 1, obj.maxAdcStopSpeed);
  obj.maxValidStopDistance != null && jspb.Message.setField(msg, 2, obj.maxValidStopDistance);
  obj.searchBeamLength != null && jspb.Message.setField(msg, 3, obj.searchBeamLength);
  obj.searchBeamRadiusIntensity != null && jspb.Message.setField(msg, 4, obj.searchBeamRadiusIntensity);
  obj.searchRange != null && jspb.Message.setField(msg, 5, obj.searchRange);
  obj.isBlockAngleThreshold != null && jspb.Message.setField(msg, 6, obj.isBlockAngleThreshold);
  obj.approachDistanceForLaneChange != null && jspb.Message.setField(msg, 10, obj.approachDistanceForLaneChange);
  obj.urgentDistanceForLaneChange != null && jspb.Message.setField(msg, 11, obj.urgentDistanceForLaneChange);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.RuleBasedStopDeciderConfig;
  return proto.apollo.planning.RuleBasedStopDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.RuleBasedStopDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAdcStopSpeed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxValidStopDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSearchBeamLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSearchBeamRadiusIntensity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSearchRange(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIsBlockAngleThreshold(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setApproachDistanceForLaneChange(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUrgentDistanceForLaneChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.RuleBasedStopDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.RuleBasedStopDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional double max_adc_stop_speed = 1;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getMaxAdcStopSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setMaxAdcStopSpeed = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearMaxAdcStopSpeed = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasMaxAdcStopSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double max_valid_stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getMaxValidStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setMaxValidStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearMaxValidStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasMaxValidStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double search_beam_length = 3;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getSearchBeamLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setSearchBeamLength = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearSearchBeamLength = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasSearchBeamLength = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double search_beam_radius_intensity = 4;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getSearchBeamRadiusIntensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.08));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setSearchBeamRadiusIntensity = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearSearchBeamRadiusIntensity = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasSearchBeamRadiusIntensity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double search_range = 5;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getSearchRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 3.14));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setSearchRange = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearSearchRange = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasSearchRange = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double is_block_angle_threshold = 6;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getIsBlockAngleThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 1.57));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setIsBlockAngleThreshold = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearIsBlockAngleThreshold = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasIsBlockAngleThreshold = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double approach_distance_for_lane_change = 10;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getApproachDistanceForLaneChange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 80.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setApproachDistanceForLaneChange = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearApproachDistanceForLaneChange = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasApproachDistanceForLaneChange = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double urgent_distance_for_lane_change = 11;
 * @return {number}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.getUrgentDistanceForLaneChange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 50.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.setUrgentDistanceForLaneChange = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RuleBasedStopDeciderConfig} returns this
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.clearUrgentDistanceForLaneChange = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RuleBasedStopDeciderConfig.prototype.hasUrgentDistanceForLaneChange = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.SpeedBoundsDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.SpeedBoundsDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 7.0),
    boundaryBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.1),
    maxCentricAccelerationLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 2.0),
    minimalKappa: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0E-5),
    pointExtension: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 1.0),
    lowestSpeed: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 2.5),
    collisionSafetyRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 1.0),
    staticObsNudgeSpeedRatio: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    dynamicObsNudgeSpeedRatio: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpeedBoundsDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.totalTime;

  /** @type {?|undefined} */
  this.boundaryBuffer;

  /** @type {?|undefined} */
  this.maxCentricAccelerationLimit;

  /** @type {?|undefined} */
  this.minimalKappa;

  /** @type {?|undefined} */
  this.pointExtension;

  /** @type {?|undefined} */
  this.lowestSpeed;

  /** @type {?|undefined} */
  this.collisionSafetyRange;

  /** @type {?|undefined} */
  this.staticObsNudgeSpeedRatio;

  /** @type {?|undefined} */
  this.dynamicObsNudgeSpeedRatio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.SpeedBoundsDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.SpeedBoundsDeciderConfig();
  obj.totalTime != null && jspb.Message.setField(msg, 1, obj.totalTime);
  obj.boundaryBuffer != null && jspb.Message.setField(msg, 2, obj.boundaryBuffer);
  obj.maxCentricAccelerationLimit != null && jspb.Message.setField(msg, 3, obj.maxCentricAccelerationLimit);
  obj.minimalKappa != null && jspb.Message.setField(msg, 4, obj.minimalKappa);
  obj.pointExtension != null && jspb.Message.setField(msg, 5, obj.pointExtension);
  obj.lowestSpeed != null && jspb.Message.setField(msg, 6, obj.lowestSpeed);
  obj.collisionSafetyRange != null && jspb.Message.setField(msg, 7, obj.collisionSafetyRange);
  obj.staticObsNudgeSpeedRatio != null && jspb.Message.setField(msg, 8, obj.staticObsNudgeSpeedRatio);
  obj.dynamicObsNudgeSpeedRatio != null && jspb.Message.setField(msg, 9, obj.dynamicObsNudgeSpeedRatio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.SpeedBoundsDeciderConfig;
  return proto.apollo.planning.SpeedBoundsDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.SpeedBoundsDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBoundaryBuffer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxCentricAccelerationLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinimalKappa(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPointExtension(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowestSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCollisionSafetyRange(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStaticObsNudgeSpeedRatio(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDynamicObsNudgeSpeedRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.SpeedBoundsDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.SpeedBoundsDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional double total_time = 1;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getTotalTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 7.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setTotalTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearTotalTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasTotalTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double boundary_buffer = 2;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getBoundaryBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setBoundaryBuffer = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearBoundaryBuffer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasBoundaryBuffer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double max_centric_acceleration_limit = 3;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getMaxCentricAccelerationLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setMaxCentricAccelerationLimit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearMaxCentricAccelerationLimit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasMaxCentricAccelerationLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double minimal_kappa = 4;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getMinimalKappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0E-5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setMinimalKappa = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearMinimalKappa = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasMinimalKappa = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double point_extension = 5;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getPointExtension = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setPointExtension = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearPointExtension = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasPointExtension = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double lowest_speed = 6;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getLowestSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 2.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setLowestSpeed = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearLowestSpeed = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasLowestSpeed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double collision_safety_range = 7;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getCollisionSafetyRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setCollisionSafetyRange = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearCollisionSafetyRange = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasCollisionSafetyRange = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double static_obs_nudge_speed_ratio = 8;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getStaticObsNudgeSpeedRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setStaticObsNudgeSpeedRatio = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearStaticObsNudgeSpeedRatio = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasStaticObsNudgeSpeedRatio = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double dynamic_obs_nudge_speed_ratio = 9;
 * @return {number}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.getDynamicObsNudgeSpeedRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.setDynamicObsNudgeSpeedRatio = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.SpeedBoundsDeciderConfig} returns this
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.clearDynamicObsNudgeSpeedRatio = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedBoundsDeciderConfig.prototype.hasDynamicObsNudgeSpeedRatio = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.SpeedHeuristicOptimizerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.SpeedHeuristicOptimizerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultSpeedConfig: (f = msg.getDefaultSpeedConfig()) && proto.apollo.planning.DpStSpeedOptimizerConfig.toObject(includeInstance, f),
    laneChangeSpeedConfig: (f = msg.getLaneChangeSpeedConfig()) && proto.apollo.planning.DpStSpeedOptimizerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpeedHeuristicOptimizerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.defaultSpeedConfig;

  /** @type {?|undefined} */
  this.laneChangeSpeedConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.SpeedHeuristicOptimizerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.SpeedHeuristicOptimizerConfig}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.SpeedHeuristicOptimizerConfig();
  obj.defaultSpeedConfig && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.DpStSpeedOptimizerConfig.fromObject(obj.defaultSpeedConfig));
  obj.laneChangeSpeedConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.DpStSpeedOptimizerConfig.fromObject(obj.laneChangeSpeedConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.SpeedHeuristicOptimizerConfig}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.SpeedHeuristicOptimizerConfig;
  return proto.apollo.planning.SpeedHeuristicOptimizerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.SpeedHeuristicOptimizerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.SpeedHeuristicOptimizerConfig}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.DpStSpeedOptimizerConfig;
      reader.readMessage(value,proto.apollo.planning.DpStSpeedOptimizerConfig.deserializeBinaryFromReader);
      msg.setDefaultSpeedConfig(value);
      break;
    case 2:
      var value = new proto.apollo.planning.DpStSpeedOptimizerConfig;
      reader.readMessage(value,proto.apollo.planning.DpStSpeedOptimizerConfig.deserializeBinaryFromReader);
      msg.setLaneChangeSpeedConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.SpeedHeuristicOptimizerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.SpeedHeuristicOptimizerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultSpeedConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.DpStSpeedOptimizerConfig.serializeBinaryToWriter
    );
  }
  f = message.getLaneChangeSpeedConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.DpStSpeedOptimizerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional DpStSpeedOptimizerConfig default_speed_config = 1;
 * @return {?proto.apollo.planning.DpStSpeedOptimizerConfig}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.getDefaultSpeedConfig = function() {
  return /** @type{?proto.apollo.planning.DpStSpeedOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DpStSpeedOptimizerConfig, 1));
};


/**
 * @param {?proto.apollo.planning.DpStSpeedOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.SpeedHeuristicOptimizerConfig} returns this
*/
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.setDefaultSpeedConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.SpeedHeuristicOptimizerConfig} returns this
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.clearDefaultSpeedConfig = function() {
  return this.setDefaultSpeedConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.hasDefaultSpeedConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DpStSpeedOptimizerConfig lane_change_speed_config = 2;
 * @return {?proto.apollo.planning.DpStSpeedOptimizerConfig}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.getLaneChangeSpeedConfig = function() {
  return /** @type{?proto.apollo.planning.DpStSpeedOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DpStSpeedOptimizerConfig, 2));
};


/**
 * @param {?proto.apollo.planning.DpStSpeedOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.SpeedHeuristicOptimizerConfig} returns this
*/
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.setLaneChangeSpeedConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.SpeedHeuristicOptimizerConfig} returns this
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.clearLaneChangeSpeedConfig = function() {
  return this.setLaneChangeSpeedConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.SpeedHeuristicOptimizerConfig.prototype.hasLaneChangeSpeedConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DpStSpeedOptimizerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DpStSpeedOptimizerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitT: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    denseDimensionS: jspb.Message.getFieldWithDefault(msg, 2, 41),
    denseUnitS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.5),
    sparseUnitS: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 1.0),
    speedWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    accelWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 10.0),
    jerkWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 10.0),
    obstacleWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 1.0),
    referenceWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    goDownBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 5.0),
    goUpBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 5.0),
    defaultObstacleCost: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 10000000000.0),
    defaultSpeedCost: jspb.Message.getFloatingPointFieldWithDefault(msg, 31, 1.0),
    exceedSpeedPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 32, 10.0),
    lowSpeedPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 33, 2.5),
    referenceSpeedPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 34, 1.0),
    keepClearLowSpeedPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 35, 10.0),
    accelPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 40, 2.0),
    decelPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 41, 2.0),
    positiveJerkCoeff: jspb.Message.getFloatingPointFieldWithDefault(msg, 50, 1.0),
    negativeJerkCoeff: jspb.Message.getFloatingPointFieldWithDefault(msg, 51, 300.0),
    maxAcceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 60, 4.5),
    maxDeceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 61, -4.5),
    safeTimeBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 70, 3.0),
    safeDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 71, 20.0),
    spatialPotentialPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 80, 1.0),
    isLaneChanging: jspb.Message.getBooleanFieldWithDefault(msg, 81, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DpStSpeedOptimizerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.unitT;

  /** @type {?|undefined} */
  this.denseDimensionS;

  /** @type {?|undefined} */
  this.denseUnitS;

  /** @type {?|undefined} */
  this.sparseUnitS;

  /** @type {?|undefined} */
  this.speedWeight;

  /** @type {?|undefined} */
  this.accelWeight;

  /** @type {?|undefined} */
  this.jerkWeight;

  /** @type {?|undefined} */
  this.obstacleWeight;

  /** @type {?|undefined} */
  this.referenceWeight;

  /** @type {?|undefined} */
  this.goDownBuffer;

  /** @type {?|undefined} */
  this.goUpBuffer;

  /** @type {?|undefined} */
  this.defaultObstacleCost;

  /** @type {?|undefined} */
  this.defaultSpeedCost;

  /** @type {?|undefined} */
  this.exceedSpeedPenalty;

  /** @type {?|undefined} */
  this.lowSpeedPenalty;

  /** @type {?|undefined} */
  this.referenceSpeedPenalty;

  /** @type {?|undefined} */
  this.keepClearLowSpeedPenalty;

  /** @type {?|undefined} */
  this.accelPenalty;

  /** @type {?|undefined} */
  this.decelPenalty;

  /** @type {?|undefined} */
  this.positiveJerkCoeff;

  /** @type {?|undefined} */
  this.negativeJerkCoeff;

  /** @type {?|undefined} */
  this.maxAcceleration;

  /** @type {?|undefined} */
  this.maxDeceleration;

  /** @type {?|undefined} */
  this.safeTimeBuffer;

  /** @type {?|undefined} */
  this.safeDistance;

  /** @type {?|undefined} */
  this.spatialPotentialPenalty;

  /** @type {?|undefined} */
  this.isLaneChanging;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DpStSpeedOptimizerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DpStSpeedOptimizerConfig();
  obj.unitT != null && jspb.Message.setField(msg, 1, obj.unitT);
  obj.denseDimensionS != null && jspb.Message.setField(msg, 2, obj.denseDimensionS);
  obj.denseUnitS != null && jspb.Message.setField(msg, 3, obj.denseUnitS);
  obj.sparseUnitS != null && jspb.Message.setField(msg, 4, obj.sparseUnitS);
  obj.speedWeight != null && jspb.Message.setField(msg, 10, obj.speedWeight);
  obj.accelWeight != null && jspb.Message.setField(msg, 11, obj.accelWeight);
  obj.jerkWeight != null && jspb.Message.setField(msg, 12, obj.jerkWeight);
  obj.obstacleWeight != null && jspb.Message.setField(msg, 13, obj.obstacleWeight);
  obj.referenceWeight != null && jspb.Message.setField(msg, 14, obj.referenceWeight);
  obj.goDownBuffer != null && jspb.Message.setField(msg, 15, obj.goDownBuffer);
  obj.goUpBuffer != null && jspb.Message.setField(msg, 16, obj.goUpBuffer);
  obj.defaultObstacleCost != null && jspb.Message.setField(msg, 20, obj.defaultObstacleCost);
  obj.defaultSpeedCost != null && jspb.Message.setField(msg, 31, obj.defaultSpeedCost);
  obj.exceedSpeedPenalty != null && jspb.Message.setField(msg, 32, obj.exceedSpeedPenalty);
  obj.lowSpeedPenalty != null && jspb.Message.setField(msg, 33, obj.lowSpeedPenalty);
  obj.referenceSpeedPenalty != null && jspb.Message.setField(msg, 34, obj.referenceSpeedPenalty);
  obj.keepClearLowSpeedPenalty != null && jspb.Message.setField(msg, 35, obj.keepClearLowSpeedPenalty);
  obj.accelPenalty != null && jspb.Message.setField(msg, 40, obj.accelPenalty);
  obj.decelPenalty != null && jspb.Message.setField(msg, 41, obj.decelPenalty);
  obj.positiveJerkCoeff != null && jspb.Message.setField(msg, 50, obj.positiveJerkCoeff);
  obj.negativeJerkCoeff != null && jspb.Message.setField(msg, 51, obj.negativeJerkCoeff);
  obj.maxAcceleration != null && jspb.Message.setField(msg, 60, obj.maxAcceleration);
  obj.maxDeceleration != null && jspb.Message.setField(msg, 61, obj.maxDeceleration);
  obj.safeTimeBuffer != null && jspb.Message.setField(msg, 70, obj.safeTimeBuffer);
  obj.safeDistance != null && jspb.Message.setField(msg, 71, obj.safeDistance);
  obj.spatialPotentialPenalty != null && jspb.Message.setField(msg, 80, obj.spatialPotentialPenalty);
  obj.isLaneChanging != null && jspb.Message.setField(msg, 81, obj.isLaneChanging);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DpStSpeedOptimizerConfig;
  return proto.apollo.planning.DpStSpeedOptimizerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DpStSpeedOptimizerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnitT(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDenseDimensionS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDenseUnitS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSparseUnitS(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedWeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelWeight(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerkWeight(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setObstacleWeight(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReferenceWeight(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGoDownBuffer(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGoUpBuffer(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultObstacleCost(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultSpeedCost(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExceedSpeedPenalty(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowSpeedPenalty(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReferenceSpeedPenalty(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKeepClearLowSpeedPenalty(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelPenalty(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDecelPenalty(value);
      break;
    case 50:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositiveJerkCoeff(value);
      break;
    case 51:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNegativeJerkCoeff(value);
      break;
    case 60:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAcceleration(value);
      break;
    case 61:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxDeceleration(value);
      break;
    case 70:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSafeTimeBuffer(value);
      break;
    case 71:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSafeDistance(value);
      break;
    case 80:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpatialPotentialPenalty(value);
      break;
    case 81:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLaneChanging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DpStSpeedOptimizerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DpStSpeedOptimizerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeDouble(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeDouble(
      33,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 34));
  if (f != null) {
    writer.writeDouble(
      34,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeDouble(
      35,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeDouble(
      40,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 41));
  if (f != null) {
    writer.writeDouble(
      41,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 50));
  if (f != null) {
    writer.writeDouble(
      50,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 51));
  if (f != null) {
    writer.writeDouble(
      51,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 60));
  if (f != null) {
    writer.writeDouble(
      60,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 61));
  if (f != null) {
    writer.writeDouble(
      61,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 70));
  if (f != null) {
    writer.writeDouble(
      70,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 71));
  if (f != null) {
    writer.writeDouble(
      71,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 80));
  if (f != null) {
    writer.writeDouble(
      80,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 81));
  if (f != null) {
    writer.writeBool(
      81,
      f
    );
  }
};


/**
 * optional double unit_t = 1;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getUnitT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setUnitT = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearUnitT = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasUnitT = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 dense_dimension_s = 2;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getDenseDimensionS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 41));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setDenseDimensionS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearDenseDimensionS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasDenseDimensionS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double dense_unit_s = 3;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getDenseUnitS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setDenseUnitS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearDenseUnitS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasDenseUnitS = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double sparse_unit_s = 4;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getSparseUnitS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setSparseUnitS = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearSparseUnitS = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasSparseUnitS = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double speed_weight = 10;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getSpeedWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setSpeedWeight = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearSpeedWeight = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasSpeedWeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double accel_weight = 11;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getAccelWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setAccelWeight = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearAccelWeight = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasAccelWeight = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double jerk_weight = 12;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getJerkWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setJerkWeight = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearJerkWeight = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasJerkWeight = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double obstacle_weight = 13;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getObstacleWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setObstacleWeight = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearObstacleWeight = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasObstacleWeight = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double reference_weight = 14;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getReferenceWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setReferenceWeight = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearReferenceWeight = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasReferenceWeight = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double go_down_buffer = 15;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getGoDownBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setGoDownBuffer = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearGoDownBuffer = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasGoDownBuffer = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double go_up_buffer = 16;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getGoUpBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setGoUpBuffer = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearGoUpBuffer = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasGoUpBuffer = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double default_obstacle_cost = 20;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getDefaultObstacleCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 10000000000.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setDefaultObstacleCost = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearDefaultObstacleCost = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasDefaultObstacleCost = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double default_speed_cost = 31;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getDefaultSpeedCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setDefaultSpeedCost = function(value) {
  return jspb.Message.setField(this, 31, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearDefaultSpeedCost = function() {
  return jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasDefaultSpeedCost = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional double exceed_speed_penalty = 32;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getExceedSpeedPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setExceedSpeedPenalty = function(value) {
  return jspb.Message.setField(this, 32, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearExceedSpeedPenalty = function() {
  return jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasExceedSpeedPenalty = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional double low_speed_penalty = 33;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getLowSpeedPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 33, 2.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setLowSpeedPenalty = function(value) {
  return jspb.Message.setField(this, 33, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearLowSpeedPenalty = function() {
  return jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasLowSpeedPenalty = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional double reference_speed_penalty = 34;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getReferenceSpeedPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 34, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setReferenceSpeedPenalty = function(value) {
  return jspb.Message.setField(this, 34, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearReferenceSpeedPenalty = function() {
  return jspb.Message.setField(this, 34, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasReferenceSpeedPenalty = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional double keep_clear_low_speed_penalty = 35;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getKeepClearLowSpeedPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 35, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setKeepClearLowSpeedPenalty = function(value) {
  return jspb.Message.setField(this, 35, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearKeepClearLowSpeedPenalty = function() {
  return jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasKeepClearLowSpeedPenalty = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional double accel_penalty = 40;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getAccelPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 40, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setAccelPenalty = function(value) {
  return jspb.Message.setField(this, 40, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearAccelPenalty = function() {
  return jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasAccelPenalty = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional double decel_penalty = 41;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getDecelPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 41, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setDecelPenalty = function(value) {
  return jspb.Message.setField(this, 41, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearDecelPenalty = function() {
  return jspb.Message.setField(this, 41, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasDecelPenalty = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional double positive_jerk_coeff = 50;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getPositiveJerkCoeff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 50, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setPositiveJerkCoeff = function(value) {
  return jspb.Message.setField(this, 50, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearPositiveJerkCoeff = function() {
  return jspb.Message.setField(this, 50, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasPositiveJerkCoeff = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional double negative_jerk_coeff = 51;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getNegativeJerkCoeff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 51, 300.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setNegativeJerkCoeff = function(value) {
  return jspb.Message.setField(this, 51, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearNegativeJerkCoeff = function() {
  return jspb.Message.setField(this, 51, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasNegativeJerkCoeff = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional double max_acceleration = 60;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getMaxAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 60, 4.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setMaxAcceleration = function(value) {
  return jspb.Message.setField(this, 60, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearMaxAcceleration = function() {
  return jspb.Message.setField(this, 60, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasMaxAcceleration = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional double max_deceleration = 61;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getMaxDeceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 61, -4.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setMaxDeceleration = function(value) {
  return jspb.Message.setField(this, 61, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearMaxDeceleration = function() {
  return jspb.Message.setField(this, 61, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasMaxDeceleration = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * optional double safe_time_buffer = 70;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getSafeTimeBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 70, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setSafeTimeBuffer = function(value) {
  return jspb.Message.setField(this, 70, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearSafeTimeBuffer = function() {
  return jspb.Message.setField(this, 70, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasSafeTimeBuffer = function() {
  return jspb.Message.getField(this, 70) != null;
};


/**
 * optional double safe_distance = 71;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getSafeDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 71, 20.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setSafeDistance = function(value) {
  return jspb.Message.setField(this, 71, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearSafeDistance = function() {
  return jspb.Message.setField(this, 71, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasSafeDistance = function() {
  return jspb.Message.getField(this, 71) != null;
};


/**
 * optional double spatial_potential_penalty = 80;
 * @return {number}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getSpatialPotentialPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 80, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setSpatialPotentialPenalty = function(value) {
  return jspb.Message.setField(this, 80, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearSpatialPotentialPenalty = function() {
  return jspb.Message.setField(this, 80, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasSpatialPotentialPenalty = function() {
  return jspb.Message.getField(this, 80) != null;
};


/**
 * optional bool is_lane_changing = 81;
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.getIsLaneChanging = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 81, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.setIsLaneChanging = function(value) {
  return jspb.Message.setField(this, 81, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DpStSpeedOptimizerConfig} returns this
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.clearIsLaneChanging = function() {
  return jspb.Message.setField(this, 81, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DpStSpeedOptimizerConfig.prototype.hasIsLaneChanging = function() {
  return jspb.Message.getField(this, 81) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.STBoundsDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.STBoundsDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.STBoundsDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.STBoundsDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 7.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of STBoundsDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.STBoundsDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.totalTime;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.STBoundsDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.STBoundsDeciderConfig}
 */
proto.apollo.planning.STBoundsDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.STBoundsDeciderConfig();
  obj.totalTime != null && jspb.Message.setField(msg, 1, obj.totalTime);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.STBoundsDeciderConfig}
 */
proto.apollo.planning.STBoundsDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.STBoundsDeciderConfig;
  return proto.apollo.planning.STBoundsDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.STBoundsDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.STBoundsDeciderConfig}
 */
proto.apollo.planning.STBoundsDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.STBoundsDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.STBoundsDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.STBoundsDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.STBoundsDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double total_time = 1;
 * @return {number}
 */
proto.apollo.planning.STBoundsDeciderConfig.prototype.getTotalTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 7.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.STBoundsDeciderConfig} returns this
 */
proto.apollo.planning.STBoundsDeciderConfig.prototype.setTotalTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.STBoundsDeciderConfig} returns this
 */
proto.apollo.planning.STBoundsDeciderConfig.prototype.clearTotalTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.STBoundsDeciderConfig.prototype.hasTotalTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.apollo.planning);
