// source: modules/control/proto/pad_msg.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_canbus_proto_chassis_pb = require('../../../modules/canbus/proto/chassis_pb.js');
goog.object.extend(proto, modules_canbus_proto_chassis_pb);
goog.exportSymbol('proto.apollo.control.DrivingAction', null, global);
goog.exportSymbol('proto.apollo.control.PadMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.PadMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.control.PadMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.PadMessage.displayName = 'proto.apollo.control.PadMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.PadMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.PadMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.PadMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.PadMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    drivingMode: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    action: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PadMessage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.PadMessage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.drivingMode;

  /** @type {?|undefined} */
  this.action;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.PadMessage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.PadMessage}
 */
proto.apollo.control.PadMessage.fromObject = function(obj) {
  var msg = new proto.apollo.control.PadMessage();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.drivingMode != null && jspb.Message.setField(msg, 2, obj.drivingMode);
  obj.action != null && jspb.Message.setField(msg, 3, obj.action);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.PadMessage}
 */
proto.apollo.control.PadMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.PadMessage;
  return proto.apollo.control.PadMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.PadMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.PadMessage}
 */
proto.apollo.control.PadMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (reader.readEnum());
      msg.setDrivingMode(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.control.DrivingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.PadMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.PadMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.PadMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.PadMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.control.DrivingAction} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.control.PadMessage.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.control.PadMessage} returns this
*/
proto.apollo.control.PadMessage.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.control.PadMessage} returns this
 */
proto.apollo.control.PadMessage.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.PadMessage.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.canbus.Chassis.DrivingMode driving_mode = 2;
 * @return {!proto.apollo.canbus.Chassis.DrivingMode}
 */
proto.apollo.control.PadMessage.prototype.getDrivingMode = function() {
  return /** @type {!proto.apollo.canbus.Chassis.DrivingMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.DrivingMode} value
 * @return {!proto.apollo.control.PadMessage} returns this
 */
proto.apollo.control.PadMessage.prototype.setDrivingMode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.PadMessage} returns this
 */
proto.apollo.control.PadMessage.prototype.clearDrivingMode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.PadMessage.prototype.hasDrivingMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DrivingAction action = 3;
 * @return {!proto.apollo.control.DrivingAction}
 */
proto.apollo.control.PadMessage.prototype.getAction = function() {
  return /** @type {!proto.apollo.control.DrivingAction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.control.DrivingAction} value
 * @return {!proto.apollo.control.PadMessage} returns this
 */
proto.apollo.control.PadMessage.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.PadMessage} returns this
 */
proto.apollo.control.PadMessage.prototype.clearAction = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.PadMessage.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.apollo.control.DrivingAction = {
  STOP: 0,
  START: 1,
  RESET: 2
};

goog.object.extend(exports, proto.apollo.control);
