// source: modules/planning/proto/open_space_task_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_planning_proto_planner_open_space_config_pb = require('../../../modules/planning/proto/planner_open_space_config_pb.js');
goog.object.extend(proto, modules_planning_proto_planner_open_space_config_pb);
goog.exportSymbol('proto.apollo.planning.DistanceApproachTrajectorySmootherConfig', null, global);
goog.exportSymbol('proto.apollo.planning.DualVariableConfig', null, global);
goog.exportSymbol('proto.apollo.planning.DualVariableMode', null, global);
goog.exportSymbol('proto.apollo.planning.HybridAStarConfig', null, global);
goog.exportSymbol('proto.apollo.planning.IpoptSolverConfig', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpaceFallBackDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpacePreStopDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpacePreStopDeciderConfig.StopType', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpaceRoiDeciderConfig', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpaceRoiDeciderConfig.RoiType', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig', null, global);
goog.exportSymbol('proto.apollo.planning.OpenSpaceTrajectoryProviderConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OpenSpaceFallBackDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OpenSpaceFallBackDeciderConfig.displayName = 'proto.apollo.planning.OpenSpaceFallBackDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OpenSpacePreStopDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OpenSpacePreStopDeciderConfig.displayName = 'proto.apollo.planning.OpenSpacePreStopDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OpenSpaceRoiDeciderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OpenSpaceRoiDeciderConfig.displayName = 'proto.apollo.planning.OpenSpaceRoiDeciderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.displayName = 'proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OpenSpaceTrajectoryProviderConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.displayName = 'proto.apollo.planning.OpenSpaceTrajectoryProviderConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.displayName = 'proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.HybridAStarConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.HybridAStarConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.HybridAStarConfig.displayName = 'proto.apollo.planning.HybridAStarConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DualVariableConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DualVariableConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DualVariableConfig.displayName = 'proto.apollo.planning.DualVariableConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.DistanceApproachTrajectorySmootherConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.displayName = 'proto.apollo.planning.DistanceApproachTrajectorySmootherConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.IpoptSolverConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.IpoptSolverConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.IpoptSolverConfig.displayName = 'proto.apollo.planning.IpoptSolverConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OpenSpaceFallBackDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    openSpacePredictionTimePeriod: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 5.0),
    openSpaceFallbackCollisionDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 5.0),
    openSpaceFallbackStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 2.0),
    openSpaceFallbackCollisionTimeBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OpenSpaceFallBackDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.openSpacePredictionTimePeriod;

  /** @type {?|undefined} */
  this.openSpaceFallbackCollisionDistance;

  /** @type {?|undefined} */
  this.openSpaceFallbackStopDistance;

  /** @type {?|undefined} */
  this.openSpaceFallbackCollisionTimeBuffer;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OpenSpaceFallBackDeciderConfig();
  obj.openSpacePredictionTimePeriod != null && jspb.Message.setField(msg, 1, obj.openSpacePredictionTimePeriod);
  obj.openSpaceFallbackCollisionDistance != null && jspb.Message.setField(msg, 2, obj.openSpaceFallbackCollisionDistance);
  obj.openSpaceFallbackStopDistance != null && jspb.Message.setField(msg, 3, obj.openSpaceFallbackStopDistance);
  obj.openSpaceFallbackCollisionTimeBuffer != null && jspb.Message.setField(msg, 4, obj.openSpaceFallbackCollisionTimeBuffer);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OpenSpaceFallBackDeciderConfig;
  return proto.apollo.planning.OpenSpaceFallBackDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenSpacePredictionTimePeriod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenSpaceFallbackCollisionDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenSpaceFallbackStopDistance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenSpaceFallbackCollisionTimeBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OpenSpaceFallBackDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double open_space_prediction_time_period = 1;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.getOpenSpacePredictionTimePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.setOpenSpacePredictionTimePeriod = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.clearOpenSpacePredictionTimePeriod = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.hasOpenSpacePredictionTimePeriod = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double open_space_fallback_collision_distance = 2;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.getOpenSpaceFallbackCollisionDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.setOpenSpaceFallbackCollisionDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.clearOpenSpaceFallbackCollisionDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.hasOpenSpaceFallbackCollisionDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double open_space_fallback_stop_distance = 3;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.getOpenSpaceFallbackStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.setOpenSpaceFallbackStopDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.clearOpenSpaceFallbackStopDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.hasOpenSpaceFallbackStopDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double open_space_fallback_collision_time_buffer = 4;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.getOpenSpaceFallbackCollisionTimeBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.setOpenSpaceFallbackCollisionTimeBuffer = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceFallBackDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.clearOpenSpaceFallbackCollisionTimeBuffer = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceFallBackDeciderConfig.prototype.hasOpenSpaceFallbackCollisionTimeBuffer = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OpenSpacePreStopDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rightawayStopDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 2.0),
    stopDistanceToTarget: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 5.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OpenSpacePreStopDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.stopType;

  /** @type {?|undefined} */
  this.rightawayStopDistance;

  /** @type {?|undefined} */
  this.stopDistanceToTarget;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OpenSpacePreStopDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OpenSpacePreStopDeciderConfig();
  obj.stopType != null && jspb.Message.setField(msg, 1, obj.stopType);
  obj.rightawayStopDistance != null && jspb.Message.setField(msg, 2, obj.rightawayStopDistance);
  obj.stopDistanceToTarget != null && jspb.Message.setField(msg, 3, obj.stopDistanceToTarget);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OpenSpacePreStopDeciderConfig;
  return proto.apollo.planning.OpenSpacePreStopDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.OpenSpacePreStopDeciderConfig.StopType} */ (reader.readEnum());
      msg.setStopType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRightawayStopDistance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopDistanceToTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OpenSpacePreStopDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.OpenSpacePreStopDeciderConfig.StopType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.StopType = {
  NOT_DEFINED: 0,
  PARKING: 1,
  PULL_OVER: 2,
  NARROW_STREET_U_TURN: 3,
  DEAD_END_PRE_STOP: 4
};

/**
 * optional StopType stop_type = 1;
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig.StopType}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.getStopType = function() {
  return /** @type {!proto.apollo.planning.OpenSpacePreStopDeciderConfig.StopType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.planning.OpenSpacePreStopDeciderConfig.StopType} value
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.setStopType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.clearStopType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.hasStopType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double rightaway_stop_distance = 2;
 * @return {number}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.getRightawayStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.setRightawayStopDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.clearRightawayStopDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.hasRightawayStopDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double stop_distance_to_target = 3;
 * @return {number}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.getStopDistanceToTarget = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.setStopDistanceToTarget = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpacePreStopDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.clearStopDistanceToTarget = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpacePreStopDeciderConfig.prototype.hasStopDistanceToTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OpenSpaceRoiDeciderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    roiType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    roiLongitudinalRangeStart: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 10.0),
    roiLongitudinalRangeEnd: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 10.0),
    parkingStartRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 7.0),
    parkingInwards: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    enablePerceptionObstacles: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    parkingDepthBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.1),
    roiLineSegmentMinAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.3),
    roiLineSegmentLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.0),
    roiLineSegmentLengthFromMap: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 10.0),
    perceptionObstacleFilteringDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 1000.0),
    perceptionObstacleBuffer: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    curbHeadingTangentChangeUpperLimit: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 1.0),
    endPoseSDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 10.0),
    parallelParkEndXBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.2),
    extendRightXBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    extendLeftXBuffer: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OpenSpaceRoiDeciderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.roiType;

  /** @type {?|undefined} */
  this.roiLongitudinalRangeStart;

  /** @type {?|undefined} */
  this.roiLongitudinalRangeEnd;

  /** @type {?|undefined} */
  this.parkingStartRange;

  /** @type {?|undefined} */
  this.parkingInwards;

  /** @type {?|undefined} */
  this.enablePerceptionObstacles;

  /** @type {?|undefined} */
  this.parkingDepthBuffer;

  /** @type {?|undefined} */
  this.roiLineSegmentMinAngle;

  /** @type {?|undefined} */
  this.roiLineSegmentLength;

  /** @type {?|undefined} */
  this.roiLineSegmentLengthFromMap;

  /** @type {?|undefined} */
  this.perceptionObstacleFilteringDistance;

  /** @type {?|undefined} */
  this.perceptionObstacleBuffer;

  /** @type {?|undefined} */
  this.curbHeadingTangentChangeUpperLimit;

  /** @type {?|undefined} */
  this.endPoseSDistance;

  /** @type {?|undefined} */
  this.parallelParkEndXBuffer;

  /** @type {?|undefined} */
  this.extendRightXBuffer;

  /** @type {?|undefined} */
  this.extendLeftXBuffer;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OpenSpaceRoiDeciderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OpenSpaceRoiDeciderConfig();
  obj.roiType != null && jspb.Message.setField(msg, 1, obj.roiType);
  obj.roiLongitudinalRangeStart != null && jspb.Message.setField(msg, 2, obj.roiLongitudinalRangeStart);
  obj.roiLongitudinalRangeEnd != null && jspb.Message.setField(msg, 3, obj.roiLongitudinalRangeEnd);
  obj.parkingStartRange != null && jspb.Message.setField(msg, 4, obj.parkingStartRange);
  obj.parkingInwards != null && jspb.Message.setField(msg, 5, obj.parkingInwards);
  obj.enablePerceptionObstacles != null && jspb.Message.setField(msg, 6, obj.enablePerceptionObstacles);
  obj.parkingDepthBuffer != null && jspb.Message.setField(msg, 7, obj.parkingDepthBuffer);
  obj.roiLineSegmentMinAngle != null && jspb.Message.setField(msg, 8, obj.roiLineSegmentMinAngle);
  obj.roiLineSegmentLength != null && jspb.Message.setField(msg, 9, obj.roiLineSegmentLength);
  obj.roiLineSegmentLengthFromMap != null && jspb.Message.setField(msg, 10, obj.roiLineSegmentLengthFromMap);
  obj.perceptionObstacleFilteringDistance != null && jspb.Message.setField(msg, 11, obj.perceptionObstacleFilteringDistance);
  obj.perceptionObstacleBuffer != null && jspb.Message.setField(msg, 12, obj.perceptionObstacleBuffer);
  obj.curbHeadingTangentChangeUpperLimit != null && jspb.Message.setField(msg, 13, obj.curbHeadingTangentChangeUpperLimit);
  obj.endPoseSDistance != null && jspb.Message.setField(msg, 14, obj.endPoseSDistance);
  obj.parallelParkEndXBuffer != null && jspb.Message.setField(msg, 15, obj.parallelParkEndXBuffer);
  obj.extendRightXBuffer != null && jspb.Message.setField(msg, 16, obj.extendRightXBuffer);
  obj.extendLeftXBuffer != null && jspb.Message.setField(msg, 17, obj.extendLeftXBuffer);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OpenSpaceRoiDeciderConfig;
  return proto.apollo.planning.OpenSpaceRoiDeciderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.planning.OpenSpaceRoiDeciderConfig.RoiType} */ (reader.readEnum());
      msg.setRoiType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoiLongitudinalRangeStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoiLongitudinalRangeEnd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setParkingStartRange(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParkingInwards(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablePerceptionObstacles(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setParkingDepthBuffer(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoiLineSegmentMinAngle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoiLineSegmentLength(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoiLineSegmentLengthFromMap(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPerceptionObstacleFilteringDistance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPerceptionObstacleBuffer(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurbHeadingTangentChangeUpperLimit(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndPoseSDistance(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setParallelParkEndXBuffer(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExtendRightXBuffer(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExtendLeftXBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OpenSpaceRoiDeciderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.planning.OpenSpaceRoiDeciderConfig.RoiType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.RoiType = {
  NOT_DEFINED: 0,
  PARKING: 1,
  PULL_OVER: 2,
  PARK_AND_GO: 3,
  NARROW_STREET_U_TURN: 4,
  DEAD_END: 5
};

/**
 * optional RoiType roi_type = 1;
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig.RoiType}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getRoiType = function() {
  return /** @type {!proto.apollo.planning.OpenSpaceRoiDeciderConfig.RoiType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.planning.OpenSpaceRoiDeciderConfig.RoiType} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setRoiType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearRoiType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasRoiType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double roi_longitudinal_range_start = 2;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getRoiLongitudinalRangeStart = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setRoiLongitudinalRangeStart = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearRoiLongitudinalRangeStart = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasRoiLongitudinalRangeStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double roi_longitudinal_range_end = 3;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getRoiLongitudinalRangeEnd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setRoiLongitudinalRangeEnd = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearRoiLongitudinalRangeEnd = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasRoiLongitudinalRangeEnd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double parking_start_range = 4;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getParkingStartRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 7.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setParkingStartRange = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearParkingStartRange = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasParkingStartRange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool parking_inwards = 5;
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getParkingInwards = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setParkingInwards = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearParkingInwards = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasParkingInwards = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool enable_perception_obstacles = 6;
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getEnablePerceptionObstacles = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setEnablePerceptionObstacles = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearEnablePerceptionObstacles = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasEnablePerceptionObstacles = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double parking_depth_buffer = 7;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getParkingDepthBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setParkingDepthBuffer = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearParkingDepthBuffer = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasParkingDepthBuffer = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double roi_line_segment_min_angle = 8;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getRoiLineSegmentMinAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setRoiLineSegmentMinAngle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearRoiLineSegmentMinAngle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasRoiLineSegmentMinAngle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double roi_line_segment_length = 9;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getRoiLineSegmentLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setRoiLineSegmentLength = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearRoiLineSegmentLength = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasRoiLineSegmentLength = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double roi_line_segment_length_from_map = 10;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getRoiLineSegmentLengthFromMap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setRoiLineSegmentLengthFromMap = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearRoiLineSegmentLengthFromMap = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasRoiLineSegmentLengthFromMap = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double perception_obstacle_filtering_distance = 11;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getPerceptionObstacleFilteringDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 1000.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setPerceptionObstacleFilteringDistance = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearPerceptionObstacleFilteringDistance = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasPerceptionObstacleFilteringDistance = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double perception_obstacle_buffer = 12;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getPerceptionObstacleBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setPerceptionObstacleBuffer = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearPerceptionObstacleBuffer = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasPerceptionObstacleBuffer = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double curb_heading_tangent_change_upper_limit = 13;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getCurbHeadingTangentChangeUpperLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setCurbHeadingTangentChangeUpperLimit = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearCurbHeadingTangentChangeUpperLimit = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasCurbHeadingTangentChangeUpperLimit = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double end_pose_s_distance = 14;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getEndPoseSDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setEndPoseSDistance = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearEndPoseSDistance = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasEndPoseSDistance = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double parallel_park_end_x_buffer = 15;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getParallelParkEndXBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setParallelParkEndXBuffer = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearParallelParkEndXBuffer = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasParallelParkEndXBuffer = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double extend_right_x_buffer = 16;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getExtendRightXBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setExtendRightXBuffer = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearExtendRightXBuffer = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasExtendRightXBuffer = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double extend_left_x_buffer = 17;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.getExtendLeftXBuffer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.setExtendLeftXBuffer = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceRoiDeciderConfig} returns this
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.clearExtendLeftXBuffer = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceRoiDeciderConfig.prototype.hasExtendLeftXBuffer = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    gearShiftMaxT: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    gearShiftUnitT: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    gearShiftPeriodDuration: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    interpolatedPiecesNum: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    initialGearCheckHorizon: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    headingSearchRange: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    headingTrackRange: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    distanceSearchRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 1.0E-6),
    headingOffsetToMidpoint: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    lateralOffsetToMidpoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.1),
    longitudinalOffsetToMidpoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.1),
    vehicleBoxIouThresholdToMidpoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.95),
    linearVelocityThresholdOnEgo: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OpenSpaceTrajectoryPartitionConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.gearShiftMaxT;

  /** @type {?|undefined} */
  this.gearShiftUnitT;

  /** @type {?|undefined} */
  this.gearShiftPeriodDuration;

  /** @type {?|undefined} */
  this.interpolatedPiecesNum;

  /** @type {?|undefined} */
  this.initialGearCheckHorizon;

  /** @type {?|undefined} */
  this.headingSearchRange;

  /** @type {?|undefined} */
  this.headingTrackRange;

  /** @type {?|undefined} */
  this.distanceSearchRange;

  /** @type {?|undefined} */
  this.headingOffsetToMidpoint;

  /** @type {?|undefined} */
  this.lateralOffsetToMidpoint;

  /** @type {?|undefined} */
  this.longitudinalOffsetToMidpoint;

  /** @type {?|undefined} */
  this.vehicleBoxIouThresholdToMidpoint;

  /** @type {?|undefined} */
  this.linearVelocityThresholdOnEgo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig();
  obj.gearShiftMaxT != null && jspb.Message.setField(msg, 1, obj.gearShiftMaxT);
  obj.gearShiftUnitT != null && jspb.Message.setField(msg, 2, obj.gearShiftUnitT);
  obj.gearShiftPeriodDuration != null && jspb.Message.setField(msg, 3, obj.gearShiftPeriodDuration);
  obj.interpolatedPiecesNum != null && jspb.Message.setField(msg, 4, obj.interpolatedPiecesNum);
  obj.initialGearCheckHorizon != null && jspb.Message.setField(msg, 5, obj.initialGearCheckHorizon);
  obj.headingSearchRange != null && jspb.Message.setField(msg, 6, obj.headingSearchRange);
  obj.headingTrackRange != null && jspb.Message.setField(msg, 7, obj.headingTrackRange);
  obj.distanceSearchRange != null && jspb.Message.setField(msg, 8, obj.distanceSearchRange);
  obj.headingOffsetToMidpoint != null && jspb.Message.setField(msg, 9, obj.headingOffsetToMidpoint);
  obj.lateralOffsetToMidpoint != null && jspb.Message.setField(msg, 10, obj.lateralOffsetToMidpoint);
  obj.longitudinalOffsetToMidpoint != null && jspb.Message.setField(msg, 11, obj.longitudinalOffsetToMidpoint);
  obj.vehicleBoxIouThresholdToMidpoint != null && jspb.Message.setField(msg, 12, obj.vehicleBoxIouThresholdToMidpoint);
  obj.linearVelocityThresholdOnEgo != null && jspb.Message.setField(msg, 13, obj.linearVelocityThresholdOnEgo);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig;
  return proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGearShiftMaxT(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGearShiftUnitT(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGearShiftPeriodDuration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInterpolatedPiecesNum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInitialGearCheckHorizon(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingSearchRange(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingTrackRange(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceSearchRange(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeadingOffsetToMidpoint(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralOffsetToMidpoint(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudinalOffsetToMidpoint(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVehicleBoxIouThresholdToMidpoint(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLinearVelocityThresholdOnEgo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional double gear_shift_max_t = 1;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getGearShiftMaxT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setGearShiftMaxT = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearGearShiftMaxT = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasGearShiftMaxT = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double gear_shift_unit_t = 2;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getGearShiftUnitT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setGearShiftUnitT = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearGearShiftUnitT = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasGearShiftUnitT = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double gear_shift_period_duration = 3;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getGearShiftPeriodDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setGearShiftPeriodDuration = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearGearShiftPeriodDuration = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasGearShiftPeriodDuration = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 interpolated_pieces_num = 4;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getInterpolatedPiecesNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setInterpolatedPiecesNum = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearInterpolatedPiecesNum = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasInterpolatedPiecesNum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 initial_gear_check_horizon = 5;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getInitialGearCheckHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setInitialGearCheckHorizon = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearInitialGearCheckHorizon = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasInitialGearCheckHorizon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double heading_search_range = 6;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getHeadingSearchRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setHeadingSearchRange = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearHeadingSearchRange = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasHeadingSearchRange = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double heading_track_range = 7;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getHeadingTrackRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setHeadingTrackRange = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearHeadingTrackRange = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasHeadingTrackRange = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double distance_search_range = 8;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getDistanceSearchRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 1.0E-6));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setDistanceSearchRange = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearDistanceSearchRange = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasDistanceSearchRange = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double heading_offset_to_midpoint = 9;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getHeadingOffsetToMidpoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setHeadingOffsetToMidpoint = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearHeadingOffsetToMidpoint = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasHeadingOffsetToMidpoint = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double lateral_offset_to_midpoint = 10;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getLateralOffsetToMidpoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setLateralOffsetToMidpoint = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearLateralOffsetToMidpoint = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasLateralOffsetToMidpoint = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double longitudinal_offset_to_midpoint = 11;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getLongitudinalOffsetToMidpoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setLongitudinalOffsetToMidpoint = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearLongitudinalOffsetToMidpoint = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasLongitudinalOffsetToMidpoint = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double vehicle_box_iou_threshold_to_midpoint = 12;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getVehicleBoxIouThresholdToMidpoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.95));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setVehicleBoxIouThresholdToMidpoint = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearVehicleBoxIouThresholdToMidpoint = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasVehicleBoxIouThresholdToMidpoint = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double linear_velocity_threshold_on_ego = 13;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.getLinearVelocityThresholdOnEgo = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.setLinearVelocityThresholdOnEgo = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.clearLinearVelocityThresholdOnEgo = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryPartitionConfig.prototype.hasLinearVelocityThresholdOnEgo = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    openSpaceTrajectoryOptimizerConfig: (f = msg.getOpenSpaceTrajectoryOptimizerConfig()) && proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OpenSpaceTrajectoryProviderConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.openSpaceTrajectoryOptimizerConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OpenSpaceTrajectoryProviderConfig();
  obj.openSpaceTrajectoryOptimizerConfig && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.fromObject(obj.openSpaceTrajectoryOptimizerConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OpenSpaceTrajectoryProviderConfig;
  return proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig;
      reader.readMessage(value,proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.deserializeBinaryFromReader);
      msg.setOpenSpaceTrajectoryOptimizerConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenSpaceTrajectoryOptimizerConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
 * @return {?proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.prototype.getOpenSpaceTrajectoryOptimizerConfig = function() {
  return /** @type{?proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig, 1));
};


/**
 * @param {?proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig|undefined} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig} returns this
*/
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.prototype.setOpenSpaceTrajectoryOptimizerConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryProviderConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.prototype.clearOpenSpaceTrajectoryOptimizerConfig = function() {
  return this.setOpenSpaceTrajectoryOptimizerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryProviderConfig.prototype.hasOpenSpaceTrajectoryOptimizerConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    hybridAStarConfig: (f = msg.getHybridAStarConfig()) && proto.apollo.planning.HybridAStarConfig.toObject(includeInstance, f),
    dualVariableWarmStartConfig: (f = msg.getDualVariableWarmStartConfig()) && proto.apollo.planning.DualVariableConfig.toObject(includeInstance, f),
    distanceApproachTrajectorySmootherConfig: (f = msg.getDistanceApproachTrajectorySmootherConfig()) && proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.toObject(includeInstance, f),
    deltaT: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.5),
    isNearDestinationThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.001),
    plannerOpenSpaceConfig: (f = msg.getPlannerOpenSpaceConfig()) && modules_planning_proto_planner_open_space_config_pb.PlannerOpenSpaceConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of OpenSpaceTrajectoryOptimizerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.hybridAStarConfig;

  /** @type {?|undefined} */
  this.dualVariableWarmStartConfig;

  /** @type {?|undefined} */
  this.distanceApproachTrajectorySmootherConfig;

  /** @type {?|undefined} */
  this.deltaT;

  /** @type {?|undefined} */
  this.isNearDestinationThreshold;

  /** @type {?|undefined} */
  this.plannerOpenSpaceConfig;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig();
  obj.hybridAStarConfig && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.HybridAStarConfig.fromObject(obj.hybridAStarConfig));
  obj.dualVariableWarmStartConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.DualVariableConfig.fromObject(obj.dualVariableWarmStartConfig));
  obj.distanceApproachTrajectorySmootherConfig && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.fromObject(obj.distanceApproachTrajectorySmootherConfig));
  obj.deltaT != null && jspb.Message.setField(msg, 4, obj.deltaT);
  obj.isNearDestinationThreshold != null && jspb.Message.setField(msg, 5, obj.isNearDestinationThreshold);
  obj.plannerOpenSpaceConfig && jspb.Message.setWrapperField(
      msg, 6, modules_planning_proto_planner_open_space_config_pb.PlannerOpenSpaceConfig.fromObject(obj.plannerOpenSpaceConfig));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig;
  return proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.HybridAStarConfig;
      reader.readMessage(value,proto.apollo.planning.HybridAStarConfig.deserializeBinaryFromReader);
      msg.setHybridAStarConfig(value);
      break;
    case 2:
      var value = new proto.apollo.planning.DualVariableConfig;
      reader.readMessage(value,proto.apollo.planning.DualVariableConfig.deserializeBinaryFromReader);
      msg.setDualVariableWarmStartConfig(value);
      break;
    case 3:
      var value = new proto.apollo.planning.DistanceApproachTrajectorySmootherConfig;
      reader.readMessage(value,proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.deserializeBinaryFromReader);
      msg.setDistanceApproachTrajectorySmootherConfig(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDeltaT(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIsNearDestinationThreshold(value);
      break;
    case 6:
      var value = new modules_planning_proto_planner_open_space_config_pb.PlannerOpenSpaceConfig;
      reader.readMessage(value,modules_planning_proto_planner_open_space_config_pb.PlannerOpenSpaceConfig.deserializeBinaryFromReader);
      msg.setPlannerOpenSpaceConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHybridAStarConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.HybridAStarConfig.serializeBinaryToWriter
    );
  }
  f = message.getDualVariableWarmStartConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.DualVariableConfig.serializeBinaryToWriter
    );
  }
  f = message.getDistanceApproachTrajectorySmootherConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPlannerOpenSpaceConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      modules_planning_proto_planner_open_space_config_pb.PlannerOpenSpaceConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional HybridAStarConfig hybrid_a_star_config = 1;
 * @return {?proto.apollo.planning.HybridAStarConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.getHybridAStarConfig = function() {
  return /** @type{?proto.apollo.planning.HybridAStarConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.HybridAStarConfig, 1));
};


/**
 * @param {?proto.apollo.planning.HybridAStarConfig|undefined} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
*/
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.setHybridAStarConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.clearHybridAStarConfig = function() {
  return this.setHybridAStarConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.hasHybridAStarConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DualVariableConfig dual_variable_warm_start_config = 2;
 * @return {?proto.apollo.planning.DualVariableConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.getDualVariableWarmStartConfig = function() {
  return /** @type{?proto.apollo.planning.DualVariableConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DualVariableConfig, 2));
};


/**
 * @param {?proto.apollo.planning.DualVariableConfig|undefined} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
*/
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.setDualVariableWarmStartConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.clearDualVariableWarmStartConfig = function() {
  return this.setDualVariableWarmStartConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.hasDualVariableWarmStartConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
 * @return {?proto.apollo.planning.DistanceApproachTrajectorySmootherConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.getDistanceApproachTrajectorySmootherConfig = function() {
  return /** @type{?proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.DistanceApproachTrajectorySmootherConfig, 3));
};


/**
 * @param {?proto.apollo.planning.DistanceApproachTrajectorySmootherConfig|undefined} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
*/
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.setDistanceApproachTrajectorySmootherConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.clearDistanceApproachTrajectorySmootherConfig = function() {
  return this.setDistanceApproachTrajectorySmootherConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.hasDistanceApproachTrajectorySmootherConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float delta_t = 4;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.getDeltaT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.setDeltaT = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.clearDeltaT = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.hasDeltaT = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double is_near_destination_threshold = 5;
 * @return {number}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.getIsNearDestinationThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.001));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.setIsNearDestinationThreshold = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.clearIsNearDestinationThreshold = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.hasIsNearDestinationThreshold = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PlannerOpenSpaceConfig planner_open_space_config = 6;
 * @return {?proto.apollo.planning.PlannerOpenSpaceConfig}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.getPlannerOpenSpaceConfig = function() {
  return /** @type{?proto.apollo.planning.PlannerOpenSpaceConfig} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_planner_open_space_config_pb.PlannerOpenSpaceConfig, 6));
};


/**
 * @param {?proto.apollo.planning.PlannerOpenSpaceConfig|undefined} value
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
*/
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.setPlannerOpenSpaceConfig = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig} returns this
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.clearPlannerOpenSpaceConfig = function() {
  return this.setPlannerOpenSpaceConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.OpenSpaceTrajectoryOptimizerConfig.prototype.hasPlannerOpenSpaceConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.HybridAStarConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.HybridAStarConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.HybridAStarConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.HybridAStarConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    xyGridResolution: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.2),
    phiGridResolution: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.05),
    nextNodeNum: jspb.Message.getFieldWithDefault(msg, 3, 10),
    stepSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.5),
    trajForwardPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    trajBackPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    trajGearSwitchPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 10.0),
    trajSteerPenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 100.0),
    trajSteerChangePenalty: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 10.0),
    gridAStarXyResolution: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.1),
    nodeRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of HybridAStarConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.HybridAStarConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.xyGridResolution;

  /** @type {?|undefined} */
  this.phiGridResolution;

  /** @type {?|undefined} */
  this.nextNodeNum;

  /** @type {?|undefined} */
  this.stepSize;

  /** @type {?|undefined} */
  this.trajForwardPenalty;

  /** @type {?|undefined} */
  this.trajBackPenalty;

  /** @type {?|undefined} */
  this.trajGearSwitchPenalty;

  /** @type {?|undefined} */
  this.trajSteerPenalty;

  /** @type {?|undefined} */
  this.trajSteerChangePenalty;

  /** @type {?|undefined} */
  this.gridAStarXyResolution;

  /** @type {?|undefined} */
  this.nodeRadius;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.HybridAStarConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.HybridAStarConfig}
 */
proto.apollo.planning.HybridAStarConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.HybridAStarConfig();
  obj.xyGridResolution != null && jspb.Message.setField(msg, 1, obj.xyGridResolution);
  obj.phiGridResolution != null && jspb.Message.setField(msg, 2, obj.phiGridResolution);
  obj.nextNodeNum != null && jspb.Message.setField(msg, 3, obj.nextNodeNum);
  obj.stepSize != null && jspb.Message.setField(msg, 4, obj.stepSize);
  obj.trajForwardPenalty != null && jspb.Message.setField(msg, 5, obj.trajForwardPenalty);
  obj.trajBackPenalty != null && jspb.Message.setField(msg, 6, obj.trajBackPenalty);
  obj.trajGearSwitchPenalty != null && jspb.Message.setField(msg, 7, obj.trajGearSwitchPenalty);
  obj.trajSteerPenalty != null && jspb.Message.setField(msg, 8, obj.trajSteerPenalty);
  obj.trajSteerChangePenalty != null && jspb.Message.setField(msg, 9, obj.trajSteerChangePenalty);
  obj.gridAStarXyResolution != null && jspb.Message.setField(msg, 15, obj.gridAStarXyResolution);
  obj.nodeRadius != null && jspb.Message.setField(msg, 16, obj.nodeRadius);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.HybridAStarConfig}
 */
proto.apollo.planning.HybridAStarConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.HybridAStarConfig;
  return proto.apollo.planning.HybridAStarConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.HybridAStarConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.HybridAStarConfig}
 */
proto.apollo.planning.HybridAStarConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXyGridResolution(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPhiGridResolution(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextNodeNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStepSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajForwardPenalty(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajBackPenalty(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajGearSwitchPenalty(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajSteerPenalty(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrajSteerChangePenalty(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGridAStarXyResolution(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNodeRadius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.HybridAStarConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.HybridAStarConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.HybridAStarConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.HybridAStarConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
};


/**
 * optional double xy_grid_resolution = 1;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getXyGridResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setXyGridResolution = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearXyGridResolution = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasXyGridResolution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double phi_grid_resolution = 2;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getPhiGridResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setPhiGridResolution = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearPhiGridResolution = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasPhiGridResolution = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 next_node_num = 3;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getNextNodeNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setNextNodeNum = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearNextNodeNum = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasNextNodeNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double step_size = 4;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getStepSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setStepSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearStepSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasStepSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double traj_forward_penalty = 5;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getTrajForwardPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setTrajForwardPenalty = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearTrajForwardPenalty = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasTrajForwardPenalty = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double traj_back_penalty = 6;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getTrajBackPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setTrajBackPenalty = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearTrajBackPenalty = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasTrajBackPenalty = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double traj_gear_switch_penalty = 7;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getTrajGearSwitchPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setTrajGearSwitchPenalty = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearTrajGearSwitchPenalty = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasTrajGearSwitchPenalty = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double traj_steer_penalty = 8;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getTrajSteerPenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setTrajSteerPenalty = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearTrajSteerPenalty = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasTrajSteerPenalty = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double traj_steer_change_penalty = 9;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getTrajSteerChangePenalty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setTrajSteerChangePenalty = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearTrajSteerChangePenalty = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasTrajSteerChangePenalty = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double grid_a_star_xy_resolution = 15;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getGridAStarXyResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setGridAStarXyResolution = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearGridAStarXyResolution = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasGridAStarXyResolution = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double node_radius = 16;
 * @return {number}
 */
proto.apollo.planning.HybridAStarConfig.prototype.getNodeRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.setNodeRadius = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.HybridAStarConfig} returns this
 */
proto.apollo.planning.HybridAStarConfig.prototype.clearNodeRadius = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.HybridAStarConfig.prototype.hasNodeRadius = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DualVariableConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DualVariableConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DualVariableConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DualVariableConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    weightD: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 1.0),
    ipoptConfig: (f = msg.getIpoptConfig()) && proto.apollo.planning.IpoptSolverConfig.toObject(includeInstance, f),
    qpFormat: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    minSafetyDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    debugOsqp: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    beta: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DualVariableConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DualVariableConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.weightD;

  /** @type {?|undefined} */
  this.ipoptConfig;

  /** @type {?|undefined} */
  this.qpFormat;

  /** @type {?|undefined} */
  this.minSafetyDistance;

  /** @type {?|undefined} */
  this.debugOsqp;

  /** @type {?|undefined} */
  this.beta;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DualVariableConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DualVariableConfig}
 */
proto.apollo.planning.DualVariableConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DualVariableConfig();
  obj.weightD != null && jspb.Message.setField(msg, 1, obj.weightD);
  obj.ipoptConfig && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.IpoptSolverConfig.fromObject(obj.ipoptConfig));
  obj.qpFormat != null && jspb.Message.setField(msg, 3, obj.qpFormat);
  obj.minSafetyDistance != null && jspb.Message.setField(msg, 4, obj.minSafetyDistance);
  obj.debugOsqp != null && jspb.Message.setField(msg, 5, obj.debugOsqp);
  obj.beta != null && jspb.Message.setField(msg, 6, obj.beta);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DualVariableConfig}
 */
proto.apollo.planning.DualVariableConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DualVariableConfig;
  return proto.apollo.planning.DualVariableConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DualVariableConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DualVariableConfig}
 */
proto.apollo.planning.DualVariableConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightD(value);
      break;
    case 2:
      var value = new proto.apollo.planning.IpoptSolverConfig;
      reader.readMessage(value,proto.apollo.planning.IpoptSolverConfig.deserializeBinaryFromReader);
      msg.setIpoptConfig(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.planning.DualVariableMode} */ (reader.readEnum());
      msg.setQpFormat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinSafetyDistance(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugOsqp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DualVariableConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DualVariableConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DualVariableConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DualVariableConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getIpoptConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.IpoptSolverConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.planning.DualVariableMode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional double weight_d = 1;
 * @return {number}
 */
proto.apollo.planning.DualVariableConfig.prototype.getWeightD = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.setWeightD = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.clearWeightD = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableConfig.prototype.hasWeightD = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IpoptSolverConfig ipopt_config = 2;
 * @return {?proto.apollo.planning.IpoptSolverConfig}
 */
proto.apollo.planning.DualVariableConfig.prototype.getIpoptConfig = function() {
  return /** @type{?proto.apollo.planning.IpoptSolverConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.IpoptSolverConfig, 2));
};


/**
 * @param {?proto.apollo.planning.IpoptSolverConfig|undefined} value
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
*/
proto.apollo.planning.DualVariableConfig.prototype.setIpoptConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.clearIpoptConfig = function() {
  return this.setIpoptConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableConfig.prototype.hasIpoptConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DualVariableMode qp_format = 3;
 * @return {!proto.apollo.planning.DualVariableMode}
 */
proto.apollo.planning.DualVariableConfig.prototype.getQpFormat = function() {
  return /** @type {!proto.apollo.planning.DualVariableMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.planning.DualVariableMode} value
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.setQpFormat = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.clearQpFormat = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableConfig.prototype.hasQpFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double min_safety_distance = 4;
 * @return {number}
 */
proto.apollo.planning.DualVariableConfig.prototype.getMinSafetyDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.setMinSafetyDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.clearMinSafetyDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableConfig.prototype.hasMinSafetyDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool debug_osqp = 5;
 * @return {boolean}
 */
proto.apollo.planning.DualVariableConfig.prototype.getDebugOsqp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.setDebugOsqp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.clearDebugOsqp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableConfig.prototype.hasDebugOsqp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double beta = 6;
 * @return {number}
 */
proto.apollo.planning.DualVariableConfig.prototype.getBeta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.setBeta = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DualVariableConfig} returns this
 */
proto.apollo.planning.DualVariableConfig.prototype.clearBeta = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DualVariableConfig.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    weightSteer: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    weightA: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    weightSteerRate: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    weightARate: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    weightX: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    weightY: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    weightPhi: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    weightV: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    weightSteerStitching: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    weightAStitching: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    weightFirstOrderTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    weightSecondOrderTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    minSafetyDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    maxSpeedForward: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 3.0),
    maxSpeedReverse: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 2.0),
    maxAccelerationForward: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 2.0),
    maxAccelerationReverse: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 2.0),
    minTimeSampleScaling: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.1),
    maxTimeSampleScaling: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 10.0),
    useFixTime: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    ipoptConfig: (f = msg.getIpoptConfig()) && proto.apollo.planning.IpoptSolverConfig.toObject(includeInstance, f),
    enableConstraintCheck: (f = jspb.Message.getBooleanField(msg, 22)) == null ? undefined : f,
    enableHandDerivative: (f = jspb.Message.getBooleanField(msg, 23)) == null ? undefined : f,
    enableDerivativeCheck: (f = jspb.Message.getBooleanField(msg, 24)) == null ? undefined : f,
    enableInitialFinalCheck: jspb.Message.getBooleanFieldWithDefault(msg, 25, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DistanceApproachTrajectorySmootherConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.weightSteer;

  /** @type {?|undefined} */
  this.weightA;

  /** @type {?|undefined} */
  this.weightSteerRate;

  /** @type {?|undefined} */
  this.weightARate;

  /** @type {?|undefined} */
  this.weightX;

  /** @type {?|undefined} */
  this.weightY;

  /** @type {?|undefined} */
  this.weightPhi;

  /** @type {?|undefined} */
  this.weightV;

  /** @type {?|undefined} */
  this.weightSteerStitching;

  /** @type {?|undefined} */
  this.weightAStitching;

  /** @type {?|undefined} */
  this.weightFirstOrderTime;

  /** @type {?|undefined} */
  this.weightSecondOrderTime;

  /** @type {?|undefined} */
  this.minSafetyDistance;

  /** @type {?|undefined} */
  this.maxSpeedForward;

  /** @type {?|undefined} */
  this.maxSpeedReverse;

  /** @type {?|undefined} */
  this.maxAccelerationForward;

  /** @type {?|undefined} */
  this.maxAccelerationReverse;

  /** @type {?|undefined} */
  this.minTimeSampleScaling;

  /** @type {?|undefined} */
  this.maxTimeSampleScaling;

  /** @type {?|undefined} */
  this.useFixTime;

  /** @type {?|undefined} */
  this.ipoptConfig;

  /** @type {?|undefined} */
  this.enableConstraintCheck;

  /** @type {?|undefined} */
  this.enableHandDerivative;

  /** @type {?|undefined} */
  this.enableDerivativeCheck;

  /** @type {?|undefined} */
  this.enableInitialFinalCheck;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.DistanceApproachTrajectorySmootherConfig();
  obj.weightSteer != null && jspb.Message.setField(msg, 1, obj.weightSteer);
  obj.weightA != null && jspb.Message.setField(msg, 2, obj.weightA);
  obj.weightSteerRate != null && jspb.Message.setField(msg, 3, obj.weightSteerRate);
  obj.weightARate != null && jspb.Message.setField(msg, 4, obj.weightARate);
  obj.weightX != null && jspb.Message.setField(msg, 5, obj.weightX);
  obj.weightY != null && jspb.Message.setField(msg, 6, obj.weightY);
  obj.weightPhi != null && jspb.Message.setField(msg, 7, obj.weightPhi);
  obj.weightV != null && jspb.Message.setField(msg, 8, obj.weightV);
  obj.weightSteerStitching != null && jspb.Message.setField(msg, 9, obj.weightSteerStitching);
  obj.weightAStitching != null && jspb.Message.setField(msg, 10, obj.weightAStitching);
  obj.weightFirstOrderTime != null && jspb.Message.setField(msg, 11, obj.weightFirstOrderTime);
  obj.weightSecondOrderTime != null && jspb.Message.setField(msg, 12, obj.weightSecondOrderTime);
  obj.minSafetyDistance != null && jspb.Message.setField(msg, 13, obj.minSafetyDistance);
  obj.maxSpeedForward != null && jspb.Message.setField(msg, 14, obj.maxSpeedForward);
  obj.maxSpeedReverse != null && jspb.Message.setField(msg, 15, obj.maxSpeedReverse);
  obj.maxAccelerationForward != null && jspb.Message.setField(msg, 16, obj.maxAccelerationForward);
  obj.maxAccelerationReverse != null && jspb.Message.setField(msg, 17, obj.maxAccelerationReverse);
  obj.minTimeSampleScaling != null && jspb.Message.setField(msg, 18, obj.minTimeSampleScaling);
  obj.maxTimeSampleScaling != null && jspb.Message.setField(msg, 19, obj.maxTimeSampleScaling);
  obj.useFixTime != null && jspb.Message.setField(msg, 20, obj.useFixTime);
  obj.ipoptConfig && jspb.Message.setWrapperField(
      msg, 21, proto.apollo.planning.IpoptSolverConfig.fromObject(obj.ipoptConfig));
  obj.enableConstraintCheck != null && jspb.Message.setField(msg, 22, obj.enableConstraintCheck);
  obj.enableHandDerivative != null && jspb.Message.setField(msg, 23, obj.enableHandDerivative);
  obj.enableDerivativeCheck != null && jspb.Message.setField(msg, 24, obj.enableDerivativeCheck);
  obj.enableInitialFinalCheck != null && jspb.Message.setField(msg, 25, obj.enableInitialFinalCheck);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.DistanceApproachTrajectorySmootherConfig;
  return proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSteer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightA(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSteerRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightARate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightPhi(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightV(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSteerStitching(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightAStitching(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightFirstOrderTime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightSecondOrderTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinSafetyDistance(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSpeedForward(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSpeedReverse(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAccelerationForward(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxAccelerationReverse(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinTimeSampleScaling(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxTimeSampleScaling(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseFixTime(value);
      break;
    case 21:
      var value = new proto.apollo.planning.IpoptSolverConfig;
      reader.readMessage(value,proto.apollo.planning.IpoptSolverConfig.deserializeBinaryFromReader);
      msg.setIpoptConfig(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableConstraintCheck(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableHandDerivative(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableDerivativeCheck(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableInitialFinalCheck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getIpoptConfig();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.apollo.planning.IpoptSolverConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
};


/**
 * optional double weight_steer = 1;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightSteer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightSteer = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightSteer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightSteer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double weight_a = 2;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightA = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightA = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightA = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double weight_steer_rate = 3;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightSteerRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightSteerRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightSteerRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightSteerRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double weight_a_rate = 4;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightARate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightARate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightARate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightARate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double weight_x = 5;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightX = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightX = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double weight_y = 6;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightY = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightY = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double weight_phi = 7;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightPhi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightPhi = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightPhi = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightPhi = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double weight_v = 8;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightV = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightV = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightV = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double weight_steer_stitching = 9;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightSteerStitching = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightSteerStitching = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightSteerStitching = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightSteerStitching = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double weight_a_stitching = 10;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightAStitching = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightAStitching = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightAStitching = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightAStitching = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double weight_first_order_time = 11;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightFirstOrderTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightFirstOrderTime = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightFirstOrderTime = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightFirstOrderTime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double weight_second_order_time = 12;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getWeightSecondOrderTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setWeightSecondOrderTime = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearWeightSecondOrderTime = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasWeightSecondOrderTime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double min_safety_distance = 13;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getMinSafetyDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setMinSafetyDistance = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearMinSafetyDistance = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasMinSafetyDistance = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double max_speed_forward = 14;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getMaxSpeedForward = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 3.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setMaxSpeedForward = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearMaxSpeedForward = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasMaxSpeedForward = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional double max_speed_reverse = 15;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getMaxSpeedReverse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setMaxSpeedReverse = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearMaxSpeedReverse = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasMaxSpeedReverse = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double max_acceleration_forward = 16;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getMaxAccelerationForward = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setMaxAccelerationForward = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearMaxAccelerationForward = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasMaxAccelerationForward = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double max_acceleration_reverse = 17;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getMaxAccelerationReverse = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 2.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setMaxAccelerationReverse = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearMaxAccelerationReverse = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasMaxAccelerationReverse = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double min_time_sample_scaling = 18;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getMinTimeSampleScaling = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setMinTimeSampleScaling = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearMinTimeSampleScaling = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasMinTimeSampleScaling = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double max_time_sample_scaling = 19;
 * @return {number}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getMaxTimeSampleScaling = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setMaxTimeSampleScaling = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearMaxTimeSampleScaling = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasMaxTimeSampleScaling = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool use_fix_time = 20;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getUseFixTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setUseFixTime = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearUseFixTime = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasUseFixTime = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional IpoptSolverConfig ipopt_config = 21;
 * @return {?proto.apollo.planning.IpoptSolverConfig}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getIpoptConfig = function() {
  return /** @type{?proto.apollo.planning.IpoptSolverConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.IpoptSolverConfig, 21));
};


/**
 * @param {?proto.apollo.planning.IpoptSolverConfig|undefined} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
*/
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setIpoptConfig = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearIpoptConfig = function() {
  return this.setIpoptConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasIpoptConfig = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool enable_constraint_check = 22;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getEnableConstraintCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setEnableConstraintCheck = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearEnableConstraintCheck = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasEnableConstraintCheck = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool enable_hand_derivative = 23;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getEnableHandDerivative = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setEnableHandDerivative = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearEnableHandDerivative = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasEnableHandDerivative = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bool enable_derivative_check = 24;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getEnableDerivativeCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setEnableDerivativeCheck = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearEnableDerivativeCheck = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasEnableDerivativeCheck = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional bool enable_initial_final_check = 25;
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.getEnableInitialFinalCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 25, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.setEnableInitialFinalCheck = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.DistanceApproachTrajectorySmootherConfig} returns this
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.clearEnableInitialFinalCheck = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.DistanceApproachTrajectorySmootherConfig.prototype.hasEnableInitialFinalCheck = function() {
  return jspb.Message.getField(this, 25) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.IpoptSolverConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.IpoptSolverConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.IpoptSolverConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipoptPrintLevel: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    mumpsMemPercent: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    mumpsPivtol: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    ipoptMaxIter: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    ipoptTol: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    ipoptAcceptableConstrViolTol: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    ipoptMinHessianPerturbation: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    ipoptJacobianRegularizationValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    ipoptPrintTimingStatistics: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    ipoptAlphaForY: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    ipoptRecalcY: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    ipoptMuInit: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of IpoptSolverConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.IpoptSolverConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.ipoptPrintLevel;

  /** @type {?|undefined} */
  this.mumpsMemPercent;

  /** @type {?|undefined} */
  this.mumpsPivtol;

  /** @type {?|undefined} */
  this.ipoptMaxIter;

  /** @type {?|undefined} */
  this.ipoptTol;

  /** @type {?|undefined} */
  this.ipoptAcceptableConstrViolTol;

  /** @type {?|undefined} */
  this.ipoptMinHessianPerturbation;

  /** @type {?|undefined} */
  this.ipoptJacobianRegularizationValue;

  /** @type {?|undefined} */
  this.ipoptPrintTimingStatistics;

  /** @type {?|undefined} */
  this.ipoptAlphaForY;

  /** @type {?|undefined} */
  this.ipoptRecalcY;

  /** @type {?|undefined} */
  this.ipoptMuInit;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.IpoptSolverConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.IpoptSolverConfig}
 */
proto.apollo.planning.IpoptSolverConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.IpoptSolverConfig();
  obj.ipoptPrintLevel != null && jspb.Message.setField(msg, 1, obj.ipoptPrintLevel);
  obj.mumpsMemPercent != null && jspb.Message.setField(msg, 2, obj.mumpsMemPercent);
  obj.mumpsPivtol != null && jspb.Message.setField(msg, 3, obj.mumpsPivtol);
  obj.ipoptMaxIter != null && jspb.Message.setField(msg, 4, obj.ipoptMaxIter);
  obj.ipoptTol != null && jspb.Message.setField(msg, 5, obj.ipoptTol);
  obj.ipoptAcceptableConstrViolTol != null && jspb.Message.setField(msg, 6, obj.ipoptAcceptableConstrViolTol);
  obj.ipoptMinHessianPerturbation != null && jspb.Message.setField(msg, 7, obj.ipoptMinHessianPerturbation);
  obj.ipoptJacobianRegularizationValue != null && jspb.Message.setField(msg, 8, obj.ipoptJacobianRegularizationValue);
  obj.ipoptPrintTimingStatistics != null && jspb.Message.setField(msg, 9, obj.ipoptPrintTimingStatistics);
  obj.ipoptAlphaForY != null && jspb.Message.setField(msg, 10, obj.ipoptAlphaForY);
  obj.ipoptRecalcY != null && jspb.Message.setField(msg, 11, obj.ipoptRecalcY);
  obj.ipoptMuInit != null && jspb.Message.setField(msg, 12, obj.ipoptMuInit);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.IpoptSolverConfig}
 */
proto.apollo.planning.IpoptSolverConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.IpoptSolverConfig;
  return proto.apollo.planning.IpoptSolverConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.IpoptSolverConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.IpoptSolverConfig}
 */
proto.apollo.planning.IpoptSolverConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIpoptPrintLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMumpsMemPercent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMumpsPivtol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIpoptMaxIter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptTol(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptAcceptableConstrViolTol(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptMinHessianPerturbation(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptJacobianRegularizationValue(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpoptPrintTimingStatistics(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpoptAlphaForY(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpoptRecalcY(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIpoptMuInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.IpoptSolverConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.IpoptSolverConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.IpoptSolverConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
};


/**
 * optional int32 ipopt_print_level = 1;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptPrintLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptPrintLevel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptPrintLevel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptPrintLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 mumps_mem_percent = 2;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getMumpsMemPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setMumpsMemPercent = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearMumpsMemPercent = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasMumpsMemPercent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double mumps_pivtol = 3;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getMumpsPivtol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setMumpsPivtol = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearMumpsPivtol = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasMumpsPivtol = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 ipopt_max_iter = 4;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptMaxIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptMaxIter = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptMaxIter = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptMaxIter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ipopt_tol = 5;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptTol = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptTol = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptTol = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double ipopt_acceptable_constr_viol_tol = 6;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptAcceptableConstrViolTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptAcceptableConstrViolTol = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptAcceptableConstrViolTol = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptAcceptableConstrViolTol = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double ipopt_min_hessian_perturbation = 7;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptMinHessianPerturbation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptMinHessianPerturbation = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptMinHessianPerturbation = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptMinHessianPerturbation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double ipopt_jacobian_regularization_value = 8;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptJacobianRegularizationValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptJacobianRegularizationValue = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptJacobianRegularizationValue = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptJacobianRegularizationValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string ipopt_print_timing_statistics = 9;
 * @return {string}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptPrintTimingStatistics = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptPrintTimingStatistics = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptPrintTimingStatistics = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptPrintTimingStatistics = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string ipopt_alpha_for_y = 10;
 * @return {string}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptAlphaForY = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptAlphaForY = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptAlphaForY = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptAlphaForY = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string ipopt_recalc_y = 11;
 * @return {string}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptRecalcY = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptRecalcY = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptRecalcY = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptRecalcY = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double ipopt_mu_init = 12;
 * @return {number}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.getIpoptMuInit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.setIpoptMuInit = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.IpoptSolverConfig} returns this
 */
proto.apollo.planning.IpoptSolverConfig.prototype.clearIpoptMuInit = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.IpoptSolverConfig.prototype.hasIpoptMuInit = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * @enum {number}
 */
proto.apollo.planning.DualVariableMode = {
  DUAL_VARIABLE_IPOPT: 0,
  DUAL_VARIABLE_IPOPTQP: 1,
  DUAL_VARIABLE_OSQP: 2,
  DUAL_VARIABLE_DEBUG: 3
};

goog.object.extend(exports, proto.apollo.planning);
