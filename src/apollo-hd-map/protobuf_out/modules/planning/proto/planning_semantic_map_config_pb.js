// source: modules/planning/proto/planning_semantic_map_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.planning.PlanningSemanticMapConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.PlanningSemanticMapConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.PlanningSemanticMapConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.PlanningSemanticMapConfig.displayName = 'proto.apollo.planning.PlanningSemanticMapConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.PlanningSemanticMapConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.PlanningSemanticMapConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningSemanticMapConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    width: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    egoIdxX: (f = jspb.Message.getField(msg, 102)) == null ? undefined : f,
    egoIdxY: (f = jspb.Message.getField(msg, 103)) == null ? undefined : f,
    maxRandDeltaPhi: (f = jspb.Message.getOptionalFloatingPointField(msg, 104)) == null ? undefined : f,
    maxEgoFutureHorizon: (f = jspb.Message.getOptionalFloatingPointField(msg, 105)) == null ? undefined : f,
    maxEgoPastHorizon: (f = jspb.Message.getOptionalFloatingPointField(msg, 106)) == null ? undefined : f,
    maxObsFutureHorizon: (f = jspb.Message.getOptionalFloatingPointField(msg, 107)) == null ? undefined : f,
    maxObsPastHorizon: (f = jspb.Message.getOptionalFloatingPointField(msg, 108)) == null ? undefined : f,
    baseMapPadding: (f = jspb.Message.getField(msg, 200)) == null ? undefined : f,
    cityDrivingMaxSpeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 201)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PlanningSemanticMapConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.PlanningSemanticMapConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.resolution;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.egoIdxX;

  /** @type {?|undefined} */
  this.egoIdxY;

  /** @type {?|undefined} */
  this.maxRandDeltaPhi;

  /** @type {?|undefined} */
  this.maxEgoFutureHorizon;

  /** @type {?|undefined} */
  this.maxEgoPastHorizon;

  /** @type {?|undefined} */
  this.maxObsFutureHorizon;

  /** @type {?|undefined} */
  this.maxObsPastHorizon;

  /** @type {?|undefined} */
  this.baseMapPadding;

  /** @type {?|undefined} */
  this.cityDrivingMaxSpeed;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.PlanningSemanticMapConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig}
 */
proto.apollo.planning.PlanningSemanticMapConfig.fromObject = function(obj) {
  var msg = new proto.apollo.planning.PlanningSemanticMapConfig();
  obj.resolution != null && jspb.Message.setField(msg, 1, obj.resolution);
  obj.height != null && jspb.Message.setField(msg, 100, obj.height);
  obj.width != null && jspb.Message.setField(msg, 101, obj.width);
  obj.egoIdxX != null && jspb.Message.setField(msg, 102, obj.egoIdxX);
  obj.egoIdxY != null && jspb.Message.setField(msg, 103, obj.egoIdxY);
  obj.maxRandDeltaPhi != null && jspb.Message.setField(msg, 104, obj.maxRandDeltaPhi);
  obj.maxEgoFutureHorizon != null && jspb.Message.setField(msg, 105, obj.maxEgoFutureHorizon);
  obj.maxEgoPastHorizon != null && jspb.Message.setField(msg, 106, obj.maxEgoPastHorizon);
  obj.maxObsFutureHorizon != null && jspb.Message.setField(msg, 107, obj.maxObsFutureHorizon);
  obj.maxObsPastHorizon != null && jspb.Message.setField(msg, 108, obj.maxObsPastHorizon);
  obj.baseMapPadding != null && jspb.Message.setField(msg, 200, obj.baseMapPadding);
  obj.cityDrivingMaxSpeed != null && jspb.Message.setField(msg, 201, obj.cityDrivingMaxSpeed);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig}
 */
proto.apollo.planning.PlanningSemanticMapConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.PlanningSemanticMapConfig;
  return proto.apollo.planning.PlanningSemanticMapConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.PlanningSemanticMapConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig}
 */
proto.apollo.planning.PlanningSemanticMapConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setResolution(value);
      break;
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 102:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEgoIdxX(value);
      break;
    case 103:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEgoIdxY(value);
      break;
    case 104:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxRandDeltaPhi(value);
      break;
    case 105:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxEgoFutureHorizon(value);
      break;
    case 106:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxEgoPastHorizon(value);
      break;
    case 107:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxObsFutureHorizon(value);
      break;
    case 108:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxObsPastHorizon(value);
      break;
    case 200:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBaseMapPadding(value);
      break;
    case 201:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCityDrivingMaxSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.PlanningSemanticMapConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.PlanningSemanticMapConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.PlanningSemanticMapConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt32(
      101,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 102));
  if (f != null) {
    writer.writeInt32(
      102,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 103));
  if (f != null) {
    writer.writeInt32(
      103,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 104));
  if (f != null) {
    writer.writeDouble(
      104,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 105));
  if (f != null) {
    writer.writeDouble(
      105,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 106));
  if (f != null) {
    writer.writeDouble(
      106,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 107));
  if (f != null) {
    writer.writeDouble(
      107,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 108));
  if (f != null) {
    writer.writeDouble(
      108,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 200));
  if (f != null) {
    writer.writeInt32(
      200,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 201));
  if (f != null) {
    writer.writeDouble(
      201,
      f
    );
  }
};


/**
 * optional double resolution = 1;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setResolution = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearResolution = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 height = 100;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional int32 width = 101;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional int32 ego_idx_x = 102;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getEgoIdxX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 102, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setEgoIdxX = function(value) {
  return jspb.Message.setField(this, 102, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearEgoIdxX = function() {
  return jspb.Message.setField(this, 102, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasEgoIdxX = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional int32 ego_idx_y = 103;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getEgoIdxY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 103, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setEgoIdxY = function(value) {
  return jspb.Message.setField(this, 103, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearEgoIdxY = function() {
  return jspb.Message.setField(this, 103, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasEgoIdxY = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional double max_rand_delta_phi = 104;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getMaxRandDeltaPhi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 104, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setMaxRandDeltaPhi = function(value) {
  return jspb.Message.setField(this, 104, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearMaxRandDeltaPhi = function() {
  return jspb.Message.setField(this, 104, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasMaxRandDeltaPhi = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional double max_ego_future_horizon = 105;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getMaxEgoFutureHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 105, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setMaxEgoFutureHorizon = function(value) {
  return jspb.Message.setField(this, 105, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearMaxEgoFutureHorizon = function() {
  return jspb.Message.setField(this, 105, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasMaxEgoFutureHorizon = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional double max_ego_past_horizon = 106;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getMaxEgoPastHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 106, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setMaxEgoPastHorizon = function(value) {
  return jspb.Message.setField(this, 106, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearMaxEgoPastHorizon = function() {
  return jspb.Message.setField(this, 106, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasMaxEgoPastHorizon = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional double max_obs_future_horizon = 107;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getMaxObsFutureHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 107, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setMaxObsFutureHorizon = function(value) {
  return jspb.Message.setField(this, 107, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearMaxObsFutureHorizon = function() {
  return jspb.Message.setField(this, 107, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasMaxObsFutureHorizon = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional double max_obs_past_horizon = 108;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getMaxObsPastHorizon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 108, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setMaxObsPastHorizon = function(value) {
  return jspb.Message.setField(this, 108, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearMaxObsPastHorizon = function() {
  return jspb.Message.setField(this, 108, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasMaxObsPastHorizon = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional int32 base_map_padding = 200;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getBaseMapPadding = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 200, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setBaseMapPadding = function(value) {
  return jspb.Message.setField(this, 200, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearBaseMapPadding = function() {
  return jspb.Message.setField(this, 200, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasBaseMapPadding = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional double city_driving_max_speed = 201;
 * @return {number}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.getCityDrivingMaxSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 201, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.setCityDrivingMaxSpeed = function(value) {
  return jspb.Message.setField(this, 201, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.PlanningSemanticMapConfig} returns this
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.clearCityDrivingMaxSpeed = function() {
  return jspb.Message.setField(this, 201, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.PlanningSemanticMapConfig.prototype.hasCityDrivingMaxSpeed = function() {
  return jspb.Message.getField(this, 201) != null;
};


goog.object.extend(exports, proto.apollo.planning);
