// source: modules/perception/lidar/lib/ground_detector/spatio_temporal_ground_detector/proto/spatio_temporal_ground_detector_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.displayName = 'proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    gridSize: jspb.Message.getFieldWithDefault(msg, 1, 16),
    groundThres: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.25),
    roiRadX: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 120.0),
    roiRadY: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 120.0),
    roiRadZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 100.0),
    nrSmoothIter: jspb.Message.getFieldWithDefault(msg, 6, 5),
    useRoi: jspb.Message.getBooleanFieldWithDefault(msg, 7, true),
    useGroundService: jspb.Message.getBooleanFieldWithDefault(msg, 8, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpatioTemporalGroundDetectorConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.gridSize;

  /** @type {?|undefined} */
  this.groundThres;

  /** @type {?|undefined} */
  this.roiRadX;

  /** @type {?|undefined} */
  this.roiRadY;

  /** @type {?|undefined} */
  this.roiRadZ;

  /** @type {?|undefined} */
  this.nrSmoothIter;

  /** @type {?|undefined} */
  this.useRoi;

  /** @type {?|undefined} */
  this.useGroundService;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig();
  obj.gridSize != null && jspb.Message.setField(msg, 1, obj.gridSize);
  obj.groundThres != null && jspb.Message.setField(msg, 2, obj.groundThres);
  obj.roiRadX != null && jspb.Message.setField(msg, 3, obj.roiRadX);
  obj.roiRadY != null && jspb.Message.setField(msg, 4, obj.roiRadY);
  obj.roiRadZ != null && jspb.Message.setField(msg, 5, obj.roiRadZ);
  obj.nrSmoothIter != null && jspb.Message.setField(msg, 6, obj.nrSmoothIter);
  obj.useRoi != null && jspb.Message.setField(msg, 7, obj.useRoi);
  obj.useGroundService != null && jspb.Message.setField(msg, 8, obj.useGroundService);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig;
  return proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGridSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGroundThres(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoiRadX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoiRadY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoiRadZ(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNrSmoothIter(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseRoi(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseGroundService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional uint32 grid_size = 1;
 * @return {number}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getGridSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 16));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setGridSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearGridSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasGridSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float ground_thres = 2;
 * @return {number}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getGroundThres = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.25));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setGroundThres = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearGroundThres = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasGroundThres = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float roi_rad_x = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getRoiRadX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 120.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setRoiRadX = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearRoiRadX = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasRoiRadX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float roi_rad_y = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getRoiRadY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 120.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setRoiRadY = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearRoiRadY = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasRoiRadY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float roi_rad_z = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getRoiRadZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setRoiRadZ = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearRoiRadZ = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasRoiRadZ = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 nr_smooth_iter = 6;
 * @return {number}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getNrSmoothIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setNrSmoothIter = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearNrSmoothIter = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasNrSmoothIter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool use_roi = 7;
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getUseRoi = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setUseRoi = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearUseRoi = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasUseRoi = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool use_ground_service = 8;
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.getUseGroundService = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.setUseGroundService = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig} returns this
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.clearUseGroundService = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.SpatioTemporalGroundDetectorConfig.prototype.hasUseGroundService = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.apollo.perception.lidar);
