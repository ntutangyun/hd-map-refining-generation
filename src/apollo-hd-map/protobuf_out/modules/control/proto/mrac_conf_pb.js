// source: modules/control/proto/mrac_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.control.MracConf', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.control.MracConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.control.MracConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.control.MracConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.control.MracConf.displayName = 'proto.apollo.control.MracConf';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.control.MracConf.repeatedFields_ = [5,8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.control.MracConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.control.MracConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.control.MracConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MracConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    mracModelOrder: jspb.Message.getFieldWithDefault(msg, 1, 1),
    referenceTimeConstant: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    referenceNaturalFrequency: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    referenceDampingRatio: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    adaptionStateGainList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    adaptionDesiredGain: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    adaptionNonlinearGain: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    adaptionMatrixPList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f,
    mracSaturationLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 1.0),
    antiWindupCompensationGainList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f,
    clampingTimeConstant: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MracConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.control.MracConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.mracModelOrder;

  /** @type {?|undefined} */
  this.referenceTimeConstant;

  /** @type {?|undefined} */
  this.referenceNaturalFrequency;

  /** @type {?|undefined} */
  this.referenceDampingRatio;

  /** @type {?|undefined} */
  this.adaptionStateGainList;

  /** @type {?|undefined} */
  this.adaptionDesiredGain;

  /** @type {?|undefined} */
  this.adaptionNonlinearGain;

  /** @type {?|undefined} */
  this.adaptionMatrixPList;

  /** @type {?|undefined} */
  this.mracSaturationLevel;

  /** @type {?|undefined} */
  this.antiWindupCompensationGainList;

  /** @type {?|undefined} */
  this.clampingTimeConstant;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.control.MracConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.control.MracConf}
 */
proto.apollo.control.MracConf.fromObject = function(obj) {
  var msg = new proto.apollo.control.MracConf();
  obj.mracModelOrder != null && jspb.Message.setField(msg, 1, obj.mracModelOrder);
  obj.referenceTimeConstant != null && jspb.Message.setField(msg, 2, obj.referenceTimeConstant);
  obj.referenceNaturalFrequency != null && jspb.Message.setField(msg, 3, obj.referenceNaturalFrequency);
  obj.referenceDampingRatio != null && jspb.Message.setField(msg, 4, obj.referenceDampingRatio);
  obj.adaptionStateGainList != null && jspb.Message.setField(msg, 5, obj.adaptionStateGainList);
  obj.adaptionDesiredGain != null && jspb.Message.setField(msg, 6, obj.adaptionDesiredGain);
  obj.adaptionNonlinearGain != null && jspb.Message.setField(msg, 7, obj.adaptionNonlinearGain);
  obj.adaptionMatrixPList != null && jspb.Message.setField(msg, 8, obj.adaptionMatrixPList);
  obj.mracSaturationLevel != null && jspb.Message.setField(msg, 9, obj.mracSaturationLevel);
  obj.antiWindupCompensationGainList != null && jspb.Message.setField(msg, 10, obj.antiWindupCompensationGainList);
  obj.clampingTimeConstant != null && jspb.Message.setField(msg, 11, obj.clampingTimeConstant);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.control.MracConf}
 */
proto.apollo.control.MracConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.control.MracConf;
  return proto.apollo.control.MracConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.control.MracConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.control.MracConf}
 */
proto.apollo.control.MracConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMracModelOrder(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReferenceTimeConstant(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReferenceNaturalFrequency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReferenceDampingRatio(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAdaptionStateGain(values[i]);
      }
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdaptionDesiredGain(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAdaptionNonlinearGain(value);
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAdaptionMatrixP(values[i]);
      }
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMracSaturationLevel(value);
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAntiWindupCompensationGain(values[i]);
      }
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClampingTimeConstant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.control.MracConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.control.MracConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.control.MracConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.control.MracConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getAdaptionStateGainList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getAdaptionMatrixPList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getAntiWindupCompensationGainList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional int32 mrac_model_order = 1;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getMracModelOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setMracModelOrder = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearMracModelOrder = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasMracModelOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double reference_time_constant = 2;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getReferenceTimeConstant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setReferenceTimeConstant = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearReferenceTimeConstant = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasReferenceTimeConstant = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double reference_natural_frequency = 3;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getReferenceNaturalFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setReferenceNaturalFrequency = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearReferenceNaturalFrequency = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasReferenceNaturalFrequency = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double reference_damping_ratio = 4;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getReferenceDampingRatio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setReferenceDampingRatio = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearReferenceDampingRatio = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasReferenceDampingRatio = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated double adaption_state_gain = 5;
 * @return {!Array<number>}
 */
proto.apollo.control.MracConf.prototype.getAdaptionStateGainList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setAdaptionStateGainList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.addAdaptionStateGain = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearAdaptionStateGainList = function() {
  return this.setAdaptionStateGainList([]);
};


/**
 * optional double adaption_desired_gain = 6;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getAdaptionDesiredGain = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setAdaptionDesiredGain = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearAdaptionDesiredGain = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasAdaptionDesiredGain = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double adaption_nonlinear_gain = 7;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getAdaptionNonlinearGain = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setAdaptionNonlinearGain = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearAdaptionNonlinearGain = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasAdaptionNonlinearGain = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated double adaption_matrix_p = 8;
 * @return {!Array<number>}
 */
proto.apollo.control.MracConf.prototype.getAdaptionMatrixPList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setAdaptionMatrixPList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.addAdaptionMatrixP = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearAdaptionMatrixPList = function() {
  return this.setAdaptionMatrixPList([]);
};


/**
 * optional double mrac_saturation_level = 9;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getMracSaturationLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setMracSaturationLevel = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearMracSaturationLevel = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasMracSaturationLevel = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated double anti_windup_compensation_gain = 10;
 * @return {!Array<number>}
 */
proto.apollo.control.MracConf.prototype.getAntiWindupCompensationGainList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setAntiWindupCompensationGainList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.addAntiWindupCompensationGain = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearAntiWindupCompensationGainList = function() {
  return this.setAntiWindupCompensationGainList([]);
};


/**
 * optional double clamping_time_constant = 11;
 * @return {number}
 */
proto.apollo.control.MracConf.prototype.getClampingTimeConstant = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.setClampingTimeConstant = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.control.MracConf} returns this
 */
proto.apollo.control.MracConf.prototype.clearClampingTimeConstant = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.control.MracConf.prototype.hasClampingTimeConstant = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto.apollo.control);
