// source: modules/planning/proto/planning.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_canbus_proto_chassis_pb = require('../../../modules/canbus/proto/chassis_pb.js');
goog.object.extend(proto, modules_canbus_proto_chassis_pb);
var modules_common_proto_drive_state_pb = require('../../../modules/common/proto/drive_state_pb.js');
goog.object.extend(proto, modules_common_proto_drive_state_pb);
var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
var modules_map_proto_map_id_pb = require('../../../modules/map/proto/map_id_pb.js');
goog.object.extend(proto, modules_map_proto_map_id_pb);
var modules_planning_proto_decision_pb = require('../../../modules/planning/proto/decision_pb.js');
goog.object.extend(proto, modules_planning_proto_decision_pb);
var modules_planning_proto_planning_internal_pb = require('../../../modules/planning/proto/planning_internal_pb.js');
goog.object.extend(proto, modules_planning_proto_planning_internal_pb);
goog.exportSymbol('proto.apollo.planning.ADCTrajectory', null, global);
goog.exportSymbol('proto.apollo.planning.ADCTrajectory.CriticalRegion', null, global);
goog.exportSymbol('proto.apollo.planning.ADCTrajectory.RightOfWayStatus', null, global);
goog.exportSymbol('proto.apollo.planning.ADCTrajectory.TrajectoryType', null, global);
goog.exportSymbol('proto.apollo.planning.EStop', null, global);
goog.exportSymbol('proto.apollo.planning.JucType', null, global);
goog.exportSymbol('proto.apollo.planning.LatencyStats', null, global);
goog.exportSymbol('proto.apollo.planning.RSSInfo', null, global);
goog.exportSymbol('proto.apollo.planning.TaskStats', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.EStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.EStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.EStop.displayName = 'proto.apollo.planning.EStop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.TaskStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.TaskStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.TaskStats.displayName = 'proto.apollo.planning.TaskStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.LatencyStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.LatencyStats.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.LatencyStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.LatencyStats.displayName = 'proto.apollo.planning.LatencyStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.RSSInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.RSSInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.RSSInfo.displayName = 'proto.apollo.planning.RSSInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ADCTrajectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ADCTrajectory.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.ADCTrajectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ADCTrajectory.displayName = 'proto.apollo.planning.ADCTrajectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.ADCTrajectory.CriticalRegion.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.ADCTrajectory.CriticalRegion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.ADCTrajectory.CriticalRegion.displayName = 'proto.apollo.planning.ADCTrajectory.CriticalRegion';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.EStop.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.EStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.EStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    isEstop: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of EStop as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.EStop.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.isEstop;

  /** @type {?|undefined} */
  this.reason;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.EStop.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.EStop}
 */
proto.apollo.planning.EStop.fromObject = function(obj) {
  var msg = new proto.apollo.planning.EStop();
  obj.isEstop != null && jspb.Message.setField(msg, 1, obj.isEstop);
  obj.reason != null && jspb.Message.setField(msg, 2, obj.reason);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.EStop}
 */
proto.apollo.planning.EStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.EStop;
  return proto.apollo.planning.EStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.EStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.EStop}
 */
proto.apollo.planning.EStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEstop(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.EStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.EStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.EStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.EStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool is_estop = 1;
 * @return {boolean}
 */
proto.apollo.planning.EStop.prototype.getIsEstop = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.EStop} returns this
 */
proto.apollo.planning.EStop.prototype.setIsEstop = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.EStop} returns this
 */
proto.apollo.planning.EStop.prototype.clearIsEstop = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.EStop.prototype.hasIsEstop = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.apollo.planning.EStop.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.EStop} returns this
 */
proto.apollo.planning.EStop.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.EStop} returns this
 */
proto.apollo.planning.EStop.prototype.clearReason = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.EStop.prototype.hasReason = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.TaskStats.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.TaskStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.TaskStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TaskStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    timeMs: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TaskStats as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.TaskStats.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.timeMs;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.TaskStats.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.TaskStats}
 */
proto.apollo.planning.TaskStats.fromObject = function(obj) {
  var msg = new proto.apollo.planning.TaskStats();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.timeMs != null && jspb.Message.setField(msg, 2, obj.timeMs);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.TaskStats}
 */
proto.apollo.planning.TaskStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.TaskStats;
  return proto.apollo.planning.TaskStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.TaskStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.TaskStats}
 */
proto.apollo.planning.TaskStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimeMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.TaskStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.TaskStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.TaskStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.TaskStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.planning.TaskStats.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.TaskStats} returns this
 */
proto.apollo.planning.TaskStats.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TaskStats} returns this
 */
proto.apollo.planning.TaskStats.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskStats.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double time_ms = 2;
 * @return {number}
 */
proto.apollo.planning.TaskStats.prototype.getTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.TaskStats} returns this
 */
proto.apollo.planning.TaskStats.prototype.setTimeMs = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.TaskStats} returns this
 */
proto.apollo.planning.TaskStats.prototype.clearTimeMs = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.TaskStats.prototype.hasTimeMs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.LatencyStats.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.LatencyStats.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.LatencyStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.LatencyStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LatencyStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalTimeMs: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    taskStatsList: jspb.Message.toObjectList(msg.getTaskStatsList(),
    proto.apollo.planning.TaskStats.toObject, includeInstance),
    initFrameTimeMs: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LatencyStats as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.LatencyStats.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.totalTimeMs;

  /** @type {?|undefined} */
  this.taskStatsList;

  /** @type {?|undefined} */
  this.initFrameTimeMs;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.LatencyStats.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.LatencyStats}
 */
proto.apollo.planning.LatencyStats.fromObject = function(obj) {
  var msg = new proto.apollo.planning.LatencyStats();
  obj.totalTimeMs != null && jspb.Message.setField(msg, 1, obj.totalTimeMs);
  obj.taskStatsList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.taskStatsList.map(
          proto.apollo.planning.TaskStats.fromObject));
  obj.initFrameTimeMs != null && jspb.Message.setField(msg, 3, obj.initFrameTimeMs);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.LatencyStats}
 */
proto.apollo.planning.LatencyStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.LatencyStats;
  return proto.apollo.planning.LatencyStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.LatencyStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.LatencyStats}
 */
proto.apollo.planning.LatencyStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalTimeMs(value);
      break;
    case 2:
      var value = new proto.apollo.planning.TaskStats;
      reader.readMessage(value,proto.apollo.planning.TaskStats.deserializeBinaryFromReader);
      msg.addTaskStats(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitFrameTimeMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.LatencyStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.LatencyStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.LatencyStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.LatencyStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTaskStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.planning.TaskStats.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double total_time_ms = 1;
 * @return {number}
 */
proto.apollo.planning.LatencyStats.prototype.getTotalTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LatencyStats} returns this
 */
proto.apollo.planning.LatencyStats.prototype.setTotalTimeMs = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LatencyStats} returns this
 */
proto.apollo.planning.LatencyStats.prototype.clearTotalTimeMs = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LatencyStats.prototype.hasTotalTimeMs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TaskStats task_stats = 2;
 * @return {!Array<!proto.apollo.planning.TaskStats>}
 */
proto.apollo.planning.LatencyStats.prototype.getTaskStatsList = function() {
  return /** @type{!Array<!proto.apollo.planning.TaskStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.TaskStats, 2));
};


/**
 * @param {!Array<!proto.apollo.planning.TaskStats>} value
 * @return {!proto.apollo.planning.LatencyStats} returns this
*/
proto.apollo.planning.LatencyStats.prototype.setTaskStatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.planning.TaskStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.TaskStats}
 */
proto.apollo.planning.LatencyStats.prototype.addTaskStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.planning.TaskStats, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.LatencyStats} returns this
 */
proto.apollo.planning.LatencyStats.prototype.clearTaskStatsList = function() {
  return this.setTaskStatsList([]);
};


/**
 * optional double init_frame_time_ms = 3;
 * @return {number}
 */
proto.apollo.planning.LatencyStats.prototype.getInitFrameTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.LatencyStats} returns this
 */
proto.apollo.planning.LatencyStats.prototype.setInitFrameTimeMs = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.LatencyStats} returns this
 */
proto.apollo.planning.LatencyStats.prototype.clearInitFrameTimeMs = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.LatencyStats.prototype.hasInitFrameTimeMs = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.RSSInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.RSSInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.RSSInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RSSInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    isRssSafe: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    curDistLon: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    rssSafeDistLon: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    accLonRangeMinimum: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    accLonRangeMaximum: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    accLatLeftRangeMinimum: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    accLatLeftRangeMaximum: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    accLatRightRangeMinimum: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    accLatRightRangeMaximum: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RSSInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.RSSInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.isRssSafe;

  /** @type {?|undefined} */
  this.curDistLon;

  /** @type {?|undefined} */
  this.rssSafeDistLon;

  /** @type {?|undefined} */
  this.accLonRangeMinimum;

  /** @type {?|undefined} */
  this.accLonRangeMaximum;

  /** @type {?|undefined} */
  this.accLatLeftRangeMinimum;

  /** @type {?|undefined} */
  this.accLatLeftRangeMaximum;

  /** @type {?|undefined} */
  this.accLatRightRangeMinimum;

  /** @type {?|undefined} */
  this.accLatRightRangeMaximum;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.RSSInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.RSSInfo}
 */
proto.apollo.planning.RSSInfo.fromObject = function(obj) {
  var msg = new proto.apollo.planning.RSSInfo();
  obj.isRssSafe != null && jspb.Message.setField(msg, 1, obj.isRssSafe);
  obj.curDistLon != null && jspb.Message.setField(msg, 2, obj.curDistLon);
  obj.rssSafeDistLon != null && jspb.Message.setField(msg, 3, obj.rssSafeDistLon);
  obj.accLonRangeMinimum != null && jspb.Message.setField(msg, 4, obj.accLonRangeMinimum);
  obj.accLonRangeMaximum != null && jspb.Message.setField(msg, 5, obj.accLonRangeMaximum);
  obj.accLatLeftRangeMinimum != null && jspb.Message.setField(msg, 6, obj.accLatLeftRangeMinimum);
  obj.accLatLeftRangeMaximum != null && jspb.Message.setField(msg, 7, obj.accLatLeftRangeMaximum);
  obj.accLatRightRangeMinimum != null && jspb.Message.setField(msg, 8, obj.accLatRightRangeMinimum);
  obj.accLatRightRangeMaximum != null && jspb.Message.setField(msg, 9, obj.accLatRightRangeMaximum);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.RSSInfo}
 */
proto.apollo.planning.RSSInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.RSSInfo;
  return proto.apollo.planning.RSSInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.RSSInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.RSSInfo}
 */
proto.apollo.planning.RSSInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRssSafe(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurDistLon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRssSafeDistLon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccLonRangeMinimum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccLonRangeMaximum(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccLatLeftRangeMinimum(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccLatLeftRangeMaximum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccLatRightRangeMinimum(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccLatRightRangeMaximum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.RSSInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.RSSInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.RSSInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.RSSInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional bool is_rss_safe = 1;
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.getIsRssSafe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setIsRssSafe = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearIsRssSafe = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasIsRssSafe = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double cur_dist_lon = 2;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getCurDistLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setCurDistLon = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearCurDistLon = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasCurDistLon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double rss_safe_dist_lon = 3;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getRssSafeDistLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setRssSafeDistLon = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearRssSafeDistLon = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasRssSafeDistLon = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double acc_lon_range_minimum = 4;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getAccLonRangeMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setAccLonRangeMinimum = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearAccLonRangeMinimum = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasAccLonRangeMinimum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double acc_lon_range_maximum = 5;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getAccLonRangeMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setAccLonRangeMaximum = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearAccLonRangeMaximum = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasAccLonRangeMaximum = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double acc_lat_left_range_minimum = 6;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getAccLatLeftRangeMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setAccLatLeftRangeMinimum = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearAccLatLeftRangeMinimum = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasAccLatLeftRangeMinimum = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double acc_lat_left_range_maximum = 7;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getAccLatLeftRangeMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setAccLatLeftRangeMaximum = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearAccLatLeftRangeMaximum = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasAccLatLeftRangeMaximum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double acc_lat_right_range_minimum = 8;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getAccLatRightRangeMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setAccLatRightRangeMinimum = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearAccLatRightRangeMinimum = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasAccLatRightRangeMinimum = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double acc_lat_right_range_maximum = 9;
 * @return {number}
 */
proto.apollo.planning.RSSInfo.prototype.getAccLatRightRangeMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.setAccLatRightRangeMaximum = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.RSSInfo} returns this
 */
proto.apollo.planning.RSSInfo.prototype.clearAccLatRightRangeMaximum = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.RSSInfo.prototype.hasAccLatRightRangeMaximum = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ADCTrajectory.repeatedFields_ = [12,13,18,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ADCTrajectory.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ADCTrajectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ADCTrajectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ADCTrajectory.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    totalPathLength: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    totalPathTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    estop: (f = msg.getEstop()) && proto.apollo.planning.EStop.toObject(includeInstance, f),
    debug: (f = msg.getDebug()) && modules_planning_proto_planning_internal_pb.Debug.toObject(includeInstance, f),
    isReplan: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    gear: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    trajectoryPointList: jspb.Message.toObjectList(msg.getTrajectoryPointList(),
    modules_common_proto_pnc_point_pb.TrajectoryPoint.toObject, includeInstance),
    pathPointList: jspb.Message.toObjectList(msg.getPathPointList(),
    modules_common_proto_pnc_point_pb.PathPoint.toObject, includeInstance),
    decision: (f = msg.getDecision()) && modules_planning_proto_decision_pb.DecisionResult.toObject(includeInstance, f),
    latencyStats: (f = msg.getLatencyStats()) && proto.apollo.planning.LatencyStats.toObject(includeInstance, f),
    routingHeader: (f = msg.getRoutingHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    rightOfWayStatus: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
    laneIdList: jspb.Message.toObjectList(msg.getLaneIdList(),
    modules_map_proto_map_id_pb.Id.toObject, includeInstance),
    engageAdvice: (f = msg.getEngageAdvice()) && modules_common_proto_drive_state_pb.EngageAdvice.toObject(includeInstance, f),
    criticalRegion: (f = msg.getCriticalRegion()) && proto.apollo.planning.ADCTrajectory.CriticalRegion.toObject(includeInstance, f),
    trajectoryType: jspb.Message.getFieldWithDefault(msg, 21, 0),
    replanReason: (f = jspb.Message.getField(msg, 22)) == null ? undefined : f,
    targetLaneIdList: jspb.Message.toObjectList(msg.getTargetLaneIdList(),
    modules_map_proto_map_id_pb.Id.toObject, includeInstance),
    carInDeadEnd: (f = jspb.Message.getBooleanField(msg, 24)) == null ? undefined : f,
    rssInfo: (f = msg.getRssInfo()) && proto.apollo.planning.RSSInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ADCTrajectory as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ADCTrajectory.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.totalPathLength;

  /** @type {?|undefined} */
  this.totalPathTime;

  /** @type {?|undefined} */
  this.estop;

  /** @type {?|undefined} */
  this.debug;

  /** @type {?|undefined} */
  this.isReplan;

  /** @type {?|undefined} */
  this.gear;

  /** @type {?|undefined} */
  this.trajectoryPointList;

  /** @type {?|undefined} */
  this.pathPointList;

  /** @type {?|undefined} */
  this.decision;

  /** @type {?|undefined} */
  this.latencyStats;

  /** @type {?|undefined} */
  this.routingHeader;

  /** @type {?|undefined} */
  this.rightOfWayStatus;

  /** @type {?|undefined} */
  this.laneIdList;

  /** @type {?|undefined} */
  this.engageAdvice;

  /** @type {?|undefined} */
  this.criticalRegion;

  /** @type {?|undefined} */
  this.trajectoryType;

  /** @type {?|undefined} */
  this.replanReason;

  /** @type {?|undefined} */
  this.targetLaneIdList;

  /** @type {?|undefined} */
  this.carInDeadEnd;

  /** @type {?|undefined} */
  this.rssInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ADCTrajectory.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ADCTrajectory}
 */
proto.apollo.planning.ADCTrajectory.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ADCTrajectory();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.totalPathLength != null && jspb.Message.setField(msg, 2, obj.totalPathLength);
  obj.totalPathTime != null && jspb.Message.setField(msg, 3, obj.totalPathTime);
  obj.estop && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.planning.EStop.fromObject(obj.estop));
  obj.debug && jspb.Message.setWrapperField(
      msg, 8, modules_planning_proto_planning_internal_pb.Debug.fromObject(obj.debug));
  obj.isReplan != null && jspb.Message.setField(msg, 9, obj.isReplan);
  obj.gear != null && jspb.Message.setField(msg, 10, obj.gear);
  obj.trajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.trajectoryPointList.map(
          modules_common_proto_pnc_point_pb.TrajectoryPoint.fromObject));
  obj.pathPointList && jspb.Message.setRepeatedWrapperField(
      msg, 13, obj.pathPointList.map(
          modules_common_proto_pnc_point_pb.PathPoint.fromObject));
  obj.decision && jspb.Message.setWrapperField(
      msg, 14, modules_planning_proto_decision_pb.DecisionResult.fromObject(obj.decision));
  obj.latencyStats && jspb.Message.setWrapperField(
      msg, 15, proto.apollo.planning.LatencyStats.fromObject(obj.latencyStats));
  obj.routingHeader && jspb.Message.setWrapperField(
      msg, 16, modules_common_proto_header_pb.Header.fromObject(obj.routingHeader));
  obj.rightOfWayStatus != null && jspb.Message.setField(msg, 17, obj.rightOfWayStatus);
  obj.laneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 18, obj.laneIdList.map(
          modules_map_proto_map_id_pb.Id.fromObject));
  obj.engageAdvice && jspb.Message.setWrapperField(
      msg, 19, modules_common_proto_drive_state_pb.EngageAdvice.fromObject(obj.engageAdvice));
  obj.criticalRegion && jspb.Message.setWrapperField(
      msg, 20, proto.apollo.planning.ADCTrajectory.CriticalRegion.fromObject(obj.criticalRegion));
  obj.trajectoryType != null && jspb.Message.setField(msg, 21, obj.trajectoryType);
  obj.replanReason != null && jspb.Message.setField(msg, 22, obj.replanReason);
  obj.targetLaneIdList && jspb.Message.setRepeatedWrapperField(
      msg, 23, obj.targetLaneIdList.map(
          modules_map_proto_map_id_pb.Id.fromObject));
  obj.carInDeadEnd != null && jspb.Message.setField(msg, 24, obj.carInDeadEnd);
  obj.rssInfo && jspb.Message.setWrapperField(
      msg, 100, proto.apollo.planning.RSSInfo.fromObject(obj.rssInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ADCTrajectory}
 */
proto.apollo.planning.ADCTrajectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ADCTrajectory;
  return proto.apollo.planning.ADCTrajectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ADCTrajectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ADCTrajectory}
 */
proto.apollo.planning.ADCTrajectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalPathLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalPathTime(value);
      break;
    case 6:
      var value = new proto.apollo.planning.EStop;
      reader.readMessage(value,proto.apollo.planning.EStop.deserializeBinaryFromReader);
      msg.setEstop(value);
      break;
    case 8:
      var value = new modules_planning_proto_planning_internal_pb.Debug;
      reader.readMessage(value,modules_planning_proto_planning_internal_pb.Debug.deserializeBinaryFromReader);
      msg.setDebug(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReplan(value);
      break;
    case 10:
      var value = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (reader.readEnum());
      msg.setGear(value);
      break;
    case 12:
      var value = new modules_common_proto_pnc_point_pb.TrajectoryPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.TrajectoryPoint.deserializeBinaryFromReader);
      msg.addTrajectoryPoint(value);
      break;
    case 13:
      var value = new modules_common_proto_pnc_point_pb.PathPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.PathPoint.deserializeBinaryFromReader);
      msg.addPathPoint(value);
      break;
    case 14:
      var value = new modules_planning_proto_decision_pb.DecisionResult;
      reader.readMessage(value,modules_planning_proto_decision_pb.DecisionResult.deserializeBinaryFromReader);
      msg.setDecision(value);
      break;
    case 15:
      var value = new proto.apollo.planning.LatencyStats;
      reader.readMessage(value,proto.apollo.planning.LatencyStats.deserializeBinaryFromReader);
      msg.setLatencyStats(value);
      break;
    case 16:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setRoutingHeader(value);
      break;
    case 17:
      var value = /** @type {!proto.apollo.planning.ADCTrajectory.RightOfWayStatus} */ (reader.readEnum());
      msg.setRightOfWayStatus(value);
      break;
    case 18:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.addLaneId(value);
      break;
    case 19:
      var value = new modules_common_proto_drive_state_pb.EngageAdvice;
      reader.readMessage(value,modules_common_proto_drive_state_pb.EngageAdvice.deserializeBinaryFromReader);
      msg.setEngageAdvice(value);
      break;
    case 20:
      var value = new proto.apollo.planning.ADCTrajectory.CriticalRegion;
      reader.readMessage(value,proto.apollo.planning.ADCTrajectory.CriticalRegion.deserializeBinaryFromReader);
      msg.setCriticalRegion(value);
      break;
    case 21:
      var value = /** @type {!proto.apollo.planning.ADCTrajectory.TrajectoryType} */ (reader.readEnum());
      msg.setTrajectoryType(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplanReason(value);
      break;
    case 23:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.addTargetLaneId(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCarInDeadEnd(value);
      break;
    case 100:
      var value = new proto.apollo.planning.RSSInfo;
      reader.readMessage(value,proto.apollo.planning.RSSInfo.deserializeBinaryFromReader);
      msg.setRssInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ADCTrajectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ADCTrajectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ADCTrajectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ADCTrajectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getEstop();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.planning.EStop.serializeBinaryToWriter
    );
  }
  f = message.getDebug();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      modules_planning_proto_planning_internal_pb.Debug.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      modules_common_proto_pnc_point_pb.TrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = message.getPathPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      modules_common_proto_pnc_point_pb.PathPoint.serializeBinaryToWriter
    );
  }
  f = message.getDecision();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      modules_planning_proto_decision_pb.DecisionResult.serializeBinaryToWriter
    );
  }
  f = message.getLatencyStats();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.apollo.planning.LatencyStats.serializeBinaryToWriter
    );
  }
  f = message.getRoutingHeader();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.planning.ADCTrajectory.RightOfWayStatus} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = message.getLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getEngageAdvice();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      modules_common_proto_drive_state_pb.EngageAdvice.serializeBinaryToWriter
    );
  }
  f = message.getCriticalRegion();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.apollo.planning.ADCTrajectory.CriticalRegion.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.planning.ADCTrajectory.TrajectoryType} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getTargetLaneIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBool(
      24,
      f
    );
  }
  f = message.getRssInfo();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.apollo.planning.RSSInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.planning.ADCTrajectory.RightOfWayStatus = {
  UNPROTECTED: 0,
  PROTECTED: 1
};

/**
 * @enum {number}
 */
proto.apollo.planning.ADCTrajectory.TrajectoryType = {
  UNKNOWN: 0,
  NORMAL: 1,
  PATH_FALLBACK: 2,
  SPEED_FALLBACK: 3,
  PATH_REUSED: 4
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.ADCTrajectory.CriticalRegion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.ADCTrajectory.CriticalRegion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.toObject = function(includeInstance, msg) {
  var f, obj = {
    regionList: jspb.Message.toObjectList(msg.getRegionList(),
    modules_common_proto_geometry_pb.Polygon.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CriticalRegion as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.regionList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.ADCTrajectory.CriticalRegion.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.ADCTrajectory.CriticalRegion}
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.fromObject = function(obj) {
  var msg = new proto.apollo.planning.ADCTrajectory.CriticalRegion();
  obj.regionList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.regionList.map(
          modules_common_proto_geometry_pb.Polygon.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.ADCTrajectory.CriticalRegion}
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.ADCTrajectory.CriticalRegion;
  return proto.apollo.planning.ADCTrajectory.CriticalRegion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.ADCTrajectory.CriticalRegion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.ADCTrajectory.CriticalRegion}
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_geometry_pb.Polygon;
      reader.readMessage(value,modules_common_proto_geometry_pb.Polygon.deserializeBinaryFromReader);
      msg.addRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.ADCTrajectory.CriticalRegion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.ADCTrajectory.CriticalRegion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      modules_common_proto_geometry_pb.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * repeated apollo.common.Polygon region = 1;
 * @return {!Array<!proto.apollo.common.Polygon>}
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.prototype.getRegionList = function() {
  return /** @type{!Array<!proto.apollo.common.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_geometry_pb.Polygon, 1));
};


/**
 * @param {!Array<!proto.apollo.common.Polygon>} value
 * @return {!proto.apollo.planning.ADCTrajectory.CriticalRegion} returns this
*/
proto.apollo.planning.ADCTrajectory.CriticalRegion.prototype.setRegionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.common.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.Polygon}
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.prototype.addRegion = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.common.Polygon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ADCTrajectory.CriticalRegion} returns this
 */
proto.apollo.planning.ADCTrajectory.CriticalRegion.prototype.clearRegionList = function() {
  return this.setRegionList([]);
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.planning.ADCTrajectory.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double total_path_length = 2;
 * @return {number}
 */
proto.apollo.planning.ADCTrajectory.prototype.getTotalPathLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setTotalPathLength = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearTotalPathLength = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasTotalPathLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double total_path_time = 3;
 * @return {number}
 */
proto.apollo.planning.ADCTrajectory.prototype.getTotalPathTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setTotalPathTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearTotalPathTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasTotalPathTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EStop estop = 6;
 * @return {?proto.apollo.planning.EStop}
 */
proto.apollo.planning.ADCTrajectory.prototype.getEstop = function() {
  return /** @type{?proto.apollo.planning.EStop} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.EStop, 6));
};


/**
 * @param {?proto.apollo.planning.EStop|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setEstop = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearEstop = function() {
  return this.setEstop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasEstop = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional apollo.planning_internal.Debug debug = 8;
 * @return {?proto.apollo.planning_internal.Debug}
 */
proto.apollo.planning.ADCTrajectory.prototype.getDebug = function() {
  return /** @type{?proto.apollo.planning_internal.Debug} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_planning_internal_pb.Debug, 8));
};


/**
 * @param {?proto.apollo.planning_internal.Debug|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setDebug = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearDebug = function() {
  return this.setDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasDebug = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool is_replan = 9;
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.getIsReplan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setIsReplan = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearIsReplan = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasIsReplan = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional apollo.canbus.Chassis.GearPosition gear = 10;
 * @return {!proto.apollo.canbus.Chassis.GearPosition}
 */
proto.apollo.planning.ADCTrajectory.prototype.getGear = function() {
  return /** @type {!proto.apollo.canbus.Chassis.GearPosition} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.apollo.canbus.Chassis.GearPosition} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setGear = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearGear = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasGear = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated apollo.common.TrajectoryPoint trajectory_point = 12;
 * @return {!Array<!proto.apollo.common.TrajectoryPoint>}
 */
proto.apollo.planning.ADCTrajectory.prototype.getTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.common.TrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.TrajectoryPoint, 12));
};


/**
 * @param {!Array<!proto.apollo.common.TrajectoryPoint>} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.common.TrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.planning.ADCTrajectory.prototype.addTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.common.TrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearTrajectoryPointList = function() {
  return this.setTrajectoryPointList([]);
};


/**
 * repeated apollo.common.PathPoint path_point = 13;
 * @return {!Array<!proto.apollo.common.PathPoint>}
 */
proto.apollo.planning.ADCTrajectory.prototype.getPathPointList = function() {
  return /** @type{!Array<!proto.apollo.common.PathPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_common_proto_pnc_point_pb.PathPoint, 13));
};


/**
 * @param {!Array<!proto.apollo.common.PathPoint>} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setPathPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.apollo.common.PathPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.PathPoint}
 */
proto.apollo.planning.ADCTrajectory.prototype.addPathPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.apollo.common.PathPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearPathPointList = function() {
  return this.setPathPointList([]);
};


/**
 * optional DecisionResult decision = 14;
 * @return {?proto.apollo.planning.DecisionResult}
 */
proto.apollo.planning.ADCTrajectory.prototype.getDecision = function() {
  return /** @type{?proto.apollo.planning.DecisionResult} */ (
    jspb.Message.getWrapperField(this, modules_planning_proto_decision_pb.DecisionResult, 14));
};


/**
 * @param {?proto.apollo.planning.DecisionResult|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setDecision = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearDecision = function() {
  return this.setDecision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasDecision = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional LatencyStats latency_stats = 15;
 * @return {?proto.apollo.planning.LatencyStats}
 */
proto.apollo.planning.ADCTrajectory.prototype.getLatencyStats = function() {
  return /** @type{?proto.apollo.planning.LatencyStats} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.LatencyStats, 15));
};


/**
 * @param {?proto.apollo.planning.LatencyStats|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setLatencyStats = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearLatencyStats = function() {
  return this.setLatencyStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasLatencyStats = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional apollo.common.Header routing_header = 16;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.planning.ADCTrajectory.prototype.getRoutingHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 16));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setRoutingHeader = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearRoutingHeader = function() {
  return this.setRoutingHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasRoutingHeader = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RightOfWayStatus right_of_way_status = 17;
 * @return {!proto.apollo.planning.ADCTrajectory.RightOfWayStatus}
 */
proto.apollo.planning.ADCTrajectory.prototype.getRightOfWayStatus = function() {
  return /** @type {!proto.apollo.planning.ADCTrajectory.RightOfWayStatus} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {!proto.apollo.planning.ADCTrajectory.RightOfWayStatus} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setRightOfWayStatus = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearRightOfWayStatus = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasRightOfWayStatus = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * repeated apollo.hdmap.Id lane_id = 18;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.planning.ADCTrajectory.prototype.getLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_id_pb.Id, 18));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.planning.ADCTrajectory.prototype.addLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearLaneIdList = function() {
  return this.setLaneIdList([]);
};


/**
 * optional apollo.common.EngageAdvice engage_advice = 19;
 * @return {?proto.apollo.common.EngageAdvice}
 */
proto.apollo.planning.ADCTrajectory.prototype.getEngageAdvice = function() {
  return /** @type{?proto.apollo.common.EngageAdvice} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_drive_state_pb.EngageAdvice, 19));
};


/**
 * @param {?proto.apollo.common.EngageAdvice|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setEngageAdvice = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearEngageAdvice = function() {
  return this.setEngageAdvice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasEngageAdvice = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CriticalRegion critical_region = 20;
 * @return {?proto.apollo.planning.ADCTrajectory.CriticalRegion}
 */
proto.apollo.planning.ADCTrajectory.prototype.getCriticalRegion = function() {
  return /** @type{?proto.apollo.planning.ADCTrajectory.CriticalRegion} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.ADCTrajectory.CriticalRegion, 20));
};


/**
 * @param {?proto.apollo.planning.ADCTrajectory.CriticalRegion|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setCriticalRegion = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearCriticalRegion = function() {
  return this.setCriticalRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasCriticalRegion = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional TrajectoryType trajectory_type = 21;
 * @return {!proto.apollo.planning.ADCTrajectory.TrajectoryType}
 */
proto.apollo.planning.ADCTrajectory.prototype.getTrajectoryType = function() {
  return /** @type {!proto.apollo.planning.ADCTrajectory.TrajectoryType} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.apollo.planning.ADCTrajectory.TrajectoryType} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setTrajectoryType = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearTrajectoryType = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasTrajectoryType = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string replan_reason = 22;
 * @return {string}
 */
proto.apollo.planning.ADCTrajectory.prototype.getReplanReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setReplanReason = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearReplanReason = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasReplanReason = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * repeated apollo.hdmap.Id target_lane_id = 23;
 * @return {!Array<!proto.apollo.hdmap.Id>}
 */
proto.apollo.planning.ADCTrajectory.prototype.getTargetLaneIdList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Id>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_id_pb.Id, 23));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Id>} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setTargetLaneIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.apollo.hdmap.Id=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Id}
 */
proto.apollo.planning.ADCTrajectory.prototype.addTargetLaneId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.apollo.hdmap.Id, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearTargetLaneIdList = function() {
  return this.setTargetLaneIdList([]);
};


/**
 * optional bool car_in_dead_end = 24;
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.getCarInDeadEnd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.setCarInDeadEnd = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearCarInDeadEnd = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasCarInDeadEnd = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional RSSInfo rss_info = 100;
 * @return {?proto.apollo.planning.RSSInfo}
 */
proto.apollo.planning.ADCTrajectory.prototype.getRssInfo = function() {
  return /** @type{?proto.apollo.planning.RSSInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.RSSInfo, 100));
};


/**
 * @param {?proto.apollo.planning.RSSInfo|undefined} value
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
*/
proto.apollo.planning.ADCTrajectory.prototype.setRssInfo = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.ADCTrajectory} returns this
 */
proto.apollo.planning.ADCTrajectory.prototype.clearRssInfo = function() {
  return this.setRssInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.ADCTrajectory.prototype.hasRssInfo = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * @enum {number}
 */
proto.apollo.planning.JucType = {
  UNKNOWN: 0,
  IN_ROAD: 1,
  CROSS_ROAD: 2,
  FORK_ROAD: 3,
  MAIN_SIDE: 4,
  DEAD_END: 5
};

goog.object.extend(exports, proto.apollo.planning);
