// source: cyber/proto/scheduler_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cyber_proto_classic_conf_pb = require('../../cyber/proto/classic_conf_pb.js');
goog.object.extend(proto, cyber_proto_classic_conf_pb);
var cyber_proto_choreography_conf_pb = require('../../cyber/proto/choreography_conf_pb.js');
goog.object.extend(proto, cyber_proto_choreography_conf_pb);
goog.exportSymbol('proto.apollo.cyber.proto.InnerThread', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.SchedulerConf', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.InnerThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.InnerThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.InnerThread.displayName = 'proto.apollo.cyber.proto.InnerThread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.SchedulerConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.cyber.proto.SchedulerConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.cyber.proto.SchedulerConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.SchedulerConf.displayName = 'proto.apollo.cyber.proto.SchedulerConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.InnerThread.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.InnerThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.InnerThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.InnerThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    cpuset: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    policy: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    prio: jspb.Message.getFieldWithDefault(msg, 4, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of InnerThread as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.InnerThread.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.cpuset;

  /** @type {?|undefined} */
  this.policy;

  /** @type {?|undefined} */
  this.prio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.InnerThread.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.InnerThread}
 */
proto.apollo.cyber.proto.InnerThread.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.InnerThread();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.cpuset != null && jspb.Message.setField(msg, 2, obj.cpuset);
  obj.policy != null && jspb.Message.setField(msg, 3, obj.policy);
  obj.prio != null && jspb.Message.setField(msg, 4, obj.prio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.InnerThread}
 */
proto.apollo.cyber.proto.InnerThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.InnerThread;
  return proto.apollo.cyber.proto.InnerThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.InnerThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.InnerThread}
 */
proto.apollo.cyber.proto.InnerThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpuset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPolicy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.InnerThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.InnerThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.InnerThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.InnerThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.InnerThread.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.InnerThread.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string cpuset = 2;
 * @return {string}
 */
proto.apollo.cyber.proto.InnerThread.prototype.getCpuset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.setCpuset = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.clearCpuset = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.InnerThread.prototype.hasCpuset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string policy = 3;
 * @return {string}
 */
proto.apollo.cyber.proto.InnerThread.prototype.getPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.setPolicy = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.clearPolicy = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.InnerThread.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 prio = 4;
 * @return {number}
 */
proto.apollo.cyber.proto.InnerThread.prototype.getPrio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.setPrio = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.InnerThread} returns this
 */
proto.apollo.cyber.proto.InnerThread.prototype.clearPrio = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.InnerThread.prototype.hasPrio = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.cyber.proto.SchedulerConf.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.SchedulerConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.SchedulerConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SchedulerConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    policy: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    routineNum: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    defaultProcNum: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    processLevelCpuset: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    proto.apollo.cyber.proto.InnerThread.toObject, includeInstance),
    classicConf: (f = msg.getClassicConf()) && cyber_proto_classic_conf_pb.ClassicConf.toObject(includeInstance, f),
    choreographyConf: (f = msg.getChoreographyConf()) && cyber_proto_choreography_conf_pb.ChoreographyConf.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SchedulerConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.SchedulerConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.policy;

  /** @type {?|undefined} */
  this.routineNum;

  /** @type {?|undefined} */
  this.defaultProcNum;

  /** @type {?|undefined} */
  this.processLevelCpuset;

  /** @type {?|undefined} */
  this.threadsList;

  /** @type {?|undefined} */
  this.classicConf;

  /** @type {?|undefined} */
  this.choreographyConf;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.SchedulerConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.SchedulerConf}
 */
proto.apollo.cyber.proto.SchedulerConf.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.SchedulerConf();
  obj.policy != null && jspb.Message.setField(msg, 1, obj.policy);
  obj.routineNum != null && jspb.Message.setField(msg, 2, obj.routineNum);
  obj.defaultProcNum != null && jspb.Message.setField(msg, 3, obj.defaultProcNum);
  obj.processLevelCpuset != null && jspb.Message.setField(msg, 4, obj.processLevelCpuset);
  obj.threadsList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.threadsList.map(
          proto.apollo.cyber.proto.InnerThread.fromObject));
  obj.classicConf && jspb.Message.setWrapperField(
      msg, 6, cyber_proto_classic_conf_pb.ClassicConf.fromObject(obj.classicConf));
  obj.choreographyConf && jspb.Message.setWrapperField(
      msg, 7, cyber_proto_choreography_conf_pb.ChoreographyConf.fromObject(obj.choreographyConf));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.SchedulerConf}
 */
proto.apollo.cyber.proto.SchedulerConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.SchedulerConf;
  return proto.apollo.cyber.proto.SchedulerConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.SchedulerConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.SchedulerConf}
 */
proto.apollo.cyber.proto.SchedulerConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPolicy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoutineNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultProcNum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessLevelCpuset(value);
      break;
    case 5:
      var value = new proto.apollo.cyber.proto.InnerThread;
      reader.readMessage(value,proto.apollo.cyber.proto.InnerThread.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    case 6:
      var value = new cyber_proto_classic_conf_pb.ClassicConf;
      reader.readMessage(value,cyber_proto_classic_conf_pb.ClassicConf.deserializeBinaryFromReader);
      msg.setClassicConf(value);
      break;
    case 7:
      var value = new cyber_proto_choreography_conf_pb.ChoreographyConf;
      reader.readMessage(value,cyber_proto_choreography_conf_pb.ChoreographyConf.deserializeBinaryFromReader);
      msg.setChoreographyConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.SchedulerConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.SchedulerConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.SchedulerConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.cyber.proto.InnerThread.serializeBinaryToWriter
    );
  }
  f = message.getClassicConf();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      cyber_proto_classic_conf_pb.ClassicConf.serializeBinaryToWriter
    );
  }
  f = message.getChoreographyConf();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      cyber_proto_choreography_conf_pb.ChoreographyConf.serializeBinaryToWriter
    );
  }
};


/**
 * optional string policy = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.getPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.setPolicy = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.clearPolicy = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 routine_num = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.getRoutineNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.setRoutineNum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.clearRoutineNum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.hasRoutineNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 default_proc_num = 3;
 * @return {number}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.getDefaultProcNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.setDefaultProcNum = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.clearDefaultProcNum = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.hasDefaultProcNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string process_level_cpuset = 4;
 * @return {string}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.getProcessLevelCpuset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.setProcessLevelCpuset = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.clearProcessLevelCpuset = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.hasProcessLevelCpuset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated InnerThread threads = 5;
 * @return {!Array<!proto.apollo.cyber.proto.InnerThread>}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.getThreadsList = function() {
  return /** @type{!Array<!proto.apollo.cyber.proto.InnerThread>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.cyber.proto.InnerThread, 5));
};


/**
 * @param {!Array<!proto.apollo.cyber.proto.InnerThread>} value
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
*/
proto.apollo.cyber.proto.SchedulerConf.prototype.setThreadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.cyber.proto.InnerThread=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.cyber.proto.InnerThread}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.cyber.proto.InnerThread, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.clearThreadsList = function() {
  return this.setThreadsList([]);
};


/**
 * optional ClassicConf classic_conf = 6;
 * @return {?proto.apollo.cyber.proto.ClassicConf}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.getClassicConf = function() {
  return /** @type{?proto.apollo.cyber.proto.ClassicConf} */ (
    jspb.Message.getWrapperField(this, cyber_proto_classic_conf_pb.ClassicConf, 6));
};


/**
 * @param {?proto.apollo.cyber.proto.ClassicConf|undefined} value
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
*/
proto.apollo.cyber.proto.SchedulerConf.prototype.setClassicConf = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.clearClassicConf = function() {
  return this.setClassicConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.hasClassicConf = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ChoreographyConf choreography_conf = 7;
 * @return {?proto.apollo.cyber.proto.ChoreographyConf}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.getChoreographyConf = function() {
  return /** @type{?proto.apollo.cyber.proto.ChoreographyConf} */ (
    jspb.Message.getWrapperField(this, cyber_proto_choreography_conf_pb.ChoreographyConf, 7));
};


/**
 * @param {?proto.apollo.cyber.proto.ChoreographyConf|undefined} value
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
*/
proto.apollo.cyber.proto.SchedulerConf.prototype.setChoreographyConf = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.cyber.proto.SchedulerConf} returns this
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.clearChoreographyConf = function() {
  return this.setChoreographyConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.SchedulerConf.prototype.hasChoreographyConf = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.apollo.cyber.proto);
