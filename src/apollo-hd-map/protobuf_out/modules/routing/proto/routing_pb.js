// source: modules/routing/proto/routing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_common_proto_geometry_pb = require('../../../modules/common/proto/geometry_pb.js');
goog.object.extend(proto, modules_common_proto_geometry_pb);
var modules_common_proto_error_code_pb = require('../../../modules/common/proto/error_code_pb.js');
goog.object.extend(proto, modules_common_proto_error_code_pb);
var modules_map_proto_map_parking_space_pb = require('../../../modules/map/proto/map_parking_space_pb.js');
goog.object.extend(proto, modules_map_proto_map_parking_space_pb);
var modules_map_proto_map_geometry_pb = require('../../../modules/map/proto/map_geometry_pb.js');
goog.object.extend(proto, modules_map_proto_map_geometry_pb);
goog.exportSymbol('proto.apollo.routing.ChangeLaneType', null, global);
goog.exportSymbol('proto.apollo.routing.DeadEndInfo', null, global);
goog.exportSymbol('proto.apollo.routing.DeadEndRoutingType', null, global);
goog.exportSymbol('proto.apollo.routing.LaneSegment', null, global);
goog.exportSymbol('proto.apollo.routing.LaneWaypoint', null, global);
goog.exportSymbol('proto.apollo.routing.Measurement', null, global);
goog.exportSymbol('proto.apollo.routing.ParkingInfo', null, global);
goog.exportSymbol('proto.apollo.routing.ParkingSpaceType', null, global);
goog.exportSymbol('proto.apollo.routing.Passage', null, global);
goog.exportSymbol('proto.apollo.routing.RoadSegment', null, global);
goog.exportSymbol('proto.apollo.routing.RoutingRequest', null, global);
goog.exportSymbol('proto.apollo.routing.RoutingResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.LaneWaypoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.LaneWaypoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.LaneWaypoint.displayName = 'proto.apollo.routing.LaneWaypoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.LaneSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.LaneSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.LaneSegment.displayName = 'proto.apollo.routing.LaneSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.ParkingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.ParkingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.ParkingInfo.displayName = 'proto.apollo.routing.ParkingInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.DeadEndInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.DeadEndInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.DeadEndInfo.displayName = 'proto.apollo.routing.DeadEndInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.RoutingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.routing.RoutingRequest.repeatedFields_, null);
};
goog.inherits(proto.apollo.routing.RoutingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.RoutingRequest.displayName = 'proto.apollo.routing.RoutingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.Measurement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.routing.Measurement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.Measurement.displayName = 'proto.apollo.routing.Measurement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.Passage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.routing.Passage.repeatedFields_, null);
};
goog.inherits(proto.apollo.routing.Passage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.Passage.displayName = 'proto.apollo.routing.Passage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.RoadSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.routing.RoadSegment.repeatedFields_, null);
};
goog.inherits(proto.apollo.routing.RoadSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.RoadSegment.displayName = 'proto.apollo.routing.RoadSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.routing.RoutingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.routing.RoutingResponse.repeatedFields_, null);
};
goog.inherits(proto.apollo.routing.RoutingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.routing.RoutingResponse.displayName = 'proto.apollo.routing.RoutingResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.LaneWaypoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.LaneWaypoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.LaneWaypoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.LaneWaypoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    pose: (f = msg.getPose()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneWaypoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.LaneWaypoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.pose;

  /** @type {?|undefined} */
  this.heading;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.LaneWaypoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.LaneWaypoint}
 */
proto.apollo.routing.LaneWaypoint.fromObject = function(obj) {
  var msg = new proto.apollo.routing.LaneWaypoint();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.s != null && jspb.Message.setField(msg, 2, obj.s);
  obj.pose && jspb.Message.setWrapperField(
      msg, 3, modules_common_proto_geometry_pb.PointENU.fromObject(obj.pose));
  obj.heading != null && jspb.Message.setField(msg, 4, obj.heading);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.LaneWaypoint}
 */
proto.apollo.routing.LaneWaypoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.LaneWaypoint;
  return proto.apollo.routing.LaneWaypoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.LaneWaypoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.LaneWaypoint}
 */
proto.apollo.routing.LaneWaypoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 3:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.LaneWaypoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.LaneWaypoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.LaneWaypoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.LaneWaypoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.routing.LaneWaypoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
 */
proto.apollo.routing.LaneWaypoint.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
 */
proto.apollo.routing.LaneWaypoint.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.LaneWaypoint.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double s = 2;
 * @return {number}
 */
proto.apollo.routing.LaneWaypoint.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
 */
proto.apollo.routing.LaneWaypoint.prototype.setS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
 */
proto.apollo.routing.LaneWaypoint.prototype.clearS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.LaneWaypoint.prototype.hasS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional apollo.common.PointENU pose = 3;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.routing.LaneWaypoint.prototype.getPose = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 3));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
*/
proto.apollo.routing.LaneWaypoint.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
 */
proto.apollo.routing.LaneWaypoint.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.LaneWaypoint.prototype.hasPose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double heading = 4;
 * @return {number}
 */
proto.apollo.routing.LaneWaypoint.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
 */
proto.apollo.routing.LaneWaypoint.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.LaneWaypoint} returns this
 */
proto.apollo.routing.LaneWaypoint.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.LaneWaypoint.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.LaneSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.LaneSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.LaneSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.LaneSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    startS: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    endS: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneSegment as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.LaneSegment.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.startS;

  /** @type {?|undefined} */
  this.endS;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.LaneSegment.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.LaneSegment}
 */
proto.apollo.routing.LaneSegment.fromObject = function(obj) {
  var msg = new proto.apollo.routing.LaneSegment();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.startS != null && jspb.Message.setField(msg, 2, obj.startS);
  obj.endS != null && jspb.Message.setField(msg, 3, obj.endS);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.LaneSegment}
 */
proto.apollo.routing.LaneSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.LaneSegment;
  return proto.apollo.routing.LaneSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.LaneSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.LaneSegment}
 */
proto.apollo.routing.LaneSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.LaneSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.LaneSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.LaneSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.LaneSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.routing.LaneSegment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.LaneSegment} returns this
 */
proto.apollo.routing.LaneSegment.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.LaneSegment} returns this
 */
proto.apollo.routing.LaneSegment.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.LaneSegment.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double start_s = 2;
 * @return {number}
 */
proto.apollo.routing.LaneSegment.prototype.getStartS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.LaneSegment} returns this
 */
proto.apollo.routing.LaneSegment.prototype.setStartS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.LaneSegment} returns this
 */
proto.apollo.routing.LaneSegment.prototype.clearStartS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.LaneSegment.prototype.hasStartS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double end_s = 3;
 * @return {number}
 */
proto.apollo.routing.LaneSegment.prototype.getEndS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.LaneSegment} returns this
 */
proto.apollo.routing.LaneSegment.prototype.setEndS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.LaneSegment} returns this
 */
proto.apollo.routing.LaneSegment.prototype.clearEndS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.LaneSegment.prototype.hasEndS = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.ParkingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.ParkingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.ParkingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.ParkingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    parkingSpaceId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    parkingPoint: (f = msg.getParkingPoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f),
    parkingSpaceType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    cornerPoint: (f = msg.getCornerPoint()) && modules_map_proto_map_geometry_pb.Polygon.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ParkingInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.ParkingInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.parkingSpaceId;

  /** @type {?|undefined} */
  this.parkingPoint;

  /** @type {?|undefined} */
  this.parkingSpaceType;

  /** @type {?|undefined} */
  this.cornerPoint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.ParkingInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.ParkingInfo}
 */
proto.apollo.routing.ParkingInfo.fromObject = function(obj) {
  var msg = new proto.apollo.routing.ParkingInfo();
  obj.parkingSpaceId != null && jspb.Message.setField(msg, 1, obj.parkingSpaceId);
  obj.parkingPoint && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.PointENU.fromObject(obj.parkingPoint));
  obj.parkingSpaceType != null && jspb.Message.setField(msg, 3, obj.parkingSpaceType);
  obj.cornerPoint && jspb.Message.setWrapperField(
      msg, 4, modules_map_proto_map_geometry_pb.Polygon.fromObject(obj.cornerPoint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.ParkingInfo}
 */
proto.apollo.routing.ParkingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.ParkingInfo;
  return proto.apollo.routing.ParkingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.ParkingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.ParkingInfo}
 */
proto.apollo.routing.ParkingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParkingSpaceId(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setParkingPoint(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.routing.ParkingSpaceType} */ (reader.readEnum());
      msg.setParkingSpaceType(value);
      break;
    case 4:
      var value = new modules_map_proto_map_geometry_pb.Polygon;
      reader.readMessage(value,modules_map_proto_map_geometry_pb.Polygon.deserializeBinaryFromReader);
      msg.setCornerPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.ParkingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.ParkingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.ParkingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.ParkingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParkingPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.routing.ParkingSpaceType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCornerPoint();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_map_proto_map_geometry_pb.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * optional string parking_space_id = 1;
 * @return {string}
 */
proto.apollo.routing.ParkingInfo.prototype.getParkingSpaceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.ParkingInfo} returns this
 */
proto.apollo.routing.ParkingInfo.prototype.setParkingSpaceId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.ParkingInfo} returns this
 */
proto.apollo.routing.ParkingInfo.prototype.clearParkingSpaceId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.ParkingInfo.prototype.hasParkingSpaceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.PointENU parking_point = 2;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.routing.ParkingInfo.prototype.getParkingPoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 2));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.routing.ParkingInfo} returns this
*/
proto.apollo.routing.ParkingInfo.prototype.setParkingPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.ParkingInfo} returns this
 */
proto.apollo.routing.ParkingInfo.prototype.clearParkingPoint = function() {
  return this.setParkingPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.ParkingInfo.prototype.hasParkingPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ParkingSpaceType parking_space_type = 3;
 * @return {!proto.apollo.routing.ParkingSpaceType}
 */
proto.apollo.routing.ParkingInfo.prototype.getParkingSpaceType = function() {
  return /** @type {!proto.apollo.routing.ParkingSpaceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.routing.ParkingSpaceType} value
 * @return {!proto.apollo.routing.ParkingInfo} returns this
 */
proto.apollo.routing.ParkingInfo.prototype.setParkingSpaceType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.ParkingInfo} returns this
 */
proto.apollo.routing.ParkingInfo.prototype.clearParkingSpaceType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.ParkingInfo.prototype.hasParkingSpaceType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional apollo.hdmap.Polygon corner_point = 4;
 * @return {?proto.apollo.hdmap.Polygon}
 */
proto.apollo.routing.ParkingInfo.prototype.getCornerPoint = function() {
  return /** @type{?proto.apollo.hdmap.Polygon} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_geometry_pb.Polygon, 4));
};


/**
 * @param {?proto.apollo.hdmap.Polygon|undefined} value
 * @return {!proto.apollo.routing.ParkingInfo} returns this
*/
proto.apollo.routing.ParkingInfo.prototype.setCornerPoint = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.ParkingInfo} returns this
 */
proto.apollo.routing.ParkingInfo.prototype.clearCornerPoint = function() {
  return this.setCornerPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.ParkingInfo.prototype.hasCornerPoint = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.DeadEndInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.DeadEndInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.DeadEndInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.DeadEndInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deadEndRoutingType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    targetPoint: (f = msg.getTargetPoint()) && modules_common_proto_geometry_pb.PointENU.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DeadEndInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.DeadEndInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.deadEndRoutingType;

  /** @type {?|undefined} */
  this.targetPoint;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.DeadEndInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.DeadEndInfo}
 */
proto.apollo.routing.DeadEndInfo.fromObject = function(obj) {
  var msg = new proto.apollo.routing.DeadEndInfo();
  obj.deadEndRoutingType != null && jspb.Message.setField(msg, 1, obj.deadEndRoutingType);
  obj.targetPoint && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_geometry_pb.PointENU.fromObject(obj.targetPoint));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.DeadEndInfo}
 */
proto.apollo.routing.DeadEndInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.DeadEndInfo;
  return proto.apollo.routing.DeadEndInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.DeadEndInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.DeadEndInfo}
 */
proto.apollo.routing.DeadEndInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.routing.DeadEndRoutingType} */ (reader.readEnum());
      msg.setDeadEndRoutingType(value);
      break;
    case 2:
      var value = new modules_common_proto_geometry_pb.PointENU;
      reader.readMessage(value,modules_common_proto_geometry_pb.PointENU.deserializeBinaryFromReader);
      msg.setTargetPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.DeadEndInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.DeadEndInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.DeadEndInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.DeadEndInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.routing.DeadEndRoutingType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTargetPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_geometry_pb.PointENU.serializeBinaryToWriter
    );
  }
};


/**
 * optional DeadEndRoutingType dead_end_routing_type = 1;
 * @return {!proto.apollo.routing.DeadEndRoutingType}
 */
proto.apollo.routing.DeadEndInfo.prototype.getDeadEndRoutingType = function() {
  return /** @type {!proto.apollo.routing.DeadEndRoutingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.routing.DeadEndRoutingType} value
 * @return {!proto.apollo.routing.DeadEndInfo} returns this
 */
proto.apollo.routing.DeadEndInfo.prototype.setDeadEndRoutingType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.DeadEndInfo} returns this
 */
proto.apollo.routing.DeadEndInfo.prototype.clearDeadEndRoutingType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.DeadEndInfo.prototype.hasDeadEndRoutingType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.PointENU target_point = 2;
 * @return {?proto.apollo.common.PointENU}
 */
proto.apollo.routing.DeadEndInfo.prototype.getTargetPoint = function() {
  return /** @type{?proto.apollo.common.PointENU} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_geometry_pb.PointENU, 2));
};


/**
 * @param {?proto.apollo.common.PointENU|undefined} value
 * @return {!proto.apollo.routing.DeadEndInfo} returns this
*/
proto.apollo.routing.DeadEndInfo.prototype.setTargetPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.DeadEndInfo} returns this
 */
proto.apollo.routing.DeadEndInfo.prototype.clearTargetPoint = function() {
  return this.setTargetPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.DeadEndInfo.prototype.hasTargetPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.routing.RoutingRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.RoutingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.RoutingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.RoutingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.RoutingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    waypointList: jspb.Message.toObjectList(msg.getWaypointList(),
    proto.apollo.routing.LaneWaypoint.toObject, includeInstance),
    blacklistedLaneList: jspb.Message.toObjectList(msg.getBlacklistedLaneList(),
    proto.apollo.routing.LaneSegment.toObject, includeInstance),
    blacklistedRoadList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    broadcast: jspb.Message.getBooleanFieldWithDefault(msg, 5, true),
    parkingSpace: (f = msg.getParkingSpace()) && modules_map_proto_map_parking_space_pb.ParkingSpace.toObject(includeInstance, f),
    parkingInfo: (f = msg.getParkingInfo()) && proto.apollo.routing.ParkingInfo.toObject(includeInstance, f),
    deadEndInfo: (f = msg.getDeadEndInfo()) && proto.apollo.routing.DeadEndInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RoutingRequest as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.RoutingRequest.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.waypointList;

  /** @type {?|undefined} */
  this.blacklistedLaneList;

  /** @type {?|undefined} */
  this.blacklistedRoadList;

  /** @type {?|undefined} */
  this.broadcast;

  /** @type {?|undefined} */
  this.parkingSpace;

  /** @type {?|undefined} */
  this.parkingInfo;

  /** @type {?|undefined} */
  this.deadEndInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.RoutingRequest.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.RoutingRequest}
 */
proto.apollo.routing.RoutingRequest.fromObject = function(obj) {
  var msg = new proto.apollo.routing.RoutingRequest();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.waypointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.waypointList.map(
          proto.apollo.routing.LaneWaypoint.fromObject));
  obj.blacklistedLaneList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.blacklistedLaneList.map(
          proto.apollo.routing.LaneSegment.fromObject));
  obj.blacklistedRoadList != null && jspb.Message.setField(msg, 4, obj.blacklistedRoadList);
  obj.broadcast != null && jspb.Message.setField(msg, 5, obj.broadcast);
  obj.parkingSpace && jspb.Message.setWrapperField(
      msg, 6, modules_map_proto_map_parking_space_pb.ParkingSpace.fromObject(obj.parkingSpace));
  obj.parkingInfo && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.routing.ParkingInfo.fromObject(obj.parkingInfo));
  obj.deadEndInfo && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.routing.DeadEndInfo.fromObject(obj.deadEndInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.RoutingRequest}
 */
proto.apollo.routing.RoutingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.RoutingRequest;
  return proto.apollo.routing.RoutingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.RoutingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.RoutingRequest}
 */
proto.apollo.routing.RoutingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.apollo.routing.LaneWaypoint;
      reader.readMessage(value,proto.apollo.routing.LaneWaypoint.deserializeBinaryFromReader);
      msg.addWaypoint(value);
      break;
    case 3:
      var value = new proto.apollo.routing.LaneSegment;
      reader.readMessage(value,proto.apollo.routing.LaneSegment.deserializeBinaryFromReader);
      msg.addBlacklistedLane(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlacklistedRoad(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBroadcast(value);
      break;
    case 6:
      var value = new modules_map_proto_map_parking_space_pb.ParkingSpace;
      reader.readMessage(value,modules_map_proto_map_parking_space_pb.ParkingSpace.deserializeBinaryFromReader);
      msg.setParkingSpace(value);
      break;
    case 7:
      var value = new proto.apollo.routing.ParkingInfo;
      reader.readMessage(value,proto.apollo.routing.ParkingInfo.deserializeBinaryFromReader);
      msg.setParkingInfo(value);
      break;
    case 8:
      var value = new proto.apollo.routing.DeadEndInfo;
      reader.readMessage(value,proto.apollo.routing.DeadEndInfo.deserializeBinaryFromReader);
      msg.setDeadEndInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.RoutingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.RoutingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.RoutingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.RoutingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getWaypointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.routing.LaneWaypoint.serializeBinaryToWriter
    );
  }
  f = message.getBlacklistedLaneList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.routing.LaneSegment.serializeBinaryToWriter
    );
  }
  f = message.getBlacklistedRoadList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getParkingSpace();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      modules_map_proto_map_parking_space_pb.ParkingSpace.serializeBinaryToWriter
    );
  }
  f = message.getParkingInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.routing.ParkingInfo.serializeBinaryToWriter
    );
  }
  f = message.getDeadEndInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.routing.DeadEndInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.routing.RoutingRequest.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
*/
proto.apollo.routing.RoutingRequest.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LaneWaypoint waypoint = 2;
 * @return {!Array<!proto.apollo.routing.LaneWaypoint>}
 */
proto.apollo.routing.RoutingRequest.prototype.getWaypointList = function() {
  return /** @type{!Array<!proto.apollo.routing.LaneWaypoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.LaneWaypoint, 2));
};


/**
 * @param {!Array<!proto.apollo.routing.LaneWaypoint>} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
*/
proto.apollo.routing.RoutingRequest.prototype.setWaypointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.routing.LaneWaypoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.LaneWaypoint}
 */
proto.apollo.routing.RoutingRequest.prototype.addWaypoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.routing.LaneWaypoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearWaypointList = function() {
  return this.setWaypointList([]);
};


/**
 * repeated LaneSegment blacklisted_lane = 3;
 * @return {!Array<!proto.apollo.routing.LaneSegment>}
 */
proto.apollo.routing.RoutingRequest.prototype.getBlacklistedLaneList = function() {
  return /** @type{!Array<!proto.apollo.routing.LaneSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.LaneSegment, 3));
};


/**
 * @param {!Array<!proto.apollo.routing.LaneSegment>} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
*/
proto.apollo.routing.RoutingRequest.prototype.setBlacklistedLaneList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.routing.LaneSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.LaneSegment}
 */
proto.apollo.routing.RoutingRequest.prototype.addBlacklistedLane = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.routing.LaneSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearBlacklistedLaneList = function() {
  return this.setBlacklistedLaneList([]);
};


/**
 * repeated string blacklisted_road = 4;
 * @return {!Array<string>}
 */
proto.apollo.routing.RoutingRequest.prototype.getBlacklistedRoadList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.setBlacklistedRoadList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.addBlacklistedRoad = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearBlacklistedRoadList = function() {
  return this.setBlacklistedRoadList([]);
};


/**
 * optional bool broadcast = 5;
 * @return {boolean}
 */
proto.apollo.routing.RoutingRequest.prototype.getBroadcast = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.setBroadcast = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearBroadcast = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingRequest.prototype.hasBroadcast = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional apollo.hdmap.ParkingSpace parking_space = 6;
 * @return {?proto.apollo.hdmap.ParkingSpace}
 */
proto.apollo.routing.RoutingRequest.prototype.getParkingSpace = function() {
  return /** @type{?proto.apollo.hdmap.ParkingSpace} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_parking_space_pb.ParkingSpace, 6));
};


/**
 * @param {?proto.apollo.hdmap.ParkingSpace|undefined} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
*/
proto.apollo.routing.RoutingRequest.prototype.setParkingSpace = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearParkingSpace = function() {
  return this.setParkingSpace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingRequest.prototype.hasParkingSpace = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ParkingInfo parking_info = 7;
 * @return {?proto.apollo.routing.ParkingInfo}
 */
proto.apollo.routing.RoutingRequest.prototype.getParkingInfo = function() {
  return /** @type{?proto.apollo.routing.ParkingInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.routing.ParkingInfo, 7));
};


/**
 * @param {?proto.apollo.routing.ParkingInfo|undefined} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
*/
proto.apollo.routing.RoutingRequest.prototype.setParkingInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearParkingInfo = function() {
  return this.setParkingInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingRequest.prototype.hasParkingInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DeadEndInfo dead_end_info = 8;
 * @return {?proto.apollo.routing.DeadEndInfo}
 */
proto.apollo.routing.RoutingRequest.prototype.getDeadEndInfo = function() {
  return /** @type{?proto.apollo.routing.DeadEndInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.routing.DeadEndInfo, 8));
};


/**
 * @param {?proto.apollo.routing.DeadEndInfo|undefined} value
 * @return {!proto.apollo.routing.RoutingRequest} returns this
*/
proto.apollo.routing.RoutingRequest.prototype.setDeadEndInfo = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingRequest} returns this
 */
proto.apollo.routing.RoutingRequest.prototype.clearDeadEndInfo = function() {
  return this.setDeadEndInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingRequest.prototype.hasDeadEndInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.Measurement.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.Measurement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.Measurement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Measurement.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Measurement as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.Measurement.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.distance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.Measurement.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.Measurement}
 */
proto.apollo.routing.Measurement.fromObject = function(obj) {
  var msg = new proto.apollo.routing.Measurement();
  obj.distance != null && jspb.Message.setField(msg, 1, obj.distance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.Measurement}
 */
proto.apollo.routing.Measurement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.Measurement;
  return proto.apollo.routing.Measurement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.Measurement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.Measurement}
 */
proto.apollo.routing.Measurement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.Measurement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.Measurement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.Measurement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Measurement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double distance = 1;
 * @return {number}
 */
proto.apollo.routing.Measurement.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.routing.Measurement} returns this
 */
proto.apollo.routing.Measurement.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Measurement} returns this
 */
proto.apollo.routing.Measurement.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Measurement.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.routing.Passage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.Passage.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.Passage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.Passage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Passage.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentList: jspb.Message.toObjectList(msg.getSegmentList(),
    proto.apollo.routing.LaneSegment.toObject, includeInstance),
    canExit: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    changeLaneType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Passage as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.Passage.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.segmentList;

  /** @type {?|undefined} */
  this.canExit;

  /** @type {?|undefined} */
  this.changeLaneType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.Passage.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.Passage}
 */
proto.apollo.routing.Passage.fromObject = function(obj) {
  var msg = new proto.apollo.routing.Passage();
  obj.segmentList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.segmentList.map(
          proto.apollo.routing.LaneSegment.fromObject));
  obj.canExit != null && jspb.Message.setField(msg, 2, obj.canExit);
  obj.changeLaneType != null && jspb.Message.setField(msg, 3, obj.changeLaneType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.Passage}
 */
proto.apollo.routing.Passage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.Passage;
  return proto.apollo.routing.Passage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.Passage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.Passage}
 */
proto.apollo.routing.Passage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.routing.LaneSegment;
      reader.readMessage(value,proto.apollo.routing.LaneSegment.deserializeBinaryFromReader);
      msg.addSegment(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanExit(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.routing.ChangeLaneType} */ (reader.readEnum());
      msg.setChangeLaneType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.Passage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.Passage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.Passage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.Passage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.routing.LaneSegment.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated LaneSegment segment = 1;
 * @return {!Array<!proto.apollo.routing.LaneSegment>}
 */
proto.apollo.routing.Passage.prototype.getSegmentList = function() {
  return /** @type{!Array<!proto.apollo.routing.LaneSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.LaneSegment, 1));
};


/**
 * @param {!Array<!proto.apollo.routing.LaneSegment>} value
 * @return {!proto.apollo.routing.Passage} returns this
*/
proto.apollo.routing.Passage.prototype.setSegmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.routing.LaneSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.LaneSegment}
 */
proto.apollo.routing.Passage.prototype.addSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.routing.LaneSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.Passage} returns this
 */
proto.apollo.routing.Passage.prototype.clearSegmentList = function() {
  return this.setSegmentList([]);
};


/**
 * optional bool can_exit = 2;
 * @return {boolean}
 */
proto.apollo.routing.Passage.prototype.getCanExit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.routing.Passage} returns this
 */
proto.apollo.routing.Passage.prototype.setCanExit = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Passage} returns this
 */
proto.apollo.routing.Passage.prototype.clearCanExit = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Passage.prototype.hasCanExit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChangeLaneType change_lane_type = 3;
 * @return {!proto.apollo.routing.ChangeLaneType}
 */
proto.apollo.routing.Passage.prototype.getChangeLaneType = function() {
  return /** @type {!proto.apollo.routing.ChangeLaneType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.routing.ChangeLaneType} value
 * @return {!proto.apollo.routing.Passage} returns this
 */
proto.apollo.routing.Passage.prototype.setChangeLaneType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.Passage} returns this
 */
proto.apollo.routing.Passage.prototype.clearChangeLaneType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.Passage.prototype.hasChangeLaneType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.routing.RoadSegment.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.RoadSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.RoadSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.RoadSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.RoadSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    passageList: jspb.Message.toObjectList(msg.getPassageList(),
    proto.apollo.routing.Passage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RoadSegment as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.RoadSegment.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.passageList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.RoadSegment.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.RoadSegment}
 */
proto.apollo.routing.RoadSegment.fromObject = function(obj) {
  var msg = new proto.apollo.routing.RoadSegment();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.passageList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.passageList.map(
          proto.apollo.routing.Passage.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.RoadSegment}
 */
proto.apollo.routing.RoadSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.RoadSegment;
  return proto.apollo.routing.RoadSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.RoadSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.RoadSegment}
 */
proto.apollo.routing.RoadSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.routing.Passage;
      reader.readMessage(value,proto.apollo.routing.Passage.deserializeBinaryFromReader);
      msg.addPassage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.RoadSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.RoadSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.RoadSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.RoadSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.routing.Passage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.routing.RoadSegment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.routing.RoadSegment} returns this
 */
proto.apollo.routing.RoadSegment.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.RoadSegment} returns this
 */
proto.apollo.routing.RoadSegment.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoadSegment.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Passage passage = 2;
 * @return {!Array<!proto.apollo.routing.Passage>}
 */
proto.apollo.routing.RoadSegment.prototype.getPassageList = function() {
  return /** @type{!Array<!proto.apollo.routing.Passage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.Passage, 2));
};


/**
 * @param {!Array<!proto.apollo.routing.Passage>} value
 * @return {!proto.apollo.routing.RoadSegment} returns this
*/
proto.apollo.routing.RoadSegment.prototype.setPassageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.routing.Passage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.Passage}
 */
proto.apollo.routing.RoadSegment.prototype.addPassage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.routing.Passage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.RoadSegment} returns this
 */
proto.apollo.routing.RoadSegment.prototype.clearPassageList = function() {
  return this.setPassageList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.routing.RoutingResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.routing.RoutingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.routing.RoutingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.routing.RoutingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.RoutingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    roadList: jspb.Message.toObjectList(msg.getRoadList(),
    proto.apollo.routing.RoadSegment.toObject, includeInstance),
    measurement: (f = msg.getMeasurement()) && proto.apollo.routing.Measurement.toObject(includeInstance, f),
    routingRequest: (f = msg.getRoutingRequest()) && proto.apollo.routing.RoutingRequest.toObject(includeInstance, f),
    mapVersion: msg.getMapVersion_asB64(),
    status: (f = msg.getStatus()) && modules_common_proto_error_code_pb.StatusPb.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RoutingResponse as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.routing.RoutingResponse.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.roadList;

  /** @type {?|undefined} */
  this.measurement;

  /** @type {?|undefined} */
  this.routingRequest;

  /** @type {?|undefined} */
  this.mapVersion;

  /** @type {?|undefined} */
  this.status;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.routing.RoutingResponse.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.routing.RoutingResponse}
 */
proto.apollo.routing.RoutingResponse.fromObject = function(obj) {
  var msg = new proto.apollo.routing.RoutingResponse();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.roadList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.roadList.map(
          proto.apollo.routing.RoadSegment.fromObject));
  obj.measurement && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.routing.Measurement.fromObject(obj.measurement));
  obj.routingRequest && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.routing.RoutingRequest.fromObject(obj.routingRequest));
  obj.mapVersion != null && jspb.Message.setField(msg, 5, obj.mapVersion);
  obj.status && jspb.Message.setWrapperField(
      msg, 6, modules_common_proto_error_code_pb.StatusPb.fromObject(obj.status));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.routing.RoutingResponse}
 */
proto.apollo.routing.RoutingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.routing.RoutingResponse;
  return proto.apollo.routing.RoutingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.routing.RoutingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.routing.RoutingResponse}
 */
proto.apollo.routing.RoutingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.apollo.routing.RoadSegment;
      reader.readMessage(value,proto.apollo.routing.RoadSegment.deserializeBinaryFromReader);
      msg.addRoad(value);
      break;
    case 3:
      var value = new proto.apollo.routing.Measurement;
      reader.readMessage(value,proto.apollo.routing.Measurement.deserializeBinaryFromReader);
      msg.setMeasurement(value);
      break;
    case 4:
      var value = new proto.apollo.routing.RoutingRequest;
      reader.readMessage(value,proto.apollo.routing.RoutingRequest.deserializeBinaryFromReader);
      msg.setRoutingRequest(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMapVersion(value);
      break;
    case 6:
      var value = new modules_common_proto_error_code_pb.StatusPb;
      reader.readMessage(value,modules_common_proto_error_code_pb.StatusPb.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.routing.RoutingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.routing.RoutingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.routing.RoutingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.routing.RoutingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getRoadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.routing.RoadSegment.serializeBinaryToWriter
    );
  }
  f = message.getMeasurement();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.routing.Measurement.serializeBinaryToWriter
    );
  }
  f = message.getRoutingRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.routing.RoutingRequest.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      modules_common_proto_error_code_pb.StatusPb.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.routing.RoutingResponse.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.routing.RoutingResponse} returns this
*/
proto.apollo.routing.RoutingResponse.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingResponse} returns this
 */
proto.apollo.routing.RoutingResponse.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingResponse.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RoadSegment road = 2;
 * @return {!Array<!proto.apollo.routing.RoadSegment>}
 */
proto.apollo.routing.RoutingResponse.prototype.getRoadList = function() {
  return /** @type{!Array<!proto.apollo.routing.RoadSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.routing.RoadSegment, 2));
};


/**
 * @param {!Array<!proto.apollo.routing.RoadSegment>} value
 * @return {!proto.apollo.routing.RoutingResponse} returns this
*/
proto.apollo.routing.RoutingResponse.prototype.setRoadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.routing.RoadSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.routing.RoadSegment}
 */
proto.apollo.routing.RoutingResponse.prototype.addRoad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.routing.RoadSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.routing.RoutingResponse} returns this
 */
proto.apollo.routing.RoutingResponse.prototype.clearRoadList = function() {
  return this.setRoadList([]);
};


/**
 * optional Measurement measurement = 3;
 * @return {?proto.apollo.routing.Measurement}
 */
proto.apollo.routing.RoutingResponse.prototype.getMeasurement = function() {
  return /** @type{?proto.apollo.routing.Measurement} */ (
    jspb.Message.getWrapperField(this, proto.apollo.routing.Measurement, 3));
};


/**
 * @param {?proto.apollo.routing.Measurement|undefined} value
 * @return {!proto.apollo.routing.RoutingResponse} returns this
*/
proto.apollo.routing.RoutingResponse.prototype.setMeasurement = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingResponse} returns this
 */
proto.apollo.routing.RoutingResponse.prototype.clearMeasurement = function() {
  return this.setMeasurement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingResponse.prototype.hasMeasurement = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RoutingRequest routing_request = 4;
 * @return {?proto.apollo.routing.RoutingRequest}
 */
proto.apollo.routing.RoutingResponse.prototype.getRoutingRequest = function() {
  return /** @type{?proto.apollo.routing.RoutingRequest} */ (
    jspb.Message.getWrapperField(this, proto.apollo.routing.RoutingRequest, 4));
};


/**
 * @param {?proto.apollo.routing.RoutingRequest|undefined} value
 * @return {!proto.apollo.routing.RoutingResponse} returns this
*/
proto.apollo.routing.RoutingResponse.prototype.setRoutingRequest = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingResponse} returns this
 */
proto.apollo.routing.RoutingResponse.prototype.clearRoutingRequest = function() {
  return this.setRoutingRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingResponse.prototype.hasRoutingRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes map_version = 5;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.routing.RoutingResponse.prototype.getMapVersion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes map_version = 5;
 * This is a type-conversion wrapper around `getMapVersion()`
 * @return {string}
 */
proto.apollo.routing.RoutingResponse.prototype.getMapVersion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMapVersion()));
};


/**
 * optional bytes map_version = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMapVersion()`
 * @return {!Uint8Array}
 */
proto.apollo.routing.RoutingResponse.prototype.getMapVersion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMapVersion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.routing.RoutingResponse} returns this
 */
proto.apollo.routing.RoutingResponse.prototype.setMapVersion = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.routing.RoutingResponse} returns this
 */
proto.apollo.routing.RoutingResponse.prototype.clearMapVersion = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingResponse.prototype.hasMapVersion = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional apollo.common.StatusPb status = 6;
 * @return {?proto.apollo.common.StatusPb}
 */
proto.apollo.routing.RoutingResponse.prototype.getStatus = function() {
  return /** @type{?proto.apollo.common.StatusPb} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_error_code_pb.StatusPb, 6));
};


/**
 * @param {?proto.apollo.common.StatusPb|undefined} value
 * @return {!proto.apollo.routing.RoutingResponse} returns this
*/
proto.apollo.routing.RoutingResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.routing.RoutingResponse} returns this
 */
proto.apollo.routing.RoutingResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.routing.RoutingResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.apollo.routing.ParkingSpaceType = {
  VERTICAL_PLOT: 0,
  PARALLEL_PARKING: 1
};

/**
 * @enum {number}
 */
proto.apollo.routing.DeadEndRoutingType = {
  ROUTING_OTHER: 0,
  ROUTING_IN: 1,
  ROUTING_OUT: 2
};

/**
 * @enum {number}
 */
proto.apollo.routing.ChangeLaneType = {
  FORWARD: 0,
  LEFT: 1,
  RIGHT: 2
};

goog.object.extend(exports, proto.apollo.routing);
