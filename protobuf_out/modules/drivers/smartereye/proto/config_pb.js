// source: modules/drivers/smartereye/proto/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.drivers.smartereye.config.Config', null, global);
goog.exportSymbol('proto.apollo.drivers.smartereye.config.Config.CompressConfig', null, global);
goog.exportSymbol('proto.apollo.drivers.smartereye.config.IOMethod', null, global);
goog.exportSymbol('proto.apollo.drivers.smartereye.config.OutputType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.smartereye.config.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.smartereye.config.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.smartereye.config.Config.displayName = 'proto.apollo.drivers.smartereye.config.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.smartereye.config.Config.CompressConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.smartereye.config.Config.CompressConfig.displayName = 'proto.apollo.drivers.smartereye.config.Config.CompressConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.smartereye.config.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.smartereye.config.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.smartereye.config.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraDev: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    frameId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    pixelFormat: jspb.Message.getFieldWithDefault(msg, 3, "yuyv"),
    ioMethod: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    width: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    frameRate: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    monochrome: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    brightness: jspb.Message.getFieldWithDefault(msg, 9, -1),
    contrast: jspb.Message.getFieldWithDefault(msg, 10, -1),
    saturation: jspb.Message.getFieldWithDefault(msg, 11, -1),
    sharpness: jspb.Message.getFieldWithDefault(msg, 12, -1),
    gain: jspb.Message.getFieldWithDefault(msg, 13, -1),
    autoFocus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    focus: jspb.Message.getFieldWithDefault(msg, 15, -1),
    autoExposure: jspb.Message.getBooleanFieldWithDefault(msg, 16, true),
    exposure: jspb.Message.getFieldWithDefault(msg, 17, 100),
    autoWhiteBalance: jspb.Message.getBooleanFieldWithDefault(msg, 18, true),
    whiteBalance: jspb.Message.getFieldWithDefault(msg, 19, 4000),
    bytesPerPixel: jspb.Message.getFieldWithDefault(msg, 20, 3),
    triggerInternal: jspb.Message.getFieldWithDefault(msg, 21, 0),
    triggerFps: jspb.Message.getFieldWithDefault(msg, 22, 30),
    channelName: (f = jspb.Message.getField(msg, 23)) == null ? undefined : f,
    channelNameImage: (f = jspb.Message.getField(msg, 24)) == null ? undefined : f,
    channelNameImageCompressed: (f = jspb.Message.getField(msg, 25)) == null ? undefined : f,
    deviceWaitMs: jspb.Message.getFieldWithDefault(msg, 26, 2000),
    spinRate: jspb.Message.getFieldWithDefault(msg, 27, 200),
    outputType: (f = jspb.Message.getField(msg, 28)) == null ? undefined : f,
    compressConf: (f = msg.getCompressConf()) && proto.apollo.drivers.smartereye.config.Config.CompressConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Config as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.smartereye.config.Config.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cameraDev;

  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.pixelFormat;

  /** @type {?|undefined} */
  this.ioMethod;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.height;

  /** @type {?|undefined} */
  this.frameRate;

  /** @type {?|undefined} */
  this.monochrome;

  /** @type {?|undefined} */
  this.brightness;

  /** @type {?|undefined} */
  this.contrast;

  /** @type {?|undefined} */
  this.saturation;

  /** @type {?|undefined} */
  this.sharpness;

  /** @type {?|undefined} */
  this.gain;

  /** @type {?|undefined} */
  this.autoFocus;

  /** @type {?|undefined} */
  this.focus;

  /** @type {?|undefined} */
  this.autoExposure;

  /** @type {?|undefined} */
  this.exposure;

  /** @type {?|undefined} */
  this.autoWhiteBalance;

  /** @type {?|undefined} */
  this.whiteBalance;

  /** @type {?|undefined} */
  this.bytesPerPixel;

  /** @type {?|undefined} */
  this.triggerInternal;

  /** @type {?|undefined} */
  this.triggerFps;

  /** @type {?|undefined} */
  this.channelName;

  /** @type {?|undefined} */
  this.channelNameImage;

  /** @type {?|undefined} */
  this.channelNameImageCompressed;

  /** @type {?|undefined} */
  this.deviceWaitMs;

  /** @type {?|undefined} */
  this.spinRate;

  /** @type {?|undefined} */
  this.outputType;

  /** @type {?|undefined} */
  this.compressConf;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.smartereye.config.Config.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.smartereye.config.Config}
 */
proto.apollo.drivers.smartereye.config.Config.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.smartereye.config.Config();
  obj.cameraDev != null && jspb.Message.setField(msg, 1, obj.cameraDev);
  obj.frameId != null && jspb.Message.setField(msg, 2, obj.frameId);
  obj.pixelFormat != null && jspb.Message.setField(msg, 3, obj.pixelFormat);
  obj.ioMethod != null && jspb.Message.setField(msg, 4, obj.ioMethod);
  obj.width != null && jspb.Message.setField(msg, 5, obj.width);
  obj.height != null && jspb.Message.setField(msg, 6, obj.height);
  obj.frameRate != null && jspb.Message.setField(msg, 7, obj.frameRate);
  obj.monochrome != null && jspb.Message.setField(msg, 8, obj.monochrome);
  obj.brightness != null && jspb.Message.setField(msg, 9, obj.brightness);
  obj.contrast != null && jspb.Message.setField(msg, 10, obj.contrast);
  obj.saturation != null && jspb.Message.setField(msg, 11, obj.saturation);
  obj.sharpness != null && jspb.Message.setField(msg, 12, obj.sharpness);
  obj.gain != null && jspb.Message.setField(msg, 13, obj.gain);
  obj.autoFocus != null && jspb.Message.setField(msg, 14, obj.autoFocus);
  obj.focus != null && jspb.Message.setField(msg, 15, obj.focus);
  obj.autoExposure != null && jspb.Message.setField(msg, 16, obj.autoExposure);
  obj.exposure != null && jspb.Message.setField(msg, 17, obj.exposure);
  obj.autoWhiteBalance != null && jspb.Message.setField(msg, 18, obj.autoWhiteBalance);
  obj.whiteBalance != null && jspb.Message.setField(msg, 19, obj.whiteBalance);
  obj.bytesPerPixel != null && jspb.Message.setField(msg, 20, obj.bytesPerPixel);
  obj.triggerInternal != null && jspb.Message.setField(msg, 21, obj.triggerInternal);
  obj.triggerFps != null && jspb.Message.setField(msg, 22, obj.triggerFps);
  obj.channelName != null && jspb.Message.setField(msg, 23, obj.channelName);
  obj.channelNameImage != null && jspb.Message.setField(msg, 24, obj.channelNameImage);
  obj.channelNameImageCompressed != null && jspb.Message.setField(msg, 25, obj.channelNameImageCompressed);
  obj.deviceWaitMs != null && jspb.Message.setField(msg, 26, obj.deviceWaitMs);
  obj.spinRate != null && jspb.Message.setField(msg, 27, obj.spinRate);
  obj.outputType != null && jspb.Message.setField(msg, 28, obj.outputType);
  obj.compressConf && jspb.Message.setWrapperField(
      msg, 29, proto.apollo.drivers.smartereye.config.Config.CompressConfig.fromObject(obj.compressConf));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.smartereye.config.Config}
 */
proto.apollo.drivers.smartereye.config.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.smartereye.config.Config;
  return proto.apollo.drivers.smartereye.config.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.smartereye.config.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.smartereye.config.Config}
 */
proto.apollo.drivers.smartereye.config.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraDev(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPixelFormat(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.drivers.smartereye.config.IOMethod} */ (reader.readEnum());
      msg.setIoMethod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrameRate(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMonochrome(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrightness(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContrast(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSaturation(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharpness(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGain(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoFocus(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFocus(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoExposure(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExposure(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoWhiteBalance(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWhiteBalance(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBytesPerPixel(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTriggerInternal(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTriggerFps(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelNameImage(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelNameImageCompressed(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceWaitMs(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpinRate(value);
      break;
    case 28:
      var value = /** @type {!proto.apollo.drivers.smartereye.config.OutputType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    case 29:
      var value = new proto.apollo.drivers.smartereye.config.Config.CompressConfig;
      reader.readMessage(value,proto.apollo.drivers.smartereye.config.Config.CompressConfig.deserializeBinaryFromReader);
      msg.setCompressConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.smartereye.config.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.smartereye.config.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.smartereye.config.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.smartereye.config.IOMethod} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeString(
      23,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeString(
      24,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeString(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeUint32(
      26,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 27));
  if (f != null) {
    writer.writeUint32(
      27,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.smartereye.config.OutputType} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeEnum(
      28,
      f
    );
  }
  f = message.getCompressConf();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.apollo.drivers.smartereye.config.Config.CompressConfig.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.smartereye.config.Config.CompressConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.smartereye.config.Config.CompressConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    outputChannel: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    imagePoolSize: jspb.Message.getFieldWithDefault(msg, 2, 20)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CompressConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.outputChannel;

  /** @type {?|undefined} */
  this.imagePoolSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.smartereye.config.Config.CompressConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.smartereye.config.Config.CompressConfig}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.smartereye.config.Config.CompressConfig();
  obj.outputChannel != null && jspb.Message.setField(msg, 1, obj.outputChannel);
  obj.imagePoolSize != null && jspb.Message.setField(msg, 2, obj.imagePoolSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.smartereye.config.Config.CompressConfig}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.smartereye.config.Config.CompressConfig;
  return proto.apollo.drivers.smartereye.config.Config.CompressConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.smartereye.config.Config.CompressConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.smartereye.config.Config.CompressConfig}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputChannel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImagePoolSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.smartereye.config.Config.CompressConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.smartereye.config.Config.CompressConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string output_channel = 1;
 * @return {string}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.getOutputChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.smartereye.config.Config.CompressConfig} returns this
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.setOutputChannel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config.CompressConfig} returns this
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.clearOutputChannel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.hasOutputChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 image_pool_size = 2;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.getImagePoolSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 20));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config.CompressConfig} returns this
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.setImagePoolSize = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config.CompressConfig} returns this
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.clearImagePoolSize = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.CompressConfig.prototype.hasImagePoolSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string camera_dev = 1;
 * @return {string}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getCameraDev = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setCameraDev = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearCameraDev = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasCameraDev = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string frame_id = 2;
 * @return {string}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string pixel_format = 3;
 * @return {string}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getPixelFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "yuyv"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setPixelFormat = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearPixelFormat = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasPixelFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IOMethod io_method = 4;
 * @return {!proto.apollo.drivers.smartereye.config.IOMethod}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getIoMethod = function() {
  return /** @type {!proto.apollo.drivers.smartereye.config.IOMethod} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.drivers.smartereye.config.IOMethod} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setIoMethod = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearIoMethod = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasIoMethod = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 width = 5;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 height = 6;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 frame_rate = 7;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setFrameRate = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearFrameRate = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasFrameRate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool monochrome = 8;
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getMonochrome = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setMonochrome = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearMonochrome = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasMonochrome = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 brightness = 9;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setBrightness = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearBrightness = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasBrightness = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 contrast = 10;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getContrast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setContrast = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearContrast = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasContrast = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 saturation = 11;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getSaturation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setSaturation = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearSaturation = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasSaturation = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 sharpness = 12;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getSharpness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setSharpness = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearSharpness = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasSharpness = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 gain = 13;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getGain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setGain = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearGain = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasGain = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool auto_focus = 14;
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getAutoFocus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setAutoFocus = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearAutoFocus = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasAutoFocus = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 focus = 15;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getFocus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setFocus = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearFocus = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasFocus = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool auto_exposure = 16;
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getAutoExposure = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setAutoExposure = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearAutoExposure = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasAutoExposure = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 exposure = 17;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getExposure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 100));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setExposure = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearExposure = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasExposure = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool auto_white_balance = 18;
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getAutoWhiteBalance = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setAutoWhiteBalance = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearAutoWhiteBalance = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasAutoWhiteBalance = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int32 white_balance = 19;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getWhiteBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 4000));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setWhiteBalance = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearWhiteBalance = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasWhiteBalance = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional uint32 bytes_per_pixel = 20;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getBytesPerPixel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setBytesPerPixel = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearBytesPerPixel = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasBytesPerPixel = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional uint32 trigger_internal = 21;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getTriggerInternal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setTriggerInternal = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearTriggerInternal = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasTriggerInternal = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional uint32 trigger_fps = 22;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getTriggerFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 30));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setTriggerFps = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearTriggerFps = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasTriggerFps = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string channel_name = 23;
 * @return {string}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setChannelName = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearChannelName = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasChannelName = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional string channel_name_image = 24;
 * @return {string}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getChannelNameImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setChannelNameImage = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearChannelNameImage = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasChannelNameImage = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional string channel_name_image_compressed = 25;
 * @return {string}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getChannelNameImageCompressed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setChannelNameImageCompressed = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearChannelNameImageCompressed = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasChannelNameImageCompressed = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional uint32 device_wait_ms = 26;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getDeviceWaitMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 2000));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setDeviceWaitMs = function(value) {
  return jspb.Message.setField(this, 26, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearDeviceWaitMs = function() {
  return jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasDeviceWaitMs = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional uint32 spin_rate = 27;
 * @return {number}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getSpinRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 200));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setSpinRate = function(value) {
  return jspb.Message.setField(this, 27, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearSpinRate = function() {
  return jspb.Message.setField(this, 27, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasSpinRate = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional OutputType output_type = 28;
 * @return {!proto.apollo.drivers.smartereye.config.OutputType}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getOutputType = function() {
  return /** @type {!proto.apollo.drivers.smartereye.config.OutputType} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {!proto.apollo.drivers.smartereye.config.OutputType} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.setOutputType = function(value) {
  return jspb.Message.setField(this, 28, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearOutputType = function() {
  return jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasOutputType = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional CompressConfig compress_conf = 29;
 * @return {?proto.apollo.drivers.smartereye.config.Config.CompressConfig}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.getCompressConf = function() {
  return /** @type{?proto.apollo.drivers.smartereye.config.Config.CompressConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.smartereye.config.Config.CompressConfig, 29));
};


/**
 * @param {?proto.apollo.drivers.smartereye.config.Config.CompressConfig|undefined} value
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
*/
proto.apollo.drivers.smartereye.config.Config.prototype.setCompressConf = function(value) {
  return jspb.Message.setWrapperField(this, 29, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.smartereye.config.Config} returns this
 */
proto.apollo.drivers.smartereye.config.Config.prototype.clearCompressConf = function() {
  return this.setCompressConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.smartereye.config.Config.prototype.hasCompressConf = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * @enum {number}
 */
proto.apollo.drivers.smartereye.config.IOMethod = {
  IO_METHOD_UNKNOWN: 0,
  IO_METHOD_READ: 1,
  IO_METHOD_MMAP: 2,
  IO_METHOD_USERPTR: 3
};

/**
 * @enum {number}
 */
proto.apollo.drivers.smartereye.config.OutputType = {
  YUYV: 0,
  RGB: 1
};

goog.object.extend(exports, proto.apollo.drivers.smartereye.config);
