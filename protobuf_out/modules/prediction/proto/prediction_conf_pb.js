// source: modules/prediction/proto/prediction_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_perception_proto_perception_obstacle_pb = require('../../../modules/perception/proto/perception_obstacle_pb.js');
goog.object.extend(proto, modules_perception_proto_perception_obstacle_pb);
var modules_prediction_proto_feature_pb = require('../../../modules/prediction/proto/feature_pb.js');
goog.object.extend(proto, modules_prediction_proto_feature_pb);
goog.exportSymbol('proto.apollo.prediction.ObstacleConf', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstacleConf.EvaluatorType', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstacleConf.ObstacleStatus', null, global);
goog.exportSymbol('proto.apollo.prediction.ObstacleConf.PredictorType', null, global);
goog.exportSymbol('proto.apollo.prediction.PredictionConf', null, global);
goog.exportSymbol('proto.apollo.prediction.TopicConf', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.ObstacleConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.ObstacleConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.ObstacleConf.displayName = 'proto.apollo.prediction.ObstacleConf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.TopicConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.prediction.TopicConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.TopicConf.displayName = 'proto.apollo.prediction.TopicConf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.prediction.PredictionConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.prediction.PredictionConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.prediction.PredictionConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.prediction.PredictionConf.displayName = 'proto.apollo.prediction.PredictionConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.ObstacleConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.ObstacleConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.ObstacleConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstacleConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    obstacleType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    obstacleStatus: jspb.Message.getFieldWithDefault(msg, 2, 3),
    priorityType: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    interactiveTag: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    evaluatorType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    predictorType: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.ObstacleConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.obstacleType;

  /** @type {?|undefined} */
  this.obstacleStatus;

  /** @type {?|undefined} */
  this.priorityType;

  /** @type {?|undefined} */
  this.interactiveTag;

  /** @type {?|undefined} */
  this.evaluatorType;

  /** @type {?|undefined} */
  this.predictorType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.ObstacleConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.ObstacleConf}
 */
proto.apollo.prediction.ObstacleConf.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.ObstacleConf();
  obj.obstacleType != null && jspb.Message.setField(msg, 1, obj.obstacleType);
  obj.obstacleStatus != null && jspb.Message.setField(msg, 2, obj.obstacleStatus);
  obj.priorityType != null && jspb.Message.setField(msg, 5, obj.priorityType);
  obj.interactiveTag != null && jspb.Message.setField(msg, 6, obj.interactiveTag);
  obj.evaluatorType != null && jspb.Message.setField(msg, 3, obj.evaluatorType);
  obj.predictorType != null && jspb.Message.setField(msg, 4, obj.predictorType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.ObstacleConf}
 */
proto.apollo.prediction.ObstacleConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.ObstacleConf;
  return proto.apollo.prediction.ObstacleConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.ObstacleConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.ObstacleConf}
 */
proto.apollo.prediction.ObstacleConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (reader.readEnum());
      msg.setObstacleType(value);
      break;
    case 2:
      var value = /** @type {!proto.apollo.prediction.ObstacleConf.ObstacleStatus} */ (reader.readEnum());
      msg.setObstacleStatus(value);
      break;
    case 5:
      var value = /** @type {!proto.apollo.prediction.ObstaclePriority.Priority} */ (reader.readEnum());
      msg.setPriorityType(value);
      break;
    case 6:
      var value = /** @type {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} */ (reader.readEnum());
      msg.setInteractiveTag(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.prediction.ObstacleConf.EvaluatorType} */ (reader.readEnum());
      msg.setEvaluatorType(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.prediction.ObstacleConf.PredictorType} */ (reader.readEnum());
      msg.setPredictorType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.ObstacleConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.ObstacleConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.ObstacleConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.ObstacleConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.apollo.prediction.ObstacleConf.ObstacleStatus} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.prediction.ObstaclePriority.Priority} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {!proto.apollo.prediction.ObstacleConf.EvaluatorType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.prediction.ObstacleConf.PredictorType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.prediction.ObstacleConf.ObstacleStatus = {
  ON_LANE: 0,
  OFF_LANE: 1,
  STATIONARY: 3,
  MOVING: 4,
  IN_JUNCTION: 5
};

/**
 * @enum {number}
 */
proto.apollo.prediction.ObstacleConf.EvaluatorType = {
  MLP_EVALUATOR: 0,
  RNN_EVALUATOR: 1,
  COST_EVALUATOR: 2,
  CRUISE_MLP_EVALUATOR: 3,
  JUNCTION_MLP_EVALUATOR: 4,
  CYCLIST_KEEP_LANE_EVALUATOR: 5,
  LANE_SCANNING_EVALUATOR: 6,
  PEDESTRIAN_INTERACTION_EVALUATOR: 7,
  JUNCTION_MAP_EVALUATOR: 8,
  LANE_AGGREGATING_EVALUATOR: 9,
  SEMANTIC_LSTM_EVALUATOR: 10,
  JOINTLY_PREDICTION_PLANNING_EVALUATOR: 11,
  VECTORNET_EVALUATOR: 12
};

/**
 * @enum {number}
 */
proto.apollo.prediction.ObstacleConf.PredictorType = {
  LANE_SEQUENCE_PREDICTOR: 0,
  FREE_MOVE_PREDICTOR: 1,
  REGIONAL_PREDICTOR: 2,
  MOVE_SEQUENCE_PREDICTOR: 3,
  EMPTY_PREDICTOR: 4,
  SINGLE_LANE_PREDICTOR: 5,
  JUNCTION_PREDICTOR: 6,
  EXTRAPOLATION_PREDICTOR: 7,
  INTERACTION_PREDICTOR: 8
};

/**
 * optional apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
 * @return {!proto.apollo.perception.PerceptionObstacle.Type}
 */
proto.apollo.prediction.ObstacleConf.prototype.getObstacleType = function() {
  return /** @type {!proto.apollo.perception.PerceptionObstacle.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.perception.PerceptionObstacle.Type} value
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.setObstacleType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.clearObstacleType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleConf.prototype.hasObstacleType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObstacleStatus obstacle_status = 2;
 * @return {!proto.apollo.prediction.ObstacleConf.ObstacleStatus}
 */
proto.apollo.prediction.ObstacleConf.prototype.getObstacleStatus = function() {
  return /** @type {!proto.apollo.prediction.ObstacleConf.ObstacleStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 3));
};


/**
 * @param {!proto.apollo.prediction.ObstacleConf.ObstacleStatus} value
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.setObstacleStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.clearObstacleStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleConf.prototype.hasObstacleStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ObstaclePriority.Priority priority_type = 5;
 * @return {!proto.apollo.prediction.ObstaclePriority.Priority}
 */
proto.apollo.prediction.ObstacleConf.prototype.getPriorityType = function() {
  return /** @type {!proto.apollo.prediction.ObstaclePriority.Priority} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/**
 * @param {!proto.apollo.prediction.ObstaclePriority.Priority} value
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.setPriorityType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.clearPriorityType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleConf.prototype.hasPriorityType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ObstacleInteractiveTag.InteractiveTag interactive_tag = 6;
 * @return {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag}
 */
proto.apollo.prediction.ObstacleConf.prototype.getInteractiveTag = function() {
  return /** @type {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/**
 * @param {!proto.apollo.prediction.ObstacleInteractiveTag.InteractiveTag} value
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.setInteractiveTag = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.clearInteractiveTag = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleConf.prototype.hasInteractiveTag = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EvaluatorType evaluator_type = 3;
 * @return {!proto.apollo.prediction.ObstacleConf.EvaluatorType}
 */
proto.apollo.prediction.ObstacleConf.prototype.getEvaluatorType = function() {
  return /** @type {!proto.apollo.prediction.ObstacleConf.EvaluatorType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.prediction.ObstacleConf.EvaluatorType} value
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.setEvaluatorType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.clearEvaluatorType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleConf.prototype.hasEvaluatorType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PredictorType predictor_type = 4;
 * @return {!proto.apollo.prediction.ObstacleConf.PredictorType}
 */
proto.apollo.prediction.ObstacleConf.prototype.getPredictorType = function() {
  return /** @type {!proto.apollo.prediction.ObstacleConf.PredictorType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.prediction.ObstacleConf.PredictorType} value
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.setPredictorType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.ObstacleConf} returns this
 */
proto.apollo.prediction.ObstacleConf.prototype.clearPredictorType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.ObstacleConf.prototype.hasPredictorType = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.TopicConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.TopicConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.TopicConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.TopicConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    adccontainerTopicName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    containerTopicName: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    evaluatorTopicName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    localizationTopic: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    perceptionObstacleTopic: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    perceptionObstaclesTopicName: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    planningTrajectoryTopic: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    predictionTopic: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    storytellingTopic: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TopicConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.TopicConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.adccontainerTopicName;

  /** @type {?|undefined} */
  this.containerTopicName;

  /** @type {?|undefined} */
  this.evaluatorTopicName;

  /** @type {?|undefined} */
  this.localizationTopic;

  /** @type {?|undefined} */
  this.perceptionObstacleTopic;

  /** @type {?|undefined} */
  this.perceptionObstaclesTopicName;

  /** @type {?|undefined} */
  this.planningTrajectoryTopic;

  /** @type {?|undefined} */
  this.predictionTopic;

  /** @type {?|undefined} */
  this.storytellingTopic;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.TopicConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.TopicConf}
 */
proto.apollo.prediction.TopicConf.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.TopicConf();
  obj.adccontainerTopicName != null && jspb.Message.setField(msg, 1, obj.adccontainerTopicName);
  obj.containerTopicName != null && jspb.Message.setField(msg, 2, obj.containerTopicName);
  obj.evaluatorTopicName != null && jspb.Message.setField(msg, 3, obj.evaluatorTopicName);
  obj.localizationTopic != null && jspb.Message.setField(msg, 4, obj.localizationTopic);
  obj.perceptionObstacleTopic != null && jspb.Message.setField(msg, 5, obj.perceptionObstacleTopic);
  obj.perceptionObstaclesTopicName != null && jspb.Message.setField(msg, 6, obj.perceptionObstaclesTopicName);
  obj.planningTrajectoryTopic != null && jspb.Message.setField(msg, 7, obj.planningTrajectoryTopic);
  obj.predictionTopic != null && jspb.Message.setField(msg, 8, obj.predictionTopic);
  obj.storytellingTopic != null && jspb.Message.setField(msg, 9, obj.storytellingTopic);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.TopicConf}
 */
proto.apollo.prediction.TopicConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.TopicConf;
  return proto.apollo.prediction.TopicConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.TopicConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.TopicConf}
 */
proto.apollo.prediction.TopicConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdccontainerTopicName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerTopicName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvaluatorTopicName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalizationTopic(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPerceptionObstacleTopic(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPerceptionObstaclesTopicName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanningTrajectoryTopic(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPredictionTopic(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorytellingTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.TopicConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.TopicConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.TopicConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.TopicConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string adccontainer_topic_name = 1;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getAdccontainerTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setAdccontainerTopicName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearAdccontainerTopicName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasAdccontainerTopicName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string container_topic_name = 2;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getContainerTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setContainerTopicName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearContainerTopicName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasContainerTopicName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string evaluator_topic_name = 3;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getEvaluatorTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setEvaluatorTopicName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearEvaluatorTopicName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasEvaluatorTopicName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string localization_topic = 4;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getLocalizationTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setLocalizationTopic = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearLocalizationTopic = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasLocalizationTopic = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string perception_obstacle_topic = 5;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getPerceptionObstacleTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setPerceptionObstacleTopic = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearPerceptionObstacleTopic = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasPerceptionObstacleTopic = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string perception_obstacles_topic_name = 6;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getPerceptionObstaclesTopicName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setPerceptionObstaclesTopicName = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearPerceptionObstaclesTopicName = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasPerceptionObstaclesTopicName = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string planning_trajectory_topic = 7;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getPlanningTrajectoryTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setPlanningTrajectoryTopic = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearPlanningTrajectoryTopic = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasPlanningTrajectoryTopic = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string prediction_topic = 8;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getPredictionTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setPredictionTopic = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearPredictionTopic = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasPredictionTopic = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string storytelling_topic = 9;
 * @return {string}
 */
proto.apollo.prediction.TopicConf.prototype.getStorytellingTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.setStorytellingTopic = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.prediction.TopicConf} returns this
 */
proto.apollo.prediction.TopicConf.prototype.clearStorytellingTopic = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.TopicConf.prototype.hasStorytellingTopic = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.prediction.PredictionConf.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.prediction.PredictionConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.prediction.PredictionConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.prediction.PredictionConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.PredictionConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicConf: (f = msg.getTopicConf()) && proto.apollo.prediction.TopicConf.toObject(includeInstance, f),
    obstacleConfList: jspb.Message.toObjectList(msg.getObstacleConfList(),
    proto.apollo.prediction.ObstacleConf.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PredictionConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.prediction.PredictionConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.topicConf;

  /** @type {?|undefined} */
  this.obstacleConfList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.prediction.PredictionConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.prediction.PredictionConf}
 */
proto.apollo.prediction.PredictionConf.fromObject = function(obj) {
  var msg = new proto.apollo.prediction.PredictionConf();
  obj.topicConf && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.prediction.TopicConf.fromObject(obj.topicConf));
  obj.obstacleConfList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.obstacleConfList.map(
          proto.apollo.prediction.ObstacleConf.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.prediction.PredictionConf}
 */
proto.apollo.prediction.PredictionConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.prediction.PredictionConf;
  return proto.apollo.prediction.PredictionConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.prediction.PredictionConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.prediction.PredictionConf}
 */
proto.apollo.prediction.PredictionConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.prediction.TopicConf;
      reader.readMessage(value,proto.apollo.prediction.TopicConf.deserializeBinaryFromReader);
      msg.setTopicConf(value);
      break;
    case 2:
      var value = new proto.apollo.prediction.ObstacleConf;
      reader.readMessage(value,proto.apollo.prediction.ObstacleConf.deserializeBinaryFromReader);
      msg.addObstacleConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.prediction.PredictionConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.prediction.PredictionConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.prediction.PredictionConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.prediction.PredictionConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicConf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.prediction.TopicConf.serializeBinaryToWriter
    );
  }
  f = message.getObstacleConfList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.prediction.ObstacleConf.serializeBinaryToWriter
    );
  }
};


/**
 * optional TopicConf topic_conf = 1;
 * @return {?proto.apollo.prediction.TopicConf}
 */
proto.apollo.prediction.PredictionConf.prototype.getTopicConf = function() {
  return /** @type{?proto.apollo.prediction.TopicConf} */ (
    jspb.Message.getWrapperField(this, proto.apollo.prediction.TopicConf, 1));
};


/**
 * @param {?proto.apollo.prediction.TopicConf|undefined} value
 * @return {!proto.apollo.prediction.PredictionConf} returns this
*/
proto.apollo.prediction.PredictionConf.prototype.setTopicConf = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.prediction.PredictionConf} returns this
 */
proto.apollo.prediction.PredictionConf.prototype.clearTopicConf = function() {
  return this.setTopicConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.prediction.PredictionConf.prototype.hasTopicConf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ObstacleConf obstacle_conf = 2;
 * @return {!Array<!proto.apollo.prediction.ObstacleConf>}
 */
proto.apollo.prediction.PredictionConf.prototype.getObstacleConfList = function() {
  return /** @type{!Array<!proto.apollo.prediction.ObstacleConf>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.prediction.ObstacleConf, 2));
};


/**
 * @param {!Array<!proto.apollo.prediction.ObstacleConf>} value
 * @return {!proto.apollo.prediction.PredictionConf} returns this
*/
proto.apollo.prediction.PredictionConf.prototype.setObstacleConfList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.prediction.ObstacleConf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.prediction.ObstacleConf}
 */
proto.apollo.prediction.PredictionConf.prototype.addObstacleConf = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.prediction.ObstacleConf, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.prediction.PredictionConf} returns this
 */
proto.apollo.prediction.PredictionConf.prototype.clearObstacleConfList = function() {
  return this.setObstacleConfList([]);
};


goog.object.extend(exports, proto.apollo.prediction);
