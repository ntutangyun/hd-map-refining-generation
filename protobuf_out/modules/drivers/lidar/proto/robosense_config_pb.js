// source: modules/drivers/lidar/proto/robosense_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.drivers.robosense.Config', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.robosense.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.robosense.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.robosense.Config.displayName = 'proto.apollo.drivers.robosense.Config';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.robosense.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.robosense.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.robosense.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.robosense.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    model: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    frameId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    ip: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    msopPort: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    difopPort: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    echoMode: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    startAngle: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    endAngle: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    minDistance: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    maxDistance: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    cutAngle: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    pointcloudChannel: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    scanChannel: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    calibrationFile: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    useLidarClock: (f = jspb.Message.getBooleanField(msg, 16)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Config as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.robosense.Config.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.model;

  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.ip;

  /** @type {?|undefined} */
  this.msopPort;

  /** @type {?|undefined} */
  this.difopPort;

  /** @type {?|undefined} */
  this.echoMode;

  /** @type {?|undefined} */
  this.startAngle;

  /** @type {?|undefined} */
  this.endAngle;

  /** @type {?|undefined} */
  this.minDistance;

  /** @type {?|undefined} */
  this.maxDistance;

  /** @type {?|undefined} */
  this.cutAngle;

  /** @type {?|undefined} */
  this.pointcloudChannel;

  /** @type {?|undefined} */
  this.scanChannel;

  /** @type {?|undefined} */
  this.calibrationFile;

  /** @type {?|undefined} */
  this.useLidarClock;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.robosense.Config.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.robosense.Config}
 */
proto.apollo.drivers.robosense.Config.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.robosense.Config();
  obj.model != null && jspb.Message.setField(msg, 1, obj.model);
  obj.frameId != null && jspb.Message.setField(msg, 2, obj.frameId);
  obj.ip != null && jspb.Message.setField(msg, 3, obj.ip);
  obj.msopPort != null && jspb.Message.setField(msg, 4, obj.msopPort);
  obj.difopPort != null && jspb.Message.setField(msg, 5, obj.difopPort);
  obj.echoMode != null && jspb.Message.setField(msg, 6, obj.echoMode);
  obj.startAngle != null && jspb.Message.setField(msg, 8, obj.startAngle);
  obj.endAngle != null && jspb.Message.setField(msg, 9, obj.endAngle);
  obj.minDistance != null && jspb.Message.setField(msg, 10, obj.minDistance);
  obj.maxDistance != null && jspb.Message.setField(msg, 11, obj.maxDistance);
  obj.cutAngle != null && jspb.Message.setField(msg, 12, obj.cutAngle);
  obj.pointcloudChannel != null && jspb.Message.setField(msg, 13, obj.pointcloudChannel);
  obj.scanChannel != null && jspb.Message.setField(msg, 14, obj.scanChannel);
  obj.calibrationFile != null && jspb.Message.setField(msg, 15, obj.calibrationFile);
  obj.useLidarClock != null && jspb.Message.setField(msg, 16, obj.useLidarClock);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.robosense.Config}
 */
proto.apollo.drivers.robosense.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.robosense.Config;
  return proto.apollo.drivers.robosense.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.robosense.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.robosense.Config}
 */
proto.apollo.drivers.robosense.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsopPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDifopPort(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEchoMode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartAngle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndAngle(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinDistance(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxDistance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCutAngle(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointcloudChannel(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setScanChannel(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibrationFile(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseLidarClock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.robosense.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.robosense.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.robosense.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.robosense.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional string model = 1;
 * @return {string}
 */
proto.apollo.drivers.robosense.Config.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setModel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearModel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasModel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string frame_id = 2;
 * @return {string}
 */
proto.apollo.drivers.robosense.Config.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.apollo.drivers.robosense.Config.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setIp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearIp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasIp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 msop_port = 4;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getMsopPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setMsopPort = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearMsopPort = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasMsopPort = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 difop_port = 5;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getDifopPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setDifopPort = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearDifopPort = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasDifopPort = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 echo_mode = 6;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getEchoMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setEchoMode = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearEchoMode = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasEchoMode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 start_angle = 8;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getStartAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setStartAngle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearStartAngle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasStartAngle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 end_angle = 9;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getEndAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setEndAngle = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearEndAngle = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasEndAngle = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 min_distance = 10;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getMinDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setMinDistance = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearMinDistance = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasMinDistance = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 max_distance = 11;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getMaxDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setMaxDistance = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearMaxDistance = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasMaxDistance = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 cut_angle = 12;
 * @return {number}
 */
proto.apollo.drivers.robosense.Config.prototype.getCutAngle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setCutAngle = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearCutAngle = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasCutAngle = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string pointcloud_channel = 13;
 * @return {string}
 */
proto.apollo.drivers.robosense.Config.prototype.getPointcloudChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setPointcloudChannel = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearPointcloudChannel = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasPointcloudChannel = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string scan_channel = 14;
 * @return {string}
 */
proto.apollo.drivers.robosense.Config.prototype.getScanChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setScanChannel = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearScanChannel = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasScanChannel = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string calibration_file = 15;
 * @return {string}
 */
proto.apollo.drivers.robosense.Config.prototype.getCalibrationFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setCalibrationFile = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearCalibrationFile = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasCalibrationFile = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool use_lidar_clock = 16;
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.getUseLidarClock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.setUseLidarClock = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.robosense.Config} returns this
 */
proto.apollo.drivers.robosense.Config.prototype.clearUseLidarClock = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.robosense.Config.prototype.hasUseLidarClock = function() {
  return jspb.Message.getField(this, 16) != null;
};


goog.object.extend(exports, proto.apollo.drivers.robosense);
