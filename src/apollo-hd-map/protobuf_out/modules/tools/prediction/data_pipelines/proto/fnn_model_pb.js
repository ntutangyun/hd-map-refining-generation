// source: modules/tools/prediction/data_pipelines/proto/fnn_model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.FnnModel', null, global);
goog.exportSymbol('proto.Layer', null, global);
goog.exportSymbol('proto.Layer.ActivationFunc', null, global);
goog.exportSymbol('proto.Matrix', null, global);
goog.exportSymbol('proto.Vector', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Vector.repeatedFields_, null);
};
goog.inherits(proto.Vector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Vector.displayName = 'proto.Vector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Matrix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Matrix.repeatedFields_, null);
};
goog.inherits(proto.Matrix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Matrix.displayName = 'proto.Matrix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Layer.displayName = 'proto.Layer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FnnModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FnnModel.repeatedFields_, null);
};
goog.inherits(proto.FnnModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FnnModel.displayName = 'proto.FnnModel';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Vector.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vector.prototype.toObject = function(opt_includeInstance) {
  return proto.Vector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Vector as accepted by the `fromObject` method.
 * @record
 */
proto.Vector.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.columnsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Vector.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Vector}
 */
proto.Vector.fromObject = function(obj) {
  var msg = new proto.Vector();
  obj.columnsList != null && jspb.Message.setField(msg, 1, obj.columnsList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vector}
 */
proto.Vector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vector;
  return proto.Vector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vector}
 */
proto.Vector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addColumns(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Vector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Vector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Vector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double columns = 1;
 * @return {!Array<number>}
 */
proto.Vector.prototype.getColumnsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Vector} returns this
 */
proto.Vector.prototype.setColumnsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Vector} returns this
 */
proto.Vector.prototype.addColumns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Vector} returns this
 */
proto.Vector.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Matrix.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Matrix.prototype.toObject = function(opt_includeInstance) {
  return proto.Matrix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Matrix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Matrix.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.Vector.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Matrix as accepted by the `fromObject` method.
 * @record
 */
proto.Matrix.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.rowsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Matrix.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Matrix}
 */
proto.Matrix.fromObject = function(obj) {
  var msg = new proto.Matrix();
  obj.rowsList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.rowsList.map(
          proto.Vector.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Matrix}
 */
proto.Matrix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Matrix;
  return proto.Matrix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Matrix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Matrix}
 */
proto.Matrix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Vector;
      reader.readMessage(value,proto.Vector.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Matrix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Matrix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Matrix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Matrix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Vector.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Vector rows = 1;
 * @return {!Array<!proto.Vector>}
 */
proto.Matrix.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.Vector>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Vector, 1));
};


/**
 * @param {!Array<!proto.Vector>} value
 * @return {!proto.Matrix} returns this
*/
proto.Matrix.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Vector=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Vector}
 */
proto.Matrix.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Vector, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Matrix} returns this
 */
proto.Matrix.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Layer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
    layerInputDim: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    layerOutputDim: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    layerInputWeight: (f = msg.getLayerInputWeight()) && proto.Matrix.toObject(includeInstance, f),
    layerBias: (f = msg.getLayerBias()) && proto.Vector.toObject(includeInstance, f),
    layerActivationFunc: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Layer as accepted by the `fromObject` method.
 * @record
 */
proto.Layer.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.layerInputDim;

  /** @type {?|undefined} */
  this.layerOutputDim;

  /** @type {?|undefined} */
  this.layerInputWeight;

  /** @type {?|undefined} */
  this.layerBias;

  /** @type {?|undefined} */
  this.layerActivationFunc;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.Layer.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.Layer}
 */
proto.Layer.fromObject = function(obj) {
  var msg = new proto.Layer();
  obj.layerInputDim != null && jspb.Message.setField(msg, 1, obj.layerInputDim);
  obj.layerOutputDim != null && jspb.Message.setField(msg, 2, obj.layerOutputDim);
  obj.layerInputWeight && jspb.Message.setWrapperField(
      msg, 3, proto.Matrix.fromObject(obj.layerInputWeight));
  obj.layerBias && jspb.Message.setWrapperField(
      msg, 4, proto.Vector.fromObject(obj.layerBias));
  obj.layerActivationFunc != null && jspb.Message.setField(msg, 5, obj.layerActivationFunc);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Layer}
 */
proto.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Layer;
  return proto.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Layer}
 */
proto.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLayerInputDim(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLayerOutputDim(value);
      break;
    case 3:
      var value = new proto.Matrix;
      reader.readMessage(value,proto.Matrix.deserializeBinaryFromReader);
      msg.setLayerInputWeight(value);
      break;
    case 4:
      var value = new proto.Vector;
      reader.readMessage(value,proto.Vector.deserializeBinaryFromReader);
      msg.setLayerBias(value);
      break;
    case 5:
      var value = /** @type {!proto.Layer.ActivationFunc} */ (reader.readEnum());
      msg.setLayerActivationFunc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Layer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Layer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Layer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLayerInputWeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Matrix.serializeBinaryToWriter
    );
  }
  f = message.getLayerBias();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Vector.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.Layer.ActivationFunc} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Layer.ActivationFunc = {
  RELU: 0,
  TANH: 1,
  SIGMOID: 2,
  SOFTMAX: 3
};

/**
 * optional int32 layer_input_dim = 1;
 * @return {number}
 */
proto.Layer.prototype.getLayerInputDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.setLayerInputDim = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.clearLayerInputDim = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Layer.prototype.hasLayerInputDim = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 layer_output_dim = 2;
 * @return {number}
 */
proto.Layer.prototype.getLayerOutputDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.setLayerOutputDim = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.clearLayerOutputDim = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Layer.prototype.hasLayerOutputDim = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Matrix layer_input_weight = 3;
 * @return {?proto.Matrix}
 */
proto.Layer.prototype.getLayerInputWeight = function() {
  return /** @type{?proto.Matrix} */ (
    jspb.Message.getWrapperField(this, proto.Matrix, 3));
};


/**
 * @param {?proto.Matrix|undefined} value
 * @return {!proto.Layer} returns this
*/
proto.Layer.prototype.setLayerInputWeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.clearLayerInputWeight = function() {
  return this.setLayerInputWeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Layer.prototype.hasLayerInputWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Vector layer_bias = 4;
 * @return {?proto.Vector}
 */
proto.Layer.prototype.getLayerBias = function() {
  return /** @type{?proto.Vector} */ (
    jspb.Message.getWrapperField(this, proto.Vector, 4));
};


/**
 * @param {?proto.Vector|undefined} value
 * @return {!proto.Layer} returns this
*/
proto.Layer.prototype.setLayerBias = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.clearLayerBias = function() {
  return this.setLayerBias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Layer.prototype.hasLayerBias = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ActivationFunc layer_activation_func = 5;
 * @return {!proto.Layer.ActivationFunc}
 */
proto.Layer.prototype.getLayerActivationFunc = function() {
  return /** @type {!proto.Layer.ActivationFunc} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Layer.ActivationFunc} value
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.setLayerActivationFunc = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Layer} returns this
 */
proto.Layer.prototype.clearLayerActivationFunc = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Layer.prototype.hasLayerActivationFunc = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FnnModel.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FnnModel.prototype.toObject = function(opt_includeInstance) {
  return proto.FnnModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FnnModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FnnModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimInput: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    samplesMean: (f = msg.getSamplesMean()) && proto.Vector.toObject(includeInstance, f),
    samplesStd: (f = msg.getSamplesStd()) && proto.Vector.toObject(includeInstance, f),
    numLayer: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    layerList: jspb.Message.toObjectList(msg.getLayerList(),
    proto.Layer.toObject, includeInstance),
    dimOutput: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FnnModel as accepted by the `fromObject` method.
 * @record
 */
proto.FnnModel.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.dimInput;

  /** @type {?|undefined} */
  this.samplesMean;

  /** @type {?|undefined} */
  this.samplesStd;

  /** @type {?|undefined} */
  this.numLayer;

  /** @type {?|undefined} */
  this.layerList;

  /** @type {?|undefined} */
  this.dimOutput;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.FnnModel.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.FnnModel}
 */
proto.FnnModel.fromObject = function(obj) {
  var msg = new proto.FnnModel();
  obj.dimInput != null && jspb.Message.setField(msg, 1, obj.dimInput);
  obj.samplesMean && jspb.Message.setWrapperField(
      msg, 2, proto.Vector.fromObject(obj.samplesMean));
  obj.samplesStd && jspb.Message.setWrapperField(
      msg, 3, proto.Vector.fromObject(obj.samplesStd));
  obj.numLayer != null && jspb.Message.setField(msg, 4, obj.numLayer);
  obj.layerList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.layerList.map(
          proto.Layer.fromObject));
  obj.dimOutput != null && jspb.Message.setField(msg, 6, obj.dimOutput);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FnnModel}
 */
proto.FnnModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FnnModel;
  return proto.FnnModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FnnModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FnnModel}
 */
proto.FnnModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDimInput(value);
      break;
    case 2:
      var value = new proto.Vector;
      reader.readMessage(value,proto.Vector.deserializeBinaryFromReader);
      msg.setSamplesMean(value);
      break;
    case 3:
      var value = new proto.Vector;
      reader.readMessage(value,proto.Vector.deserializeBinaryFromReader);
      msg.setSamplesStd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumLayer(value);
      break;
    case 5:
      var value = new proto.Layer;
      reader.readMessage(value,proto.Layer.deserializeBinaryFromReader);
      msg.addLayer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDimOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FnnModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FnnModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FnnModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FnnModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSamplesMean();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Vector.serializeBinaryToWriter
    );
  }
  f = message.getSamplesStd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Vector.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Layer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 dim_input = 1;
 * @return {number}
 */
proto.FnnModel.prototype.getDimInput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.setDimInput = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.clearDimInput = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FnnModel.prototype.hasDimInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Vector samples_mean = 2;
 * @return {?proto.Vector}
 */
proto.FnnModel.prototype.getSamplesMean = function() {
  return /** @type{?proto.Vector} */ (
    jspb.Message.getWrapperField(this, proto.Vector, 2));
};


/**
 * @param {?proto.Vector|undefined} value
 * @return {!proto.FnnModel} returns this
*/
proto.FnnModel.prototype.setSamplesMean = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.clearSamplesMean = function() {
  return this.setSamplesMean(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FnnModel.prototype.hasSamplesMean = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Vector samples_std = 3;
 * @return {?proto.Vector}
 */
proto.FnnModel.prototype.getSamplesStd = function() {
  return /** @type{?proto.Vector} */ (
    jspb.Message.getWrapperField(this, proto.Vector, 3));
};


/**
 * @param {?proto.Vector|undefined} value
 * @return {!proto.FnnModel} returns this
*/
proto.FnnModel.prototype.setSamplesStd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.clearSamplesStd = function() {
  return this.setSamplesStd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FnnModel.prototype.hasSamplesStd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 num_layer = 4;
 * @return {number}
 */
proto.FnnModel.prototype.getNumLayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.setNumLayer = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.clearNumLayer = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FnnModel.prototype.hasNumLayer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Layer layer = 5;
 * @return {!Array<!proto.Layer>}
 */
proto.FnnModel.prototype.getLayerList = function() {
  return /** @type{!Array<!proto.Layer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Layer, 5));
};


/**
 * @param {!Array<!proto.Layer>} value
 * @return {!proto.FnnModel} returns this
*/
proto.FnnModel.prototype.setLayerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Layer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Layer}
 */
proto.FnnModel.prototype.addLayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Layer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.clearLayerList = function() {
  return this.setLayerList([]);
};


/**
 * optional int32 dim_output = 6;
 * @return {number}
 */
proto.FnnModel.prototype.getDimOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.setDimOutput = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FnnModel} returns this
 */
proto.FnnModel.prototype.clearDimOutput = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FnnModel.prototype.hasDimOutput = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto);
