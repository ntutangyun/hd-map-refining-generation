// source: modules/tools/navigator/dbmap/proto/dbmap.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.dbmap.DBLine', null, global);
goog.exportSymbol('proto.apollo.dbmap.DBMap', null, global);
goog.exportSymbol('proto.apollo.dbmap.DBNeighbourPath', null, global);
goog.exportSymbol('proto.apollo.dbmap.DBNeighbourSegment', null, global);
goog.exportSymbol('proto.apollo.dbmap.DBPath', null, global);
goog.exportSymbol('proto.apollo.dbmap.DBPoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dbmap.DBPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dbmap.DBPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dbmap.DBPoint.displayName = 'proto.apollo.dbmap.DBPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dbmap.DBLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dbmap.DBLine.repeatedFields_, null);
};
goog.inherits(proto.apollo.dbmap.DBLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dbmap.DBLine.displayName = 'proto.apollo.dbmap.DBLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dbmap.DBNeighbourSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.dbmap.DBNeighbourSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dbmap.DBNeighbourSegment.displayName = 'proto.apollo.dbmap.DBNeighbourSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dbmap.DBNeighbourPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dbmap.DBNeighbourPath.repeatedFields_, null);
};
goog.inherits(proto.apollo.dbmap.DBNeighbourPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dbmap.DBNeighbourPath.displayName = 'proto.apollo.dbmap.DBNeighbourPath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dbmap.DBPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dbmap.DBPath.repeatedFields_, null);
};
goog.inherits(proto.apollo.dbmap.DBPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dbmap.DBPath.displayName = 'proto.apollo.dbmap.DBPath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.dbmap.DBMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.dbmap.DBMap.repeatedFields_, null);
};
goog.inherits(proto.apollo.dbmap.DBMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.dbmap.DBMap.displayName = 'proto.apollo.dbmap.DBMap';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dbmap.DBPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dbmap.DBPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dbmap.DBPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DBPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dbmap.DBPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.heading;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dbmap.DBPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dbmap.DBPoint}
 */
proto.apollo.dbmap.DBPoint.fromObject = function(obj) {
  var msg = new proto.apollo.dbmap.DBPoint();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  obj.s != null && jspb.Message.setField(msg, 4, obj.s);
  obj.heading != null && jspb.Message.setField(msg, 5, obj.heading);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dbmap.DBPoint}
 */
proto.apollo.dbmap.DBPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dbmap.DBPoint;
  return proto.apollo.dbmap.DBPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dbmap.DBPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dbmap.DBPoint}
 */
proto.apollo.dbmap.DBPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dbmap.DBPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dbmap.DBPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dbmap.DBPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.apollo.dbmap.DBPoint.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBPoint.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.apollo.dbmap.DBPoint.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBPoint.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.apollo.dbmap.DBPoint.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBPoint.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double s = 4;
 * @return {number}
 */
proto.apollo.dbmap.DBPoint.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.setS = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.clearS = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBPoint.prototype.hasS = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double heading = 5;
 * @return {number}
 */
proto.apollo.dbmap.DBPoint.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBPoint} returns this
 */
proto.apollo.dbmap.DBPoint.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBPoint.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dbmap.DBLine.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dbmap.DBLine.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dbmap.DBLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dbmap.DBLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    proto.apollo.dbmap.DBPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DBLine as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dbmap.DBLine.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dbmap.DBLine.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dbmap.DBLine}
 */
proto.apollo.dbmap.DBLine.fromObject = function(obj) {
  var msg = new proto.apollo.dbmap.DBLine();
  obj.pointList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.pointList.map(
          proto.apollo.dbmap.DBPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dbmap.DBLine}
 */
proto.apollo.dbmap.DBLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dbmap.DBLine;
  return proto.apollo.dbmap.DBLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dbmap.DBLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dbmap.DBLine}
 */
proto.apollo.dbmap.DBLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dbmap.DBPoint;
      reader.readMessage(value,proto.apollo.dbmap.DBPoint.deserializeBinaryFromReader);
      msg.addPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dbmap.DBLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dbmap.DBLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dbmap.DBLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.dbmap.DBPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DBPoint point = 1;
 * @return {!Array<!proto.apollo.dbmap.DBPoint>}
 */
proto.apollo.dbmap.DBLine.prototype.getPointList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBPoint, 1));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBPoint>} value
 * @return {!proto.apollo.dbmap.DBLine} returns this
*/
proto.apollo.dbmap.DBLine.prototype.setPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.dbmap.DBPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBPoint}
 */
proto.apollo.dbmap.DBLine.prototype.addPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.dbmap.DBPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBLine} returns this
 */
proto.apollo.dbmap.DBLine.prototype.clearPointList = function() {
  return this.setPointList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dbmap.DBNeighbourSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dbmap.DBNeighbourSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBNeighbourSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    startS: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    endS: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    pathId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    pathStartS: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    pathEndS: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DBNeighbourSegment as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dbmap.DBNeighbourSegment.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startS;

  /** @type {?|undefined} */
  this.endS;

  /** @type {?|undefined} */
  this.pathId;

  /** @type {?|undefined} */
  this.pathStartS;

  /** @type {?|undefined} */
  this.pathEndS;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dbmap.DBNeighbourSegment.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment}
 */
proto.apollo.dbmap.DBNeighbourSegment.fromObject = function(obj) {
  var msg = new proto.apollo.dbmap.DBNeighbourSegment();
  obj.startS != null && jspb.Message.setField(msg, 1, obj.startS);
  obj.endS != null && jspb.Message.setField(msg, 2, obj.endS);
  obj.pathId != null && jspb.Message.setField(msg, 3, obj.pathId);
  obj.pathStartS != null && jspb.Message.setField(msg, 4, obj.pathStartS);
  obj.pathEndS != null && jspb.Message.setField(msg, 5, obj.pathEndS);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment}
 */
proto.apollo.dbmap.DBNeighbourSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dbmap.DBNeighbourSegment;
  return proto.apollo.dbmap.DBNeighbourSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dbmap.DBNeighbourSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment}
 */
proto.apollo.dbmap.DBNeighbourSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndS(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPathStartS(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPathEndS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dbmap.DBNeighbourSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dbmap.DBNeighbourSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBNeighbourSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double start_s = 1;
 * @return {number}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.getStartS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.setStartS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.clearStartS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.hasStartS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double end_s = 2;
 * @return {number}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.getEndS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.setEndS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.clearEndS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.hasEndS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string path_id = 3;
 * @return {string}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.getPathId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.setPathId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.clearPathId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.hasPathId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double path_start_s = 4;
 * @return {number}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.getPathStartS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.setPathStartS = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.clearPathStartS = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.hasPathStartS = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double path_end_s = 5;
 * @return {number}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.getPathEndS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.setPathEndS = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBNeighbourSegment} returns this
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.clearPathEndS = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBNeighbourSegment.prototype.hasPathEndS = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dbmap.DBNeighbourPath.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dbmap.DBNeighbourPath.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dbmap.DBNeighbourPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dbmap.DBNeighbourPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBNeighbourPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    segmentList: jspb.Message.toObjectList(msg.getSegmentList(),
    proto.apollo.dbmap.DBNeighbourSegment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DBNeighbourPath as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dbmap.DBNeighbourPath.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.segmentList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dbmap.DBNeighbourPath.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dbmap.DBNeighbourPath}
 */
proto.apollo.dbmap.DBNeighbourPath.fromObject = function(obj) {
  var msg = new proto.apollo.dbmap.DBNeighbourPath();
  obj.segmentList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.segmentList.map(
          proto.apollo.dbmap.DBNeighbourSegment.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dbmap.DBNeighbourPath}
 */
proto.apollo.dbmap.DBNeighbourPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dbmap.DBNeighbourPath;
  return proto.apollo.dbmap.DBNeighbourPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dbmap.DBNeighbourPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dbmap.DBNeighbourPath}
 */
proto.apollo.dbmap.DBNeighbourPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dbmap.DBNeighbourSegment;
      reader.readMessage(value,proto.apollo.dbmap.DBNeighbourSegment.deserializeBinaryFromReader);
      msg.addSegment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dbmap.DBNeighbourPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dbmap.DBNeighbourPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dbmap.DBNeighbourPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBNeighbourPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.dbmap.DBNeighbourSegment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DBNeighbourSegment segment = 1;
 * @return {!Array<!proto.apollo.dbmap.DBNeighbourSegment>}
 */
proto.apollo.dbmap.DBNeighbourPath.prototype.getSegmentList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBNeighbourSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBNeighbourSegment, 1));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBNeighbourSegment>} value
 * @return {!proto.apollo.dbmap.DBNeighbourPath} returns this
*/
proto.apollo.dbmap.DBNeighbourPath.prototype.setSegmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.dbmap.DBNeighbourSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBNeighbourSegment}
 */
proto.apollo.dbmap.DBNeighbourPath.prototype.addSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.dbmap.DBNeighbourSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBNeighbourPath} returns this
 */
proto.apollo.dbmap.DBNeighbourPath.prototype.clearSegmentList = function() {
  return this.setSegmentList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dbmap.DBPath.repeatedFields_ = [2,3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dbmap.DBPath.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dbmap.DBPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dbmap.DBPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    pathList: jspb.Message.toObjectList(msg.getPathList(),
    proto.apollo.dbmap.DBLine.toObject, includeInstance),
    leftBoundayList: jspb.Message.toObjectList(msg.getLeftBoundayList(),
    proto.apollo.dbmap.DBLine.toObject, includeInstance),
    rightBoundayList: jspb.Message.toObjectList(msg.getRightBoundayList(),
    proto.apollo.dbmap.DBLine.toObject, includeInstance),
    leftPathList: jspb.Message.toObjectList(msg.getLeftPathList(),
    proto.apollo.dbmap.DBNeighbourPath.toObject, includeInstance),
    rightPathList: jspb.Message.toObjectList(msg.getRightPathList(),
    proto.apollo.dbmap.DBNeighbourPath.toObject, includeInstance),
    duplicatePathList: jspb.Message.toObjectList(msg.getDuplicatePathList(),
    proto.apollo.dbmap.DBNeighbourPath.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DBPath as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dbmap.DBPath.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.pathList;

  /** @type {?|undefined} */
  this.leftBoundayList;

  /** @type {?|undefined} */
  this.rightBoundayList;

  /** @type {?|undefined} */
  this.leftPathList;

  /** @type {?|undefined} */
  this.rightPathList;

  /** @type {?|undefined} */
  this.duplicatePathList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dbmap.DBPath.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dbmap.DBPath}
 */
proto.apollo.dbmap.DBPath.fromObject = function(obj) {
  var msg = new proto.apollo.dbmap.DBPath();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.pathList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.pathList.map(
          proto.apollo.dbmap.DBLine.fromObject));
  obj.leftBoundayList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.leftBoundayList.map(
          proto.apollo.dbmap.DBLine.fromObject));
  obj.rightBoundayList && jspb.Message.setRepeatedWrapperField(
      msg, 4, obj.rightBoundayList.map(
          proto.apollo.dbmap.DBLine.fromObject));
  obj.leftPathList && jspb.Message.setRepeatedWrapperField(
      msg, 5, obj.leftPathList.map(
          proto.apollo.dbmap.DBNeighbourPath.fromObject));
  obj.rightPathList && jspb.Message.setRepeatedWrapperField(
      msg, 6, obj.rightPathList.map(
          proto.apollo.dbmap.DBNeighbourPath.fromObject));
  obj.duplicatePathList && jspb.Message.setRepeatedWrapperField(
      msg, 7, obj.duplicatePathList.map(
          proto.apollo.dbmap.DBNeighbourPath.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dbmap.DBPath}
 */
proto.apollo.dbmap.DBPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dbmap.DBPath;
  return proto.apollo.dbmap.DBPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dbmap.DBPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dbmap.DBPath}
 */
proto.apollo.dbmap.DBPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.dbmap.DBLine;
      reader.readMessage(value,proto.apollo.dbmap.DBLine.deserializeBinaryFromReader);
      msg.addPath(value);
      break;
    case 3:
      var value = new proto.apollo.dbmap.DBLine;
      reader.readMessage(value,proto.apollo.dbmap.DBLine.deserializeBinaryFromReader);
      msg.addLeftBounday(value);
      break;
    case 4:
      var value = new proto.apollo.dbmap.DBLine;
      reader.readMessage(value,proto.apollo.dbmap.DBLine.deserializeBinaryFromReader);
      msg.addRightBounday(value);
      break;
    case 5:
      var value = new proto.apollo.dbmap.DBNeighbourPath;
      reader.readMessage(value,proto.apollo.dbmap.DBNeighbourPath.deserializeBinaryFromReader);
      msg.addLeftPath(value);
      break;
    case 6:
      var value = new proto.apollo.dbmap.DBNeighbourPath;
      reader.readMessage(value,proto.apollo.dbmap.DBNeighbourPath.deserializeBinaryFromReader);
      msg.addRightPath(value);
      break;
    case 7:
      var value = new proto.apollo.dbmap.DBNeighbourPath;
      reader.readMessage(value,proto.apollo.dbmap.DBNeighbourPath.deserializeBinaryFromReader);
      msg.addDuplicatePath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dbmap.DBPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dbmap.DBPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dbmap.DBPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.dbmap.DBLine.serializeBinaryToWriter
    );
  }
  f = message.getLeftBoundayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.dbmap.DBLine.serializeBinaryToWriter
    );
  }
  f = message.getRightBoundayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.apollo.dbmap.DBLine.serializeBinaryToWriter
    );
  }
  f = message.getLeftPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.apollo.dbmap.DBNeighbourPath.serializeBinaryToWriter
    );
  }
  f = message.getRightPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.apollo.dbmap.DBNeighbourPath.serializeBinaryToWriter
    );
  }
  f = message.getDuplicatePathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.apollo.dbmap.DBNeighbourPath.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.apollo.dbmap.DBPath.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.dbmap.DBPath.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated DBLine path = 2;
 * @return {!Array<!proto.apollo.dbmap.DBLine>}
 */
proto.apollo.dbmap.DBPath.prototype.getPathList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBLine, 2));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBLine>} value
 * @return {!proto.apollo.dbmap.DBPath} returns this
*/
proto.apollo.dbmap.DBPath.prototype.setPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.dbmap.DBLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBLine}
 */
proto.apollo.dbmap.DBPath.prototype.addPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.dbmap.DBLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.clearPathList = function() {
  return this.setPathList([]);
};


/**
 * repeated DBLine left_bounday = 3;
 * @return {!Array<!proto.apollo.dbmap.DBLine>}
 */
proto.apollo.dbmap.DBPath.prototype.getLeftBoundayList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBLine, 3));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBLine>} value
 * @return {!proto.apollo.dbmap.DBPath} returns this
*/
proto.apollo.dbmap.DBPath.prototype.setLeftBoundayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.dbmap.DBLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBLine}
 */
proto.apollo.dbmap.DBPath.prototype.addLeftBounday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.dbmap.DBLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.clearLeftBoundayList = function() {
  return this.setLeftBoundayList([]);
};


/**
 * repeated DBLine right_bounday = 4;
 * @return {!Array<!proto.apollo.dbmap.DBLine>}
 */
proto.apollo.dbmap.DBPath.prototype.getRightBoundayList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBLine, 4));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBLine>} value
 * @return {!proto.apollo.dbmap.DBPath} returns this
*/
proto.apollo.dbmap.DBPath.prototype.setRightBoundayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.apollo.dbmap.DBLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBLine}
 */
proto.apollo.dbmap.DBPath.prototype.addRightBounday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.apollo.dbmap.DBLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.clearRightBoundayList = function() {
  return this.setRightBoundayList([]);
};


/**
 * repeated DBNeighbourPath left_path = 5;
 * @return {!Array<!proto.apollo.dbmap.DBNeighbourPath>}
 */
proto.apollo.dbmap.DBPath.prototype.getLeftPathList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBNeighbourPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBNeighbourPath, 5));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBNeighbourPath>} value
 * @return {!proto.apollo.dbmap.DBPath} returns this
*/
proto.apollo.dbmap.DBPath.prototype.setLeftPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.apollo.dbmap.DBNeighbourPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBNeighbourPath}
 */
proto.apollo.dbmap.DBPath.prototype.addLeftPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.apollo.dbmap.DBNeighbourPath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.clearLeftPathList = function() {
  return this.setLeftPathList([]);
};


/**
 * repeated DBNeighbourPath right_path = 6;
 * @return {!Array<!proto.apollo.dbmap.DBNeighbourPath>}
 */
proto.apollo.dbmap.DBPath.prototype.getRightPathList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBNeighbourPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBNeighbourPath, 6));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBNeighbourPath>} value
 * @return {!proto.apollo.dbmap.DBPath} returns this
*/
proto.apollo.dbmap.DBPath.prototype.setRightPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.apollo.dbmap.DBNeighbourPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBNeighbourPath}
 */
proto.apollo.dbmap.DBPath.prototype.addRightPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.apollo.dbmap.DBNeighbourPath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.clearRightPathList = function() {
  return this.setRightPathList([]);
};


/**
 * repeated DBNeighbourPath duplicate_path = 7;
 * @return {!Array<!proto.apollo.dbmap.DBNeighbourPath>}
 */
proto.apollo.dbmap.DBPath.prototype.getDuplicatePathList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBNeighbourPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBNeighbourPath, 7));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBNeighbourPath>} value
 * @return {!proto.apollo.dbmap.DBPath} returns this
*/
proto.apollo.dbmap.DBPath.prototype.setDuplicatePathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.apollo.dbmap.DBNeighbourPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBNeighbourPath}
 */
proto.apollo.dbmap.DBPath.prototype.addDuplicatePath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.apollo.dbmap.DBNeighbourPath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBPath} returns this
 */
proto.apollo.dbmap.DBPath.prototype.clearDuplicatePathList = function() {
  return this.setDuplicatePathList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.dbmap.DBMap.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.dbmap.DBMap.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.dbmap.DBMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.dbmap.DBMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathsList: jspb.Message.toObjectList(msg.getPathsList(),
    proto.apollo.dbmap.DBPath.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DBMap as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.dbmap.DBMap.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pathsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.dbmap.DBMap.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.dbmap.DBMap}
 */
proto.apollo.dbmap.DBMap.fromObject = function(obj) {
  var msg = new proto.apollo.dbmap.DBMap();
  obj.pathsList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.pathsList.map(
          proto.apollo.dbmap.DBPath.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.dbmap.DBMap}
 */
proto.apollo.dbmap.DBMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.dbmap.DBMap;
  return proto.apollo.dbmap.DBMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.dbmap.DBMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.dbmap.DBMap}
 */
proto.apollo.dbmap.DBMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.dbmap.DBPath;
      reader.readMessage(value,proto.apollo.dbmap.DBPath.deserializeBinaryFromReader);
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.dbmap.DBMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.dbmap.DBMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.dbmap.DBMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.dbmap.DBMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.dbmap.DBPath.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DBPath paths = 1;
 * @return {!Array<!proto.apollo.dbmap.DBPath>}
 */
proto.apollo.dbmap.DBMap.prototype.getPathsList = function() {
  return /** @type{!Array<!proto.apollo.dbmap.DBPath>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.dbmap.DBPath, 1));
};


/**
 * @param {!Array<!proto.apollo.dbmap.DBPath>} value
 * @return {!proto.apollo.dbmap.DBMap} returns this
*/
proto.apollo.dbmap.DBMap.prototype.setPathsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.dbmap.DBPath=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.dbmap.DBPath}
 */
proto.apollo.dbmap.DBMap.prototype.addPaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.dbmap.DBPath, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.dbmap.DBMap} returns this
 */
proto.apollo.dbmap.DBMap.prototype.clearPathsList = function() {
  return this.setPathsList([]);
};


goog.object.extend(exports, proto.apollo.dbmap);
