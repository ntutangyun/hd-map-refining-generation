// source: modules/planning/proto/auto_tuning_raw_feature.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_pnc_point_pb = require('../../../modules/common/proto/pnc_point_pb.js');
goog.object.extend(proto, modules_common_proto_pnc_point_pb);
goog.exportSymbol('proto.apollo.planning.autotuning.ObstacleSTRawData', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.PathPointRawFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.SpeedPointRawFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.TrajectoryPointRawFeature', null, global);
goog.exportSymbol('proto.apollo.planning.autotuning.TrajectoryRawFeature', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.PathPointRawFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.PathPointRawFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.PathPointRawFeature.displayName = 'proto.apollo.planning.autotuning.PathPointRawFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.autotuning.SpeedPointRawFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.autotuning.SpeedPointRawFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.SpeedPointRawFeature.displayName = 'proto.apollo.planning.autotuning.SpeedPointRawFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.displayName = 'proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.ObstacleSTRawData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.autotuning.ObstacleSTRawData.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.autotuning.ObstacleSTRawData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.ObstacleSTRawData.displayName = 'proto.apollo.planning.autotuning.ObstacleSTRawData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.displayName = 'proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.displayName = 'proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.planning.autotuning.TrajectoryPointRawFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.TrajectoryPointRawFeature.displayName = 'proto.apollo.planning.autotuning.TrajectoryPointRawFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.planning.autotuning.TrajectoryRawFeature.repeatedFields_, null);
};
goog.inherits(proto.apollo.planning.autotuning.TrajectoryRawFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.planning.autotuning.TrajectoryRawFeature.displayName = 'proto.apollo.planning.autotuning.TrajectoryRawFeature';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.PathPointRawFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.PathPointRawFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointRawFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    cartesianCoord: (f = msg.getCartesianCoord()) && modules_common_proto_pnc_point_pb.PathPoint.toObject(includeInstance, f),
    frenetCoord: (f = msg.getFrenetCoord()) && modules_common_proto_pnc_point_pb.FrenetFramePoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathPointRawFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.PathPointRawFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cartesianCoord;

  /** @type {?|undefined} */
  this.frenetCoord;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.PathPointRawFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.PathPointRawFeature}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.PathPointRawFeature();
  obj.cartesianCoord && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_pnc_point_pb.PathPoint.fromObject(obj.cartesianCoord));
  obj.frenetCoord && jspb.Message.setWrapperField(
      msg, 2, modules_common_proto_pnc_point_pb.FrenetFramePoint.fromObject(obj.frenetCoord));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.PathPointRawFeature}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.PathPointRawFeature;
  return proto.apollo.planning.autotuning.PathPointRawFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.PathPointRawFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.PathPointRawFeature}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_pnc_point_pb.PathPoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.PathPoint.deserializeBinaryFromReader);
      msg.setCartesianCoord(value);
      break;
    case 2:
      var value = new modules_common_proto_pnc_point_pb.FrenetFramePoint;
      reader.readMessage(value,modules_common_proto_pnc_point_pb.FrenetFramePoint.deserializeBinaryFromReader);
      msg.setFrenetCoord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.PathPointRawFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.PathPointRawFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.PathPointRawFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCartesianCoord();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_pnc_point_pb.PathPoint.serializeBinaryToWriter
    );
  }
  f = message.getFrenetCoord();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      modules_common_proto_pnc_point_pb.FrenetFramePoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.PathPoint cartesian_coord = 1;
 * @return {?proto.apollo.common.PathPoint}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.getCartesianCoord = function() {
  return /** @type{?proto.apollo.common.PathPoint} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.PathPoint, 1));
};


/**
 * @param {?proto.apollo.common.PathPoint|undefined} value
 * @return {!proto.apollo.planning.autotuning.PathPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.setCartesianCoord = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.clearCartesianCoord = function() {
  return this.setCartesianCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.hasCartesianCoord = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional apollo.common.FrenetFramePoint frenet_coord = 2;
 * @return {?proto.apollo.common.FrenetFramePoint}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.getFrenetCoord = function() {
  return /** @type{?proto.apollo.common.FrenetFramePoint} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_pnc_point_pb.FrenetFramePoint, 2));
};


/**
 * @param {?proto.apollo.common.FrenetFramePoint|undefined} value
 * @return {!proto.apollo.planning.autotuning.PathPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.setFrenetCoord = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.PathPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.clearFrenetCoord = function() {
  return this.setFrenetCoord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.PathPointRawFeature.prototype.hasFrenetCoord = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.repeatedFields_ = [10,11,13,14,15,12,16,17,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.SpeedPointRawFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    t: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    v: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    a: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    j: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    speedLimit: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    followList: jspb.Message.toObjectList(msg.getFollowList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    overtakeList: jspb.Message.toObjectList(msg.getOvertakeList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    virtualDecisionList: jspb.Message.toObjectList(msg.getVirtualDecisionList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    stopList: jspb.Message.toObjectList(msg.getStopList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    collisionList: jspb.Message.toObjectList(msg.getCollisionList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    nudgeList: jspb.Message.toObjectList(msg.getNudgeList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    sidepassFrontList: jspb.Message.toObjectList(msg.getSidepassFrontList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    sidepassRearList: jspb.Message.toObjectList(msg.getSidepassRearList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance),
    keepClearList: jspb.Message.toObjectList(msg.getKeepClearList(),
    proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpeedPointRawFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.t;

  /** @type {?|undefined} */
  this.v;

  /** @type {?|undefined} */
  this.a;

  /** @type {?|undefined} */
  this.j;

  /** @type {?|undefined} */
  this.speedLimit;

  /** @type {?|undefined} */
  this.followList;

  /** @type {?|undefined} */
  this.overtakeList;

  /** @type {?|undefined} */
  this.virtualDecisionList;

  /** @type {?|undefined} */
  this.stopList;

  /** @type {?|undefined} */
  this.collisionList;

  /** @type {?|undefined} */
  this.nudgeList;

  /** @type {?|undefined} */
  this.sidepassFrontList;

  /** @type {?|undefined} */
  this.sidepassRearList;

  /** @type {?|undefined} */
  this.keepClearList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.SpeedPointRawFeature();
  obj.s != null && jspb.Message.setField(msg, 1, obj.s);
  obj.t != null && jspb.Message.setField(msg, 2, obj.t);
  obj.v != null && jspb.Message.setField(msg, 3, obj.v);
  obj.a != null && jspb.Message.setField(msg, 4, obj.a);
  obj.j != null && jspb.Message.setField(msg, 5, obj.j);
  obj.speedLimit != null && jspb.Message.setField(msg, 6, obj.speedLimit);
  obj.followList && jspb.Message.setRepeatedWrapperField(
      msg, 10, obj.followList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.overtakeList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.overtakeList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.virtualDecisionList && jspb.Message.setRepeatedWrapperField(
      msg, 13, obj.virtualDecisionList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.stopList && jspb.Message.setRepeatedWrapperField(
      msg, 14, obj.stopList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.collisionList && jspb.Message.setRepeatedWrapperField(
      msg, 15, obj.collisionList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.nudgeList && jspb.Message.setRepeatedWrapperField(
      msg, 12, obj.nudgeList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.sidepassFrontList && jspb.Message.setRepeatedWrapperField(
      msg, 16, obj.sidepassFrontList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.sidepassRearList && jspb.Message.setRepeatedWrapperField(
      msg, 17, obj.sidepassRearList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  obj.keepClearList && jspb.Message.setRepeatedWrapperField(
      msg, 18, obj.keepClearList.map(
          proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.SpeedPointRawFeature;
  return proto.apollo.planning.autotuning.SpeedPointRawFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setT(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setV(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJ(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedLimit(value);
      break;
    case 10:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addFollow(value);
      break;
    case 11:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addOvertake(value);
      break;
    case 13:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addVirtualDecision(value);
      break;
    case 14:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addStop(value);
      break;
    case 15:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addCollision(value);
      break;
    case 12:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addNudge(value);
      break;
    case 16:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addSidepassFront(value);
      break;
    case 17:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addSidepassRear(value);
      break;
    case 18:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader);
      msg.addKeepClear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.SpeedPointRawFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getFollowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getOvertakeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getVirtualDecisionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getStopList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getCollisionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getNudgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getSidepassFrontList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getSidepassRearList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
  f = message.getKeepClearList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    relativeS: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    relativeL: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    relativeV: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectDecisionFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.relativeS;

  /** @type {?|undefined} */
  this.relativeL;

  /** @type {?|undefined} */
  this.relativeV;

  /** @type {?|undefined} */
  this.speed;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.relativeS != null && jspb.Message.setField(msg, 2, obj.relativeS);
  obj.relativeL != null && jspb.Message.setField(msg, 3, obj.relativeL);
  obj.relativeV != null && jspb.Message.setField(msg, 4, obj.relativeV);
  obj.speed != null && jspb.Message.setField(msg, 5, obj.speed);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature;
  return proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeS(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeL(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeV(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double relative_s = 2;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.getRelativeS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.setRelativeS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.clearRelativeS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.hasRelativeS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double relative_l = 3;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.getRelativeL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.setRelativeL = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.clearRelativeL = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.hasRelativeL = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double relative_v = 4;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.getRelativeV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.setRelativeV = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.clearRelativeV = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.hasRelativeV = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double speed = 5;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double s = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.hasS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double t = 2;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setT = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearT = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.hasT = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double v = 3;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setV = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearV = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.hasV = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double a = 4;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setA = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearA = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.hasA = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double j = 5;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getJ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setJ = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearJ = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.hasJ = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double speed_limit = 6;
 * @return {number}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getSpeedLimit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setSpeedLimit = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearSpeedLimit = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.hasSpeedLimit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated ObjectDecisionFeature follow = 10;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getFollowList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 10));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setFollowList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addFollow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearFollowList = function() {
  return this.setFollowList([]);
};


/**
 * repeated ObjectDecisionFeature overtake = 11;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getOvertakeList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 11));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setOvertakeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addOvertake = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearOvertakeList = function() {
  return this.setOvertakeList([]);
};


/**
 * repeated ObjectDecisionFeature virtual_decision = 13;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getVirtualDecisionList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 13));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setVirtualDecisionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addVirtualDecision = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearVirtualDecisionList = function() {
  return this.setVirtualDecisionList([]);
};


/**
 * repeated ObjectDecisionFeature stop = 14;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getStopList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 14));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setStopList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addStop = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearStopList = function() {
  return this.setStopList([]);
};


/**
 * repeated ObjectDecisionFeature collision = 15;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getCollisionList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 15));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setCollisionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addCollision = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearCollisionList = function() {
  return this.setCollisionList([]);
};


/**
 * repeated ObjectDecisionFeature nudge = 12;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getNudgeList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 12));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setNudgeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addNudge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearNudgeList = function() {
  return this.setNudgeList([]);
};


/**
 * repeated ObjectDecisionFeature sidepass_front = 16;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getSidepassFrontList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 16));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setSidepassFrontList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addSidepassFront = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearSidepassFrontList = function() {
  return this.setSidepassFrontList([]);
};


/**
 * repeated ObjectDecisionFeature sidepass_rear = 17;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getSidepassRearList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 17));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setSidepassRearList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addSidepassRear = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearSidepassRearList = function() {
  return this.setSidepassRearList([]);
};


/**
 * repeated ObjectDecisionFeature keep_clear = 18;
 * @return {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.getKeepClearList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, 18));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature>} value
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.setKeepClearList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature}
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.addKeepClear = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.SpeedPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.SpeedPointRawFeature.prototype.clearKeepClearList = function() {
  return this.setKeepClearList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.ObstacleSTRawData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.toObject = function(includeInstance, msg) {
  var f, obj = {
    obstacleStDataList: jspb.Message.toObjectList(msg.getObstacleStDataList(),
    proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.toObject, includeInstance),
    obstacleStNudgeList: jspb.Message.toObjectList(msg.getObstacleStNudgeList(),
    proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.toObject, includeInstance),
    obstacleStSidepassList: jspb.Message.toObjectList(msg.getObstacleStSidepassList(),
    proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleSTRawData as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.obstacleStDataList;

  /** @type {?|undefined} */
  this.obstacleStNudgeList;

  /** @type {?|undefined} */
  this.obstacleStSidepassList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.ObstacleSTRawData();
  obj.obstacleStDataList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.obstacleStDataList.map(
          proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.fromObject));
  obj.obstacleStNudgeList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.obstacleStNudgeList.map(
          proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.fromObject));
  obj.obstacleStSidepassList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.obstacleStSidepassList.map(
          proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.ObstacleSTRawData;
  return proto.apollo.planning.autotuning.ObstacleSTRawData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData;
      reader.readMessage(value,proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.deserializeBinaryFromReader);
      msg.addObstacleStData(value);
      break;
    case 2:
      var value = new proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData;
      reader.readMessage(value,proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.deserializeBinaryFromReader);
      msg.addObstacleStNudge(value);
      break;
    case 3:
      var value = new proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData;
      reader.readMessage(value,proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.deserializeBinaryFromReader);
      msg.addObstacleStSidepass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.ObstacleSTRawData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObstacleStDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.serializeBinaryToWriter
    );
  }
  f = message.getObstacleStNudgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.serializeBinaryToWriter
    );
  }
  f = message.getObstacleStSidepassList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    sLower: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    sUpper: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    t: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    l: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of STPointPair as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sLower;

  /** @type {?|undefined} */
  this.sUpper;

  /** @type {?|undefined} */
  this.t;

  /** @type {?|undefined} */
  this.l;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair();
  obj.sLower != null && jspb.Message.setField(msg, 1, obj.sLower);
  obj.sUpper != null && jspb.Message.setField(msg, 2, obj.sUpper);
  obj.t != null && jspb.Message.setField(msg, 3, obj.t);
  obj.l != null && jspb.Message.setField(msg, 4, obj.l);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair;
  return proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSLower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSUpper(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setT(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double s_lower = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.getSLower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.setSLower = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.clearSLower = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.hasSLower = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double s_upper = 2;
 * @return {number}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.getSUpper = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.setSUpper = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.clearSUpper = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.hasSUpper = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double t = 3;
 * @return {number}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.getT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.setT = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.clearT = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.hasT = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double l = 4;
 * @return {number}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.getL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.setL = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.clearL = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.prototype.hasL = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    isVirtual: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    probability: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    polygonList: jspb.Message.toObjectList(msg.getPolygonList(),
    proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.toObject, includeInstance),
    distributionList: jspb.Message.toObjectList(msg.getDistributionList(),
    proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObstacleSTData as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.speed;

  /** @type {?|undefined} */
  this.isVirtual;

  /** @type {?|undefined} */
  this.probability;

  /** @type {?|undefined} */
  this.polygonList;

  /** @type {?|undefined} */
  this.distributionList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData();
  obj.id != null && jspb.Message.setField(msg, 1, obj.id);
  obj.speed != null && jspb.Message.setField(msg, 2, obj.speed);
  obj.isVirtual != null && jspb.Message.setField(msg, 3, obj.isVirtual);
  obj.probability != null && jspb.Message.setField(msg, 4, obj.probability);
  obj.polygonList && jspb.Message.setRepeatedWrapperField(
      msg, 8, obj.polygonList.map(
          proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.fromObject));
  obj.distributionList && jspb.Message.setRepeatedWrapperField(
      msg, 9, obj.distributionList.map(
          proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData;
  return proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVirtual(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbability(value);
      break;
    case 8:
      var value = new proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair;
      reader.readMessage(value,proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.deserializeBinaryFromReader);
      msg.addPolygon(value);
      break;
    case 9:
      var value = new proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair;
      reader.readMessage(value,proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.deserializeBinaryFromReader);
      msg.addDistribution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPolygonList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.serializeBinaryToWriter
    );
  }
  f = message.getDistributionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double speed = 2;
 * @return {number}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_virtual = 3;
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.getIsVirtual = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.setIsVirtual = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.clearIsVirtual = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.hasIsVirtual = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double probability = 4;
 * @return {number}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.getProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.setProbability = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.clearProbability = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.hasProbability = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated STPointPair polygon = 8;
 * @return {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair>}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.getPolygonList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair, 8));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair>} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
*/
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.setPolygonList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.addPolygon = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.clearPolygonList = function() {
  return this.setPolygonList([]);
};


/**
 * repeated STPointPair distribution = 9;
 * @return {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair>}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.getDistributionList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair, 9));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair>} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
*/
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.setDistributionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.addDistribution = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.apollo.planning.autotuning.ObstacleSTRawData.STPointPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.prototype.clearDistributionList = function() {
  return this.setDistributionList([]);
};


/**
 * repeated ObstacleSTData obstacle_st_data = 1;
 * @return {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.getObstacleStDataList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData} returns this
*/
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.setObstacleStDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.addObstacleStData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.clearObstacleStDataList = function() {
  return this.setObstacleStDataList([]);
};


/**
 * repeated ObstacleSTData obstacle_st_nudge = 2;
 * @return {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.getObstacleStNudgeList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData, 2));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData} returns this
*/
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.setObstacleStNudgeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.addObstacleStNudge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.clearObstacleStNudgeList = function() {
  return this.setObstacleStNudgeList([]);
};


/**
 * repeated ObstacleSTData obstacle_st_sidepass = 3;
 * @return {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.getObstacleStSidepassList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData, 3));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData>} value
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData} returns this
*/
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.setObstacleStSidepassList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData}
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.addObstacleStSidepass = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.ObstacleSTRawData} returns this
 */
proto.apollo.planning.autotuning.ObstacleSTRawData.prototype.clearObstacleStSidepassList = function() {
  return this.setObstacleStSidepassList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.TrajectoryPointRawFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathFeature: (f = msg.getPathFeature()) && proto.apollo.planning.autotuning.PathPointRawFeature.toObject(includeInstance, f),
    speedFeature: (f = msg.getSpeedFeature()) && proto.apollo.planning.autotuning.SpeedPointRawFeature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryPointRawFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pathFeature;

  /** @type {?|undefined} */
  this.speedFeature;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.TrajectoryPointRawFeature();
  obj.pathFeature && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.planning.autotuning.PathPointRawFeature.fromObject(obj.pathFeature));
  obj.speedFeature && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.autotuning.SpeedPointRawFeature.fromObject(obj.speedFeature));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.TrajectoryPointRawFeature;
  return proto.apollo.planning.autotuning.TrajectoryPointRawFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.autotuning.PathPointRawFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.PathPointRawFeature.deserializeBinaryFromReader);
      msg.setPathFeature(value);
      break;
    case 2:
      var value = new proto.apollo.planning.autotuning.SpeedPointRawFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.SpeedPointRawFeature.deserializeBinaryFromReader);
      msg.setSpeedFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.TrajectoryPointRawFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathFeature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.planning.autotuning.PathPointRawFeature.serializeBinaryToWriter
    );
  }
  f = message.getSpeedFeature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.autotuning.SpeedPointRawFeature.serializeBinaryToWriter
    );
  }
};


/**
 * optional PathPointRawFeature path_feature = 1;
 * @return {?proto.apollo.planning.autotuning.PathPointRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.getPathFeature = function() {
  return /** @type{?proto.apollo.planning.autotuning.PathPointRawFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.autotuning.PathPointRawFeature, 1));
};


/**
 * @param {?proto.apollo.planning.autotuning.PathPointRawFeature|undefined} value
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.setPathFeature = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.clearPathFeature = function() {
  return this.setPathFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.hasPathFeature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SpeedPointRawFeature speed_feature = 2;
 * @return {?proto.apollo.planning.autotuning.SpeedPointRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.getSpeedFeature = function() {
  return /** @type{?proto.apollo.planning.autotuning.SpeedPointRawFeature} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.autotuning.SpeedPointRawFeature, 2));
};


/**
 * @param {?proto.apollo.planning.autotuning.SpeedPointRawFeature|undefined} value
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature} returns this
*/
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.setSpeedFeature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature} returns this
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.clearSpeedFeature = function() {
  return this.setSpeedFeature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.TrajectoryPointRawFeature.prototype.hasSpeedFeature = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.planning.autotuning.TrajectoryRawFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.planning.autotuning.TrajectoryRawFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointFeatureList: jspb.Message.toObjectList(msg.getPointFeatureList(),
    proto.apollo.planning.autotuning.TrajectoryPointRawFeature.toObject, includeInstance),
    stRawData: (f = msg.getStRawData()) && proto.apollo.planning.autotuning.ObstacleSTRawData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryRawFeature as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pointFeatureList;

  /** @type {?|undefined} */
  this.stRawData;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.planning.autotuning.TrajectoryRawFeature.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.planning.autotuning.TrajectoryRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.fromObject = function(obj) {
  var msg = new proto.apollo.planning.autotuning.TrajectoryRawFeature();
  obj.pointFeatureList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.pointFeatureList.map(
          proto.apollo.planning.autotuning.TrajectoryPointRawFeature.fromObject));
  obj.stRawData && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.planning.autotuning.ObstacleSTRawData.fromObject(obj.stRawData));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.planning.autotuning.TrajectoryRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.planning.autotuning.TrajectoryRawFeature;
  return proto.apollo.planning.autotuning.TrajectoryRawFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.planning.autotuning.TrajectoryRawFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.planning.autotuning.TrajectoryRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.planning.autotuning.TrajectoryPointRawFeature;
      reader.readMessage(value,proto.apollo.planning.autotuning.TrajectoryPointRawFeature.deserializeBinaryFromReader);
      msg.addPointFeature(value);
      break;
    case 2:
      var value = new proto.apollo.planning.autotuning.ObstacleSTRawData;
      reader.readMessage(value,proto.apollo.planning.autotuning.ObstacleSTRawData.deserializeBinaryFromReader);
      msg.setStRawData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.planning.autotuning.TrajectoryRawFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.planning.autotuning.TrajectoryRawFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.planning.autotuning.TrajectoryPointRawFeature.serializeBinaryToWriter
    );
  }
  f = message.getStRawData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.planning.autotuning.ObstacleSTRawData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TrajectoryPointRawFeature point_feature = 1;
 * @return {!Array<!proto.apollo.planning.autotuning.TrajectoryPointRawFeature>}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.getPointFeatureList = function() {
  return /** @type{!Array<!proto.apollo.planning.autotuning.TrajectoryPointRawFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.planning.autotuning.TrajectoryPointRawFeature, 1));
};


/**
 * @param {!Array<!proto.apollo.planning.autotuning.TrajectoryPointRawFeature>} value
 * @return {!proto.apollo.planning.autotuning.TrajectoryRawFeature} returns this
*/
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.setPointFeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.planning.autotuning.TrajectoryPointRawFeature}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.addPointFeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.planning.autotuning.TrajectoryPointRawFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.planning.autotuning.TrajectoryRawFeature} returns this
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.clearPointFeatureList = function() {
  return this.setPointFeatureList([]);
};


/**
 * optional ObstacleSTRawData st_raw_data = 2;
 * @return {?proto.apollo.planning.autotuning.ObstacleSTRawData}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.getStRawData = function() {
  return /** @type{?proto.apollo.planning.autotuning.ObstacleSTRawData} */ (
    jspb.Message.getWrapperField(this, proto.apollo.planning.autotuning.ObstacleSTRawData, 2));
};


/**
 * @param {?proto.apollo.planning.autotuning.ObstacleSTRawData|undefined} value
 * @return {!proto.apollo.planning.autotuning.TrajectoryRawFeature} returns this
*/
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.setStRawData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.planning.autotuning.TrajectoryRawFeature} returns this
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.clearStRawData = function() {
  return this.setStRawData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.planning.autotuning.TrajectoryRawFeature.prototype.hasStRawData = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.apollo.planning.autotuning);
