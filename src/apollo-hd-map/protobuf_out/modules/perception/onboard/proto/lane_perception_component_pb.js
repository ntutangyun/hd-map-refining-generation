// source: modules/perception/onboard/proto/lane_perception_component.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.onboard.LaneDetection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.onboard.LaneDetection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.onboard.LaneDetection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.onboard.LaneDetection.displayName = 'proto.apollo.perception.onboard.LaneDetection';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.onboard.LaneDetection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.onboard.LaneDetection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.LaneDetection.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraNames: jspb.Message.getFieldWithDefault(msg, 1, "front_6mm,front_12mm"),
    inputCameraChannelNames: jspb.Message.getFieldWithDefault(msg, 2, "/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image"),
    timestampOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    cameraLanePerceptionConfDir: jspb.Message.getFieldWithDefault(msg, 4, "conf/perception/camera"),
    cameraLanePerceptionConfFile: jspb.Message.getFieldWithDefault(msg, 5, "lane.pt"),
    frameCapacity: jspb.Message.getFieldWithDefault(msg, 6, 20),
    imageChannelNum: jspb.Message.getFieldWithDefault(msg, 7, 3),
    enableUndistortion: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    enableVisualization: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    outputLanesChannelName: jspb.Message.getFieldWithDefault(msg, 10, "/perception/lanes"),
    defaultCameraPitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    defaultCameraHeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 1.5),
    laneCalibrationWorkingSensorName: jspb.Message.getFieldWithDefault(msg, 13, "front_6mm"),
    calibratorMethod: jspb.Message.getFieldWithDefault(msg, 14, "LaneLineCalibrator"),
    calibServiceName: jspb.Message.getFieldWithDefault(msg, 15, "OnlineCalibrationService"),
    runCalibService: jspb.Message.getBooleanFieldWithDefault(msg, 16, true),
    tsDiff: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.1),
    visualDebugFolder: jspb.Message.getFieldWithDefault(msg, 18, "/apollo/debug_output"),
    visualCamera: jspb.Message.getFieldWithDefault(msg, 19, "front_6mm"),
    writeVisualImg: jspb.Message.getBooleanFieldWithDefault(msg, 20, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneDetection as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.onboard.LaneDetection.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.cameraNames;

  /** @type {?|undefined} */
  this.inputCameraChannelNames;

  /** @type {?|undefined} */
  this.timestampOffset;

  /** @type {?|undefined} */
  this.cameraLanePerceptionConfDir;

  /** @type {?|undefined} */
  this.cameraLanePerceptionConfFile;

  /** @type {?|undefined} */
  this.frameCapacity;

  /** @type {?|undefined} */
  this.imageChannelNum;

  /** @type {?|undefined} */
  this.enableUndistortion;

  /** @type {?|undefined} */
  this.enableVisualization;

  /** @type {?|undefined} */
  this.outputLanesChannelName;

  /** @type {?|undefined} */
  this.defaultCameraPitch;

  /** @type {?|undefined} */
  this.defaultCameraHeight;

  /** @type {?|undefined} */
  this.laneCalibrationWorkingSensorName;

  /** @type {?|undefined} */
  this.calibratorMethod;

  /** @type {?|undefined} */
  this.calibServiceName;

  /** @type {?|undefined} */
  this.runCalibService;

  /** @type {?|undefined} */
  this.tsDiff;

  /** @type {?|undefined} */
  this.visualDebugFolder;

  /** @type {?|undefined} */
  this.visualCamera;

  /** @type {?|undefined} */
  this.writeVisualImg;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.onboard.LaneDetection.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.onboard.LaneDetection}
 */
proto.apollo.perception.onboard.LaneDetection.fromObject = function(obj) {
  var msg = new proto.apollo.perception.onboard.LaneDetection();
  obj.cameraNames != null && jspb.Message.setField(msg, 1, obj.cameraNames);
  obj.inputCameraChannelNames != null && jspb.Message.setField(msg, 2, obj.inputCameraChannelNames);
  obj.timestampOffset != null && jspb.Message.setField(msg, 3, obj.timestampOffset);
  obj.cameraLanePerceptionConfDir != null && jspb.Message.setField(msg, 4, obj.cameraLanePerceptionConfDir);
  obj.cameraLanePerceptionConfFile != null && jspb.Message.setField(msg, 5, obj.cameraLanePerceptionConfFile);
  obj.frameCapacity != null && jspb.Message.setField(msg, 6, obj.frameCapacity);
  obj.imageChannelNum != null && jspb.Message.setField(msg, 7, obj.imageChannelNum);
  obj.enableUndistortion != null && jspb.Message.setField(msg, 8, obj.enableUndistortion);
  obj.enableVisualization != null && jspb.Message.setField(msg, 9, obj.enableVisualization);
  obj.outputLanesChannelName != null && jspb.Message.setField(msg, 10, obj.outputLanesChannelName);
  obj.defaultCameraPitch != null && jspb.Message.setField(msg, 11, obj.defaultCameraPitch);
  obj.defaultCameraHeight != null && jspb.Message.setField(msg, 12, obj.defaultCameraHeight);
  obj.laneCalibrationWorkingSensorName != null && jspb.Message.setField(msg, 13, obj.laneCalibrationWorkingSensorName);
  obj.calibratorMethod != null && jspb.Message.setField(msg, 14, obj.calibratorMethod);
  obj.calibServiceName != null && jspb.Message.setField(msg, 15, obj.calibServiceName);
  obj.runCalibService != null && jspb.Message.setField(msg, 16, obj.runCalibService);
  obj.tsDiff != null && jspb.Message.setField(msg, 17, obj.tsDiff);
  obj.visualDebugFolder != null && jspb.Message.setField(msg, 18, obj.visualDebugFolder);
  obj.visualCamera != null && jspb.Message.setField(msg, 19, obj.visualCamera);
  obj.writeVisualImg != null && jspb.Message.setField(msg, 20, obj.writeVisualImg);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.onboard.LaneDetection}
 */
proto.apollo.perception.onboard.LaneDetection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.onboard.LaneDetection;
  return proto.apollo.perception.onboard.LaneDetection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.onboard.LaneDetection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.onboard.LaneDetection}
 */
proto.apollo.perception.onboard.LaneDetection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraNames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputCameraChannelNames(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampOffset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraLanePerceptionConfDir(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraLanePerceptionConfFile(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameCapacity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageChannelNum(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableUndistortion(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableVisualization(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputLanesChannelName(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultCameraPitch(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultCameraHeight(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneCalibrationWorkingSensorName(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibratorMethod(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCalibServiceName(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunCalibService(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTsDiff(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisualDebugFolder(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisualCamera(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWriteVisualImg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.onboard.LaneDetection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.onboard.LaneDetection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.onboard.LaneDetection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBool(
      20,
      f
    );
  }
};


/**
 * optional string camera_names = 1;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getCameraNames = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "front_6mm,front_12mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setCameraNames = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearCameraNames = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasCameraNames = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string input_camera_channel_names = 2;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getInputCameraChannelNames = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setInputCameraChannelNames = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearInputCameraChannelNames = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasInputCameraChannelNames = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double timestamp_offset = 3;
 * @return {number}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getTimestampOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setTimestampOffset = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearTimestampOffset = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasTimestampOffset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string camera_lane_perception_conf_dir = 4;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getCameraLanePerceptionConfDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "conf/perception/camera"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setCameraLanePerceptionConfDir = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearCameraLanePerceptionConfDir = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasCameraLanePerceptionConfDir = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string camera_lane_perception_conf_file = 5;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getCameraLanePerceptionConfFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "lane.pt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setCameraLanePerceptionConfFile = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearCameraLanePerceptionConfFile = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasCameraLanePerceptionConfFile = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 frame_capacity = 6;
 * @return {number}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getFrameCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 20));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setFrameCapacity = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearFrameCapacity = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasFrameCapacity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 image_channel_num = 7;
 * @return {number}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getImageChannelNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setImageChannelNum = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearImageChannelNum = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasImageChannelNum = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool enable_undistortion = 8;
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getEnableUndistortion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setEnableUndistortion = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearEnableUndistortion = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasEnableUndistortion = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool enable_visualization = 9;
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getEnableVisualization = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setEnableVisualization = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearEnableVisualization = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasEnableVisualization = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string output_lanes_channel_name = 10;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getOutputLanesChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "/perception/lanes"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setOutputLanesChannelName = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearOutputLanesChannelName = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasOutputLanesChannelName = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double default_camera_pitch = 11;
 * @return {number}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getDefaultCameraPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setDefaultCameraPitch = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearDefaultCameraPitch = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasDefaultCameraPitch = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double default_camera_height = 12;
 * @return {number}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getDefaultCameraHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setDefaultCameraHeight = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearDefaultCameraHeight = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasDefaultCameraHeight = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string lane_calibration_working_sensor_name = 13;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getLaneCalibrationWorkingSensorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, "front_6mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setLaneCalibrationWorkingSensorName = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearLaneCalibrationWorkingSensorName = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasLaneCalibrationWorkingSensorName = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string calibrator_method = 14;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getCalibratorMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, "LaneLineCalibrator"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setCalibratorMethod = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearCalibratorMethod = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasCalibratorMethod = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string calib_service_name = 15;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getCalibServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, "OnlineCalibrationService"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setCalibServiceName = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearCalibServiceName = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasCalibServiceName = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool run_calib_service = 16;
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getRunCalibService = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setRunCalibService = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearRunCalibService = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasRunCalibService = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double ts_diff = 17;
 * @return {number}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getTsDiff = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setTsDiff = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearTsDiff = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasTsDiff = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string visual_debug_folder = 18;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getVisualDebugFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, "/apollo/debug_output"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setVisualDebugFolder = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearVisualDebugFolder = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasVisualDebugFolder = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string visual_camera = 19;
 * @return {string}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getVisualCamera = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, "front_6mm"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setVisualCamera = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearVisualCamera = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasVisualCamera = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool write_visual_img = 20;
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.getWriteVisualImg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.setWriteVisualImg = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.onboard.LaneDetection} returns this
 */
proto.apollo.perception.onboard.LaneDetection.prototype.clearWriteVisualImg = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.onboard.LaneDetection.prototype.hasWriteVisualImg = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.apollo.perception.onboard);
