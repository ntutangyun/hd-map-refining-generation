// source: modules/drivers/gnss/proto/config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.drivers.gnss.config.Config', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Config.DeviceConfigCase', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Config.RtkSolutionType', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.ImuType', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.NovatelConfig', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Stream', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Stream.Format', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Stream.Ntrip', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Stream.Serial', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Stream.Tcp', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Stream.TypeCase', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.Stream.Udp', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.TF', null, global);
goog.exportSymbol('proto.apollo.drivers.gnss.config.UbloxConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.drivers.gnss.config.Stream.oneofGroups_);
};
goog.inherits(proto.apollo.drivers.gnss.config.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.Stream.displayName = 'proto.apollo.drivers.gnss.config.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.Stream.Serial = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.gnss.config.Stream.Serial, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.Stream.Serial.displayName = 'proto.apollo.drivers.gnss.config.Stream.Serial';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.Stream.Tcp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.gnss.config.Stream.Tcp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.Stream.Tcp.displayName = 'proto.apollo.drivers.gnss.config.Stream.Tcp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.Stream.Udp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.gnss.config.Stream.Udp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.Stream.Udp.displayName = 'proto.apollo.drivers.gnss.config.Stream.Udp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.gnss.config.Stream.Ntrip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.Stream.Ntrip.displayName = 'proto.apollo.drivers.gnss.config.Stream.Ntrip';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.NovatelConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.gnss.config.NovatelConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.NovatelConfig.displayName = 'proto.apollo.drivers.gnss.config.NovatelConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.UbloxConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.gnss.config.UbloxConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.UbloxConfig.displayName = 'proto.apollo.drivers.gnss.config.UbloxConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.TF = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.gnss.config.TF, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.TF.displayName = 'proto.apollo.drivers.gnss.config.TF';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.gnss.config.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.drivers.gnss.config.Config.repeatedFields_, proto.apollo.drivers.gnss.config.Config.oneofGroups_);
};
goog.inherits(proto.apollo.drivers.gnss.config.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.gnss.config.Config.displayName = 'proto.apollo.drivers.gnss.config.Config';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.drivers.gnss.config.Stream.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.apollo.drivers.gnss.config.Stream.TypeCase = {
  TYPE_NOT_SET: 0,
  SERIAL: 2,
  TCP: 3,
  UDP: 4,
  NTRIP: 5
};

/**
 * @return {proto.apollo.drivers.gnss.config.Stream.TypeCase}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.getTypeCase = function() {
  return /** @type {proto.apollo.drivers.gnss.config.Stream.TypeCase} */(jspb.Message.computeOneofCase(this, proto.apollo.drivers.gnss.config.Stream.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    serial: (f = msg.getSerial()) && proto.apollo.drivers.gnss.config.Stream.Serial.toObject(includeInstance, f),
    tcp: (f = msg.getTcp()) && proto.apollo.drivers.gnss.config.Stream.Tcp.toObject(includeInstance, f),
    udp: (f = msg.getUdp()) && proto.apollo.drivers.gnss.config.Stream.Udp.toObject(includeInstance, f),
    ntrip: (f = msg.getNtrip()) && proto.apollo.drivers.gnss.config.Stream.Ntrip.toObject(includeInstance, f),
    pushLocation: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Stream as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.Stream.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.format;

  /** @type {?|undefined} */
  this.serial;

  /** @type {?|undefined} */
  this.tcp;

  /** @type {?|undefined} */
  this.udp;

  /** @type {?|undefined} */
  this.ntrip;

  /** @type {?|undefined} */
  this.pushLocation;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.Stream.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.Stream}
 */
proto.apollo.drivers.gnss.config.Stream.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.Stream();
  obj.format != null && jspb.Message.setField(msg, 1, obj.format);
  obj.serial && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.drivers.gnss.config.Stream.Serial.fromObject(obj.serial));
  obj.tcp && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.drivers.gnss.config.Stream.Tcp.fromObject(obj.tcp));
  obj.udp && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.drivers.gnss.config.Stream.Udp.fromObject(obj.udp));
  obj.ntrip && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.drivers.gnss.config.Stream.Ntrip.fromObject(obj.ntrip));
  obj.pushLocation != null && jspb.Message.setField(msg, 6, obj.pushLocation);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.Stream}
 */
proto.apollo.drivers.gnss.config.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.Stream;
  return proto.apollo.drivers.gnss.config.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.Stream}
 */
proto.apollo.drivers.gnss.config.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.apollo.drivers.gnss.config.Stream.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 2:
      var value = new proto.apollo.drivers.gnss.config.Stream.Serial;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.Serial.deserializeBinaryFromReader);
      msg.setSerial(value);
      break;
    case 3:
      var value = new proto.apollo.drivers.gnss.config.Stream.Tcp;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.Tcp.deserializeBinaryFromReader);
      msg.setTcp(value);
      break;
    case 4:
      var value = new proto.apollo.drivers.gnss.config.Stream.Udp;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.Udp.deserializeBinaryFromReader);
      msg.setUdp(value);
      break;
    case 5:
      var value = new proto.apollo.drivers.gnss.config.Stream.Ntrip;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.Ntrip.deserializeBinaryFromReader);
      msg.setNtrip(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPushLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.apollo.drivers.gnss.config.Stream.Format} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSerial();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.drivers.gnss.config.Stream.Serial.serializeBinaryToWriter
    );
  }
  f = message.getTcp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.drivers.gnss.config.Stream.Tcp.serializeBinaryToWriter
    );
  }
  f = message.getUdp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.drivers.gnss.config.Stream.Udp.serializeBinaryToWriter
    );
  }
  f = message.getNtrip();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.drivers.gnss.config.Stream.Ntrip.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.drivers.gnss.config.Stream.Format = {
  UNKNOWN: 0,
  NMEA: 1,
  RTCM_V2: 2,
  RTCM_V3: 3,
  NOVATEL_TEXT: 10,
  NOVATEL_BINARY: 11,
  UBLOX_TEXT: 20,
  UBLOX_BINARY: 21
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.Stream.Serial.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.Stream.Serial} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Serial.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: msg.getDevice_asB64(),
    baudRate: jspb.Message.getFieldWithDefault(msg, 2, 9600)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Serial as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.Stream.Serial.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.device;

  /** @type {?|undefined} */
  this.baudRate;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Serial.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Serial}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.Stream.Serial();
  obj.device != null && jspb.Message.setField(msg, 1, obj.device);
  obj.baudRate != null && jspb.Message.setField(msg, 2, obj.baudRate);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Serial}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.Stream.Serial;
  return proto.apollo.drivers.gnss.config.Stream.Serial.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Serial} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Serial}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBaudRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.Stream.Serial.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Serial} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Serial.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes device = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.getDevice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device = 1;
 * This is a type-conversion wrapper around `getDevice()`
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.getDevice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevice()));
};


/**
 * optional bytes device = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevice()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.getDevice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevice()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Serial} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.setDevice = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Serial} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.clearDevice = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 baud_rate = 2;
 * @return {number}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.getBaudRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 9600));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Serial} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.setBaudRate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Serial} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.clearBaudRate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Serial.prototype.hasBaudRate = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.Stream.Tcp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.Stream.Tcp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 2, 3001)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Tcp as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.address;

  /** @type {?|undefined} */
  this.port;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Tcp.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Tcp}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.Stream.Tcp();
  obj.address != null && jspb.Message.setField(msg, 1, obj.address);
  obj.port != null && jspb.Message.setField(msg, 2, obj.port);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Tcp}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.Stream.Tcp;
  return proto.apollo.drivers.gnss.config.Stream.Tcp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Tcp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Tcp}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.Stream.Tcp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Tcp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Tcp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Tcp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 3001));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Tcp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Tcp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.clearPort = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Tcp.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.Stream.Udp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.Stream.Udp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Udp.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 2, 3001)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Udp as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.Stream.Udp.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.address;

  /** @type {?|undefined} */
  this.port;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Udp.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Udp}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.Stream.Udp();
  obj.address != null && jspb.Message.setField(msg, 1, obj.address);
  obj.port != null && jspb.Message.setField(msg, 2, obj.port);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Udp}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.Stream.Udp;
  return proto.apollo.drivers.gnss.config.Stream.Udp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Udp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Udp}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.Stream.Udp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Udp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Udp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Udp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Udp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 3001));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Udp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Udp} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.clearPort = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Udp.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.Stream.Ntrip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.Stream.Ntrip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 2, 2101),
    mountPoint: msg.getMountPoint_asB64(),
    user: msg.getUser_asB64(),
    password: msg.getPassword_asB64(),
    timeoutS: jspb.Message.getFieldWithDefault(msg, 6, 30)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Ntrip as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.address;

  /** @type {?|undefined} */
  this.port;

  /** @type {?|undefined} */
  this.mountPoint;

  /** @type {?|undefined} */
  this.user;

  /** @type {?|undefined} */
  this.password;

  /** @type {?|undefined} */
  this.timeoutS;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Ntrip.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.Stream.Ntrip();
  obj.address != null && jspb.Message.setField(msg, 1, obj.address);
  obj.port != null && jspb.Message.setField(msg, 2, obj.port);
  obj.mountPoint != null && jspb.Message.setField(msg, 3, obj.mountPoint);
  obj.user != null && jspb.Message.setField(msg, 4, obj.user);
  obj.password != null && jspb.Message.setField(msg, 5, obj.password);
  obj.timeoutS != null && jspb.Message.setField(msg, 6, obj.timeoutS);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.Stream.Ntrip;
  return proto.apollo.drivers.gnss.config.Stream.Ntrip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Ntrip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMountPoint(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassword(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.Stream.Ntrip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.Stream.Ntrip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 2101));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.clearPort = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes mount_point = 3;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getMountPoint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes mount_point = 3;
 * This is a type-conversion wrapper around `getMountPoint()`
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getMountPoint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMountPoint()));
};


/**
 * optional bytes mount_point = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMountPoint()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getMountPoint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMountPoint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.setMountPoint = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.clearMountPoint = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.hasMountPoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes user = 4;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes user = 4;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.setUser = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.clearUser = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes password = 5;
 * @return {!(string|Uint8Array)}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes password = 5;
 * This is a type-conversion wrapper around `getPassword()`
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassword()));
};


/**
 * optional bytes password = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassword()`
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 timeout_s = 6;
 * @return {number}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.getTimeoutS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 30));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.setTimeoutS = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream.Ntrip} returns this
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.clearTimeoutS = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.Ntrip.prototype.hasTimeoutS = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Format format = 1;
 * @return {!proto.apollo.drivers.gnss.config.Stream.Format}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.getFormat = function() {
  return /** @type {!proto.apollo.drivers.gnss.config.Stream.Format} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.apollo.drivers.gnss.config.Stream.Format} value
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.setFormat = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.clearFormat = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Serial serial = 2;
 * @return {?proto.apollo.drivers.gnss.config.Stream.Serial}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.getSerial = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream.Serial} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream.Serial, 2));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream.Serial|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
*/
proto.apollo.drivers.gnss.config.Stream.prototype.setSerial = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.apollo.drivers.gnss.config.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.clearSerial = function() {
  return this.setSerial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.hasSerial = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Tcp tcp = 3;
 * @return {?proto.apollo.drivers.gnss.config.Stream.Tcp}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.getTcp = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream.Tcp} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream.Tcp, 3));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream.Tcp|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
*/
proto.apollo.drivers.gnss.config.Stream.prototype.setTcp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.drivers.gnss.config.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.clearTcp = function() {
  return this.setTcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.hasTcp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Udp udp = 4;
 * @return {?proto.apollo.drivers.gnss.config.Stream.Udp}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.getUdp = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream.Udp} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream.Udp, 4));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream.Udp|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
*/
proto.apollo.drivers.gnss.config.Stream.prototype.setUdp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.drivers.gnss.config.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.clearUdp = function() {
  return this.setUdp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.hasUdp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Ntrip ntrip = 5;
 * @return {?proto.apollo.drivers.gnss.config.Stream.Ntrip}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.getNtrip = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream.Ntrip} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream.Ntrip, 5));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream.Ntrip|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
*/
proto.apollo.drivers.gnss.config.Stream.prototype.setNtrip = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.drivers.gnss.config.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.clearNtrip = function() {
  return this.setNtrip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.hasNtrip = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool push_location = 6;
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.getPushLocation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.setPushLocation = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Stream} returns this
 */
proto.apollo.drivers.gnss.config.Stream.prototype.clearPushLocation = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Stream.prototype.hasPushLocation = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.NovatelConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.NovatelConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.NovatelConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.NovatelConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    imuOrientation: jspb.Message.getFieldWithDefault(msg, 1, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NovatelConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.NovatelConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.imuOrientation;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.NovatelConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.NovatelConfig}
 */
proto.apollo.drivers.gnss.config.NovatelConfig.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.NovatelConfig();
  obj.imuOrientation != null && jspb.Message.setField(msg, 1, obj.imuOrientation);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.NovatelConfig}
 */
proto.apollo.drivers.gnss.config.NovatelConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.NovatelConfig;
  return proto.apollo.drivers.gnss.config.NovatelConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.NovatelConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.NovatelConfig}
 */
proto.apollo.drivers.gnss.config.NovatelConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImuOrientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.NovatelConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.NovatelConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.NovatelConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.NovatelConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 imu_orientation = 1;
 * @return {number}
 */
proto.apollo.drivers.gnss.config.NovatelConfig.prototype.getImuOrientation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.gnss.config.NovatelConfig} returns this
 */
proto.apollo.drivers.gnss.config.NovatelConfig.prototype.setImuOrientation = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.NovatelConfig} returns this
 */
proto.apollo.drivers.gnss.config.NovatelConfig.prototype.clearImuOrientation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.NovatelConfig.prototype.hasImuOrientation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.UbloxConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.UbloxConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.UbloxConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.UbloxConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of UbloxConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.UbloxConfig.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.UbloxConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.UbloxConfig}
 */
proto.apollo.drivers.gnss.config.UbloxConfig.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.UbloxConfig();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.UbloxConfig}
 */
proto.apollo.drivers.gnss.config.UbloxConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.UbloxConfig;
  return proto.apollo.drivers.gnss.config.UbloxConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.UbloxConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.UbloxConfig}
 */
proto.apollo.drivers.gnss.config.UbloxConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.UbloxConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.UbloxConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.UbloxConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.UbloxConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.TF.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.TF.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.TF} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.TF.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameId: jspb.Message.getFieldWithDefault(msg, 1, "world"),
    childFrameId: jspb.Message.getFieldWithDefault(msg, 2, "novatel"),
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TF as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.TF.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.frameId;

  /** @type {?|undefined} */
  this.childFrameId;

  /** @type {?|undefined} */
  this.enable;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.TF.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.TF}
 */
proto.apollo.drivers.gnss.config.TF.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.TF();
  obj.frameId != null && jspb.Message.setField(msg, 1, obj.frameId);
  obj.childFrameId != null && jspb.Message.setField(msg, 2, obj.childFrameId);
  obj.enable != null && jspb.Message.setField(msg, 3, obj.enable);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.TF}
 */
proto.apollo.drivers.gnss.config.TF.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.TF;
  return proto.apollo.drivers.gnss.config.TF.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.TF} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.TF}
 */
proto.apollo.drivers.gnss.config.TF.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildFrameId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.TF.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.TF.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.TF} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.TF.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string frame_id = 1;
 * @return {string}
 */
proto.apollo.drivers.gnss.config.TF.prototype.getFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "world"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.gnss.config.TF} returns this
 */
proto.apollo.drivers.gnss.config.TF.prototype.setFrameId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.TF} returns this
 */
proto.apollo.drivers.gnss.config.TF.prototype.clearFrameId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.TF.prototype.hasFrameId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string child_frame_id = 2;
 * @return {string}
 */
proto.apollo.drivers.gnss.config.TF.prototype.getChildFrameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "novatel"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.gnss.config.TF} returns this
 */
proto.apollo.drivers.gnss.config.TF.prototype.setChildFrameId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.TF} returns this
 */
proto.apollo.drivers.gnss.config.TF.prototype.clearChildFrameId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.TF.prototype.hasChildFrameId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enable = 3;
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.TF.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.gnss.config.TF} returns this
 */
proto.apollo.drivers.gnss.config.TF.prototype.setEnable = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.TF} returns this
 */
proto.apollo.drivers.gnss.config.TF.prototype.clearEnable = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.TF.prototype.hasEnable = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.drivers.gnss.config.Config.repeatedFields_ = [5,6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.drivers.gnss.config.Config.oneofGroups_ = [[7,8]];

/**
 * @enum {number}
 */
proto.apollo.drivers.gnss.config.Config.DeviceConfigCase = {
  DEVICE_CONFIG_NOT_SET: 0,
  NOVATEL_CONFIG: 7,
  UBLOX_CONFIG: 8
};

/**
 * @return {proto.apollo.drivers.gnss.config.Config.DeviceConfigCase}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getDeviceConfigCase = function() {
  return /** @type {proto.apollo.drivers.gnss.config.Config.DeviceConfigCase} */(jspb.Message.computeOneofCase(this, proto.apollo.drivers.gnss.config.Config.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.gnss.config.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.gnss.config.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.gnss.config.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.apollo.drivers.gnss.config.Stream.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.apollo.drivers.gnss.config.Stream.toObject(includeInstance, f),
    rtkFrom: (f = msg.getRtkFrom()) && proto.apollo.drivers.gnss.config.Stream.toObject(includeInstance, f),
    rtkTo: (f = msg.getRtkTo()) && proto.apollo.drivers.gnss.config.Stream.toObject(includeInstance, f),
    loginCommandsList: msg.getLoginCommandsList_asB64(),
    logoutCommandsList: msg.getLogoutCommandsList_asB64(),
    novatelConfig: (f = msg.getNovatelConfig()) && proto.apollo.drivers.gnss.config.NovatelConfig.toObject(includeInstance, f),
    ubloxConfig: (f = msg.getUbloxConfig()) && proto.apollo.drivers.gnss.config.UbloxConfig.toObject(includeInstance, f),
    rtkSolutionType: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    imuType: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    proj4Text: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    tf: (f = msg.getTf()) && proto.apollo.drivers.gnss.config.TF.toObject(includeInstance, f),
    wheelParameters: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    gpsbinFolder: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Config as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.gnss.config.Config.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.data;

  /** @type {?|undefined} */
  this.command;

  /** @type {?|undefined} */
  this.rtkFrom;

  /** @type {?|undefined} */
  this.rtkTo;

  /** @type {?|undefined} */
  this.loginCommandsList;

  /** @type {?|undefined} */
  this.logoutCommandsList;

  /** @type {?|undefined} */
  this.novatelConfig;

  /** @type {?|undefined} */
  this.ubloxConfig;

  /** @type {?|undefined} */
  this.rtkSolutionType;

  /** @type {?|undefined} */
  this.imuType;

  /** @type {?|undefined} */
  this.proj4Text;

  /** @type {?|undefined} */
  this.tf;

  /** @type {?|undefined} */
  this.wheelParameters;

  /** @type {?|undefined} */
  this.gpsbinFolder;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.gnss.config.Config.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.gnss.config.Config}
 */
proto.apollo.drivers.gnss.config.Config.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.gnss.config.Config();
  obj.data && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.drivers.gnss.config.Stream.fromObject(obj.data));
  obj.command && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.drivers.gnss.config.Stream.fromObject(obj.command));
  obj.rtkFrom && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.drivers.gnss.config.Stream.fromObject(obj.rtkFrom));
  obj.rtkTo && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.drivers.gnss.config.Stream.fromObject(obj.rtkTo));
  obj.loginCommandsList != null && jspb.Message.setField(msg, 5, obj.loginCommandsList);
  obj.logoutCommandsList != null && jspb.Message.setField(msg, 6, obj.logoutCommandsList);
  obj.novatelConfig && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.drivers.gnss.config.NovatelConfig.fromObject(obj.novatelConfig));
  obj.ubloxConfig && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.drivers.gnss.config.UbloxConfig.fromObject(obj.ubloxConfig));
  obj.rtkSolutionType != null && jspb.Message.setField(msg, 9, obj.rtkSolutionType);
  obj.imuType != null && jspb.Message.setField(msg, 10, obj.imuType);
  obj.proj4Text != null && jspb.Message.setField(msg, 11, obj.proj4Text);
  obj.tf && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.drivers.gnss.config.TF.fromObject(obj.tf));
  obj.wheelParameters != null && jspb.Message.setField(msg, 13, obj.wheelParameters);
  obj.gpsbinFolder != null && jspb.Message.setField(msg, 14, obj.gpsbinFolder);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.gnss.config.Config}
 */
proto.apollo.drivers.gnss.config.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.gnss.config.Config;
  return proto.apollo.drivers.gnss.config.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.gnss.config.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.gnss.config.Config}
 */
proto.apollo.drivers.gnss.config.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.drivers.gnss.config.Stream;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.apollo.drivers.gnss.config.Stream;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 3:
      var value = new proto.apollo.drivers.gnss.config.Stream;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.deserializeBinaryFromReader);
      msg.setRtkFrom(value);
      break;
    case 4:
      var value = new proto.apollo.drivers.gnss.config.Stream;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.Stream.deserializeBinaryFromReader);
      msg.setRtkTo(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addLoginCommands(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addLogoutCommands(value);
      break;
    case 7:
      var value = new proto.apollo.drivers.gnss.config.NovatelConfig;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.NovatelConfig.deserializeBinaryFromReader);
      msg.setNovatelConfig(value);
      break;
    case 8:
      var value = new proto.apollo.drivers.gnss.config.UbloxConfig;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.UbloxConfig.deserializeBinaryFromReader);
      msg.setUbloxConfig(value);
      break;
    case 9:
      var value = /** @type {!proto.apollo.drivers.gnss.config.Config.RtkSolutionType} */ (reader.readEnum());
      msg.setRtkSolutionType(value);
      break;
    case 10:
      var value = /** @type {!proto.apollo.drivers.gnss.config.ImuType} */ (reader.readEnum());
      msg.setImuType(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setProj4Text(value);
      break;
    case 12:
      var value = new proto.apollo.drivers.gnss.config.TF;
      reader.readMessage(value,proto.apollo.drivers.gnss.config.TF.deserializeBinaryFromReader);
      msg.setTf(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setWheelParameters(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setGpsbinFolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.gnss.config.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.gnss.config.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.gnss.config.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.gnss.config.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.drivers.gnss.config.Stream.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.drivers.gnss.config.Stream.serializeBinaryToWriter
    );
  }
  f = message.getRtkFrom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.drivers.gnss.config.Stream.serializeBinaryToWriter
    );
  }
  f = message.getRtkTo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.drivers.gnss.config.Stream.serializeBinaryToWriter
    );
  }
  f = message.getLoginCommandsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getLogoutCommandsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      6,
      f
    );
  }
  f = message.getNovatelConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.drivers.gnss.config.NovatelConfig.serializeBinaryToWriter
    );
  }
  f = message.getUbloxConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.drivers.gnss.config.UbloxConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.apollo.drivers.gnss.config.Config.RtkSolutionType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.gnss.config.ImuType} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTf();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.drivers.gnss.config.TF.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.apollo.drivers.gnss.config.Config.RtkSolutionType = {
  RTK_RECEIVER_SOLUTION: 1,
  RTK_SOFTWARE_SOLUTION: 2
};

/**
 * optional Stream data = 1;
 * @return {?proto.apollo.drivers.gnss.config.Stream}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getData = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream, 1));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
*/
proto.apollo.drivers.gnss.config.Config.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Stream command = 2;
 * @return {?proto.apollo.drivers.gnss.config.Stream}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getCommand = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream, 2));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
*/
proto.apollo.drivers.gnss.config.Config.prototype.setCommand = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Stream rtk_from = 3;
 * @return {?proto.apollo.drivers.gnss.config.Stream}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getRtkFrom = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream, 3));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
*/
proto.apollo.drivers.gnss.config.Config.prototype.setRtkFrom = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearRtkFrom = function() {
  return this.setRtkFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasRtkFrom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Stream rtk_to = 4;
 * @return {?proto.apollo.drivers.gnss.config.Stream}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getRtkTo = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.Stream} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.Stream, 4));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.Stream|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
*/
proto.apollo.drivers.gnss.config.Config.prototype.setRtkTo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearRtkTo = function() {
  return this.setRtkTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasRtkTo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated bytes login_commands = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getLoginCommandsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes login_commands = 5;
 * This is a type-conversion wrapper around `getLoginCommandsList()`
 * @return {!Array<string>}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getLoginCommandsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getLoginCommandsList()));
};


/**
 * repeated bytes login_commands = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLoginCommandsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getLoginCommandsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getLoginCommandsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.setLoginCommandsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.addLoginCommands = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearLoginCommandsList = function() {
  return this.setLoginCommandsList([]);
};


/**
 * repeated bytes logout_commands = 6;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getLogoutCommandsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * repeated bytes logout_commands = 6;
 * This is a type-conversion wrapper around `getLogoutCommandsList()`
 * @return {!Array<string>}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getLogoutCommandsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getLogoutCommandsList()));
};


/**
 * repeated bytes logout_commands = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogoutCommandsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getLogoutCommandsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getLogoutCommandsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.setLogoutCommandsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.addLogoutCommands = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearLogoutCommandsList = function() {
  return this.setLogoutCommandsList([]);
};


/**
 * optional NovatelConfig novatel_config = 7;
 * @return {?proto.apollo.drivers.gnss.config.NovatelConfig}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getNovatelConfig = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.NovatelConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.NovatelConfig, 7));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.NovatelConfig|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
*/
proto.apollo.drivers.gnss.config.Config.prototype.setNovatelConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.drivers.gnss.config.Config.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearNovatelConfig = function() {
  return this.setNovatelConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasNovatelConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UbloxConfig ublox_config = 8;
 * @return {?proto.apollo.drivers.gnss.config.UbloxConfig}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getUbloxConfig = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.UbloxConfig} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.UbloxConfig, 8));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.UbloxConfig|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
*/
proto.apollo.drivers.gnss.config.Config.prototype.setUbloxConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.drivers.gnss.config.Config.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearUbloxConfig = function() {
  return this.setUbloxConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasUbloxConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RtkSolutionType rtk_solution_type = 9;
 * @return {!proto.apollo.drivers.gnss.config.Config.RtkSolutionType}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getRtkSolutionType = function() {
  return /** @type {!proto.apollo.drivers.gnss.config.Config.RtkSolutionType} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/**
 * @param {!proto.apollo.drivers.gnss.config.Config.RtkSolutionType} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.setRtkSolutionType = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearRtkSolutionType = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasRtkSolutionType = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ImuType imu_type = 10;
 * @return {!proto.apollo.drivers.gnss.config.ImuType}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getImuType = function() {
  return /** @type {!proto.apollo.drivers.gnss.config.ImuType} */ (jspb.Message.getFieldWithDefault(this, 10, 13));
};


/**
 * @param {!proto.apollo.drivers.gnss.config.ImuType} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.setImuType = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearImuType = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasImuType = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string proj4_text = 11;
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getProj4Text = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.setProj4Text = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearProj4Text = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasProj4Text = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional TF tf = 12;
 * @return {?proto.apollo.drivers.gnss.config.TF}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getTf = function() {
  return /** @type{?proto.apollo.drivers.gnss.config.TF} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.gnss.config.TF, 12));
};


/**
 * @param {?proto.apollo.drivers.gnss.config.TF|undefined} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
*/
proto.apollo.drivers.gnss.config.Config.prototype.setTf = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearTf = function() {
  return this.setTf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasTf = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string wheel_parameters = 13;
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getWheelParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.setWheelParameters = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearWheelParameters = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasWheelParameters = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string gpsbin_folder = 14;
 * @return {string}
 */
proto.apollo.drivers.gnss.config.Config.prototype.getGpsbinFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.setGpsbinFolder = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.gnss.config.Config} returns this
 */
proto.apollo.drivers.gnss.config.Config.prototype.clearGpsbinFolder = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.gnss.config.Config.prototype.hasGpsbinFolder = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * @enum {number}
 */
proto.apollo.drivers.gnss.config.ImuType = {
  IMAR_FSAS: 13,
  ISA100C: 26,
  ADIS16488: 31,
  STIM300: 32,
  ISA100: 34,
  ISA100_400HZ: 38,
  ISA100C_400HZ: 39,
  CPT_XW5651: 40,
  G320N: 41,
  UM442: 42,
  IAM20680: 57
};

goog.object.extend(exports, proto.apollo.drivers.gnss.config);
