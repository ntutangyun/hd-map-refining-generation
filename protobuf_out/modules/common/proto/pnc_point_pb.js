// source: modules/common/proto/pnc_point.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.common.FrenetFramePoint', null, global);
goog.exportSymbol('proto.apollo.common.GaussianInfo', null, global);
goog.exportSymbol('proto.apollo.common.Path', null, global);
goog.exportSymbol('proto.apollo.common.PathPoint', null, global);
goog.exportSymbol('proto.apollo.common.SLPoint', null, global);
goog.exportSymbol('proto.apollo.common.SpeedPoint', null, global);
goog.exportSymbol('proto.apollo.common.Trajectory', null, global);
goog.exportSymbol('proto.apollo.common.TrajectoryPoint', null, global);
goog.exportSymbol('proto.apollo.common.VehicleMotion', null, global);
goog.exportSymbol('proto.apollo.common.VehicleMotionPoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.SLPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.SLPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.SLPoint.displayName = 'proto.apollo.common.SLPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.FrenetFramePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.FrenetFramePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.FrenetFramePoint.displayName = 'proto.apollo.common.FrenetFramePoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.SpeedPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.SpeedPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.SpeedPoint.displayName = 'proto.apollo.common.SpeedPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.PathPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.PathPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.PathPoint.displayName = 'proto.apollo.common.PathPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.Path = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.common.Path.repeatedFields_, null);
};
goog.inherits(proto.apollo.common.Path, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.Path.displayName = 'proto.apollo.common.Path';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.TrajectoryPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.TrajectoryPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.TrajectoryPoint.displayName = 'proto.apollo.common.TrajectoryPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.Trajectory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.common.Trajectory.repeatedFields_, null);
};
goog.inherits(proto.apollo.common.Trajectory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.Trajectory.displayName = 'proto.apollo.common.Trajectory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.VehicleMotionPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.VehicleMotionPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.VehicleMotionPoint.displayName = 'proto.apollo.common.VehicleMotionPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.VehicleMotion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.common.VehicleMotion.repeatedFields_, null);
};
goog.inherits(proto.apollo.common.VehicleMotion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.VehicleMotion.displayName = 'proto.apollo.common.VehicleMotion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.common.GaussianInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.common.GaussianInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.common.GaussianInfo.displayName = 'proto.apollo.common.GaussianInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.SLPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.SLPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.SLPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.SLPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    l: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SLPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.SLPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.l;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.SLPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.SLPoint}
 */
proto.apollo.common.SLPoint.fromObject = function(obj) {
  var msg = new proto.apollo.common.SLPoint();
  obj.s != null && jspb.Message.setField(msg, 1, obj.s);
  obj.l != null && jspb.Message.setField(msg, 2, obj.l);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.SLPoint}
 */
proto.apollo.common.SLPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.SLPoint;
  return proto.apollo.common.SLPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.SLPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.SLPoint}
 */
proto.apollo.common.SLPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.SLPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.SLPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.SLPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.SLPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double s = 1;
 * @return {number}
 */
proto.apollo.common.SLPoint.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.SLPoint} returns this
 */
proto.apollo.common.SLPoint.prototype.setS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.SLPoint} returns this
 */
proto.apollo.common.SLPoint.prototype.clearS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.SLPoint.prototype.hasS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double l = 2;
 * @return {number}
 */
proto.apollo.common.SLPoint.prototype.getL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.SLPoint} returns this
 */
proto.apollo.common.SLPoint.prototype.setL = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.SLPoint} returns this
 */
proto.apollo.common.SLPoint.prototype.clearL = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.SLPoint.prototype.hasL = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.FrenetFramePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.FrenetFramePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.FrenetFramePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.FrenetFramePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    l: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    dl: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    ddl: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of FrenetFramePoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.FrenetFramePoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.l;

  /** @type {?|undefined} */
  this.dl;

  /** @type {?|undefined} */
  this.ddl;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.FrenetFramePoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.FrenetFramePoint}
 */
proto.apollo.common.FrenetFramePoint.fromObject = function(obj) {
  var msg = new proto.apollo.common.FrenetFramePoint();
  obj.s != null && jspb.Message.setField(msg, 1, obj.s);
  obj.l != null && jspb.Message.setField(msg, 2, obj.l);
  obj.dl != null && jspb.Message.setField(msg, 3, obj.dl);
  obj.ddl != null && jspb.Message.setField(msg, 4, obj.ddl);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.FrenetFramePoint}
 */
proto.apollo.common.FrenetFramePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.FrenetFramePoint;
  return proto.apollo.common.FrenetFramePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.FrenetFramePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.FrenetFramePoint}
 */
proto.apollo.common.FrenetFramePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setL(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDdl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.FrenetFramePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.FrenetFramePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.FrenetFramePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.FrenetFramePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double s = 1;
 * @return {number}
 */
proto.apollo.common.FrenetFramePoint.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.setS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.clearS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.FrenetFramePoint.prototype.hasS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double l = 2;
 * @return {number}
 */
proto.apollo.common.FrenetFramePoint.prototype.getL = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.setL = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.clearL = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.FrenetFramePoint.prototype.hasL = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double dl = 3;
 * @return {number}
 */
proto.apollo.common.FrenetFramePoint.prototype.getDl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.setDl = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.clearDl = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.FrenetFramePoint.prototype.hasDl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double ddl = 4;
 * @return {number}
 */
proto.apollo.common.FrenetFramePoint.prototype.getDdl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.setDdl = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.FrenetFramePoint} returns this
 */
proto.apollo.common.FrenetFramePoint.prototype.clearDdl = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.FrenetFramePoint.prototype.hasDdl = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.SpeedPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.SpeedPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.SpeedPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.SpeedPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    t: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    v: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    a: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    da: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpeedPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.SpeedPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.t;

  /** @type {?|undefined} */
  this.v;

  /** @type {?|undefined} */
  this.a;

  /** @type {?|undefined} */
  this.da;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.SpeedPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.SpeedPoint}
 */
proto.apollo.common.SpeedPoint.fromObject = function(obj) {
  var msg = new proto.apollo.common.SpeedPoint();
  obj.s != null && jspb.Message.setField(msg, 1, obj.s);
  obj.t != null && jspb.Message.setField(msg, 2, obj.t);
  obj.v != null && jspb.Message.setField(msg, 3, obj.v);
  obj.a != null && jspb.Message.setField(msg, 4, obj.a);
  obj.da != null && jspb.Message.setField(msg, 5, obj.da);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.SpeedPoint}
 */
proto.apollo.common.SpeedPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.SpeedPoint;
  return proto.apollo.common.SpeedPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.SpeedPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.SpeedPoint}
 */
proto.apollo.common.SpeedPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setT(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setV(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDa(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.SpeedPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.SpeedPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.SpeedPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.SpeedPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double s = 1;
 * @return {number}
 */
proto.apollo.common.SpeedPoint.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.setS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.clearS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.SpeedPoint.prototype.hasS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double t = 2;
 * @return {number}
 */
proto.apollo.common.SpeedPoint.prototype.getT = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.setT = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.clearT = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.SpeedPoint.prototype.hasT = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double v = 3;
 * @return {number}
 */
proto.apollo.common.SpeedPoint.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.setV = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.clearV = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.SpeedPoint.prototype.hasV = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double a = 4;
 * @return {number}
 */
proto.apollo.common.SpeedPoint.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.setA = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.clearA = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.SpeedPoint.prototype.hasA = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double da = 5;
 * @return {number}
 */
proto.apollo.common.SpeedPoint.prototype.getDa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.setDa = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.SpeedPoint} returns this
 */
proto.apollo.common.SpeedPoint.prototype.clearDa = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.SpeedPoint.prototype.hasDa = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.PathPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.PathPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.PathPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.PathPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    theta: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    kappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    s: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    dkappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    ddkappa: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    laneId: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    xDerivative: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    yDerivative: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PathPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.PathPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.x;

  /** @type {?|undefined} */
  this.y;

  /** @type {?|undefined} */
  this.z;

  /** @type {?|undefined} */
  this.theta;

  /** @type {?|undefined} */
  this.kappa;

  /** @type {?|undefined} */
  this.s;

  /** @type {?|undefined} */
  this.dkappa;

  /** @type {?|undefined} */
  this.ddkappa;

  /** @type {?|undefined} */
  this.laneId;

  /** @type {?|undefined} */
  this.xDerivative;

  /** @type {?|undefined} */
  this.yDerivative;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.PathPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.PathPoint}
 */
proto.apollo.common.PathPoint.fromObject = function(obj) {
  var msg = new proto.apollo.common.PathPoint();
  obj.x != null && jspb.Message.setField(msg, 1, obj.x);
  obj.y != null && jspb.Message.setField(msg, 2, obj.y);
  obj.z != null && jspb.Message.setField(msg, 3, obj.z);
  obj.theta != null && jspb.Message.setField(msg, 4, obj.theta);
  obj.kappa != null && jspb.Message.setField(msg, 5, obj.kappa);
  obj.s != null && jspb.Message.setField(msg, 6, obj.s);
  obj.dkappa != null && jspb.Message.setField(msg, 7, obj.dkappa);
  obj.ddkappa != null && jspb.Message.setField(msg, 8, obj.ddkappa);
  obj.laneId != null && jspb.Message.setField(msg, 9, obj.laneId);
  obj.xDerivative != null && jspb.Message.setField(msg, 10, obj.xDerivative);
  obj.yDerivative != null && jspb.Message.setField(msg, 11, obj.yDerivative);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.PathPoint}
 */
proto.apollo.common.PathPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.PathPoint;
  return proto.apollo.common.PathPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.PathPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.PathPoint}
 */
proto.apollo.common.PathPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setKappa(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setS(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDkappa(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDdkappa(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLaneId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXDerivative(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYDerivative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.PathPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.PathPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.PathPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.PathPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double theta = 4;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setTheta = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearTheta = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasTheta = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double kappa = 5;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getKappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setKappa = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearKappa = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasKappa = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double s = 6;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setS = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearS = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasS = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double dkappa = 7;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getDkappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setDkappa = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearDkappa = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasDkappa = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double ddkappa = 8;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getDdkappa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setDdkappa = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearDdkappa = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasDdkappa = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string lane_id = 9;
 * @return {string}
 */
proto.apollo.common.PathPoint.prototype.getLaneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setLaneId = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearLaneId = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasLaneId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double x_derivative = 10;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getXDerivative = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setXDerivative = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearXDerivative = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasXDerivative = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double y_derivative = 11;
 * @return {number}
 */
proto.apollo.common.PathPoint.prototype.getYDerivative = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.setYDerivative = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.PathPoint} returns this
 */
proto.apollo.common.PathPoint.prototype.clearYDerivative = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.PathPoint.prototype.hasYDerivative = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.common.Path.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.Path.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.Path.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.Path} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Path.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    pathPointList: jspb.Message.toObjectList(msg.getPathPointList(),
    proto.apollo.common.PathPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Path as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.Path.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.pathPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.Path.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.Path}
 */
proto.apollo.common.Path.fromObject = function(obj) {
  var msg = new proto.apollo.common.Path();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.pathPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.pathPointList.map(
          proto.apollo.common.PathPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.Path}
 */
proto.apollo.common.Path.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.Path;
  return proto.apollo.common.Path.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.Path} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.Path}
 */
proto.apollo.common.Path.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.apollo.common.PathPoint;
      reader.readMessage(value,proto.apollo.common.PathPoint.deserializeBinaryFromReader);
      msg.addPathPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.Path.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.Path.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.Path} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Path.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPathPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.common.PathPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.common.Path.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.Path} returns this
 */
proto.apollo.common.Path.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.Path} returns this
 */
proto.apollo.common.Path.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.Path.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PathPoint path_point = 2;
 * @return {!Array<!proto.apollo.common.PathPoint>}
 */
proto.apollo.common.Path.prototype.getPathPointList = function() {
  return /** @type{!Array<!proto.apollo.common.PathPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.common.PathPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.common.PathPoint>} value
 * @return {!proto.apollo.common.Path} returns this
*/
proto.apollo.common.Path.prototype.setPathPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.common.PathPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.PathPoint}
 */
proto.apollo.common.Path.prototype.addPathPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.common.PathPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.common.Path} returns this
 */
proto.apollo.common.Path.prototype.clearPathPointList = function() {
  return this.setPathPointList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.TrajectoryPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.TrajectoryPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.TrajectoryPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.TrajectoryPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathPoint: (f = msg.getPathPoint()) && proto.apollo.common.PathPoint.toObject(includeInstance, f),
    v: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    a: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    relativeTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    da: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    steer: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    gaussianInfo: (f = msg.getGaussianInfo()) && proto.apollo.common.GaussianInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of TrajectoryPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.TrajectoryPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.pathPoint;

  /** @type {?|undefined} */
  this.v;

  /** @type {?|undefined} */
  this.a;

  /** @type {?|undefined} */
  this.relativeTime;

  /** @type {?|undefined} */
  this.da;

  /** @type {?|undefined} */
  this.steer;

  /** @type {?|undefined} */
  this.gaussianInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.TrajectoryPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.TrajectoryPoint.fromObject = function(obj) {
  var msg = new proto.apollo.common.TrajectoryPoint();
  obj.pathPoint && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.common.PathPoint.fromObject(obj.pathPoint));
  obj.v != null && jspb.Message.setField(msg, 2, obj.v);
  obj.a != null && jspb.Message.setField(msg, 3, obj.a);
  obj.relativeTime != null && jspb.Message.setField(msg, 4, obj.relativeTime);
  obj.da != null && jspb.Message.setField(msg, 5, obj.da);
  obj.steer != null && jspb.Message.setField(msg, 6, obj.steer);
  obj.gaussianInfo && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.common.GaussianInfo.fromObject(obj.gaussianInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.TrajectoryPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.TrajectoryPoint;
  return proto.apollo.common.TrajectoryPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.TrajectoryPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.TrajectoryPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.common.PathPoint;
      reader.readMessage(value,proto.apollo.common.PathPoint.deserializeBinaryFromReader);
      msg.setPathPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setV(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setA(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRelativeTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDa(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteer(value);
      break;
    case 7:
      var value = new proto.apollo.common.GaussianInfo;
      reader.readMessage(value,proto.apollo.common.GaussianInfo.deserializeBinaryFromReader);
      msg.setGaussianInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.TrajectoryPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.TrajectoryPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.TrajectoryPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.TrajectoryPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.common.PathPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getGaussianInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.common.GaussianInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional PathPoint path_point = 1;
 * @return {?proto.apollo.common.PathPoint}
 */
proto.apollo.common.TrajectoryPoint.prototype.getPathPoint = function() {
  return /** @type{?proto.apollo.common.PathPoint} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.PathPoint, 1));
};


/**
 * @param {?proto.apollo.common.PathPoint|undefined} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
*/
proto.apollo.common.TrajectoryPoint.prototype.setPathPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearPathPoint = function() {
  return this.setPathPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasPathPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double v = 2;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setV = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearV = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasV = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double a = 3;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setA = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearA = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasA = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double relative_time = 4;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getRelativeTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setRelativeTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearRelativeTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasRelativeTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double da = 5;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getDa = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setDa = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearDa = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasDa = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double steer = 6;
 * @return {number}
 */
proto.apollo.common.TrajectoryPoint.prototype.getSteer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.setSteer = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearSteer = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasSteer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GaussianInfo gaussian_info = 7;
 * @return {?proto.apollo.common.GaussianInfo}
 */
proto.apollo.common.TrajectoryPoint.prototype.getGaussianInfo = function() {
  return /** @type{?proto.apollo.common.GaussianInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.GaussianInfo, 7));
};


/**
 * @param {?proto.apollo.common.GaussianInfo|undefined} value
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
*/
proto.apollo.common.TrajectoryPoint.prototype.setGaussianInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.TrajectoryPoint} returns this
 */
proto.apollo.common.TrajectoryPoint.prototype.clearGaussianInfo = function() {
  return this.setGaussianInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.TrajectoryPoint.prototype.hasGaussianInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.common.Trajectory.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.Trajectory.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.Trajectory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.Trajectory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Trajectory.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    trajectoryPointList: jspb.Message.toObjectList(msg.getTrajectoryPointList(),
    proto.apollo.common.TrajectoryPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Trajectory as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.Trajectory.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.trajectoryPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.Trajectory.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.Trajectory}
 */
proto.apollo.common.Trajectory.fromObject = function(obj) {
  var msg = new proto.apollo.common.Trajectory();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.trajectoryPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.trajectoryPointList.map(
          proto.apollo.common.TrajectoryPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.Trajectory}
 */
proto.apollo.common.Trajectory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.Trajectory;
  return proto.apollo.common.Trajectory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.Trajectory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.Trajectory}
 */
proto.apollo.common.Trajectory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.apollo.common.TrajectoryPoint;
      reader.readMessage(value,proto.apollo.common.TrajectoryPoint.deserializeBinaryFromReader);
      msg.addTrajectoryPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.Trajectory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.Trajectory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.Trajectory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.Trajectory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTrajectoryPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.common.TrajectoryPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.common.Trajectory.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.Trajectory} returns this
 */
proto.apollo.common.Trajectory.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.Trajectory} returns this
 */
proto.apollo.common.Trajectory.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.Trajectory.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TrajectoryPoint trajectory_point = 2;
 * @return {!Array<!proto.apollo.common.TrajectoryPoint>}
 */
proto.apollo.common.Trajectory.prototype.getTrajectoryPointList = function() {
  return /** @type{!Array<!proto.apollo.common.TrajectoryPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.common.TrajectoryPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.common.TrajectoryPoint>} value
 * @return {!proto.apollo.common.Trajectory} returns this
*/
proto.apollo.common.Trajectory.prototype.setTrajectoryPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.common.TrajectoryPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.Trajectory.prototype.addTrajectoryPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.common.TrajectoryPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.common.Trajectory} returns this
 */
proto.apollo.common.Trajectory.prototype.clearTrajectoryPointList = function() {
  return this.setTrajectoryPointList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.VehicleMotionPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.VehicleMotionPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.VehicleMotionPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleMotionPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    trajectoryPoint: (f = msg.getTrajectoryPoint()) && proto.apollo.common.TrajectoryPoint.toObject(includeInstance, f),
    steer: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VehicleMotionPoint as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.VehicleMotionPoint.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.trajectoryPoint;

  /** @type {?|undefined} */
  this.steer;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.VehicleMotionPoint.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.VehicleMotionPoint}
 */
proto.apollo.common.VehicleMotionPoint.fromObject = function(obj) {
  var msg = new proto.apollo.common.VehicleMotionPoint();
  obj.trajectoryPoint && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.common.TrajectoryPoint.fromObject(obj.trajectoryPoint));
  obj.steer != null && jspb.Message.setField(msg, 2, obj.steer);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.VehicleMotionPoint}
 */
proto.apollo.common.VehicleMotionPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.VehicleMotionPoint;
  return proto.apollo.common.VehicleMotionPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.VehicleMotionPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.VehicleMotionPoint}
 */
proto.apollo.common.VehicleMotionPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.common.TrajectoryPoint;
      reader.readMessage(value,proto.apollo.common.TrajectoryPoint.deserializeBinaryFromReader);
      msg.setTrajectoryPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSteer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.VehicleMotionPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.VehicleMotionPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.VehicleMotionPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleMotionPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrajectoryPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.common.TrajectoryPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional TrajectoryPoint trajectory_point = 1;
 * @return {?proto.apollo.common.TrajectoryPoint}
 */
proto.apollo.common.VehicleMotionPoint.prototype.getTrajectoryPoint = function() {
  return /** @type{?proto.apollo.common.TrajectoryPoint} */ (
    jspb.Message.getWrapperField(this, proto.apollo.common.TrajectoryPoint, 1));
};


/**
 * @param {?proto.apollo.common.TrajectoryPoint|undefined} value
 * @return {!proto.apollo.common.VehicleMotionPoint} returns this
*/
proto.apollo.common.VehicleMotionPoint.prototype.setTrajectoryPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.common.VehicleMotionPoint} returns this
 */
proto.apollo.common.VehicleMotionPoint.prototype.clearTrajectoryPoint = function() {
  return this.setTrajectoryPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleMotionPoint.prototype.hasTrajectoryPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double steer = 2;
 * @return {number}
 */
proto.apollo.common.VehicleMotionPoint.prototype.getSteer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.VehicleMotionPoint} returns this
 */
proto.apollo.common.VehicleMotionPoint.prototype.setSteer = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleMotionPoint} returns this
 */
proto.apollo.common.VehicleMotionPoint.prototype.clearSteer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleMotionPoint.prototype.hasSteer = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.common.VehicleMotion.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.VehicleMotion.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.VehicleMotion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.VehicleMotion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleMotion.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    vehicleMotionPointList: jspb.Message.toObjectList(msg.getVehicleMotionPointList(),
    proto.apollo.common.VehicleMotionPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of VehicleMotion as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.VehicleMotion.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.vehicleMotionPointList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.VehicleMotion.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.VehicleMotion}
 */
proto.apollo.common.VehicleMotion.fromObject = function(obj) {
  var msg = new proto.apollo.common.VehicleMotion();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.vehicleMotionPointList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.vehicleMotionPointList.map(
          proto.apollo.common.VehicleMotionPoint.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.VehicleMotion}
 */
proto.apollo.common.VehicleMotion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.VehicleMotion;
  return proto.apollo.common.VehicleMotion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.VehicleMotion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.VehicleMotion}
 */
proto.apollo.common.VehicleMotion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.apollo.common.VehicleMotionPoint;
      reader.readMessage(value,proto.apollo.common.VehicleMotionPoint.deserializeBinaryFromReader);
      msg.addVehicleMotionPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.VehicleMotion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.VehicleMotion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.VehicleMotion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.VehicleMotion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVehicleMotionPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.common.VehicleMotionPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.common.VehicleMotion.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.common.VehicleMotion} returns this
 */
proto.apollo.common.VehicleMotion.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.VehicleMotion} returns this
 */
proto.apollo.common.VehicleMotion.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.VehicleMotion.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated VehicleMotionPoint vehicle_motion_point = 2;
 * @return {!Array<!proto.apollo.common.VehicleMotionPoint>}
 */
proto.apollo.common.VehicleMotion.prototype.getVehicleMotionPointList = function() {
  return /** @type{!Array<!proto.apollo.common.VehicleMotionPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.common.VehicleMotionPoint, 2));
};


/**
 * @param {!Array<!proto.apollo.common.VehicleMotionPoint>} value
 * @return {!proto.apollo.common.VehicleMotion} returns this
*/
proto.apollo.common.VehicleMotion.prototype.setVehicleMotionPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.common.VehicleMotionPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.common.VehicleMotionPoint}
 */
proto.apollo.common.VehicleMotion.prototype.addVehicleMotionPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.common.VehicleMotionPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.common.VehicleMotion} returns this
 */
proto.apollo.common.VehicleMotion.prototype.clearVehicleMotionPointList = function() {
  return this.setVehicleMotionPointList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.common.GaussianInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.common.GaussianInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.common.GaussianInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.GaussianInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigmaX: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    sigmaY: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    correlation: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    areaProbability: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    ellipseA: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    ellipseB: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    thetaA: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of GaussianInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.common.GaussianInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sigmaX;

  /** @type {?|undefined} */
  this.sigmaY;

  /** @type {?|undefined} */
  this.correlation;

  /** @type {?|undefined} */
  this.areaProbability;

  /** @type {?|undefined} */
  this.ellipseA;

  /** @type {?|undefined} */
  this.ellipseB;

  /** @type {?|undefined} */
  this.thetaA;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.common.GaussianInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.common.GaussianInfo}
 */
proto.apollo.common.GaussianInfo.fromObject = function(obj) {
  var msg = new proto.apollo.common.GaussianInfo();
  obj.sigmaX != null && jspb.Message.setField(msg, 1, obj.sigmaX);
  obj.sigmaY != null && jspb.Message.setField(msg, 2, obj.sigmaY);
  obj.correlation != null && jspb.Message.setField(msg, 3, obj.correlation);
  obj.areaProbability != null && jspb.Message.setField(msg, 4, obj.areaProbability);
  obj.ellipseA != null && jspb.Message.setField(msg, 5, obj.ellipseA);
  obj.ellipseB != null && jspb.Message.setField(msg, 6, obj.ellipseB);
  obj.thetaA != null && jspb.Message.setField(msg, 7, obj.thetaA);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.common.GaussianInfo}
 */
proto.apollo.common.GaussianInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.common.GaussianInfo;
  return proto.apollo.common.GaussianInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.common.GaussianInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.common.GaussianInfo}
 */
proto.apollo.common.GaussianInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSigmaX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSigmaY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCorrelation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAreaProbability(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEllipseA(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEllipseB(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThetaA(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.common.GaussianInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.common.GaussianInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.common.GaussianInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.common.GaussianInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional double sigma_x = 1;
 * @return {number}
 */
proto.apollo.common.GaussianInfo.prototype.getSigmaX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.setSigmaX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.clearSigmaX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.GaussianInfo.prototype.hasSigmaX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double sigma_y = 2;
 * @return {number}
 */
proto.apollo.common.GaussianInfo.prototype.getSigmaY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.setSigmaY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.clearSigmaY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.GaussianInfo.prototype.hasSigmaY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double correlation = 3;
 * @return {number}
 */
proto.apollo.common.GaussianInfo.prototype.getCorrelation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.setCorrelation = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.clearCorrelation = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.GaussianInfo.prototype.hasCorrelation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double area_probability = 4;
 * @return {number}
 */
proto.apollo.common.GaussianInfo.prototype.getAreaProbability = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.setAreaProbability = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.clearAreaProbability = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.GaussianInfo.prototype.hasAreaProbability = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ellipse_a = 5;
 * @return {number}
 */
proto.apollo.common.GaussianInfo.prototype.getEllipseA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.setEllipseA = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.clearEllipseA = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.GaussianInfo.prototype.hasEllipseA = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double ellipse_b = 6;
 * @return {number}
 */
proto.apollo.common.GaussianInfo.prototype.getEllipseB = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.setEllipseB = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.clearEllipseB = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.GaussianInfo.prototype.hasEllipseB = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double theta_a = 7;
 * @return {number}
 */
proto.apollo.common.GaussianInfo.prototype.getThetaA = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.setThetaA = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.common.GaussianInfo} returns this
 */
proto.apollo.common.GaussianInfo.prototype.clearThetaA = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.common.GaussianInfo.prototype.hasThetaA = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.apollo.common);
