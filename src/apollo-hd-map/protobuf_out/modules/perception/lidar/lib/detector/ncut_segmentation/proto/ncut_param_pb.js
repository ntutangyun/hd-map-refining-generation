// source: modules/perception/lidar/lib/detector/ncut_segmentation/proto/ncut_param.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.lidar.NCutParam', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.NCutSegmentationParam', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.NCutSegmentationParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.NCutSegmentationParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.NCutSegmentationParam.displayName = 'proto.apollo.perception.lidar.NCutSegmentationParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.NCutParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.NCutParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.NCutParam.displayName = 'proto.apollo.perception.lidar.NCutParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.NCutSegmentationParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.NCutSegmentationParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.NCutSegmentationParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    gridRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 80.0),
    heightThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 2.5),
    partitionCellSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 1.0),
    vehicleFilterCellSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.3),
    pedestrianFilterCellSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.1),
    outlierLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.1),
    outlierWidth: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.1),
    outlierHeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.3),
    outlierMinNumPoints: jspb.Message.getFieldWithDefault(msg, 9, 3),
    groundDetector: jspb.Message.getFieldWithDefault(msg, 10, "SpatioTemporalGroundDetector"),
    roiFilter: jspb.Message.getFieldWithDefault(msg, 11, "HdmapROIFilter"),
    removeGroundPoints: jspb.Message.getBooleanFieldWithDefault(msg, 12, true),
    removeRoi: jspb.Message.getBooleanFieldWithDefault(msg, 13, true),
    doClassification: jspb.Message.getBooleanFieldWithDefault(msg, 14, true),
    ncutParam: (f = msg.getNcutParam()) && proto.apollo.perception.lidar.NCutParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NCutSegmentationParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.NCutSegmentationParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.gridRadius;

  /** @type {?|undefined} */
  this.heightThreshold;

  /** @type {?|undefined} */
  this.partitionCellSize;

  /** @type {?|undefined} */
  this.vehicleFilterCellSize;

  /** @type {?|undefined} */
  this.pedestrianFilterCellSize;

  /** @type {?|undefined} */
  this.outlierLength;

  /** @type {?|undefined} */
  this.outlierWidth;

  /** @type {?|undefined} */
  this.outlierHeight;

  /** @type {?|undefined} */
  this.outlierMinNumPoints;

  /** @type {?|undefined} */
  this.groundDetector;

  /** @type {?|undefined} */
  this.roiFilter;

  /** @type {?|undefined} */
  this.removeGroundPoints;

  /** @type {?|undefined} */
  this.removeRoi;

  /** @type {?|undefined} */
  this.doClassification;

  /** @type {?|undefined} */
  this.ncutParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.NCutSegmentationParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.NCutSegmentationParam();
  obj.gridRadius != null && jspb.Message.setField(msg, 1, obj.gridRadius);
  obj.heightThreshold != null && jspb.Message.setField(msg, 2, obj.heightThreshold);
  obj.partitionCellSize != null && jspb.Message.setField(msg, 3, obj.partitionCellSize);
  obj.vehicleFilterCellSize != null && jspb.Message.setField(msg, 4, obj.vehicleFilterCellSize);
  obj.pedestrianFilterCellSize != null && jspb.Message.setField(msg, 5, obj.pedestrianFilterCellSize);
  obj.outlierLength != null && jspb.Message.setField(msg, 6, obj.outlierLength);
  obj.outlierWidth != null && jspb.Message.setField(msg, 7, obj.outlierWidth);
  obj.outlierHeight != null && jspb.Message.setField(msg, 8, obj.outlierHeight);
  obj.outlierMinNumPoints != null && jspb.Message.setField(msg, 9, obj.outlierMinNumPoints);
  obj.groundDetector != null && jspb.Message.setField(msg, 10, obj.groundDetector);
  obj.roiFilter != null && jspb.Message.setField(msg, 11, obj.roiFilter);
  obj.removeGroundPoints != null && jspb.Message.setField(msg, 12, obj.removeGroundPoints);
  obj.removeRoi != null && jspb.Message.setField(msg, 13, obj.removeRoi);
  obj.doClassification != null && jspb.Message.setField(msg, 14, obj.doClassification);
  obj.ncutParam && jspb.Message.setWrapperField(
      msg, 15, proto.apollo.perception.lidar.NCutParam.fromObject(obj.ncutParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.NCutSegmentationParam;
  return proto.apollo.perception.lidar.NCutSegmentationParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.NCutSegmentationParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGridRadius(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeightThreshold(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPartitionCellSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVehicleFilterCellSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPedestrianFilterCellSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutlierLength(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutlierWidth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutlierHeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutlierMinNumPoints(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroundDetector(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoiFilter(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveGroundPoints(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveRoi(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoClassification(value);
      break;
    case 15:
      var value = new proto.apollo.perception.lidar.NCutParam;
      reader.readMessage(value,proto.apollo.perception.lidar.NCutParam.deserializeBinaryFromReader);
      msg.setNcutParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.NCutSegmentationParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.NCutSegmentationParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.NCutSegmentationParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getNcutParam();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.apollo.perception.lidar.NCutParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional float grid_radius = 1;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getGridRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 80.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setGridRadius = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearGridRadius = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasGridRadius = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float height_threshold = 2;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getHeightThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 2.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setHeightThreshold = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearHeightThreshold = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasHeightThreshold = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float partition_cell_size = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getPartitionCellSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setPartitionCellSize = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearPartitionCellSize = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasPartitionCellSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float vehicle_filter_cell_size = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getVehicleFilterCellSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setVehicleFilterCellSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearVehicleFilterCellSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasVehicleFilterCellSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float pedestrian_filter_cell_size = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getPedestrianFilterCellSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setPedestrianFilterCellSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearPedestrianFilterCellSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasPedestrianFilterCellSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float outlier_length = 6;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getOutlierLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setOutlierLength = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearOutlierLength = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasOutlierLength = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float outlier_width = 7;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getOutlierWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setOutlierWidth = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearOutlierWidth = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasOutlierWidth = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float outlier_height = 8;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getOutlierHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setOutlierHeight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearOutlierHeight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasOutlierHeight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 outlier_min_num_points = 9;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getOutlierMinNumPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setOutlierMinNumPoints = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearOutlierMinNumPoints = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasOutlierMinNumPoints = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string ground_detector = 10;
 * @return {string}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getGroundDetector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "SpatioTemporalGroundDetector"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setGroundDetector = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearGroundDetector = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasGroundDetector = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string roi_filter = 11;
 * @return {string}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getRoiFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "HdmapROIFilter"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setRoiFilter = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearRoiFilter = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasRoiFilter = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool remove_ground_points = 12;
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getRemoveGroundPoints = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setRemoveGroundPoints = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearRemoveGroundPoints = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasRemoveGroundPoints = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool remove_roi = 13;
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getRemoveRoi = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setRemoveRoi = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearRemoveRoi = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasRemoveRoi = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool do_classification = 14;
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getDoClassification = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setDoClassification = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearDoClassification = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasDoClassification = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional NCutParam ncut_param = 15;
 * @return {?proto.apollo.perception.lidar.NCutParam}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.getNcutParam = function() {
  return /** @type{?proto.apollo.perception.lidar.NCutParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.lidar.NCutParam, 15));
};


/**
 * @param {?proto.apollo.perception.lidar.NCutParam|undefined} value
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
*/
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.setNcutParam = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutSegmentationParam} returns this
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.clearNcutParam = function() {
  return this.setNcutParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutSegmentationParam.prototype.hasNcutParam = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.NCutParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.NCutParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.NCutParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.NCutParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    gridRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 80.0),
    connectRadius: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0),
    superPixelCellSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.25),
    numCuts: jspb.Message.getFieldWithDefault(msg, 4, 5),
    ncutsStopThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.4),
    ncutsEnableClassifierThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.3),
    sigmaSpace: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 1.5),
    sigmaFeature: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 1.5),
    skeletonCellSize: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.2),
    patchSize: jspb.Message.getFieldWithDefault(msg, 10, 3),
    outlierWidthThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.1),
    outlierHeightThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.1),
    outlierNumPointsThreshold: jspb.Message.getFieldWithDefault(msg, 13, 10),
    overlapFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.05),
    felzenszwalbSigma: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.5),
    felzenszwalbK: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 30.0),
    felzenszwalbMinSize: jspb.Message.getFieldWithDefault(msg, 17, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NCutParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.NCutParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.gridRadius;

  /** @type {?|undefined} */
  this.connectRadius;

  /** @type {?|undefined} */
  this.superPixelCellSize;

  /** @type {?|undefined} */
  this.numCuts;

  /** @type {?|undefined} */
  this.ncutsStopThreshold;

  /** @type {?|undefined} */
  this.ncutsEnableClassifierThreshold;

  /** @type {?|undefined} */
  this.sigmaSpace;

  /** @type {?|undefined} */
  this.sigmaFeature;

  /** @type {?|undefined} */
  this.skeletonCellSize;

  /** @type {?|undefined} */
  this.patchSize;

  /** @type {?|undefined} */
  this.outlierWidthThreshold;

  /** @type {?|undefined} */
  this.outlierHeightThreshold;

  /** @type {?|undefined} */
  this.outlierNumPointsThreshold;

  /** @type {?|undefined} */
  this.overlapFactor;

  /** @type {?|undefined} */
  this.felzenszwalbSigma;

  /** @type {?|undefined} */
  this.felzenszwalbK;

  /** @type {?|undefined} */
  this.felzenszwalbMinSize;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.NCutParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.NCutParam}
 */
proto.apollo.perception.lidar.NCutParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.NCutParam();
  obj.gridRadius != null && jspb.Message.setField(msg, 1, obj.gridRadius);
  obj.connectRadius != null && jspb.Message.setField(msg, 2, obj.connectRadius);
  obj.superPixelCellSize != null && jspb.Message.setField(msg, 3, obj.superPixelCellSize);
  obj.numCuts != null && jspb.Message.setField(msg, 4, obj.numCuts);
  obj.ncutsStopThreshold != null && jspb.Message.setField(msg, 5, obj.ncutsStopThreshold);
  obj.ncutsEnableClassifierThreshold != null && jspb.Message.setField(msg, 6, obj.ncutsEnableClassifierThreshold);
  obj.sigmaSpace != null && jspb.Message.setField(msg, 7, obj.sigmaSpace);
  obj.sigmaFeature != null && jspb.Message.setField(msg, 8, obj.sigmaFeature);
  obj.skeletonCellSize != null && jspb.Message.setField(msg, 9, obj.skeletonCellSize);
  obj.patchSize != null && jspb.Message.setField(msg, 10, obj.patchSize);
  obj.outlierWidthThreshold != null && jspb.Message.setField(msg, 11, obj.outlierWidthThreshold);
  obj.outlierHeightThreshold != null && jspb.Message.setField(msg, 12, obj.outlierHeightThreshold);
  obj.outlierNumPointsThreshold != null && jspb.Message.setField(msg, 13, obj.outlierNumPointsThreshold);
  obj.overlapFactor != null && jspb.Message.setField(msg, 14, obj.overlapFactor);
  obj.felzenszwalbSigma != null && jspb.Message.setField(msg, 15, obj.felzenszwalbSigma);
  obj.felzenszwalbK != null && jspb.Message.setField(msg, 16, obj.felzenszwalbK);
  obj.felzenszwalbMinSize != null && jspb.Message.setField(msg, 17, obj.felzenszwalbMinSize);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.NCutParam}
 */
proto.apollo.perception.lidar.NCutParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.NCutParam;
  return proto.apollo.perception.lidar.NCutParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.NCutParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.NCutParam}
 */
proto.apollo.perception.lidar.NCutParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGridRadius(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConnectRadius(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSuperPixelCellSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumCuts(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNcutsStopThreshold(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNcutsEnableClassifierThreshold(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSigmaSpace(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSigmaFeature(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSkeletonCellSize(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPatchSize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutlierWidthThreshold(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutlierHeightThreshold(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutlierNumPointsThreshold(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOverlapFactor(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFelzenszwalbSigma(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFelzenszwalbK(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFelzenszwalbMinSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.NCutParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.NCutParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.NCutParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.NCutParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
};


/**
 * optional float grid_radius = 1;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getGridRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 80.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setGridRadius = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearGridRadius = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasGridRadius = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float connect_radius = 2;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getConnectRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setConnectRadius = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearConnectRadius = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasConnectRadius = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float super_pixel_cell_size = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getSuperPixelCellSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.25));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setSuperPixelCellSize = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearSuperPixelCellSize = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasSuperPixelCellSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 num_cuts = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getNumCuts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setNumCuts = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearNumCuts = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasNumCuts = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float ncuts_stop_threshold = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getNcutsStopThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setNcutsStopThreshold = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearNcutsStopThreshold = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasNcutsStopThreshold = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float ncuts_enable_classifier_threshold = 6;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getNcutsEnableClassifierThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setNcutsEnableClassifierThreshold = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearNcutsEnableClassifierThreshold = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasNcutsEnableClassifierThreshold = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float sigma_space = 7;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getSigmaSpace = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setSigmaSpace = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearSigmaSpace = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasSigmaSpace = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float sigma_feature = 8;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getSigmaFeature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 1.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setSigmaFeature = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearSigmaFeature = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasSigmaFeature = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float skeleton_cell_size = 9;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getSkeletonCellSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setSkeletonCellSize = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearSkeletonCellSize = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasSkeletonCellSize = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 patch_size = 10;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getPatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setPatchSize = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearPatchSize = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasPatchSize = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float outlier_width_threshold = 11;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getOutlierWidthThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setOutlierWidthThreshold = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearOutlierWidthThreshold = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasOutlierWidthThreshold = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float outlier_height_threshold = 12;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getOutlierHeightThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setOutlierHeightThreshold = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearOutlierHeightThreshold = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasOutlierHeightThreshold = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 outlier_num_points_threshold = 13;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getOutlierNumPointsThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setOutlierNumPointsThreshold = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearOutlierNumPointsThreshold = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasOutlierNumPointsThreshold = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float overlap_factor = 14;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getOverlapFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.05));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setOverlapFactor = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearOverlapFactor = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasOverlapFactor = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float felzenszwalb_sigma = 15;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getFelzenszwalbSigma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setFelzenszwalbSigma = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearFelzenszwalbSigma = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasFelzenszwalbSigma = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float felzenszwalb_k = 16;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getFelzenszwalbK = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 30.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setFelzenszwalbK = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearFelzenszwalbK = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasFelzenszwalbK = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint32 felzenszwalb_min_size = 17;
 * @return {number}
 */
proto.apollo.perception.lidar.NCutParam.prototype.getFelzenszwalbMinSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.setFelzenszwalbMinSize = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.NCutParam} returns this
 */
proto.apollo.perception.lidar.NCutParam.prototype.clearFelzenszwalbMinSize = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.NCutParam.prototype.hasFelzenszwalbMinSize = function() {
  return jspb.Message.getField(this, 17) != null;
};


goog.object.extend(exports, proto.apollo.perception.lidar);
