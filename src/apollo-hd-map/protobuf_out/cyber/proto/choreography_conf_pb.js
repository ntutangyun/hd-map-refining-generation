// source: cyber/proto/choreography_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.cyber.proto.ChoreographyConf', null, global);
goog.exportSymbol('proto.apollo.cyber.proto.ChoreographyTask', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ChoreographyTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.cyber.proto.ChoreographyTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ChoreographyTask.displayName = 'proto.apollo.cyber.proto.ChoreographyTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.cyber.proto.ChoreographyConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.cyber.proto.ChoreographyConf.repeatedFields_, null);
};
goog.inherits(proto.apollo.cyber.proto.ChoreographyConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.cyber.proto.ChoreographyConf.displayName = 'proto.apollo.cyber.proto.ChoreographyConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ChoreographyTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ChoreographyTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChoreographyTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    processor: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    prio: jspb.Message.getFieldWithDefault(msg, 3, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChoreographyTask as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ChoreographyTask.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.name;

  /** @type {?|undefined} */
  this.processor;

  /** @type {?|undefined} */
  this.prio;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ChoreographyTask.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ChoreographyTask}
 */
proto.apollo.cyber.proto.ChoreographyTask.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ChoreographyTask();
  obj.name != null && jspb.Message.setField(msg, 1, obj.name);
  obj.processor != null && jspb.Message.setField(msg, 2, obj.processor);
  obj.prio != null && jspb.Message.setField(msg, 3, obj.prio);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ChoreographyTask}
 */
proto.apollo.cyber.proto.ChoreographyTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ChoreographyTask;
  return proto.apollo.cyber.proto.ChoreographyTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ChoreographyTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ChoreographyTask}
 */
proto.apollo.cyber.proto.ChoreographyTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ChoreographyTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ChoreographyTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChoreographyTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChoreographyTask} returns this
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyTask} returns this
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 processor = 2;
 * @return {number}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.getProcessor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChoreographyTask} returns this
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.setProcessor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyTask} returns this
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.clearProcessor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.hasProcessor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 prio = 3;
 * @return {number}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.getPrio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChoreographyTask} returns this
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.setPrio = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyTask} returns this
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.clearPrio = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyTask.prototype.hasPrio = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.cyber.proto.ChoreographyConf.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.cyber.proto.ChoreographyConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.cyber.proto.ChoreographyConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChoreographyConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    choreographyProcessorNum: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    choreographyAffinity: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    choreographyProcessorPolicy: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    choreographyProcessorPrio: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    choreographyCpuset: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    poolProcessorNum: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    poolAffinity: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    poolProcessorPolicy: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    poolProcessorPrio: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    poolCpuset: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.apollo.cyber.proto.ChoreographyTask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ChoreographyConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.cyber.proto.ChoreographyConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.choreographyProcessorNum;

  /** @type {?|undefined} */
  this.choreographyAffinity;

  /** @type {?|undefined} */
  this.choreographyProcessorPolicy;

  /** @type {?|undefined} */
  this.choreographyProcessorPrio;

  /** @type {?|undefined} */
  this.choreographyCpuset;

  /** @type {?|undefined} */
  this.poolProcessorNum;

  /** @type {?|undefined} */
  this.poolAffinity;

  /** @type {?|undefined} */
  this.poolProcessorPolicy;

  /** @type {?|undefined} */
  this.poolProcessorPrio;

  /** @type {?|undefined} */
  this.poolCpuset;

  /** @type {?|undefined} */
  this.tasksList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.cyber.proto.ChoreographyConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf}
 */
proto.apollo.cyber.proto.ChoreographyConf.fromObject = function(obj) {
  var msg = new proto.apollo.cyber.proto.ChoreographyConf();
  obj.choreographyProcessorNum != null && jspb.Message.setField(msg, 1, obj.choreographyProcessorNum);
  obj.choreographyAffinity != null && jspb.Message.setField(msg, 2, obj.choreographyAffinity);
  obj.choreographyProcessorPolicy != null && jspb.Message.setField(msg, 3, obj.choreographyProcessorPolicy);
  obj.choreographyProcessorPrio != null && jspb.Message.setField(msg, 4, obj.choreographyProcessorPrio);
  obj.choreographyCpuset != null && jspb.Message.setField(msg, 5, obj.choreographyCpuset);
  obj.poolProcessorNum != null && jspb.Message.setField(msg, 6, obj.poolProcessorNum);
  obj.poolAffinity != null && jspb.Message.setField(msg, 7, obj.poolAffinity);
  obj.poolProcessorPolicy != null && jspb.Message.setField(msg, 8, obj.poolProcessorPolicy);
  obj.poolProcessorPrio != null && jspb.Message.setField(msg, 9, obj.poolProcessorPrio);
  obj.poolCpuset != null && jspb.Message.setField(msg, 10, obj.poolCpuset);
  obj.tasksList && jspb.Message.setRepeatedWrapperField(
      msg, 11, obj.tasksList.map(
          proto.apollo.cyber.proto.ChoreographyTask.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf}
 */
proto.apollo.cyber.proto.ChoreographyConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.cyber.proto.ChoreographyConf;
  return proto.apollo.cyber.proto.ChoreographyConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.cyber.proto.ChoreographyConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf}
 */
proto.apollo.cyber.proto.ChoreographyConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChoreographyProcessorNum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChoreographyAffinity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChoreographyProcessorPolicy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChoreographyProcessorPrio(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChoreographyCpuset(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolProcessorNum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolAffinity(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolProcessorPolicy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoolProcessorPrio(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolCpuset(value);
      break;
    case 11:
      var value = new proto.apollo.cyber.proto.ChoreographyTask;
      reader.readMessage(value,proto.apollo.cyber.proto.ChoreographyTask.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.cyber.proto.ChoreographyConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.cyber.proto.ChoreographyConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.cyber.proto.ChoreographyConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.apollo.cyber.proto.ChoreographyTask.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 choreography_processor_num = 1;
 * @return {number}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getChoreographyProcessorNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setChoreographyProcessorNum = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearChoreographyProcessorNum = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasChoreographyProcessorNum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string choreography_affinity = 2;
 * @return {string}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getChoreographyAffinity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setChoreographyAffinity = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearChoreographyAffinity = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasChoreographyAffinity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string choreography_processor_policy = 3;
 * @return {string}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getChoreographyProcessorPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setChoreographyProcessorPolicy = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearChoreographyProcessorPolicy = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasChoreographyProcessorPolicy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 choreography_processor_prio = 4;
 * @return {number}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getChoreographyProcessorPrio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setChoreographyProcessorPrio = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearChoreographyProcessorPrio = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasChoreographyProcessorPrio = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string choreography_cpuset = 5;
 * @return {string}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getChoreographyCpuset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setChoreographyCpuset = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearChoreographyCpuset = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasChoreographyCpuset = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 pool_processor_num = 6;
 * @return {number}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getPoolProcessorNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setPoolProcessorNum = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearPoolProcessorNum = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasPoolProcessorNum = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string pool_affinity = 7;
 * @return {string}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getPoolAffinity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setPoolAffinity = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearPoolAffinity = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasPoolAffinity = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string pool_processor_policy = 8;
 * @return {string}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getPoolProcessorPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setPoolProcessorPolicy = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearPoolProcessorPolicy = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasPoolProcessorPolicy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 pool_processor_prio = 9;
 * @return {number}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getPoolProcessorPrio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setPoolProcessorPrio = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearPoolProcessorPrio = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasPoolProcessorPrio = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string pool_cpuset = 10;
 * @return {string}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getPoolCpuset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.setPoolCpuset = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearPoolCpuset = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.hasPoolCpuset = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated ChoreographyTask tasks = 11;
 * @return {!Array<!proto.apollo.cyber.proto.ChoreographyTask>}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.apollo.cyber.proto.ChoreographyTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.cyber.proto.ChoreographyTask, 11));
};


/**
 * @param {!Array<!proto.apollo.cyber.proto.ChoreographyTask>} value
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
*/
proto.apollo.cyber.proto.ChoreographyConf.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.apollo.cyber.proto.ChoreographyTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.cyber.proto.ChoreographyTask}
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.apollo.cyber.proto.ChoreographyTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.cyber.proto.ChoreographyConf} returns this
 */
proto.apollo.cyber.proto.ChoreographyConf.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


goog.object.extend(exports, proto.apollo.cyber.proto);
