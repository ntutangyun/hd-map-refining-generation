// source: modules/map/proto/map_overlap.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_map_proto_map_id_pb = require('../../../modules/map/proto/map_id_pb.js');
goog.object.extend(proto, modules_map_proto_map_id_pb);
var modules_map_proto_map_geometry_pb = require('../../../modules/map/proto/map_geometry_pb.js');
goog.object.extend(proto, modules_map_proto_map_geometry_pb);
goog.exportSymbol('proto.apollo.hdmap.ClearAreaOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.CrosswalkOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.JunctionOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.LaneOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.ObjectOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase', null, global);
goog.exportSymbol('proto.apollo.hdmap.Overlap', null, global);
goog.exportSymbol('proto.apollo.hdmap.PNCJunctionOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.ParkingSpaceOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.RSUOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.RegionOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.SignalOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.SpeedBumpOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.StopSignOverlapInfo', null, global);
goog.exportSymbol('proto.apollo.hdmap.YieldOverlapInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.LaneOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.LaneOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.LaneOverlapInfo.displayName = 'proto.apollo.hdmap.LaneOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.SignalOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.SignalOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.SignalOverlapInfo.displayName = 'proto.apollo.hdmap.SignalOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.StopSignOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.StopSignOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.StopSignOverlapInfo.displayName = 'proto.apollo.hdmap.StopSignOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.CrosswalkOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.CrosswalkOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.CrosswalkOverlapInfo.displayName = 'proto.apollo.hdmap.CrosswalkOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.JunctionOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.JunctionOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.JunctionOverlapInfo.displayName = 'proto.apollo.hdmap.JunctionOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.YieldOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.YieldOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.YieldOverlapInfo.displayName = 'proto.apollo.hdmap.YieldOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.ClearAreaOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.ClearAreaOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.ClearAreaOverlapInfo.displayName = 'proto.apollo.hdmap.ClearAreaOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.SpeedBumpOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.SpeedBumpOverlapInfo.displayName = 'proto.apollo.hdmap.SpeedBumpOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.ParkingSpaceOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.ParkingSpaceOverlapInfo.displayName = 'proto.apollo.hdmap.ParkingSpaceOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.PNCJunctionOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.PNCJunctionOverlapInfo.displayName = 'proto.apollo.hdmap.PNCJunctionOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.RSUOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.hdmap.RSUOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.RSUOverlapInfo.displayName = 'proto.apollo.hdmap.RSUOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.RegionOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.RegionOverlapInfo.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.RegionOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.RegionOverlapInfo.displayName = 'proto.apollo.hdmap.RegionOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.ObjectOverlapInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_);
};
goog.inherits(proto.apollo.hdmap.ObjectOverlapInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.ObjectOverlapInfo.displayName = 'proto.apollo.hdmap.ObjectOverlapInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.hdmap.Overlap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.hdmap.Overlap.repeatedFields_, null);
};
goog.inherits(proto.apollo.hdmap.Overlap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.hdmap.Overlap.displayName = 'proto.apollo.hdmap.Overlap';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.LaneOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.LaneOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LaneOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    startS: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    endS: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    isMerge: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    regionOverlapId: (f = msg.getRegionOverlapId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of LaneOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.LaneOverlapInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.startS;

  /** @type {?|undefined} */
  this.endS;

  /** @type {?|undefined} */
  this.isMerge;

  /** @type {?|undefined} */
  this.regionOverlapId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.LaneOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.LaneOverlapInfo}
 */
proto.apollo.hdmap.LaneOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.LaneOverlapInfo();
  obj.startS != null && jspb.Message.setField(msg, 1, obj.startS);
  obj.endS != null && jspb.Message.setField(msg, 2, obj.endS);
  obj.isMerge != null && jspb.Message.setField(msg, 3, obj.isMerge);
  obj.regionOverlapId && jspb.Message.setWrapperField(
      msg, 4, modules_map_proto_map_id_pb.Id.fromObject(obj.regionOverlapId));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.LaneOverlapInfo}
 */
proto.apollo.hdmap.LaneOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.LaneOverlapInfo;
  return proto.apollo.hdmap.LaneOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.LaneOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.LaneOverlapInfo}
 */
proto.apollo.hdmap.LaneOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartS(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndS(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMerge(value);
      break;
    case 4:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setRegionOverlapId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.LaneOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.LaneOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.LaneOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRegionOverlapId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
};


/**
 * optional double start_s = 1;
 * @return {number}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.getStartS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.setStartS = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.clearStartS = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.hasStartS = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double end_s = 2;
 * @return {number}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.getEndS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.setEndS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.clearEndS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.hasEndS = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_merge = 3;
 * @return {boolean}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.getIsMerge = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.setIsMerge = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.clearIsMerge = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.hasIsMerge = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Id region_overlap_id = 4;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.getRegionOverlapId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 4));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
*/
proto.apollo.hdmap.LaneOverlapInfo.prototype.setRegionOverlapId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.LaneOverlapInfo} returns this
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.clearRegionOverlapId = function() {
  return this.setRegionOverlapId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.LaneOverlapInfo.prototype.hasRegionOverlapId = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.SignalOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.SignalOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.SignalOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.SignalOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SignalOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.SignalOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.SignalOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.SignalOverlapInfo}
 */
proto.apollo.hdmap.SignalOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.SignalOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.SignalOverlapInfo}
 */
proto.apollo.hdmap.SignalOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.SignalOverlapInfo;
  return proto.apollo.hdmap.SignalOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.SignalOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.SignalOverlapInfo}
 */
proto.apollo.hdmap.SignalOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.SignalOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.SignalOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.SignalOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.SignalOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.StopSignOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.StopSignOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.StopSignOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.StopSignOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of StopSignOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.StopSignOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.StopSignOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.StopSignOverlapInfo}
 */
proto.apollo.hdmap.StopSignOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.StopSignOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.StopSignOverlapInfo}
 */
proto.apollo.hdmap.StopSignOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.StopSignOverlapInfo;
  return proto.apollo.hdmap.StopSignOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.StopSignOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.StopSignOverlapInfo}
 */
proto.apollo.hdmap.StopSignOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.StopSignOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.StopSignOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.StopSignOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.StopSignOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.CrosswalkOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.CrosswalkOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    regionOverlapId: (f = msg.getRegionOverlapId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CrosswalkOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.regionOverlapId;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.CrosswalkOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.CrosswalkOverlapInfo}
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.CrosswalkOverlapInfo();
  obj.regionOverlapId && jspb.Message.setWrapperField(
      msg, 1, modules_map_proto_map_id_pb.Id.fromObject(obj.regionOverlapId));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.CrosswalkOverlapInfo}
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.CrosswalkOverlapInfo;
  return proto.apollo.hdmap.CrosswalkOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.CrosswalkOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.CrosswalkOverlapInfo}
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setRegionOverlapId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.CrosswalkOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.CrosswalkOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegionOverlapId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
};


/**
 * optional Id region_overlap_id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.prototype.getRegionOverlapId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.CrosswalkOverlapInfo} returns this
*/
proto.apollo.hdmap.CrosswalkOverlapInfo.prototype.setRegionOverlapId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.CrosswalkOverlapInfo} returns this
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.prototype.clearRegionOverlapId = function() {
  return this.setRegionOverlapId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.CrosswalkOverlapInfo.prototype.hasRegionOverlapId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.JunctionOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.JunctionOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.JunctionOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.JunctionOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of JunctionOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.JunctionOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.JunctionOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.JunctionOverlapInfo}
 */
proto.apollo.hdmap.JunctionOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.JunctionOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.JunctionOverlapInfo}
 */
proto.apollo.hdmap.JunctionOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.JunctionOverlapInfo;
  return proto.apollo.hdmap.JunctionOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.JunctionOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.JunctionOverlapInfo}
 */
proto.apollo.hdmap.JunctionOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.JunctionOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.JunctionOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.JunctionOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.JunctionOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.YieldOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.YieldOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.YieldOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.YieldOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of YieldOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.YieldOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.YieldOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.YieldOverlapInfo}
 */
proto.apollo.hdmap.YieldOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.YieldOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.YieldOverlapInfo}
 */
proto.apollo.hdmap.YieldOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.YieldOverlapInfo;
  return proto.apollo.hdmap.YieldOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.YieldOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.YieldOverlapInfo}
 */
proto.apollo.hdmap.YieldOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.YieldOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.YieldOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.YieldOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.YieldOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.ClearAreaOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.ClearAreaOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ClearAreaOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.ClearAreaOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.ClearAreaOverlapInfo}
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.ClearAreaOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.ClearAreaOverlapInfo}
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.ClearAreaOverlapInfo;
  return proto.apollo.hdmap.ClearAreaOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.ClearAreaOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.ClearAreaOverlapInfo}
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.ClearAreaOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.ClearAreaOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ClearAreaOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.SpeedBumpOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.SpeedBumpOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of SpeedBumpOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.SpeedBumpOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.SpeedBumpOverlapInfo}
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.SpeedBumpOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.SpeedBumpOverlapInfo}
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.SpeedBumpOverlapInfo;
  return proto.apollo.hdmap.SpeedBumpOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.SpeedBumpOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.SpeedBumpOverlapInfo}
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.SpeedBumpOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.SpeedBumpOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.SpeedBumpOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.ParkingSpaceOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.ParkingSpaceOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ParkingSpaceOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.ParkingSpaceOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.ParkingSpaceOverlapInfo}
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.ParkingSpaceOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.ParkingSpaceOverlapInfo}
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.ParkingSpaceOverlapInfo;
  return proto.apollo.hdmap.ParkingSpaceOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.ParkingSpaceOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.ParkingSpaceOverlapInfo}
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.ParkingSpaceOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.ParkingSpaceOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ParkingSpaceOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.PNCJunctionOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.PNCJunctionOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of PNCJunctionOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.PNCJunctionOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.PNCJunctionOverlapInfo}
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.PNCJunctionOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.PNCJunctionOverlapInfo}
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.PNCJunctionOverlapInfo;
  return proto.apollo.hdmap.PNCJunctionOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.PNCJunctionOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.PNCJunctionOverlapInfo}
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.PNCJunctionOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.PNCJunctionOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.PNCJunctionOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.RSUOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.RSUOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.RSUOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.RSUOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RSUOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.RSUOverlapInfo.ObjectFormat = function() {
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.RSUOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.RSUOverlapInfo}
 */
proto.apollo.hdmap.RSUOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.RSUOverlapInfo();
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.RSUOverlapInfo}
 */
proto.apollo.hdmap.RSUOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.RSUOverlapInfo;
  return proto.apollo.hdmap.RSUOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.RSUOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.RSUOverlapInfo}
 */
proto.apollo.hdmap.RSUOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.RSUOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.RSUOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.RSUOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.RSUOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.RegionOverlapInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.RegionOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.RegionOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.RegionOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f),
    polygonList: jspb.Message.toObjectList(msg.getPolygonList(),
    modules_map_proto_map_geometry_pb.Polygon.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RegionOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.RegionOverlapInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.polygonList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.RegionOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.RegionOverlapInfo}
 */
proto.apollo.hdmap.RegionOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.RegionOverlapInfo();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, modules_map_proto_map_id_pb.Id.fromObject(obj.id));
  obj.polygonList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.polygonList.map(
          modules_map_proto_map_geometry_pb.Polygon.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.RegionOverlapInfo}
 */
proto.apollo.hdmap.RegionOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.RegionOverlapInfo;
  return proto.apollo.hdmap.RegionOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.RegionOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.RegionOverlapInfo}
 */
proto.apollo.hdmap.RegionOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new modules_map_proto_map_geometry_pb.Polygon;
      reader.readMessage(value,modules_map_proto_map_geometry_pb.Polygon.deserializeBinaryFromReader);
      msg.addPolygon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.RegionOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.RegionOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.RegionOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getPolygonList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      modules_map_proto_map_geometry_pb.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.RegionOverlapInfo} returns this
*/
proto.apollo.hdmap.RegionOverlapInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.RegionOverlapInfo} returns this
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Polygon polygon = 2;
 * @return {!Array<!proto.apollo.hdmap.Polygon>}
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.getPolygonList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, modules_map_proto_map_geometry_pb.Polygon, 2));
};


/**
 * @param {!Array<!proto.apollo.hdmap.Polygon>} value
 * @return {!proto.apollo.hdmap.RegionOverlapInfo} returns this
*/
proto.apollo.hdmap.RegionOverlapInfo.prototype.setPolygonList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.hdmap.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.Polygon}
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.addPolygon = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.hdmap.Polygon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.RegionOverlapInfo} returns this
 */
proto.apollo.hdmap.RegionOverlapInfo.prototype.clearPolygonList = function() {
  return this.setPolygonList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_ = [[3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase = {
  OVERLAP_INFO_NOT_SET: 0,
  LANE_OVERLAP_INFO: 3,
  SIGNAL_OVERLAP_INFO: 4,
  STOP_SIGN_OVERLAP_INFO: 5,
  CROSSWALK_OVERLAP_INFO: 6,
  JUNCTION_OVERLAP_INFO: 7,
  YIELD_SIGN_OVERLAP_INFO: 8,
  CLEAR_AREA_OVERLAP_INFO: 9,
  SPEED_BUMP_OVERLAP_INFO: 10,
  PARKING_SPACE_OVERLAP_INFO: 11,
  PNC_JUNCTION_OVERLAP_INFO: 12,
  RSU_OVERLAP_INFO: 13
};

/**
 * @return {proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getOverlapInfoCase = function() {
  return /** @type {proto.apollo.hdmap.ObjectOverlapInfo.OverlapInfoCase} */(jspb.Message.computeOneofCase(this, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.ObjectOverlapInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ObjectOverlapInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f),
    laneOverlapInfo: (f = msg.getLaneOverlapInfo()) && proto.apollo.hdmap.LaneOverlapInfo.toObject(includeInstance, f),
    signalOverlapInfo: (f = msg.getSignalOverlapInfo()) && proto.apollo.hdmap.SignalOverlapInfo.toObject(includeInstance, f),
    stopSignOverlapInfo: (f = msg.getStopSignOverlapInfo()) && proto.apollo.hdmap.StopSignOverlapInfo.toObject(includeInstance, f),
    crosswalkOverlapInfo: (f = msg.getCrosswalkOverlapInfo()) && proto.apollo.hdmap.CrosswalkOverlapInfo.toObject(includeInstance, f),
    junctionOverlapInfo: (f = msg.getJunctionOverlapInfo()) && proto.apollo.hdmap.JunctionOverlapInfo.toObject(includeInstance, f),
    yieldSignOverlapInfo: (f = msg.getYieldSignOverlapInfo()) && proto.apollo.hdmap.YieldOverlapInfo.toObject(includeInstance, f),
    clearAreaOverlapInfo: (f = msg.getClearAreaOverlapInfo()) && proto.apollo.hdmap.ClearAreaOverlapInfo.toObject(includeInstance, f),
    speedBumpOverlapInfo: (f = msg.getSpeedBumpOverlapInfo()) && proto.apollo.hdmap.SpeedBumpOverlapInfo.toObject(includeInstance, f),
    parkingSpaceOverlapInfo: (f = msg.getParkingSpaceOverlapInfo()) && proto.apollo.hdmap.ParkingSpaceOverlapInfo.toObject(includeInstance, f),
    pncJunctionOverlapInfo: (f = msg.getPncJunctionOverlapInfo()) && proto.apollo.hdmap.PNCJunctionOverlapInfo.toObject(includeInstance, f),
    rsuOverlapInfo: (f = msg.getRsuOverlapInfo()) && proto.apollo.hdmap.RSUOverlapInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ObjectOverlapInfo as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.ObjectOverlapInfo.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.laneOverlapInfo;

  /** @type {?|undefined} */
  this.signalOverlapInfo;

  /** @type {?|undefined} */
  this.stopSignOverlapInfo;

  /** @type {?|undefined} */
  this.crosswalkOverlapInfo;

  /** @type {?|undefined} */
  this.junctionOverlapInfo;

  /** @type {?|undefined} */
  this.yieldSignOverlapInfo;

  /** @type {?|undefined} */
  this.clearAreaOverlapInfo;

  /** @type {?|undefined} */
  this.speedBumpOverlapInfo;

  /** @type {?|undefined} */
  this.parkingSpaceOverlapInfo;

  /** @type {?|undefined} */
  this.pncJunctionOverlapInfo;

  /** @type {?|undefined} */
  this.rsuOverlapInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.ObjectOverlapInfo();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, modules_map_proto_map_id_pb.Id.fromObject(obj.id));
  obj.laneOverlapInfo && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.hdmap.LaneOverlapInfo.fromObject(obj.laneOverlapInfo));
  obj.signalOverlapInfo && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.hdmap.SignalOverlapInfo.fromObject(obj.signalOverlapInfo));
  obj.stopSignOverlapInfo && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.hdmap.StopSignOverlapInfo.fromObject(obj.stopSignOverlapInfo));
  obj.crosswalkOverlapInfo && jspb.Message.setWrapperField(
      msg, 6, proto.apollo.hdmap.CrosswalkOverlapInfo.fromObject(obj.crosswalkOverlapInfo));
  obj.junctionOverlapInfo && jspb.Message.setWrapperField(
      msg, 7, proto.apollo.hdmap.JunctionOverlapInfo.fromObject(obj.junctionOverlapInfo));
  obj.yieldSignOverlapInfo && jspb.Message.setWrapperField(
      msg, 8, proto.apollo.hdmap.YieldOverlapInfo.fromObject(obj.yieldSignOverlapInfo));
  obj.clearAreaOverlapInfo && jspb.Message.setWrapperField(
      msg, 9, proto.apollo.hdmap.ClearAreaOverlapInfo.fromObject(obj.clearAreaOverlapInfo));
  obj.speedBumpOverlapInfo && jspb.Message.setWrapperField(
      msg, 10, proto.apollo.hdmap.SpeedBumpOverlapInfo.fromObject(obj.speedBumpOverlapInfo));
  obj.parkingSpaceOverlapInfo && jspb.Message.setWrapperField(
      msg, 11, proto.apollo.hdmap.ParkingSpaceOverlapInfo.fromObject(obj.parkingSpaceOverlapInfo));
  obj.pncJunctionOverlapInfo && jspb.Message.setWrapperField(
      msg, 12, proto.apollo.hdmap.PNCJunctionOverlapInfo.fromObject(obj.pncJunctionOverlapInfo));
  obj.rsuOverlapInfo && jspb.Message.setWrapperField(
      msg, 13, proto.apollo.hdmap.RSUOverlapInfo.fromObject(obj.rsuOverlapInfo));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.ObjectOverlapInfo;
  return proto.apollo.hdmap.ObjectOverlapInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.LaneOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.LaneOverlapInfo.deserializeBinaryFromReader);
      msg.setLaneOverlapInfo(value);
      break;
    case 4:
      var value = new proto.apollo.hdmap.SignalOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.SignalOverlapInfo.deserializeBinaryFromReader);
      msg.setSignalOverlapInfo(value);
      break;
    case 5:
      var value = new proto.apollo.hdmap.StopSignOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.StopSignOverlapInfo.deserializeBinaryFromReader);
      msg.setStopSignOverlapInfo(value);
      break;
    case 6:
      var value = new proto.apollo.hdmap.CrosswalkOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.CrosswalkOverlapInfo.deserializeBinaryFromReader);
      msg.setCrosswalkOverlapInfo(value);
      break;
    case 7:
      var value = new proto.apollo.hdmap.JunctionOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.JunctionOverlapInfo.deserializeBinaryFromReader);
      msg.setJunctionOverlapInfo(value);
      break;
    case 8:
      var value = new proto.apollo.hdmap.YieldOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.YieldOverlapInfo.deserializeBinaryFromReader);
      msg.setYieldSignOverlapInfo(value);
      break;
    case 9:
      var value = new proto.apollo.hdmap.ClearAreaOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.ClearAreaOverlapInfo.deserializeBinaryFromReader);
      msg.setClearAreaOverlapInfo(value);
      break;
    case 10:
      var value = new proto.apollo.hdmap.SpeedBumpOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.SpeedBumpOverlapInfo.deserializeBinaryFromReader);
      msg.setSpeedBumpOverlapInfo(value);
      break;
    case 11:
      var value = new proto.apollo.hdmap.ParkingSpaceOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.ParkingSpaceOverlapInfo.deserializeBinaryFromReader);
      msg.setParkingSpaceOverlapInfo(value);
      break;
    case 12:
      var value = new proto.apollo.hdmap.PNCJunctionOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.PNCJunctionOverlapInfo.deserializeBinaryFromReader);
      msg.setPncJunctionOverlapInfo(value);
      break;
    case 13:
      var value = new proto.apollo.hdmap.RSUOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.RSUOverlapInfo.deserializeBinaryFromReader);
      msg.setRsuOverlapInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.ObjectOverlapInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.ObjectOverlapInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getLaneOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.hdmap.LaneOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getSignalOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.hdmap.SignalOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getStopSignOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.hdmap.StopSignOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getCrosswalkOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.apollo.hdmap.CrosswalkOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getJunctionOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.apollo.hdmap.JunctionOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getYieldSignOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.apollo.hdmap.YieldOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getClearAreaOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.apollo.hdmap.ClearAreaOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getSpeedBumpOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.apollo.hdmap.SpeedBumpOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getParkingSpaceOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.apollo.hdmap.ParkingSpaceOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getPncJunctionOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.apollo.hdmap.PNCJunctionOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getRsuOverlapInfo();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.apollo.hdmap.RSUOverlapInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LaneOverlapInfo lane_overlap_info = 3;
 * @return {?proto.apollo.hdmap.LaneOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getLaneOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.LaneOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.LaneOverlapInfo, 3));
};


/**
 * @param {?proto.apollo.hdmap.LaneOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setLaneOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearLaneOverlapInfo = function() {
  return this.setLaneOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasLaneOverlapInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SignalOverlapInfo signal_overlap_info = 4;
 * @return {?proto.apollo.hdmap.SignalOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getSignalOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.SignalOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.SignalOverlapInfo, 4));
};


/**
 * @param {?proto.apollo.hdmap.SignalOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setSignalOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearSignalOverlapInfo = function() {
  return this.setSignalOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasSignalOverlapInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StopSignOverlapInfo stop_sign_overlap_info = 5;
 * @return {?proto.apollo.hdmap.StopSignOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getStopSignOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.StopSignOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.StopSignOverlapInfo, 5));
};


/**
 * @param {?proto.apollo.hdmap.StopSignOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setStopSignOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearStopSignOverlapInfo = function() {
  return this.setStopSignOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasStopSignOverlapInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CrosswalkOverlapInfo crosswalk_overlap_info = 6;
 * @return {?proto.apollo.hdmap.CrosswalkOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getCrosswalkOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.CrosswalkOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.CrosswalkOverlapInfo, 6));
};


/**
 * @param {?proto.apollo.hdmap.CrosswalkOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setCrosswalkOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearCrosswalkOverlapInfo = function() {
  return this.setCrosswalkOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasCrosswalkOverlapInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional JunctionOverlapInfo junction_overlap_info = 7;
 * @return {?proto.apollo.hdmap.JunctionOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getJunctionOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.JunctionOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.JunctionOverlapInfo, 7));
};


/**
 * @param {?proto.apollo.hdmap.JunctionOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setJunctionOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearJunctionOverlapInfo = function() {
  return this.setJunctionOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasJunctionOverlapInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional YieldOverlapInfo yield_sign_overlap_info = 8;
 * @return {?proto.apollo.hdmap.YieldOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getYieldSignOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.YieldOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.YieldOverlapInfo, 8));
};


/**
 * @param {?proto.apollo.hdmap.YieldOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setYieldSignOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearYieldSignOverlapInfo = function() {
  return this.setYieldSignOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasYieldSignOverlapInfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ClearAreaOverlapInfo clear_area_overlap_info = 9;
 * @return {?proto.apollo.hdmap.ClearAreaOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getClearAreaOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.ClearAreaOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.ClearAreaOverlapInfo, 9));
};


/**
 * @param {?proto.apollo.hdmap.ClearAreaOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setClearAreaOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearClearAreaOverlapInfo = function() {
  return this.setClearAreaOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasClearAreaOverlapInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SpeedBumpOverlapInfo speed_bump_overlap_info = 10;
 * @return {?proto.apollo.hdmap.SpeedBumpOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getSpeedBumpOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.SpeedBumpOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.SpeedBumpOverlapInfo, 10));
};


/**
 * @param {?proto.apollo.hdmap.SpeedBumpOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setSpeedBumpOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearSpeedBumpOverlapInfo = function() {
  return this.setSpeedBumpOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasSpeedBumpOverlapInfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ParkingSpaceOverlapInfo parking_space_overlap_info = 11;
 * @return {?proto.apollo.hdmap.ParkingSpaceOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getParkingSpaceOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.ParkingSpaceOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.ParkingSpaceOverlapInfo, 11));
};


/**
 * @param {?proto.apollo.hdmap.ParkingSpaceOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setParkingSpaceOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearParkingSpaceOverlapInfo = function() {
  return this.setParkingSpaceOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasParkingSpaceOverlapInfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PNCJunctionOverlapInfo pnc_junction_overlap_info = 12;
 * @return {?proto.apollo.hdmap.PNCJunctionOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getPncJunctionOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.PNCJunctionOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.PNCJunctionOverlapInfo, 12));
};


/**
 * @param {?proto.apollo.hdmap.PNCJunctionOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setPncJunctionOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearPncJunctionOverlapInfo = function() {
  return this.setPncJunctionOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasPncJunctionOverlapInfo = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RSUOverlapInfo rsu_overlap_info = 13;
 * @return {?proto.apollo.hdmap.RSUOverlapInfo}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.getRsuOverlapInfo = function() {
  return /** @type{?proto.apollo.hdmap.RSUOverlapInfo} */ (
    jspb.Message.getWrapperField(this, proto.apollo.hdmap.RSUOverlapInfo, 13));
};


/**
 * @param {?proto.apollo.hdmap.RSUOverlapInfo|undefined} value
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
*/
proto.apollo.hdmap.ObjectOverlapInfo.prototype.setRsuOverlapInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.apollo.hdmap.ObjectOverlapInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo} returns this
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.clearRsuOverlapInfo = function() {
  return this.setRsuOverlapInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.ObjectOverlapInfo.prototype.hasRsuOverlapInfo = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.hdmap.Overlap.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.hdmap.Overlap.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.hdmap.Overlap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.hdmap.Overlap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Overlap.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && modules_map_proto_map_id_pb.Id.toObject(includeInstance, f),
    objectList: jspb.Message.toObjectList(msg.getObjectList(),
    proto.apollo.hdmap.ObjectOverlapInfo.toObject, includeInstance),
    regionOverlapList: jspb.Message.toObjectList(msg.getRegionOverlapList(),
    proto.apollo.hdmap.RegionOverlapInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of Overlap as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.hdmap.Overlap.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.id;

  /** @type {?|undefined} */
  this.objectList;

  /** @type {?|undefined} */
  this.regionOverlapList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.hdmap.Overlap.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.hdmap.Overlap}
 */
proto.apollo.hdmap.Overlap.fromObject = function(obj) {
  var msg = new proto.apollo.hdmap.Overlap();
  obj.id && jspb.Message.setWrapperField(
      msg, 1, modules_map_proto_map_id_pb.Id.fromObject(obj.id));
  obj.objectList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.objectList.map(
          proto.apollo.hdmap.ObjectOverlapInfo.fromObject));
  obj.regionOverlapList && jspb.Message.setRepeatedWrapperField(
      msg, 3, obj.regionOverlapList.map(
          proto.apollo.hdmap.RegionOverlapInfo.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.hdmap.Overlap}
 */
proto.apollo.hdmap.Overlap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.hdmap.Overlap;
  return proto.apollo.hdmap.Overlap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.hdmap.Overlap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.hdmap.Overlap}
 */
proto.apollo.hdmap.Overlap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_map_proto_map_id_pb.Id;
      reader.readMessage(value,modules_map_proto_map_id_pb.Id.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.apollo.hdmap.ObjectOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.ObjectOverlapInfo.deserializeBinaryFromReader);
      msg.addObject(value);
      break;
    case 3:
      var value = new proto.apollo.hdmap.RegionOverlapInfo;
      reader.readMessage(value,proto.apollo.hdmap.RegionOverlapInfo.deserializeBinaryFromReader);
      msg.addRegionOverlap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.hdmap.Overlap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.hdmap.Overlap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.hdmap.Overlap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.hdmap.Overlap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_map_proto_map_id_pb.Id.serializeBinaryToWriter
    );
  }
  f = message.getObjectList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.hdmap.ObjectOverlapInfo.serializeBinaryToWriter
    );
  }
  f = message.getRegionOverlapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.apollo.hdmap.RegionOverlapInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Id id = 1;
 * @return {?proto.apollo.hdmap.Id}
 */
proto.apollo.hdmap.Overlap.prototype.getId = function() {
  return /** @type{?proto.apollo.hdmap.Id} */ (
    jspb.Message.getWrapperField(this, modules_map_proto_map_id_pb.Id, 1));
};


/**
 * @param {?proto.apollo.hdmap.Id|undefined} value
 * @return {!proto.apollo.hdmap.Overlap} returns this
*/
proto.apollo.hdmap.Overlap.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.hdmap.Overlap} returns this
 */
proto.apollo.hdmap.Overlap.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.hdmap.Overlap.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ObjectOverlapInfo object = 2;
 * @return {!Array<!proto.apollo.hdmap.ObjectOverlapInfo>}
 */
proto.apollo.hdmap.Overlap.prototype.getObjectList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.ObjectOverlapInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.ObjectOverlapInfo, 2));
};


/**
 * @param {!Array<!proto.apollo.hdmap.ObjectOverlapInfo>} value
 * @return {!proto.apollo.hdmap.Overlap} returns this
*/
proto.apollo.hdmap.Overlap.prototype.setObjectList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.hdmap.ObjectOverlapInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.ObjectOverlapInfo}
 */
proto.apollo.hdmap.Overlap.prototype.addObject = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.hdmap.ObjectOverlapInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Overlap} returns this
 */
proto.apollo.hdmap.Overlap.prototype.clearObjectList = function() {
  return this.setObjectList([]);
};


/**
 * repeated RegionOverlapInfo region_overlap = 3;
 * @return {!Array<!proto.apollo.hdmap.RegionOverlapInfo>}
 */
proto.apollo.hdmap.Overlap.prototype.getRegionOverlapList = function() {
  return /** @type{!Array<!proto.apollo.hdmap.RegionOverlapInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.hdmap.RegionOverlapInfo, 3));
};


/**
 * @param {!Array<!proto.apollo.hdmap.RegionOverlapInfo>} value
 * @return {!proto.apollo.hdmap.Overlap} returns this
*/
proto.apollo.hdmap.Overlap.prototype.setRegionOverlapList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.apollo.hdmap.RegionOverlapInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.hdmap.RegionOverlapInfo}
 */
proto.apollo.hdmap.Overlap.prototype.addRegionOverlap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.apollo.hdmap.RegionOverlapInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.hdmap.Overlap} returns this
 */
proto.apollo.hdmap.Overlap.prototype.clearRegionOverlapList = function() {
  return this.setRegionOverlapList([]);
};


goog.object.extend(exports, proto.apollo.hdmap);
