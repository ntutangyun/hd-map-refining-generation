// source: modules/drivers/proto/racobit_radar.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_common_proto_header_pb = require('../../../modules/common/proto/header_pb.js');
goog.object.extend(proto, modules_common_proto_header_pb);
var modules_drivers_radar_racobit_radar_proto_racobit_radar_conf_pb = require('../../../modules/drivers/radar/racobit_radar/proto/racobit_radar_conf_pb.js');
goog.object.extend(proto, modules_drivers_radar_racobit_radar_proto_racobit_radar_conf_pb);
goog.exportSymbol('proto.apollo.drivers.RacobitClusterListStatus_600', null, global);
goog.exportSymbol('proto.apollo.drivers.RacobitObjectListStatus_60A', null, global);
goog.exportSymbol('proto.apollo.drivers.RacobitRadar', null, global);
goog.exportSymbol('proto.apollo.drivers.RacobitRadarObs', null, global);
goog.exportSymbol('proto.apollo.drivers.RacobitRadarState_201', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.RacobitClusterListStatus_600 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.RacobitClusterListStatus_600, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.RacobitClusterListStatus_600.displayName = 'proto.apollo.drivers.RacobitClusterListStatus_600';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.RacobitObjectListStatus_60A = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.RacobitObjectListStatus_60A, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.RacobitObjectListStatus_60A.displayName = 'proto.apollo.drivers.RacobitObjectListStatus_60A';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.RacobitRadarState_201 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.RacobitRadarState_201, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.RacobitRadarState_201.displayName = 'proto.apollo.drivers.RacobitRadarState_201';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.RacobitRadarObs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.RacobitRadarObs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.RacobitRadarObs.displayName = 'proto.apollo.drivers.RacobitRadarObs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.RacobitRadar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.drivers.RacobitRadar.repeatedFields_, null);
};
goog.inherits(proto.apollo.drivers.RacobitRadar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.RacobitRadar.displayName = 'proto.apollo.drivers.RacobitRadar';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.RacobitClusterListStatus_600.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.RacobitClusterListStatus_600} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitClusterListStatus_600.toObject = function(includeInstance, msg) {
  var f, obj = {
    near: jspb.Message.getFieldWithDefault(msg, 1, 0),
    far: jspb.Message.getFieldWithDefault(msg, 2, 0),
    measCounter: jspb.Message.getFieldWithDefault(msg, 3, -1),
    interfaceVersion: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RacobitClusterListStatus_600 as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.RacobitClusterListStatus_600.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.near;

  /** @type {?|undefined} */
  this.far;

  /** @type {?|undefined} */
  this.measCounter;

  /** @type {?|undefined} */
  this.interfaceVersion;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.RacobitClusterListStatus_600.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.RacobitClusterListStatus_600();
  obj.near != null && jspb.Message.setField(msg, 1, obj.near);
  obj.far != null && jspb.Message.setField(msg, 2, obj.far);
  obj.measCounter != null && jspb.Message.setField(msg, 3, obj.measCounter);
  obj.interfaceVersion != null && jspb.Message.setField(msg, 4, obj.interfaceVersion);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.RacobitClusterListStatus_600;
  return proto.apollo.drivers.RacobitClusterListStatus_600.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.RacobitClusterListStatus_600} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFar(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMeasCounter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterfaceVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.RacobitClusterListStatus_600.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.RacobitClusterListStatus_600} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitClusterListStatus_600.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 near = 1;
 * @return {number}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.getNear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.setNear = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.clearNear = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.hasNear = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 far = 2;
 * @return {number}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.getFar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.setFar = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.clearFar = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.hasFar = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 meas_counter = 3;
 * @return {number}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.getMeasCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.setMeasCounter = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.clearMeasCounter = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.hasMeasCounter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 interface_version = 4;
 * @return {number}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.getInterfaceVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.setInterfaceVersion = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitClusterListStatus_600} returns this
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.clearInterfaceVersion = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitClusterListStatus_600.prototype.hasInterfaceVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.RacobitObjectListStatus_60A.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.RacobitObjectListStatus_60A} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.toObject = function(includeInstance, msg) {
  var f, obj = {
    nofObjects: jspb.Message.getFieldWithDefault(msg, 1, 0),
    measCounter: jspb.Message.getFieldWithDefault(msg, 2, -1),
    interfaceVersion: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RacobitObjectListStatus_60A as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.nofObjects;

  /** @type {?|undefined} */
  this.measCounter;

  /** @type {?|undefined} */
  this.interfaceVersion;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.RacobitObjectListStatus_60A.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.RacobitObjectListStatus_60A();
  obj.nofObjects != null && jspb.Message.setField(msg, 1, obj.nofObjects);
  obj.measCounter != null && jspb.Message.setField(msg, 2, obj.measCounter);
  obj.interfaceVersion != null && jspb.Message.setField(msg, 3, obj.interfaceVersion);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.RacobitObjectListStatus_60A;
  return proto.apollo.drivers.RacobitObjectListStatus_60A.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.RacobitObjectListStatus_60A} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNofObjects(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMeasCounter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterfaceVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.RacobitObjectListStatus_60A.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.RacobitObjectListStatus_60A} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 nof_objects = 1;
 * @return {number}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.getNofObjects = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A} returns this
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.setNofObjects = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A} returns this
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.clearNofObjects = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.hasNofObjects = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 meas_counter = 2;
 * @return {number}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.getMeasCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, -1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A} returns this
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.setMeasCounter = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A} returns this
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.clearMeasCounter = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.hasMeasCounter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 interface_version = 3;
 * @return {number}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.getInterfaceVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A} returns this
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.setInterfaceVersion = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitObjectListStatus_60A} returns this
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.clearInterfaceVersion = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitObjectListStatus_60A.prototype.hasInterfaceVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.RacobitRadarState_201.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.RacobitRadarState_201} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitRadarState_201.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxDistance: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    radarPower: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    outputType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    rcsThreshold: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    sendQuality: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    sendExtInfo: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RacobitRadarState_201 as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.RacobitRadarState_201.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxDistance;

  /** @type {?|undefined} */
  this.radarPower;

  /** @type {?|undefined} */
  this.outputType;

  /** @type {?|undefined} */
  this.rcsThreshold;

  /** @type {?|undefined} */
  this.sendQuality;

  /** @type {?|undefined} */
  this.sendExtInfo;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.RacobitRadarState_201.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.RacobitRadarState_201}
 */
proto.apollo.drivers.RacobitRadarState_201.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.RacobitRadarState_201();
  obj.maxDistance != null && jspb.Message.setField(msg, 1, obj.maxDistance);
  obj.radarPower != null && jspb.Message.setField(msg, 2, obj.radarPower);
  obj.outputType != null && jspb.Message.setField(msg, 3, obj.outputType);
  obj.rcsThreshold != null && jspb.Message.setField(msg, 4, obj.rcsThreshold);
  obj.sendQuality != null && jspb.Message.setField(msg, 5, obj.sendQuality);
  obj.sendExtInfo != null && jspb.Message.setField(msg, 6, obj.sendExtInfo);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.RacobitRadarState_201}
 */
proto.apollo.drivers.RacobitRadarState_201.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.RacobitRadarState_201;
  return proto.apollo.drivers.RacobitRadarState_201.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.RacobitRadarState_201} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.RacobitRadarState_201}
 */
proto.apollo.drivers.RacobitRadarState_201.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRadarPower(value);
      break;
    case 3:
      var value = /** @type {!proto.apollo.drivers.racobit_radar.OutputType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    case 4:
      var value = /** @type {!proto.apollo.drivers.racobit_radar.RcsThreshold} */ (reader.readEnum());
      msg.setRcsThreshold(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendQuality(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendExtInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.RacobitRadarState_201.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.RacobitRadarState_201} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitRadarState_201.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.racobit_radar.OutputType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.racobit_radar.RcsThreshold} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint32 max_distance = 1;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.getMaxDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.setMaxDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.clearMaxDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.hasMaxDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 radar_power = 2;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.getRadarPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.setRadarPower = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.clearRadarPower = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.hasRadarPower = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional racobit_radar.OutputType output_type = 3;
 * @return {!proto.apollo.drivers.racobit_radar.OutputType}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.getOutputType = function() {
  return /** @type {!proto.apollo.drivers.racobit_radar.OutputType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.apollo.drivers.racobit_radar.OutputType} value
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.setOutputType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.clearOutputType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.hasOutputType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional racobit_radar.RcsThreshold rcs_threshold = 4;
 * @return {!proto.apollo.drivers.racobit_radar.RcsThreshold}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.getRcsThreshold = function() {
  return /** @type {!proto.apollo.drivers.racobit_radar.RcsThreshold} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.apollo.drivers.racobit_radar.RcsThreshold} value
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.setRcsThreshold = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.clearRcsThreshold = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.hasRcsThreshold = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool send_quality = 5;
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.getSendQuality = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.setSendQuality = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.clearSendQuality = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.hasSendQuality = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool send_ext_info = 6;
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.getSendExtInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.setSendExtInfo = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarState_201} returns this
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.clearSendExtInfo = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarState_201.prototype.hasSendExtInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.RacobitRadarObs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.RacobitRadarObs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitRadarObs.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    clusterortrack: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    obstacleId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    longitudeDist: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    lateralDist: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    longitudeVel: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    lateralVel: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    rcs: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    dynprop: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    longitudeDistRms: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    lateralDistRms: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    longitudeVelRms: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    lateralVelRms: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    probexist: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
    measState: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    longitudeAccel: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    lateralAccel: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    oritationAngle: (f = jspb.Message.getOptionalFloatingPointField(msg, 18)) == null ? undefined : f,
    longitudeAccelRms: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f,
    lateralAccelRms: (f = jspb.Message.getOptionalFloatingPointField(msg, 20)) == null ? undefined : f,
    oritationAngleRms: (f = jspb.Message.getOptionalFloatingPointField(msg, 21)) == null ? undefined : f,
    length: (f = jspb.Message.getOptionalFloatingPointField(msg, 22)) == null ? undefined : f,
    width: (f = jspb.Message.getOptionalFloatingPointField(msg, 23)) == null ? undefined : f,
    obstacleClass: (f = jspb.Message.getField(msg, 24)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RacobitRadarObs as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.RacobitRadarObs.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.clusterortrack;

  /** @type {?|undefined} */
  this.obstacleId;

  /** @type {?|undefined} */
  this.longitudeDist;

  /** @type {?|undefined} */
  this.lateralDist;

  /** @type {?|undefined} */
  this.longitudeVel;

  /** @type {?|undefined} */
  this.lateralVel;

  /** @type {?|undefined} */
  this.rcs;

  /** @type {?|undefined} */
  this.dynprop;

  /** @type {?|undefined} */
  this.longitudeDistRms;

  /** @type {?|undefined} */
  this.lateralDistRms;

  /** @type {?|undefined} */
  this.longitudeVelRms;

  /** @type {?|undefined} */
  this.lateralVelRms;

  /** @type {?|undefined} */
  this.probexist;

  /** @type {?|undefined} */
  this.measState;

  /** @type {?|undefined} */
  this.longitudeAccel;

  /** @type {?|undefined} */
  this.lateralAccel;

  /** @type {?|undefined} */
  this.oritationAngle;

  /** @type {?|undefined} */
  this.longitudeAccelRms;

  /** @type {?|undefined} */
  this.lateralAccelRms;

  /** @type {?|undefined} */
  this.oritationAngleRms;

  /** @type {?|undefined} */
  this.length;

  /** @type {?|undefined} */
  this.width;

  /** @type {?|undefined} */
  this.obstacleClass;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.RacobitRadarObs.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.RacobitRadarObs}
 */
proto.apollo.drivers.RacobitRadarObs.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.RacobitRadarObs();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.clusterortrack != null && jspb.Message.setField(msg, 2, obj.clusterortrack);
  obj.obstacleId != null && jspb.Message.setField(msg, 3, obj.obstacleId);
  obj.longitudeDist != null && jspb.Message.setField(msg, 4, obj.longitudeDist);
  obj.lateralDist != null && jspb.Message.setField(msg, 5, obj.lateralDist);
  obj.longitudeVel != null && jspb.Message.setField(msg, 6, obj.longitudeVel);
  obj.lateralVel != null && jspb.Message.setField(msg, 7, obj.lateralVel);
  obj.rcs != null && jspb.Message.setField(msg, 8, obj.rcs);
  obj.dynprop != null && jspb.Message.setField(msg, 9, obj.dynprop);
  obj.longitudeDistRms != null && jspb.Message.setField(msg, 10, obj.longitudeDistRms);
  obj.lateralDistRms != null && jspb.Message.setField(msg, 11, obj.lateralDistRms);
  obj.longitudeVelRms != null && jspb.Message.setField(msg, 12, obj.longitudeVelRms);
  obj.lateralVelRms != null && jspb.Message.setField(msg, 13, obj.lateralVelRms);
  obj.probexist != null && jspb.Message.setField(msg, 14, obj.probexist);
  obj.measState != null && jspb.Message.setField(msg, 15, obj.measState);
  obj.longitudeAccel != null && jspb.Message.setField(msg, 16, obj.longitudeAccel);
  obj.lateralAccel != null && jspb.Message.setField(msg, 17, obj.lateralAccel);
  obj.oritationAngle != null && jspb.Message.setField(msg, 18, obj.oritationAngle);
  obj.longitudeAccelRms != null && jspb.Message.setField(msg, 19, obj.longitudeAccelRms);
  obj.lateralAccelRms != null && jspb.Message.setField(msg, 20, obj.lateralAccelRms);
  obj.oritationAngleRms != null && jspb.Message.setField(msg, 21, obj.oritationAngleRms);
  obj.length != null && jspb.Message.setField(msg, 22, obj.length);
  obj.width != null && jspb.Message.setField(msg, 23, obj.width);
  obj.obstacleClass != null && jspb.Message.setField(msg, 24, obj.obstacleClass);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.RacobitRadarObs}
 */
proto.apollo.drivers.RacobitRadarObs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.RacobitRadarObs;
  return proto.apollo.drivers.RacobitRadarObs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.RacobitRadarObs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.RacobitRadarObs}
 */
proto.apollo.drivers.RacobitRadarObs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClusterortrack(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setObstacleId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeDist(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralDist(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeVel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralVel(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRcs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDynprop(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeDistRms(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralDistRms(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeVelRms(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralVelRms(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProbexist(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMeasState(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeAccel(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralAccel(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOritationAngle(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitudeAccelRms(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLateralAccelRms(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOritationAngleRms(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setObstacleClass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.RacobitRadarObs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.RacobitRadarObs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitRadarObs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeInt32(
      24,
      f
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
*/
proto.apollo.drivers.RacobitRadarObs.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool clusterortrack = 2;
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getClusterortrack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setClusterortrack = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearClusterortrack = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasClusterortrack = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 obstacle_id = 3;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getObstacleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setObstacleId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearObstacleId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasObstacleId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double longitude_dist = 4;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLongitudeDist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLongitudeDist = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLongitudeDist = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLongitudeDist = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double lateral_dist = 5;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLateralDist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLateralDist = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLateralDist = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLateralDist = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double longitude_vel = 6;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLongitudeVel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLongitudeVel = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLongitudeVel = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLongitudeVel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double lateral_vel = 7;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLateralVel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLateralVel = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLateralVel = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLateralVel = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double rcs = 8;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getRcs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setRcs = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearRcs = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasRcs = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 dynprop = 9;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getDynprop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setDynprop = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearDynprop = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasDynprop = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double longitude_dist_rms = 10;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLongitudeDistRms = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLongitudeDistRms = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLongitudeDistRms = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLongitudeDistRms = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double lateral_dist_rms = 11;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLateralDistRms = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLateralDistRms = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLateralDistRms = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLateralDistRms = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double longitude_vel_rms = 12;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLongitudeVelRms = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLongitudeVelRms = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLongitudeVelRms = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLongitudeVelRms = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double lateral_vel_rms = 13;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLateralVelRms = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLateralVelRms = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLateralVelRms = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLateralVelRms = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double probexist = 14;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getProbexist = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setProbexist = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearProbexist = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasProbexist = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 meas_state = 15;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getMeasState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setMeasState = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearMeasState = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasMeasState = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double longitude_accel = 16;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLongitudeAccel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLongitudeAccel = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLongitudeAccel = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLongitudeAccel = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional double lateral_accel = 17;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLateralAccel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLateralAccel = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLateralAccel = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLateralAccel = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double oritation_angle = 18;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getOritationAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setOritationAngle = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearOritationAngle = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasOritationAngle = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional double longitude_accel_rms = 19;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLongitudeAccelRms = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLongitudeAccelRms = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLongitudeAccelRms = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLongitudeAccelRms = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional double lateral_accel_rms = 20;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLateralAccelRms = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLateralAccelRms = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLateralAccelRms = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLateralAccelRms = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional double oritation_angle_rms = 21;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getOritationAngleRms = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setOritationAngleRms = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearOritationAngleRms = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasOritationAngleRms = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional double length = 22;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearLength = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasLength = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional double width = 23;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional int32 obstacle_class = 24;
 * @return {number}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.getObstacleClass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.setObstacleClass = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadarObs} returns this
 */
proto.apollo.drivers.RacobitRadarObs.prototype.clearObstacleClass = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadarObs.prototype.hasObstacleClass = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.drivers.RacobitRadar.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.RacobitRadar.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.RacobitRadar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.RacobitRadar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitRadar.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && modules_common_proto_header_pb.Header.toObject(includeInstance, f),
    contiobsList: jspb.Message.toObjectList(msg.getContiobsList(),
    proto.apollo.drivers.RacobitRadarObs.toObject, includeInstance),
    radarState: (f = msg.getRadarState()) && proto.apollo.drivers.RacobitRadarState_201.toObject(includeInstance, f),
    clusterListStatus: (f = msg.getClusterListStatus()) && proto.apollo.drivers.RacobitClusterListStatus_600.toObject(includeInstance, f),
    objectListStatus: (f = msg.getObjectListStatus()) && proto.apollo.drivers.RacobitObjectListStatus_60A.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RacobitRadar as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.RacobitRadar.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.header;

  /** @type {?|undefined} */
  this.contiobsList;

  /** @type {?|undefined} */
  this.radarState;

  /** @type {?|undefined} */
  this.clusterListStatus;

  /** @type {?|undefined} */
  this.objectListStatus;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.RacobitRadar.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.RacobitRadar}
 */
proto.apollo.drivers.RacobitRadar.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.RacobitRadar();
  obj.header && jspb.Message.setWrapperField(
      msg, 1, modules_common_proto_header_pb.Header.fromObject(obj.header));
  obj.contiobsList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.contiobsList.map(
          proto.apollo.drivers.RacobitRadarObs.fromObject));
  obj.radarState && jspb.Message.setWrapperField(
      msg, 3, proto.apollo.drivers.RacobitRadarState_201.fromObject(obj.radarState));
  obj.clusterListStatus && jspb.Message.setWrapperField(
      msg, 4, proto.apollo.drivers.RacobitClusterListStatus_600.fromObject(obj.clusterListStatus));
  obj.objectListStatus && jspb.Message.setWrapperField(
      msg, 5, proto.apollo.drivers.RacobitObjectListStatus_60A.fromObject(obj.objectListStatus));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.RacobitRadar}
 */
proto.apollo.drivers.RacobitRadar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.RacobitRadar;
  return proto.apollo.drivers.RacobitRadar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.RacobitRadar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.RacobitRadar}
 */
proto.apollo.drivers.RacobitRadar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_common_proto_header_pb.Header;
      reader.readMessage(value,modules_common_proto_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.apollo.drivers.RacobitRadarObs;
      reader.readMessage(value,proto.apollo.drivers.RacobitRadarObs.deserializeBinaryFromReader);
      msg.addContiobs(value);
      break;
    case 3:
      var value = new proto.apollo.drivers.RacobitRadarState_201;
      reader.readMessage(value,proto.apollo.drivers.RacobitRadarState_201.deserializeBinaryFromReader);
      msg.setRadarState(value);
      break;
    case 4:
      var value = new proto.apollo.drivers.RacobitClusterListStatus_600;
      reader.readMessage(value,proto.apollo.drivers.RacobitClusterListStatus_600.deserializeBinaryFromReader);
      msg.setClusterListStatus(value);
      break;
    case 5:
      var value = new proto.apollo.drivers.RacobitObjectListStatus_60A;
      reader.readMessage(value,proto.apollo.drivers.RacobitObjectListStatus_60A.deserializeBinaryFromReader);
      msg.setObjectListStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.RacobitRadar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.RacobitRadar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.RacobitRadar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.RacobitRadar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_common_proto_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getContiobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.drivers.RacobitRadarObs.serializeBinaryToWriter
    );
  }
  f = message.getRadarState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.apollo.drivers.RacobitRadarState_201.serializeBinaryToWriter
    );
  }
  f = message.getClusterListStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.apollo.drivers.RacobitClusterListStatus_600.serializeBinaryToWriter
    );
  }
  f = message.getObjectListStatus();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.apollo.drivers.RacobitObjectListStatus_60A.serializeBinaryToWriter
    );
  }
};


/**
 * optional apollo.common.Header header = 1;
 * @return {?proto.apollo.common.Header}
 */
proto.apollo.drivers.RacobitRadar.prototype.getHeader = function() {
  return /** @type{?proto.apollo.common.Header} */ (
    jspb.Message.getWrapperField(this, modules_common_proto_header_pb.Header, 1));
};


/**
 * @param {?proto.apollo.common.Header|undefined} value
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
*/
proto.apollo.drivers.RacobitRadar.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
 */
proto.apollo.drivers.RacobitRadar.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadar.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RacobitRadarObs contiobs = 2;
 * @return {!Array<!proto.apollo.drivers.RacobitRadarObs>}
 */
proto.apollo.drivers.RacobitRadar.prototype.getContiobsList = function() {
  return /** @type{!Array<!proto.apollo.drivers.RacobitRadarObs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.drivers.RacobitRadarObs, 2));
};


/**
 * @param {!Array<!proto.apollo.drivers.RacobitRadarObs>} value
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
*/
proto.apollo.drivers.RacobitRadar.prototype.setContiobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.drivers.RacobitRadarObs=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.drivers.RacobitRadarObs}
 */
proto.apollo.drivers.RacobitRadar.prototype.addContiobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.drivers.RacobitRadarObs, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
 */
proto.apollo.drivers.RacobitRadar.prototype.clearContiobsList = function() {
  return this.setContiobsList([]);
};


/**
 * optional RacobitRadarState_201 radar_state = 3;
 * @return {?proto.apollo.drivers.RacobitRadarState_201}
 */
proto.apollo.drivers.RacobitRadar.prototype.getRadarState = function() {
  return /** @type{?proto.apollo.drivers.RacobitRadarState_201} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.RacobitRadarState_201, 3));
};


/**
 * @param {?proto.apollo.drivers.RacobitRadarState_201|undefined} value
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
*/
proto.apollo.drivers.RacobitRadar.prototype.setRadarState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
 */
proto.apollo.drivers.RacobitRadar.prototype.clearRadarState = function() {
  return this.setRadarState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadar.prototype.hasRadarState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RacobitClusterListStatus_600 cluster_list_status = 4;
 * @return {?proto.apollo.drivers.RacobitClusterListStatus_600}
 */
proto.apollo.drivers.RacobitRadar.prototype.getClusterListStatus = function() {
  return /** @type{?proto.apollo.drivers.RacobitClusterListStatus_600} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.RacobitClusterListStatus_600, 4));
};


/**
 * @param {?proto.apollo.drivers.RacobitClusterListStatus_600|undefined} value
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
*/
proto.apollo.drivers.RacobitRadar.prototype.setClusterListStatus = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
 */
proto.apollo.drivers.RacobitRadar.prototype.clearClusterListStatus = function() {
  return this.setClusterListStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadar.prototype.hasClusterListStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RacobitObjectListStatus_60A object_list_status = 5;
 * @return {?proto.apollo.drivers.RacobitObjectListStatus_60A}
 */
proto.apollo.drivers.RacobitRadar.prototype.getObjectListStatus = function() {
  return /** @type{?proto.apollo.drivers.RacobitObjectListStatus_60A} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.RacobitObjectListStatus_60A, 5));
};


/**
 * @param {?proto.apollo.drivers.RacobitObjectListStatus_60A|undefined} value
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
*/
proto.apollo.drivers.RacobitRadar.prototype.setObjectListStatus = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.RacobitRadar} returns this
 */
proto.apollo.drivers.RacobitRadar.prototype.clearObjectListStatus = function() {
  return this.setObjectListStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.RacobitRadar.prototype.hasObjectListStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.apollo.drivers);
