// source: modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.lidar.MlfDistanceConfig', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.MlfDistanceWeight', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.MlfEngineConfig', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.MlfMotionFilterConfig', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.MlfMotionRefinerConfig', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.MlfShapeFilterConfig', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig', null, global);
goog.exportSymbol('proto.apollo.perception.lidar.MlfTrackerConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfDistanceWeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfDistanceWeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfDistanceWeight.displayName = 'proto.apollo.perception.lidar.MlfDistanceWeight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfDistanceConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.lidar.MlfDistanceConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfDistanceConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfDistanceConfig.displayName = 'proto.apollo.perception.lidar.MlfDistanceConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.displayName = 'proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfTrackerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.lidar.MlfTrackerConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfTrackerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfTrackerConfig.displayName = 'proto.apollo.perception.lidar.MlfTrackerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfMotionFilterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfMotionFilterConfig.displayName = 'proto.apollo.perception.lidar.MlfMotionFilterConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfMotionRefinerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfMotionRefinerConfig.displayName = 'proto.apollo.perception.lidar.MlfMotionRefinerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfShapeFilterConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfShapeFilterConfig.displayName = 'proto.apollo.perception.lidar.MlfShapeFilterConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.lidar.MlfEngineConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.apollo.perception.lidar.MlfEngineConfig.repeatedFields_, null);
};
goog.inherits(proto.apollo.perception.lidar.MlfEngineConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.lidar.MlfEngineConfig.displayName = 'proto.apollo.perception.lidar.MlfEngineConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfDistanceWeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfDistanceWeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfDistanceWeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorNamePair: jspb.Message.getFieldWithDefault(msg, 1, ""),
    locationDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    directionDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    bboxSizeDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    pointNumDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    histogramDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    centroidShiftDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    bboxIouDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    semanticMapDistWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfDistanceWeight as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfDistanceWeight.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.sensorNamePair;

  /** @type {?|undefined} */
  this.locationDistWeight;

  /** @type {?|undefined} */
  this.directionDistWeight;

  /** @type {?|undefined} */
  this.bboxSizeDistWeight;

  /** @type {?|undefined} */
  this.pointNumDistWeight;

  /** @type {?|undefined} */
  this.histogramDistWeight;

  /** @type {?|undefined} */
  this.centroidShiftDistWeight;

  /** @type {?|undefined} */
  this.bboxIouDistWeight;

  /** @type {?|undefined} */
  this.semanticMapDistWeight;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfDistanceWeight.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfDistanceWeight();
  obj.sensorNamePair != null && jspb.Message.setField(msg, 1, obj.sensorNamePair);
  obj.locationDistWeight != null && jspb.Message.setField(msg, 2, obj.locationDistWeight);
  obj.directionDistWeight != null && jspb.Message.setField(msg, 3, obj.directionDistWeight);
  obj.bboxSizeDistWeight != null && jspb.Message.setField(msg, 4, obj.bboxSizeDistWeight);
  obj.pointNumDistWeight != null && jspb.Message.setField(msg, 5, obj.pointNumDistWeight);
  obj.histogramDistWeight != null && jspb.Message.setField(msg, 6, obj.histogramDistWeight);
  obj.centroidShiftDistWeight != null && jspb.Message.setField(msg, 7, obj.centroidShiftDistWeight);
  obj.bboxIouDistWeight != null && jspb.Message.setField(msg, 8, obj.bboxIouDistWeight);
  obj.semanticMapDistWeight != null && jspb.Message.setField(msg, 9, obj.semanticMapDistWeight);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfDistanceWeight;
  return proto.apollo.perception.lidar.MlfDistanceWeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfDistanceWeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensorNamePair(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLocationDistWeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirectionDistWeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBboxSizeDistWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPointNumDistWeight(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHistogramDistWeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCentroidShiftDistWeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBboxIouDistWeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSemanticMapDistWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfDistanceWeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfDistanceWeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfDistanceWeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional string sensor_name_pair = 1;
 * @return {string}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getSensorNamePair = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setSensorNamePair = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearSensorNamePair = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasSensorNamePair = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float location_dist_weight = 2;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getLocationDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setLocationDistWeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearLocationDistWeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasLocationDistWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float direction_dist_weight = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getDirectionDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setDirectionDistWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearDirectionDistWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasDirectionDistWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float bbox_size_dist_weight = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getBboxSizeDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setBboxSizeDistWeight = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearBboxSizeDistWeight = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasBboxSizeDistWeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float point_num_dist_weight = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getPointNumDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setPointNumDistWeight = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearPointNumDistWeight = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasPointNumDistWeight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float histogram_dist_weight = 6;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getHistogramDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setHistogramDistWeight = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearHistogramDistWeight = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasHistogramDistWeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float centroid_shift_dist_weight = 7;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getCentroidShiftDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setCentroidShiftDistWeight = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearCentroidShiftDistWeight = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasCentroidShiftDistWeight = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float bbox_iou_dist_weight = 8;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getBboxIouDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setBboxIouDistWeight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearBboxIouDistWeight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasBboxIouDistWeight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float semantic_map_dist_weight = 9;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.getSemanticMapDistWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.setSemanticMapDistWeight = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight} returns this
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.clearSemanticMapDistWeight = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfDistanceWeight.prototype.hasSemanticMapDistWeight = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.lidar.MlfDistanceConfig.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfDistanceConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfDistanceConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfDistanceConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    foregroundWeightsList: jspb.Message.toObjectList(msg.getForegroundWeightsList(),
    proto.apollo.perception.lidar.MlfDistanceWeight.toObject, includeInstance),
    backgroundWeightsList: jspb.Message.toObjectList(msg.getBackgroundWeightsList(),
    proto.apollo.perception.lidar.MlfDistanceWeight.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfDistanceConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfDistanceConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.foregroundWeightsList;

  /** @type {?|undefined} */
  this.backgroundWeightsList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfDistanceConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfDistanceConfig}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfDistanceConfig();
  obj.foregroundWeightsList && jspb.Message.setRepeatedWrapperField(
      msg, 1, obj.foregroundWeightsList.map(
          proto.apollo.perception.lidar.MlfDistanceWeight.fromObject));
  obj.backgroundWeightsList && jspb.Message.setRepeatedWrapperField(
      msg, 2, obj.backgroundWeightsList.map(
          proto.apollo.perception.lidar.MlfDistanceWeight.fromObject));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfDistanceConfig}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfDistanceConfig;
  return proto.apollo.perception.lidar.MlfDistanceConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfDistanceConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfDistanceConfig}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.lidar.MlfDistanceWeight;
      reader.readMessage(value,proto.apollo.perception.lidar.MlfDistanceWeight.deserializeBinaryFromReader);
      msg.addForegroundWeights(value);
      break;
    case 2:
      var value = new proto.apollo.perception.lidar.MlfDistanceWeight;
      reader.readMessage(value,proto.apollo.perception.lidar.MlfDistanceWeight.deserializeBinaryFromReader);
      msg.addBackgroundWeights(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfDistanceConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfDistanceConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfDistanceConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForegroundWeightsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.apollo.perception.lidar.MlfDistanceWeight.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundWeightsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.apollo.perception.lidar.MlfDistanceWeight.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MlfDistanceWeight foreground_weights = 1;
 * @return {!Array<!proto.apollo.perception.lidar.MlfDistanceWeight>}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.getForegroundWeightsList = function() {
  return /** @type{!Array<!proto.apollo.perception.lidar.MlfDistanceWeight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.lidar.MlfDistanceWeight, 1));
};


/**
 * @param {!Array<!proto.apollo.perception.lidar.MlfDistanceWeight>} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceConfig} returns this
*/
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.setForegroundWeightsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.apollo.perception.lidar.MlfDistanceWeight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.addForegroundWeights = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.apollo.perception.lidar.MlfDistanceWeight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.lidar.MlfDistanceConfig} returns this
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.clearForegroundWeightsList = function() {
  return this.setForegroundWeightsList([]);
};


/**
 * repeated MlfDistanceWeight background_weights = 2;
 * @return {!Array<!proto.apollo.perception.lidar.MlfDistanceWeight>}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.getBackgroundWeightsList = function() {
  return /** @type{!Array<!proto.apollo.perception.lidar.MlfDistanceWeight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.apollo.perception.lidar.MlfDistanceWeight, 2));
};


/**
 * @param {!Array<!proto.apollo.perception.lidar.MlfDistanceWeight>} value
 * @return {!proto.apollo.perception.lidar.MlfDistanceConfig} returns this
*/
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.setBackgroundWeightsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.apollo.perception.lidar.MlfDistanceWeight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.lidar.MlfDistanceWeight}
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.addBackgroundWeights = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.apollo.perception.lidar.MlfDistanceWeight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.lidar.MlfDistanceConfig} returns this
 */
proto.apollo.perception.lidar.MlfDistanceConfig.prototype.clearBackgroundWeightsList = function() {
  return this.setBackgroundWeightsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    foregroundMathcerMethod: jspb.Message.getFieldWithDefault(msg, 1, "MultiHmBipartiteGraphMatcher"),
    backgroundMatcherMethod: jspb.Message.getFieldWithDefault(msg, 2, "GnnBipartiteGraphMatcher"),
    boundValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 100.0),
    maxMatchDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 4.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfTrackObjectMatcherConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.foregroundMathcerMethod;

  /** @type {?|undefined} */
  this.backgroundMatcherMethod;

  /** @type {?|undefined} */
  this.boundValue;

  /** @type {?|undefined} */
  this.maxMatchDistance;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig();
  obj.foregroundMathcerMethod != null && jspb.Message.setField(msg, 1, obj.foregroundMathcerMethod);
  obj.backgroundMatcherMethod != null && jspb.Message.setField(msg, 2, obj.backgroundMatcherMethod);
  obj.boundValue != null && jspb.Message.setField(msg, 3, obj.boundValue);
  obj.maxMatchDistance != null && jspb.Message.setField(msg, 4, obj.maxMatchDistance);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig;
  return proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setForegroundMathcerMethod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackgroundMatcherMethod(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoundValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxMatchDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string foreground_mathcer_method = 1;
 * @return {string}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.getForegroundMathcerMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "MultiHmBipartiteGraphMatcher"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.setForegroundMathcerMethod = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.clearForegroundMathcerMethod = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.hasForegroundMathcerMethod = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string background_matcher_method = 2;
 * @return {string}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.getBackgroundMatcherMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "GnnBipartiteGraphMatcher"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.setBackgroundMatcherMethod = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.clearBackgroundMatcherMethod = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.hasBackgroundMatcherMethod = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float bound_value = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.getBoundValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 100.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.setBoundValue = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.clearBoundValue = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.hasBoundValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float max_match_distance = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.getMaxMatchDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 4.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.setMaxMatchDistance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.clearMaxMatchDistance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfTrackObjectMatcherConfig.prototype.hasMaxMatchDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.lidar.MlfTrackerConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfTrackerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfTrackerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfTrackerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfTrackerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterNameList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfTrackerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfTrackerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.filterNameList;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfTrackerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfTrackerConfig}
 */
proto.apollo.perception.lidar.MlfTrackerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfTrackerConfig();
  obj.filterNameList != null && jspb.Message.setField(msg, 1, obj.filterNameList);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfTrackerConfig}
 */
proto.apollo.perception.lidar.MlfTrackerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfTrackerConfig;
  return proto.apollo.perception.lidar.MlfTrackerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfTrackerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfTrackerConfig}
 */
proto.apollo.perception.lidar.MlfTrackerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFilterName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfTrackerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfTrackerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfTrackerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfTrackerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string filter_name = 1;
 * @return {!Array<string>}
 */
proto.apollo.perception.lidar.MlfTrackerConfig.prototype.getFilterNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.lidar.MlfTrackerConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackerConfig.prototype.setFilterNameList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.lidar.MlfTrackerConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackerConfig.prototype.addFilterName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.lidar.MlfTrackerConfig} returns this
 */
proto.apollo.perception.lidar.MlfTrackerConfig.prototype.clearFilterNameList = function() {
  return this.setFilterNameList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfMotionFilterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfMotionFilterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    useAdaptive: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    useBreakdown: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    useConvergenceBoostup: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),
    initVelocityVariance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 5.0),
    initAccelerationVariance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 10.0),
    measuredVelocityVariance: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.4),
    predictVariancePerSqrsec: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 10.0),
    boostupHistorySizeMinimum: jspb.Message.getFieldWithDefault(msg, 8, 3),
    boostupHistorySizeMaximum: jspb.Message.getFieldWithDefault(msg, 9, 6),
    convergedConfidenceMinimum: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.5),
    noiseMaximum: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.1),
    trustOrientationRange: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 40.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfMotionFilterConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.useAdaptive;

  /** @type {?|undefined} */
  this.useBreakdown;

  /** @type {?|undefined} */
  this.useConvergenceBoostup;

  /** @type {?|undefined} */
  this.initVelocityVariance;

  /** @type {?|undefined} */
  this.initAccelerationVariance;

  /** @type {?|undefined} */
  this.measuredVelocityVariance;

  /** @type {?|undefined} */
  this.predictVariancePerSqrsec;

  /** @type {?|undefined} */
  this.boostupHistorySizeMinimum;

  /** @type {?|undefined} */
  this.boostupHistorySizeMaximum;

  /** @type {?|undefined} */
  this.convergedConfidenceMinimum;

  /** @type {?|undefined} */
  this.noiseMaximum;

  /** @type {?|undefined} */
  this.trustOrientationRange;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfMotionFilterConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfMotionFilterConfig();
  obj.useAdaptive != null && jspb.Message.setField(msg, 1, obj.useAdaptive);
  obj.useBreakdown != null && jspb.Message.setField(msg, 2, obj.useBreakdown);
  obj.useConvergenceBoostup != null && jspb.Message.setField(msg, 3, obj.useConvergenceBoostup);
  obj.initVelocityVariance != null && jspb.Message.setField(msg, 4, obj.initVelocityVariance);
  obj.initAccelerationVariance != null && jspb.Message.setField(msg, 5, obj.initAccelerationVariance);
  obj.measuredVelocityVariance != null && jspb.Message.setField(msg, 6, obj.measuredVelocityVariance);
  obj.predictVariancePerSqrsec != null && jspb.Message.setField(msg, 7, obj.predictVariancePerSqrsec);
  obj.boostupHistorySizeMinimum != null && jspb.Message.setField(msg, 8, obj.boostupHistorySizeMinimum);
  obj.boostupHistorySizeMaximum != null && jspb.Message.setField(msg, 9, obj.boostupHistorySizeMaximum);
  obj.convergedConfidenceMinimum != null && jspb.Message.setField(msg, 10, obj.convergedConfidenceMinimum);
  obj.noiseMaximum != null && jspb.Message.setField(msg, 12, obj.noiseMaximum);
  obj.trustOrientationRange != null && jspb.Message.setField(msg, 13, obj.trustOrientationRange);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfMotionFilterConfig;
  return proto.apollo.perception.lidar.MlfMotionFilterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfMotionFilterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseAdaptive(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseBreakdown(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseConvergenceBoostup(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitVelocityVariance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInitAccelerationVariance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeasuredVelocityVariance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPredictVariancePerSqrsec(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBoostupHistorySizeMinimum(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBoostupHistorySizeMaximum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConvergedConfidenceMinimum(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNoiseMaximum(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrustOrientationRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfMotionFilterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfMotionFilterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional bool use_adaptive = 1;
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getUseAdaptive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setUseAdaptive = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearUseAdaptive = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasUseAdaptive = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool use_breakdown = 2;
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getUseBreakdown = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setUseBreakdown = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearUseBreakdown = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasUseBreakdown = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool use_convergence_boostup = 3;
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getUseConvergenceBoostup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setUseConvergenceBoostup = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearUseConvergenceBoostup = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasUseConvergenceBoostup = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double init_velocity_variance = 4;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getInitVelocityVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 5.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setInitVelocityVariance = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearInitVelocityVariance = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasInitVelocityVariance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double init_acceleration_variance = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getInitAccelerationVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setInitAccelerationVariance = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearInitAccelerationVariance = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasInitAccelerationVariance = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double measured_velocity_variance = 6;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getMeasuredVelocityVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.4));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setMeasuredVelocityVariance = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearMeasuredVelocityVariance = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasMeasuredVelocityVariance = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional double predict_variance_per_sqrsec = 7;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getPredictVariancePerSqrsec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setPredictVariancePerSqrsec = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearPredictVariancePerSqrsec = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasPredictVariancePerSqrsec = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 boostup_history_size_minimum = 8;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getBoostupHistorySizeMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 3));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setBoostupHistorySizeMinimum = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearBoostupHistorySizeMinimum = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasBoostupHistorySizeMinimum = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 boostup_history_size_maximum = 9;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getBoostupHistorySizeMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 6));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setBoostupHistorySizeMaximum = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearBoostupHistorySizeMaximum = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasBoostupHistorySizeMaximum = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double converged_confidence_minimum = 10;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getConvergedConfidenceMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setConvergedConfidenceMinimum = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearConvergedConfidenceMinimum = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasConvergedConfidenceMinimum = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double noise_maximum = 12;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getNoiseMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setNoiseMaximum = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearNoiseMaximum = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasNoiseMaximum = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double trust_orientation_range = 13;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.getTrustOrientationRange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 40.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.setTrustOrientationRange = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.clearTrustOrientationRange = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionFilterConfig.prototype.hasTrustOrientationRange = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfMotionRefinerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfMotionRefinerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    clapingAccelerationThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 10.0),
    clapingSpeedThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfMotionRefinerConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.clapingAccelerationThreshold;

  /** @type {?|undefined} */
  this.clapingSpeedThreshold;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfMotionRefinerConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfMotionRefinerConfig}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfMotionRefinerConfig();
  obj.clapingAccelerationThreshold != null && jspb.Message.setField(msg, 1, obj.clapingAccelerationThreshold);
  obj.clapingSpeedThreshold != null && jspb.Message.setField(msg, 2, obj.clapingSpeedThreshold);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfMotionRefinerConfig}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfMotionRefinerConfig;
  return proto.apollo.perception.lidar.MlfMotionRefinerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfMotionRefinerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfMotionRefinerConfig}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClapingAccelerationThreshold(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClapingSpeedThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfMotionRefinerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfMotionRefinerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double claping_acceleration_threshold = 1;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.getClapingAccelerationThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 10.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionRefinerConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.setClapingAccelerationThreshold = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionRefinerConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.clearClapingAccelerationThreshold = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.hasClapingAccelerationThreshold = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double claping_speed_threshold = 2;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.getClapingSpeedThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfMotionRefinerConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.setClapingSpeedThreshold = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfMotionRefinerConfig} returns this
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.clearClapingSpeedThreshold = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfMotionRefinerConfig.prototype.hasClapingSpeedThreshold = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfShapeFilterConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfShapeFilterConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    bottomPointsIgnoreThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.1),
    topPointsIgnoreThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 1.6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfShapeFilterConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.bottomPointsIgnoreThreshold;

  /** @type {?|undefined} */
  this.topPointsIgnoreThreshold;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfShapeFilterConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfShapeFilterConfig}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfShapeFilterConfig();
  obj.bottomPointsIgnoreThreshold != null && jspb.Message.setField(msg, 1, obj.bottomPointsIgnoreThreshold);
  obj.topPointsIgnoreThreshold != null && jspb.Message.setField(msg, 2, obj.topPointsIgnoreThreshold);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfShapeFilterConfig}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfShapeFilterConfig;
  return proto.apollo.perception.lidar.MlfShapeFilterConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfShapeFilterConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfShapeFilterConfig}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBottomPointsIgnoreThreshold(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTopPointsIgnoreThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfShapeFilterConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfShapeFilterConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double bottom_points_ignore_threshold = 1;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.getBottomPointsIgnoreThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfShapeFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.setBottomPointsIgnoreThreshold = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfShapeFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.clearBottomPointsIgnoreThreshold = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.hasBottomPointsIgnoreThreshold = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double top_points_ignore_threshold = 2;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.getTopPointsIgnoreThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 1.6));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfShapeFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.setTopPointsIgnoreThreshold = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfShapeFilterConfig} returns this
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.clearTopPointsIgnoreThreshold = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfShapeFilterConfig.prototype.hasTopPointsIgnoreThreshold = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.apollo.perception.lidar.MlfEngineConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.lidar.MlfEngineConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.lidar.MlfEngineConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfEngineConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainSensorList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    useHistogramForMatch: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    histogramBinSize: jspb.Message.getFieldWithDefault(msg, 3, 10),
    outputPredictObjects: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    reservedInvisibleTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.2),
    useFrameTimestamp: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of MlfEngineConfig as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.lidar.MlfEngineConfig.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.mainSensorList;

  /** @type {?|undefined} */
  this.useHistogramForMatch;

  /** @type {?|undefined} */
  this.histogramBinSize;

  /** @type {?|undefined} */
  this.outputPredictObjects;

  /** @type {?|undefined} */
  this.reservedInvisibleTime;

  /** @type {?|undefined} */
  this.useFrameTimestamp;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.lidar.MlfEngineConfig.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig}
 */
proto.apollo.perception.lidar.MlfEngineConfig.fromObject = function(obj) {
  var msg = new proto.apollo.perception.lidar.MlfEngineConfig();
  obj.mainSensorList != null && jspb.Message.setField(msg, 1, obj.mainSensorList);
  obj.useHistogramForMatch != null && jspb.Message.setField(msg, 2, obj.useHistogramForMatch);
  obj.histogramBinSize != null && jspb.Message.setField(msg, 3, obj.histogramBinSize);
  obj.outputPredictObjects != null && jspb.Message.setField(msg, 4, obj.outputPredictObjects);
  obj.reservedInvisibleTime != null && jspb.Message.setField(msg, 5, obj.reservedInvisibleTime);
  obj.useFrameTimestamp != null && jspb.Message.setField(msg, 6, obj.useFrameTimestamp);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig}
 */
proto.apollo.perception.lidar.MlfEngineConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.lidar.MlfEngineConfig;
  return proto.apollo.perception.lidar.MlfEngineConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.lidar.MlfEngineConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig}
 */
proto.apollo.perception.lidar.MlfEngineConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMainSensor(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseHistogramForMatch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHistogramBinSize(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputPredictObjects(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReservedInvisibleTime(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseFrameTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.lidar.MlfEngineConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.lidar.MlfEngineConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.lidar.MlfEngineConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMainSensorList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * repeated string main_sensor = 1;
 * @return {!Array<string>}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.getMainSensorList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.setMainSensorList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.addMainSensor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.clearMainSensorList = function() {
  return this.setMainSensorList([]);
};


/**
 * optional bool use_histogram_for_match = 2;
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.getUseHistogramForMatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.setUseHistogramForMatch = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.clearUseHistogramForMatch = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.hasUseHistogramForMatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 histogram_bin_size = 3;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.getHistogramBinSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 10));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.setHistogramBinSize = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.clearHistogramBinSize = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.hasHistogramBinSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool output_predict_objects = 4;
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.getOutputPredictObjects = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.setOutputPredictObjects = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.clearOutputPredictObjects = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.hasOutputPredictObjects = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double reserved_invisible_time = 5;
 * @return {number}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.getReservedInvisibleTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.2));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.setReservedInvisibleTime = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.clearReservedInvisibleTime = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.hasReservedInvisibleTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool use_frame_timestamp = 6;
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.getUseFrameTimestamp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.setUseFrameTimestamp = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.lidar.MlfEngineConfig} returns this
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.clearUseFrameTimestamp = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.lidar.MlfEngineConfig.prototype.hasUseFrameTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.apollo.perception.lidar);
