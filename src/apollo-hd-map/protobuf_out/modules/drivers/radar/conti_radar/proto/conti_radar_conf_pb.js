// source: modules/drivers/radar/conti_radar/proto/conti_radar_conf.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var modules_drivers_canbus_proto_can_card_parameter_pb = require('../../../../../modules/drivers/canbus/proto/can_card_parameter_pb.js');
goog.object.extend(proto, modules_drivers_canbus_proto_can_card_parameter_pb);
goog.exportSymbol('proto.apollo.drivers.conti_radar.CanConf', null, global);
goog.exportSymbol('proto.apollo.drivers.conti_radar.ContiRadarConf', null, global);
goog.exportSymbol('proto.apollo.drivers.conti_radar.OutputType', null, global);
goog.exportSymbol('proto.apollo.drivers.conti_radar.RadarConf', null, global);
goog.exportSymbol('proto.apollo.drivers.conti_radar.RcsThreshold', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.conti_radar.CanConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.conti_radar.CanConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.conti_radar.CanConf.displayName = 'proto.apollo.drivers.conti_radar.CanConf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.conti_radar.RadarConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.conti_radar.RadarConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.conti_radar.RadarConf.displayName = 'proto.apollo.drivers.conti_radar.RadarConf';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.drivers.conti_radar.ContiRadarConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.drivers.conti_radar.ContiRadarConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.drivers.conti_radar.ContiRadarConf.displayName = 'proto.apollo.drivers.conti_radar.ContiRadarConf';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.conti_radar.CanConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.conti_radar.CanConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.conti_radar.CanConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    canCardParameter: (f = msg.getCanCardParameter()) && modules_drivers_canbus_proto_can_card_parameter_pb.CANCardParameter.toObject(includeInstance, f),
    enableDebugMode: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    enableReceiverLog: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    enableSenderLog: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of CanConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.conti_radar.CanConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.canCardParameter;

  /** @type {?|undefined} */
  this.enableDebugMode;

  /** @type {?|undefined} */
  this.enableReceiverLog;

  /** @type {?|undefined} */
  this.enableSenderLog;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.conti_radar.CanConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.conti_radar.CanConf}
 */
proto.apollo.drivers.conti_radar.CanConf.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.conti_radar.CanConf();
  obj.canCardParameter && jspb.Message.setWrapperField(
      msg, 1, modules_drivers_canbus_proto_can_card_parameter_pb.CANCardParameter.fromObject(obj.canCardParameter));
  obj.enableDebugMode != null && jspb.Message.setField(msg, 2, obj.enableDebugMode);
  obj.enableReceiverLog != null && jspb.Message.setField(msg, 3, obj.enableReceiverLog);
  obj.enableSenderLog != null && jspb.Message.setField(msg, 4, obj.enableSenderLog);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.conti_radar.CanConf}
 */
proto.apollo.drivers.conti_radar.CanConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.conti_radar.CanConf;
  return proto.apollo.drivers.conti_radar.CanConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.conti_radar.CanConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.conti_radar.CanConf}
 */
proto.apollo.drivers.conti_radar.CanConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new modules_drivers_canbus_proto_can_card_parameter_pb.CANCardParameter;
      reader.readMessage(value,modules_drivers_canbus_proto_can_card_parameter_pb.CANCardParameter.deserializeBinaryFromReader);
      msg.setCanCardParameter(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableDebugMode(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableReceiverLog(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSenderLog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.conti_radar.CanConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.conti_radar.CanConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.conti_radar.CanConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCanCardParameter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      modules_drivers_canbus_proto_can_card_parameter_pb.CANCardParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
 * @return {?proto.apollo.drivers.canbus.CANCardParameter}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.getCanCardParameter = function() {
  return /** @type{?proto.apollo.drivers.canbus.CANCardParameter} */ (
    jspb.Message.getWrapperField(this, modules_drivers_canbus_proto_can_card_parameter_pb.CANCardParameter, 1));
};


/**
 * @param {?proto.apollo.drivers.canbus.CANCardParameter|undefined} value
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
*/
proto.apollo.drivers.conti_radar.CanConf.prototype.setCanCardParameter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.clearCanCardParameter = function() {
  return this.setCanCardParameter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.hasCanCardParameter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enable_debug_mode = 2;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.getEnableDebugMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.setEnableDebugMode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.clearEnableDebugMode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.hasEnableDebugMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enable_receiver_log = 3;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.getEnableReceiverLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.setEnableReceiverLog = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.clearEnableReceiverLog = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.hasEnableReceiverLog = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool enable_sender_log = 4;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.getEnableSenderLog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.setEnableSenderLog = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.CanConf} returns this
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.clearEnableSenderLog = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.CanConf.prototype.hasEnableSenderLog = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.conti_radar.RadarConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.conti_radar.RadarConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.conti_radar.RadarConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxDistanceValid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    sensorIdValid: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    radarPowerValid: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    outputTypeValid: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    sendQualityValid: jspb.Message.getBooleanFieldWithDefault(msg, 5, true),
    sendExtInfoValid: jspb.Message.getBooleanFieldWithDefault(msg, 6, true),
    sortIndexValid: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    storeInNvmValid: jspb.Message.getBooleanFieldWithDefault(msg, 8, true),
    ctrlRelayValid: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    rcsThresholdValid: jspb.Message.getBooleanFieldWithDefault(msg, 10, true),
    maxDistance: jspb.Message.getFieldWithDefault(msg, 11, 248),
    sensorId: jspb.Message.getFieldWithDefault(msg, 12, 0),
    outputType: jspb.Message.getFieldWithDefault(msg, 13, 1),
    radarPower: jspb.Message.getFieldWithDefault(msg, 14, 0),
    ctrlRelay: jspb.Message.getFieldWithDefault(msg, 15, 0),
    sendExtInfo: jspb.Message.getBooleanFieldWithDefault(msg, 16, true),
    sendQuality: jspb.Message.getBooleanFieldWithDefault(msg, 17, true),
    sortIndex: jspb.Message.getFieldWithDefault(msg, 18, 0),
    storeInNvm: jspb.Message.getFieldWithDefault(msg, 19, 1),
    rcsThreshold: jspb.Message.getFieldWithDefault(msg, 20, 0),
    inputSendInterval: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of RadarConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.conti_radar.RadarConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.maxDistanceValid;

  /** @type {?|undefined} */
  this.sensorIdValid;

  /** @type {?|undefined} */
  this.radarPowerValid;

  /** @type {?|undefined} */
  this.outputTypeValid;

  /** @type {?|undefined} */
  this.sendQualityValid;

  /** @type {?|undefined} */
  this.sendExtInfoValid;

  /** @type {?|undefined} */
  this.sortIndexValid;

  /** @type {?|undefined} */
  this.storeInNvmValid;

  /** @type {?|undefined} */
  this.ctrlRelayValid;

  /** @type {?|undefined} */
  this.rcsThresholdValid;

  /** @type {?|undefined} */
  this.maxDistance;

  /** @type {?|undefined} */
  this.sensorId;

  /** @type {?|undefined} */
  this.outputType;

  /** @type {?|undefined} */
  this.radarPower;

  /** @type {?|undefined} */
  this.ctrlRelay;

  /** @type {?|undefined} */
  this.sendExtInfo;

  /** @type {?|undefined} */
  this.sendQuality;

  /** @type {?|undefined} */
  this.sortIndex;

  /** @type {?|undefined} */
  this.storeInNvm;

  /** @type {?|undefined} */
  this.rcsThreshold;

  /** @type {?|undefined} */
  this.inputSendInterval;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.conti_radar.RadarConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf}
 */
proto.apollo.drivers.conti_radar.RadarConf.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.conti_radar.RadarConf();
  obj.maxDistanceValid != null && jspb.Message.setField(msg, 1, obj.maxDistanceValid);
  obj.sensorIdValid != null && jspb.Message.setField(msg, 2, obj.sensorIdValid);
  obj.radarPowerValid != null && jspb.Message.setField(msg, 3, obj.radarPowerValid);
  obj.outputTypeValid != null && jspb.Message.setField(msg, 4, obj.outputTypeValid);
  obj.sendQualityValid != null && jspb.Message.setField(msg, 5, obj.sendQualityValid);
  obj.sendExtInfoValid != null && jspb.Message.setField(msg, 6, obj.sendExtInfoValid);
  obj.sortIndexValid != null && jspb.Message.setField(msg, 7, obj.sortIndexValid);
  obj.storeInNvmValid != null && jspb.Message.setField(msg, 8, obj.storeInNvmValid);
  obj.ctrlRelayValid != null && jspb.Message.setField(msg, 9, obj.ctrlRelayValid);
  obj.rcsThresholdValid != null && jspb.Message.setField(msg, 10, obj.rcsThresholdValid);
  obj.maxDistance != null && jspb.Message.setField(msg, 11, obj.maxDistance);
  obj.sensorId != null && jspb.Message.setField(msg, 12, obj.sensorId);
  obj.outputType != null && jspb.Message.setField(msg, 13, obj.outputType);
  obj.radarPower != null && jspb.Message.setField(msg, 14, obj.radarPower);
  obj.ctrlRelay != null && jspb.Message.setField(msg, 15, obj.ctrlRelay);
  obj.sendExtInfo != null && jspb.Message.setField(msg, 16, obj.sendExtInfo);
  obj.sendQuality != null && jspb.Message.setField(msg, 17, obj.sendQuality);
  obj.sortIndex != null && jspb.Message.setField(msg, 18, obj.sortIndex);
  obj.storeInNvm != null && jspb.Message.setField(msg, 19, obj.storeInNvm);
  obj.rcsThreshold != null && jspb.Message.setField(msg, 20, obj.rcsThreshold);
  obj.inputSendInterval != null && jspb.Message.setField(msg, 21, obj.inputSendInterval);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf}
 */
proto.apollo.drivers.conti_radar.RadarConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.conti_radar.RadarConf;
  return proto.apollo.drivers.conti_radar.RadarConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.conti_radar.RadarConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf}
 */
proto.apollo.drivers.conti_radar.RadarConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMaxDistanceValid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSensorIdValid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRadarPowerValid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutputTypeValid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendQualityValid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendExtInfoValid(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSortIndexValid(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStoreInNvmValid(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCtrlRelayValid(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRcsThresholdValid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxDistance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSensorId(value);
      break;
    case 13:
      var value = /** @type {!proto.apollo.drivers.conti_radar.OutputType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRadarPower(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCtrlRelay(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendExtInfo(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendQuality(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSortIndex(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStoreInNvm(value);
      break;
    case 20:
      var value = /** @type {!proto.apollo.drivers.conti_radar.RcsThreshold} */ (reader.readEnum());
      msg.setRcsThreshold(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInputSendInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.conti_radar.RadarConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.conti_radar.RadarConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.conti_radar.RadarConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.conti_radar.OutputType} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = /** @type {!proto.apollo.drivers.conti_radar.RcsThreshold} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeUint64(
      21,
      f
    );
  }
};


/**
 * optional bool max_distance_valid = 1;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getMaxDistanceValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setMaxDistanceValid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearMaxDistanceValid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasMaxDistanceValid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool sensor_id_valid = 2;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSensorIdValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSensorIdValid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSensorIdValid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSensorIdValid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool radar_power_valid = 3;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getRadarPowerValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setRadarPowerValid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearRadarPowerValid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasRadarPowerValid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool output_type_valid = 4;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getOutputTypeValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setOutputTypeValid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearOutputTypeValid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasOutputTypeValid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool send_quality_valid = 5;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSendQualityValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSendQualityValid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSendQualityValid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSendQualityValid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool send_ext_info_valid = 6;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSendExtInfoValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSendExtInfoValid = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSendExtInfoValid = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSendExtInfoValid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool sort_index_valid = 7;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSortIndexValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSortIndexValid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSortIndexValid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSortIndexValid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool store_in_nvm_valid = 8;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getStoreInNvmValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setStoreInNvmValid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearStoreInNvmValid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasStoreInNvmValid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool ctrl_relay_valid = 9;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getCtrlRelayValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setCtrlRelayValid = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearCtrlRelayValid = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasCtrlRelayValid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool rcs_threshold_valid = 10;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getRcsThresholdValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setRcsThresholdValid = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearRcsThresholdValid = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasRcsThresholdValid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 max_distance = 11;
 * @return {number}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getMaxDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 248));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setMaxDistance = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearMaxDistance = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasMaxDistance = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 sensor_id = 12;
 * @return {number}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSensorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSensorId = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSensorId = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSensorId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional OutputType output_type = 13;
 * @return {!proto.apollo.drivers.conti_radar.OutputType}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getOutputType = function() {
  return /** @type {!proto.apollo.drivers.conti_radar.OutputType} */ (jspb.Message.getFieldWithDefault(this, 13, 1));
};


/**
 * @param {!proto.apollo.drivers.conti_radar.OutputType} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setOutputType = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearOutputType = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasOutputType = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 radar_power = 14;
 * @return {number}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getRadarPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setRadarPower = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearRadarPower = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasRadarPower = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 ctrl_relay = 15;
 * @return {number}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getCtrlRelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setCtrlRelay = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearCtrlRelay = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasCtrlRelay = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool send_ext_info = 16;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSendExtInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSendExtInfo = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSendExtInfo = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSendExtInfo = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool send_quality = 17;
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSendQuality = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSendQuality = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSendQuality = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSendQuality = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional uint32 sort_index = 18;
 * @return {number}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getSortIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setSortIndex = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearSortIndex = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasSortIndex = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional uint32 store_in_nvm = 19;
 * @return {number}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getStoreInNvm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 1));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setStoreInNvm = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearStoreInNvm = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasStoreInNvm = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional RcsThreshold rcs_threshold = 20;
 * @return {!proto.apollo.drivers.conti_radar.RcsThreshold}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getRcsThreshold = function() {
  return /** @type {!proto.apollo.drivers.conti_radar.RcsThreshold} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.apollo.drivers.conti_radar.RcsThreshold} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setRcsThreshold = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearRcsThreshold = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasRcsThreshold = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional uint64 input_send_interval = 21;
 * @return {number}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.getInputSendInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.setInputSendInterval = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.RadarConf} returns this
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.clearInputSendInterval = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.RadarConf.prototype.hasInputSendInterval = function() {
  return jspb.Message.getField(this, 21) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.drivers.conti_radar.ContiRadarConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.drivers.conti_radar.ContiRadarConf} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    canConf: (f = msg.getCanConf()) && proto.apollo.drivers.conti_radar.CanConf.toObject(includeInstance, f),
    radarConf: (f = msg.getRadarConf()) && proto.apollo.drivers.conti_radar.RadarConf.toObject(includeInstance, f),
    radarChannel: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ContiRadarConf as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.canConf;

  /** @type {?|undefined} */
  this.radarConf;

  /** @type {?|undefined} */
  this.radarChannel;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.drivers.conti_radar.ContiRadarConf.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.fromObject = function(obj) {
  var msg = new proto.apollo.drivers.conti_radar.ContiRadarConf();
  obj.canConf && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.drivers.conti_radar.CanConf.fromObject(obj.canConf));
  obj.radarConf && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.drivers.conti_radar.RadarConf.fromObject(obj.radarConf));
  obj.radarChannel != null && jspb.Message.setField(msg, 3, obj.radarChannel);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.drivers.conti_radar.ContiRadarConf;
  return proto.apollo.drivers.conti_radar.ContiRadarConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.drivers.conti_radar.ContiRadarConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.drivers.conti_radar.CanConf;
      reader.readMessage(value,proto.apollo.drivers.conti_radar.CanConf.deserializeBinaryFromReader);
      msg.setCanConf(value);
      break;
    case 2:
      var value = new proto.apollo.drivers.conti_radar.RadarConf;
      reader.readMessage(value,proto.apollo.drivers.conti_radar.RadarConf.deserializeBinaryFromReader);
      msg.setRadarConf(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRadarChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.drivers.conti_radar.ContiRadarConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.drivers.conti_radar.ContiRadarConf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCanConf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.drivers.conti_radar.CanConf.serializeBinaryToWriter
    );
  }
  f = message.getRadarConf();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.drivers.conti_radar.RadarConf.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional CanConf can_conf = 1;
 * @return {?proto.apollo.drivers.conti_radar.CanConf}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.getCanConf = function() {
  return /** @type{?proto.apollo.drivers.conti_radar.CanConf} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.conti_radar.CanConf, 1));
};


/**
 * @param {?proto.apollo.drivers.conti_radar.CanConf|undefined} value
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf} returns this
*/
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.setCanConf = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf} returns this
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.clearCanConf = function() {
  return this.setCanConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.hasCanConf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RadarConf radar_conf = 2;
 * @return {?proto.apollo.drivers.conti_radar.RadarConf}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.getRadarConf = function() {
  return /** @type{?proto.apollo.drivers.conti_radar.RadarConf} */ (
    jspb.Message.getWrapperField(this, proto.apollo.drivers.conti_radar.RadarConf, 2));
};


/**
 * @param {?proto.apollo.drivers.conti_radar.RadarConf|undefined} value
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf} returns this
*/
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.setRadarConf = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf} returns this
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.clearRadarConf = function() {
  return this.setRadarConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.hasRadarConf = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string radar_channel = 3;
 * @return {string}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.getRadarChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf} returns this
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.setRadarChannel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.drivers.conti_radar.ContiRadarConf} returns this
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.clearRadarChannel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.drivers.conti_radar.ContiRadarConf.prototype.hasRadarChannel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.apollo.drivers.conti_radar.OutputType = {
  OUTPUT_TYPE_NONE: 0,
  OUTPUT_TYPE_OBJECTS: 1,
  OUTPUT_TYPE_CLUSTERS: 2,
  OUTPUT_TYPE_ERROR: 3
};

/**
 * @enum {number}
 */
proto.apollo.drivers.conti_radar.RcsThreshold = {
  RCS_THRESHOLD_STANDARD: 0,
  RCS_THRESHOLD_HIGH_SENSITIVITY: 1,
  RCS_THRESHOLD_ERROR: 2
};

goog.object.extend(exports, proto.apollo.drivers.conti_radar);
