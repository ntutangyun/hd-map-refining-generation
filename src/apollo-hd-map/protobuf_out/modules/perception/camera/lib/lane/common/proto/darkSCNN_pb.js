// source: modules/perception/camera/lib/lane/common/proto/darkSCNN.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.apollo.perception.camera.darkSCNN.DarkSCNNParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.darkSCNN.ModelParam', null, global);
goog.exportSymbol('proto.apollo.perception.camera.darkSCNN.NetworkParam', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.darkSCNN.DarkSCNNParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.displayName = 'proto.apollo.perception.camera.darkSCNN.DarkSCNNParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.darkSCNN.ModelParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.darkSCNN.ModelParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.darkSCNN.ModelParam.displayName = 'proto.apollo.perception.camera.darkSCNN.ModelParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.apollo.perception.camera.darkSCNN.NetworkParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.apollo.perception.camera.darkSCNN.NetworkParam.displayName = 'proto.apollo.perception.camera.darkSCNN.NetworkParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelParam: (f = msg.getModelParam()) && proto.apollo.perception.camera.darkSCNN.ModelParam.toObject(includeInstance, f),
    netParam: (f = msg.getNetParam()) && proto.apollo.perception.camera.darkSCNN.NetworkParam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of DarkSCNNParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.modelParam;

  /** @type {?|undefined} */
  this.netParam;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.darkSCNN.DarkSCNNParam();
  obj.modelParam && jspb.Message.setWrapperField(
      msg, 1, proto.apollo.perception.camera.darkSCNN.ModelParam.fromObject(obj.modelParam));
  obj.netParam && jspb.Message.setWrapperField(
      msg, 2, proto.apollo.perception.camera.darkSCNN.NetworkParam.fromObject(obj.netParam));
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.darkSCNN.DarkSCNNParam;
  return proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.apollo.perception.camera.darkSCNN.ModelParam;
      reader.readMessage(value,proto.apollo.perception.camera.darkSCNN.ModelParam.deserializeBinaryFromReader);
      msg.setModelParam(value);
      break;
    case 2:
      var value = new proto.apollo.perception.camera.darkSCNN.NetworkParam;
      reader.readMessage(value,proto.apollo.perception.camera.darkSCNN.NetworkParam.deserializeBinaryFromReader);
      msg.setNetParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelParam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.apollo.perception.camera.darkSCNN.ModelParam.serializeBinaryToWriter
    );
  }
  f = message.getNetParam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.apollo.perception.camera.darkSCNN.NetworkParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional ModelParam model_param = 1;
 * @return {?proto.apollo.perception.camera.darkSCNN.ModelParam}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.getModelParam = function() {
  return /** @type{?proto.apollo.perception.camera.darkSCNN.ModelParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.darkSCNN.ModelParam, 1));
};


/**
 * @param {?proto.apollo.perception.camera.darkSCNN.ModelParam|undefined} value
 * @return {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam} returns this
*/
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.setModelParam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.clearModelParam = function() {
  return this.setModelParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.hasModelParam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NetworkParam net_param = 2;
 * @return {?proto.apollo.perception.camera.darkSCNN.NetworkParam}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.getNetParam = function() {
  return /** @type{?proto.apollo.perception.camera.darkSCNN.NetworkParam} */ (
    jspb.Message.getWrapperField(this, proto.apollo.perception.camera.darkSCNN.NetworkParam, 2));
};


/**
 * @param {?proto.apollo.perception.camera.darkSCNN.NetworkParam|undefined} value
 * @return {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam} returns this
*/
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.setNetParam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.DarkSCNNParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.clearNetParam = function() {
  return this.setNetParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.DarkSCNNParam.prototype.hasNetParam = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.darkSCNN.ModelParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.darkSCNN.ModelParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelName: jspb.Message.getFieldWithDefault(msg, 1, "darkSCNN"),
    protoFile: jspb.Message.getFieldWithDefault(msg, 2, "deploy.prototxt"),
    weightFile: jspb.Message.getFieldWithDefault(msg, 3, "deploy.caffemodel"),
    inputOffsetY: jspb.Message.getFieldWithDefault(msg, 4, 0),
    inputOffsetX: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cropHeight: jspb.Message.getFieldWithDefault(msg, 6, 1080),
    cropWidth: jspb.Message.getFieldWithDefault(msg, 7, 1920),
    resizeHeight: jspb.Message.getFieldWithDefault(msg, 8, 512),
    resizeWidth: jspb.Message.getFieldWithDefault(msg, 9, 512),
    meanB: jspb.Message.getFieldWithDefault(msg, 10, 95),
    meanG: jspb.Message.getFieldWithDefault(msg, 11, 99),
    meanR: jspb.Message.getFieldWithDefault(msg, 12, 96),
    isBgr: jspb.Message.getBooleanFieldWithDefault(msg, 13, true),
    confidenceThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.5),
    vptMeanDx: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    vptMeanDy: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, -77.284),
    vptStdDx: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 103.109),
    vptStdDy: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 95.273),
    modelType: jspb.Message.getFieldWithDefault(msg, 19, "CaffeNet")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of ModelParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.modelName;

  /** @type {?|undefined} */
  this.protoFile;

  /** @type {?|undefined} */
  this.weightFile;

  /** @type {?|undefined} */
  this.inputOffsetY;

  /** @type {?|undefined} */
  this.inputOffsetX;

  /** @type {?|undefined} */
  this.cropHeight;

  /** @type {?|undefined} */
  this.cropWidth;

  /** @type {?|undefined} */
  this.resizeHeight;

  /** @type {?|undefined} */
  this.resizeWidth;

  /** @type {?|undefined} */
  this.meanB;

  /** @type {?|undefined} */
  this.meanG;

  /** @type {?|undefined} */
  this.meanR;

  /** @type {?|undefined} */
  this.isBgr;

  /** @type {?|undefined} */
  this.confidenceThreshold;

  /** @type {?|undefined} */
  this.vptMeanDx;

  /** @type {?|undefined} */
  this.vptMeanDy;

  /** @type {?|undefined} */
  this.vptStdDx;

  /** @type {?|undefined} */
  this.vptStdDy;

  /** @type {?|undefined} */
  this.modelType;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.darkSCNN.ModelParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.darkSCNN.ModelParam();
  obj.modelName != null && jspb.Message.setField(msg, 1, obj.modelName);
  obj.protoFile != null && jspb.Message.setField(msg, 2, obj.protoFile);
  obj.weightFile != null && jspb.Message.setField(msg, 3, obj.weightFile);
  obj.inputOffsetY != null && jspb.Message.setField(msg, 4, obj.inputOffsetY);
  obj.inputOffsetX != null && jspb.Message.setField(msg, 5, obj.inputOffsetX);
  obj.cropHeight != null && jspb.Message.setField(msg, 6, obj.cropHeight);
  obj.cropWidth != null && jspb.Message.setField(msg, 7, obj.cropWidth);
  obj.resizeHeight != null && jspb.Message.setField(msg, 8, obj.resizeHeight);
  obj.resizeWidth != null && jspb.Message.setField(msg, 9, obj.resizeWidth);
  obj.meanB != null && jspb.Message.setField(msg, 10, obj.meanB);
  obj.meanG != null && jspb.Message.setField(msg, 11, obj.meanG);
  obj.meanR != null && jspb.Message.setField(msg, 12, obj.meanR);
  obj.isBgr != null && jspb.Message.setField(msg, 13, obj.isBgr);
  obj.confidenceThreshold != null && jspb.Message.setField(msg, 14, obj.confidenceThreshold);
  obj.vptMeanDx != null && jspb.Message.setField(msg, 15, obj.vptMeanDx);
  obj.vptMeanDy != null && jspb.Message.setField(msg, 16, obj.vptMeanDy);
  obj.vptStdDx != null && jspb.Message.setField(msg, 17, obj.vptStdDx);
  obj.vptStdDy != null && jspb.Message.setField(msg, 18, obj.vptStdDy);
  obj.modelType != null && jspb.Message.setField(msg, 19, obj.modelType);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.darkSCNN.ModelParam;
  return proto.apollo.perception.camera.darkSCNN.ModelParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.darkSCNN.ModelParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtoFile(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeightFile(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputOffsetY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputOffsetX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropWidth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResizeHeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResizeWidth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMeanB(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMeanG(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMeanR(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBgr(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidenceThreshold(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVptMeanDx(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVptMeanDy(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVptStdDx(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVptStdDy(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.darkSCNN.ModelParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.darkSCNN.ModelParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * optional string model_name = 1;
 * @return {string}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "darkSCNN"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setModelName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearModelName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasModelName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string proto_file = 2;
 * @return {string}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getProtoFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "deploy.prototxt"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setProtoFile = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearProtoFile = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasProtoFile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string weight_file = 3;
 * @return {string}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getWeightFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "deploy.caffemodel"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setWeightFile = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearWeightFile = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasWeightFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 input_offset_y = 4;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getInputOffsetY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setInputOffsetY = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearInputOffsetY = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasInputOffsetY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 input_offset_x = 5;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getInputOffsetX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setInputOffsetX = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearInputOffsetX = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasInputOffsetX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 crop_height = 6;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getCropHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 1080));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setCropHeight = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearCropHeight = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasCropHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 crop_width = 7;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getCropWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 1920));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setCropWidth = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearCropWidth = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasCropWidth = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 resize_height = 8;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getResizeHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 512));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setResizeHeight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearResizeHeight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasResizeHeight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 resize_width = 9;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getResizeWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 512));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setResizeWidth = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearResizeWidth = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasResizeWidth = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 mean_b = 10;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getMeanB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 95));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setMeanB = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearMeanB = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasMeanB = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 mean_g = 11;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getMeanG = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 99));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setMeanG = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearMeanG = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasMeanG = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 mean_r = 12;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getMeanR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 96));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setMeanR = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearMeanR = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasMeanR = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool is_bgr = 13;
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getIsBgr = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, true));
};


/**
 * @param {boolean} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setIsBgr = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearIsBgr = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasIsBgr = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float confidence_threshold = 14;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getConfidenceThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.5));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setConfidenceThreshold = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearConfidenceThreshold = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasConfidenceThreshold = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float vpt_mean_dx = 15;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getVptMeanDx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setVptMeanDx = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearVptMeanDx = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasVptMeanDx = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float vpt_mean_dy = 16;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getVptMeanDy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, -77.284));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setVptMeanDy = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearVptMeanDy = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasVptMeanDy = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float vpt_std_dx = 17;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getVptStdDx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 103.109));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setVptStdDx = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearVptStdDx = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasVptStdDx = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional float vpt_std_dy = 18;
 * @return {number}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getVptStdDy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 95.273));
};


/**
 * @param {number} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setVptStdDy = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearVptStdDy = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasVptStdDy = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string model_type = 19;
 * @return {string}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.getModelType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, "CaffeNet"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.setModelType = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.ModelParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.clearModelType = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.ModelParam.prototype.hasModelType = function() {
  return jspb.Message.getField(this, 19) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.toObject = function(opt_includeInstance) {
  return proto.apollo.perception.camera.darkSCNN.NetworkParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.apollo.perception.camera.darkSCNN.NetworkParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    segBlob: jspb.Message.getFieldWithDefault(msg, 1, "softmax"),
    vptBlob: jspb.Message.getFieldWithDefault(msg, 2, "fc_out"),
    inputBlob: jspb.Message.getFieldWithDefault(msg, 3, "data")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


if (jspb.Message.GENERATE_FROM_OBJECT) {

/**
 * The raw object form of NetworkParam as accepted by the `fromObject` method.
 * @record
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.ObjectFormat = function() {
  /** @type {?|undefined} */
  this.segBlob;

  /** @type {?|undefined} */
  this.vptBlob;

  /** @type {?|undefined} */
  this.inputBlob;
};

/**
 * Loads data from an object into a new instance of this proto.
 * @param {!proto.apollo.perception.camera.darkSCNN.NetworkParam.ObjectFormat} obj
 *     The object representation of this proto to load the data from.
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.fromObject = function(obj) {
  var msg = new proto.apollo.perception.camera.darkSCNN.NetworkParam();
  obj.segBlob != null && jspb.Message.setField(msg, 1, obj.segBlob);
  obj.vptBlob != null && jspb.Message.setField(msg, 2, obj.vptBlob);
  obj.inputBlob != null && jspb.Message.setField(msg, 3, obj.inputBlob);
  return msg;
};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.apollo.perception.camera.darkSCNN.NetworkParam;
  return proto.apollo.perception.camera.darkSCNN.NetworkParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.apollo.perception.camera.darkSCNN.NetworkParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegBlob(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVptBlob(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputBlob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.apollo.perception.camera.darkSCNN.NetworkParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.apollo.perception.camera.darkSCNN.NetworkParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string seg_blob = 1;
 * @return {string}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.getSegBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "softmax"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.setSegBlob = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.clearSegBlob = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.hasSegBlob = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string vpt_blob = 2;
 * @return {string}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.getVptBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "fc_out"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.setVptBlob = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.clearVptBlob = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.hasVptBlob = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string input_blob = 3;
 * @return {string}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.getInputBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "data"));
};


/**
 * @param {string} value
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.setInputBlob = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.apollo.perception.camera.darkSCNN.NetworkParam} returns this
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.clearInputBlob = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.apollo.perception.camera.darkSCNN.NetworkParam.prototype.hasInputBlob = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.apollo.perception.camera.darkSCNN);
